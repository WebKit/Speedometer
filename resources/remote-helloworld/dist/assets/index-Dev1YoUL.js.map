{"version":3,"file":"index-Dev1YoUL.js","sources":["../../counter.js","../../../test-invoker.mjs","../../../test-runner.mjs","../../../workload-testing-utils.mjs","../../main.js"],"sourcesContent":["export function setupCounter(element) {\n    let counter = 0;\n    const setCounter = (count) => {\n        counter = count;\n        element.innerHTML = `count is ${counter}`;\n    };\n    element.addEventListener(\"click\", () => setCounter(counter + 1));\n    setCounter(0);\n}\n","class TestInvoker {\n    constructor(syncCallback, asyncCallback, reportCallback, params) {\n        this._syncCallback = syncCallback;\n        this._asyncCallback = asyncCallback;\n        this._reportCallback = reportCallback;\n        this._params = params;\n    }\n}\n\nexport class TimerTestInvoker extends TestInvoker {\n    start() {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                this._syncCallback();\n                setTimeout(() => {\n                    this._asyncCallback();\n                    requestAnimationFrame(async () => {\n                        const result = await this._reportCallback();\n                        resolve(result);\n                    });\n                }, 0);\n            }, this._params.waitBeforeSync);\n        });\n    }\n}\n\nexport class RAFTestInvoker extends TestInvoker {\n    start() {\n        return new Promise((resolve) => {\n            if (this._params.waitBeforeSync) setTimeout(() => this._scheduleCallbacks(resolve), this._params.waitBeforeSync);\n            else this._scheduleCallbacks(resolve);\n        });\n    }\n\n    _scheduleCallbacks(resolve) {\n        requestAnimationFrame(() => this._syncCallback());\n        requestAnimationFrame(() => {\n            setTimeout(() => {\n                this._asyncCallback();\n                setTimeout(async () => {\n                    const result = await this._reportCallback();\n                    resolve(result);\n                }, 0);\n            }, 0);\n        });\n    }\n}\n\nexport const TEST_INVOKER_LOOKUP = {\n    __proto__: null,\n    timer: TimerTestInvoker,\n    raf: RAFTestInvoker,\n};\n","import { TEST_INVOKER_LOOKUP } from \"./test-invoker.mjs\";\n\nexport class TestRunner {\n    #frame;\n    #page;\n    #params;\n    #suite;\n    #test;\n    #callback;\n\n    constructor(frame, page, params, suite, test, callback) {\n        this.#suite = suite;\n        this.#test = test;\n        this.#params = params;\n        this.#callback = callback;\n\n        this.#page = page;\n        this.#frame = frame;\n    }\n\n    async runTest() {\n        // Prepare all mark labels outside the measuring loop.\n        const suiteName = this.#suite.name;\n        const testName = this.#test.name;\n        const syncStartLabel = `${suiteName}.${testName}-start`;\n        const syncEndLabel = `${suiteName}.${testName}-sync-end`;\n        const asyncStartLabel = `${suiteName}.${testName}-async-start`;\n        const asyncEndLabel = `${suiteName}.${testName}-async-end`;\n\n        let syncTime;\n        let asyncStartTime;\n        let asyncTime;\n\n        const runSync = () => {\n            if (this.#params.warmupBeforeSync) {\n                performance.mark(\"warmup-start\");\n                const startTime = performance.now();\n                // Infinite loop for the specified ms.\n                while (performance.now() - startTime < this.#params.warmupBeforeSync) continue;\n                performance.mark(\"warmup-end\");\n            }\n            performance.mark(syncStartLabel);\n            const syncStartTime = performance.now();\n            this.#test.run(this.#page);\n            const syncEndTime = performance.now();\n            performance.mark(syncEndLabel);\n\n            syncTime = syncEndTime - syncStartTime;\n\n            performance.mark(asyncStartLabel);\n            asyncStartTime = performance.now();\n        };\n        const measureAsync = () => {\n            const bodyReference = this.#frame ? this.#frame.contentDocument.body : document.body;\n            const windowReference = this.#frame ? this.#frame.contentWindow : window;\n            // Some browsers don't immediately update the layout for paint.\n            // Force the layout here to ensure we're measuring the layout time.\n            const height = bodyReference.getBoundingClientRect().height;\n            windowReference._unusedHeightValue = height; // Prevent dead code elimination.\n\n            const asyncEndTime = performance.now();\n            performance.mark(asyncEndLabel);\n\n            asyncTime = asyncEndTime - asyncStartTime;\n\n            if (this.#params.warmupBeforeSync) performance.measure(\"warmup\", \"warmup-start\", \"warmup-end\");\n            performance.measure(`${suiteName}.${testName}-sync`, syncStartLabel, syncEndLabel);\n            performance.measure(`${suiteName}.${testName}-async`, asyncStartLabel, asyncEndLabel);\n        };\n\n        const report = () => this.#callback(this.#test, syncTime, asyncTime);\n        const invokerClass = TEST_INVOKER_LOOKUP[this.#params.measurementMethod];\n        const invoker = new invokerClass(runSync, measureAsync, report, this.#params);\n\n        return invoker.start();\n    }\n}\n","/*\n  This is loaded by the remote test page and provides utilities & client-side communication with the test runner.\n*/\n\nimport { TestRunner } from \"./test-runner.mjs\";\n\n\n/**\n * BenchmarkTestStep\n *\n * A single test step, with a common interface to interact with.\n */\nexport class BenchmarkTestStep {\n    constructor(name, run) {\n        this.name = name;\n        this.run = run;\n    }\n\n    async runAndRecord(params, suite, test, callback) {\n        const testRunner = new TestRunner(null, null, params, suite, test, callback);\n        const result = await testRunner.runTest();\n        return result;\n    }\n}\n\n/**\n * BenchmarkTestSuite\n *\n * A single test suite that contains one or more test steps.\n */\nexport class BenchmarkTestSuite {\n    constructor(name, tests) {\n        this.name = name;\n        this.tests = tests;\n    }\n\n    record(_test, syncTime, asyncTime) {\n        const total = syncTime + asyncTime;\n        const results = {\n            tests: { Sync: syncTime, Async: asyncTime },\n            total: total,\n        };\n\n        return results;\n    }\n\n    async runAndRecord(params, onProgress) {\n        const measuredValues = {\n            tests: {},\n            total: 0,\n        };\n        const suiteStartLabel = `suite-${this.name}-start`;\n        const suiteEndLabel = `suite-${this.name}-end`;\n\n        performance.mark(suiteStartLabel);\n\n        for (const test of this.tests) {\n            const result = await test.runAndRecord(params, this, test, this.record);\n            measuredValues.tests[test.name] = result;\n            measuredValues.total += result.total;\n            onProgress?.(test.name);\n        }\n\n        performance.mark(suiteEndLabel);\n        performance.measure(`suite-${this.name}`, suiteStartLabel, suiteEndLabel);\n\n        return {\n            type: \"suite-tests-complete\",\n            status: \"success\",\n            result: measuredValues,\n            suitename: this.name,\n        };\n    }\n}\n\n/**\n * BenchmarkSuitesManager\n *\n * A collection of test suites for a single workload.\n */\nexport class BenchmarkSuitesManager {\n    constructor(name, suites) {\n        this.name = name;\n        this.suites = suites;\n    }\n\n    getSuiteByName(name) {\n        return this.suites.find((suite) => suite.name === name);\n    }\n}\n\n/** **********************************************************************\n * Params\n *\n * All params are now forwarded from the benchmark to the workload, via its url.\n * To ensure we're handling any used params the same way as the benchmark,\n * we are converting the values to their native type.\n *************************************************************************/\nfunction isBoolean(value) {\n    if (value === \"true\" || value === \"false\")\n        return true;\n\n    return false;\n}\n\nfunction isNumber(value) {\n    const number = Number(value);\n    return Number.isInteger(number);\n}\n\nfunction convertToBoolean(value) {\n    if (value === \"true\")\n        return true;\n\n    if (value === \"false\")\n        return false;\n\n    return value;\n}\n\nfunction convertToNumber(value) {\n    return Number(value);\n}\n\nfunction getConvertedValue(value) {\n    if (isBoolean(value))\n        return convertToBoolean(value);\n\n    if (isNumber(value))\n        return convertToNumber(value);\n\n    return value;\n}\n\nfunction getParams(value) {\n    const params = Object.create(null);\n    const searchParams = new URLSearchParams(value);\n\n    for (const entry of searchParams.entries()) {\n        const [key, value] = entry;\n        params[key] = getConvertedValue(value);\n    }\n\n    return Object.freeze(params);\n}\n\n/**\n * Helper Methods\n *\n * Various methods that are extracted from the Page class.\n */\nexport function getParent(lookupStartNode, path) {\n    lookupStartNode = lookupStartNode.shadowRoot ?? lookupStartNode;\n    const parent = path.reduce((root, selector) => {\n        const node = root.querySelector(selector);\n        return node.shadowRoot ?? node;\n    }, lookupStartNode);\n\n    return parent;\n}\n\nexport function getElement(selector, path = [], lookupStartNode = document) {\n    const element = getParent(lookupStartNode, path).querySelector(selector);\n    return element;\n}\n\nexport function getAllElements(selector, path = [], lookupStartNode = document) {\n    const elements = Array.from(getParent(lookupStartNode, path).querySelectorAll(selector));\n    return elements;\n}\n\nexport function forceLayout() {\n    const rect = document.body.getBoundingClientRect();\n    const e = document.elementFromPoint((rect.width / 2) | 0, (rect.height / 2) | 0);\n    return e;\n}\n\n/** **********************************************************************\n * Benchmark Connector\n *\n * postMessage is used to communicate between app and benchmark.\n * When the app os ready, an 'app-ready' message is sent to signal that the app can receive instructions.\n *\n * A prepare script within the apps appends window.name and window.version from the package.json file.\n * The appId is build by appending name-version\n * It's used as an additional safe-guard to ensure the correct app responds to a message.\n *************************************************************************/\nexport function connectFromRemote(name, version) {\n    const appId = name && version ? `${name}-${version}` : -1;\n\n    function sendMessage(message) {\n        window.top.postMessage(message, \"*\");\n    }\n\n    window.onmessage = async (event) => {\n        // ensure we only let legit functions run...\n        if (event.data.id !== appId || event.data.key !== \"benchmark-connector\")\n            return;\n\n        switch (event.data.type) {\n            case \"benchmark-suite\":\n                // eslint-disable-next-line no-case-declarations\n                const params = getParams(window.location.search);\n                // eslint-disable-next-line no-case-declarations\n                const { result } = await window.benchmarkSuitesManager.getSuiteByName(event.data.name).runAndRecord(params, (test) => sendMessage({ type: \"step-complete\", status: \"success\", appId, name, test }));\n                sendMessage({ type: \"suite-complete\", status: \"success\", appId, result });\n                break;\n        }\n    };\n\n    // Initialize the workload\n    sendMessage({ type: \"app-ready\", status: \"success\", appId });\n}\n","import \"./style.css\";\nimport { setupCounter } from \"./counter.js\";\nimport { BenchmarkTestStep, BenchmarkTestSuite, BenchmarkSuitesManager, forceLayout, getElement, connectFromRemote } from \"speedometer/resources/workload-testing-utils.mjs\";\n\nwindow.benchmarkSuitesManager = new BenchmarkSuitesManager(window.name, [\n    new BenchmarkTestSuite(\"default\", [\n        new BenchmarkTestStep(\"Click counter (1000)\", () => {\n            for (let i = 0; i < 1000; i++) {\n                getElement(\"#counter\").click();\n                forceLayout();\n            }\n        }),\n        new BenchmarkTestStep(\"Click counter (5000)\", () => {\n            for (let i = 0; i < 5000; i++) {\n                getElement(\"#counter\").click();\n                forceLayout();\n            }\n        }),\n    ]),\n]);\n\ndocument.querySelector(\"#app\").innerHTML = `\n  <div>\n    <h1>Hello Vite!</h1>\n    <div class=\"card\">\n      <button id=\"counter\" type=\"button\"></button>\n    </div>\n    <p class=\"read-the-docs\">\n      Click on the Vite logo to learn more\n    </p>\n  </div>\n`;\n\nsetupCounter(document.querySelector(\"#counter\"));\n\nconnectFromRemote(\"remote-hello-world\", 1);\n"],"names":["_test","value"],"mappings":"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"}