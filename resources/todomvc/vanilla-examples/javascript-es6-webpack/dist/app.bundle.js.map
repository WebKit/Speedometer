{"version":3,"file":"app.bundle.js","mappings":";;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,4BAA4B,MAAM;AAClC;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA,QAAQ,IAA2B;AACnC;AACA,MAAM,KAAK,EAEN;AACL,CAAC;;;;;;;UCnFD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBoD;;AAEpD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,cAAM;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qCAAqC;AACrC;;;AC7DA;AAC6D;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;;AAEA;AACA;;AAEA,yBAAyB,EAAE;AAC3B,gCAAgC,EAAE;AAClC,+BAA+B,EAAE;AACjC,qBAAqB,EAAE;AACvB,uBAAuB,EAAE;AACzB,0BAA0B,EAAE;AAC5B,wBAAwB,EAAE;AAC1B;;AAEA;AACA,mBAAmB,EAAE,cAAc,GAAG;;AAEtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,EAAE,cAAc,GAAG;;AAE1C;AACA;AACA;;AAEA,oBAAoB,EAAE;AACtB;;AAEA;;AAEA,QAAQ,GAAG;AACX;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;;AAET,QAAQ,SAAS;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;;AAEA,0BAA0B,mBAAmB;AAC7C;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,YAAY,GAAG;AACf;AACA,aAAa;AACb,UAAU;AACV,YAAY,GAAG;AACf;AACA,aAAa;AACb,UAAU;AACV,YAAY,GAAG;AACf,0BAA0B,yBAAyB;AACnD,aAAa;AACb,UAAU;AACV,YAAY,SAAS;AACrB,0BAA0B,mBAAmB;AAC7C,aAAa;AACb,UAAU;AACV,YAAY,SAAS;AACrB,0BAA0B,mBAAmB;AAC7C,aAAa;AACb,UAAU;AACV,YAAY,SAAS;AACrB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,IAAI,EAAE;AACN,IAAI,EAAE,sBAAsB,YAAY;AACxC;;AAEA;AACA,mBAAmB,EAAE,cAAc,GAAG;;AAEtC;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,EAAE;AACN;;AAEA;AACA,mBAAmB,EAAE,cAAc,GAAG;;AAEtC;AACA;AACA;;AAEA,4BAA4B,oBAAoB;;AAEhD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;;;AC9MA,iDAAe,UAAU,EAAC;;AAE1B;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC,+CAA+C,WAAW;AAC1D,SAAS;AACT,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0BAA0B;AACrE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,wCAAwC,0CAA0C;AAClF,qDAAqD,0BAA0B;AAC/E,KAAK;AACL;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACtQA,4CAAe,KAAK,EAAC;;AAErB;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,WAAW,UAAU;AACrB;AACA;AACA,wBAAwB;AACxB,oBAAoB;AACpB;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,4BAA4B,WAAW;AACvC,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,SAAS;AACT;AACA,KAAK;AACL;;;;;ACjHA;AACmC;AACY;AAC/C,4CAAe,KAAK,EAA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","sources":["webpack://javascript-es6-webpack/./src/memory.js","webpack://javascript-es6-webpack/webpack/bootstrap","webpack://javascript-es6-webpack/./src/helpers.js","webpack://javascript-es6-webpack/./src/view.js","webpack://javascript-es6-webpack/./src/controller.js","webpack://javascript-es6-webpack/./src/model.js","webpack://javascript-es6-webpack/./src/store.js","webpack://javascript-es6-webpack/./src/template.js","webpack://javascript-es6-webpack/./src/todo.js","webpack://javascript-es6-webpack/./src/app.js"],"sourcesContent":["(function (root) {\n    var localStorageMemory = {};\n    var cache = {};\n\n    /**\n     * number of stored items.\n     */\n    localStorageMemory.length = 0;\n\n    /**\n     * returns item for passed key, or null\n     *\n     * @para {String} key\n     *       name of item to be returned\n     * @returns {String|null}\n     */\n    localStorageMemory.getItem = function (key) {\n        return cache[key] || null;\n    };\n\n    /**\n     * sets item for key to passed value, as String\n     *\n     * @para {String} key\n     *       name of item to be set\n     * @para {String} value\n     *       value, will always be turned into a String\n     * @returns {undefined}\n     */\n    localStorageMemory.setItem = function (key, value) {\n        if (typeof value === \"undefined\") {\n            localStorageMemory.removeItem(key);\n        } else {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!cache.hasOwnProperty(key)) {\n                localStorageMemory.length++;\n            }\n\n            cache[key] = `${value}`;\n        }\n    };\n\n    /**\n     * removes item for passed key\n     *\n     * @para {String} key\n     *       name of item to be removed\n     * @returns {undefined}\n     */\n    localStorageMemory.removeItem = function (key) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (cache.hasOwnProperty(key)) {\n            delete cache[key];\n            localStorageMemory.length--;\n        }\n    };\n\n    /**\n     * returns name of key at passed index\n     *\n     * @para {Number} index\n     *       Position for key to be returned (starts at 0)\n     * @returns {String|null}\n     */\n    localStorageMemory.key = function (index) {\n        return Object.keys(cache)[index] || null;\n    };\n\n    /**\n     * removes all stored items and sets length to 0\n     *\n     * @returns {undefined}\n     */\n    localStorageMemory.clear = function () {\n        cache = {};\n        localStorageMemory.length = 0;\n    };\n\n    if (typeof exports === \"object\") {\n        module.exports = localStorageMemory;\n    } else {\n        root.localStorageMemory = localStorageMemory;\n    }\n})(this);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export { qs, qsa, $on, $delegate, $parent, remove };\n\n// Get element(s) by CSS selector:\nfunction qs(selector, scope) {\n    return (scope || document).querySelector(selector);\n}\n\nfunction qsa(selector, scope) {\n    return (scope || document).querySelectorAll(selector);\n}\n\n// addEventListener wrapper:\nfunction $on(target, type, callback, useCapture) {\n    target.addEventListener(type, callback, !!useCapture);\n}\n\n// Attach a handler to event for all elements that match the selector,\n// now or in the future, based on a root element\nfunction $delegate(target, selector, type, handler) {\n    // https://developer.mozilla.org/en-US/docs/Web/Events/blur\n    var useCapture = type === \"blur\" || type === \"focus\";\n    $on(target, type, dispatchEvent, useCapture);\n\n    function dispatchEvent(event) {\n        var targetElement = event.target;\n        var potentialElements = qsa(selector, target);\n        var hasMatch = Array.prototype.indexOf.call(potentialElements, targetElement) >= 0;\n\n        if (hasMatch) {\n            handler.call(targetElement, event);\n        }\n    }\n}\n\n// Find the element's parent with the given tag name:\n// $parent(qs('a'), 'div');\nfunction $parent(element, tagName) {\n    if (!element.parentNode) {\n        return undefined;\n    }\n    if (element.parentNode.tagName.toLowerCase() === tagName.toLowerCase()) {\n        return element.parentNode;\n    }\n    return $parent(element.parentNode, tagName);\n}\n\n// removes an element from an array\n// const x = [1,2,3]\n// remove(x, 2)\n// x ~== [1,3]\nfunction remove(array, thing) {\n    const index = array.indexOf(thing);\n    if (index === -1) {\n        return array;\n    }\n\n    return array.splice(index, 1);\n}\n\n// Allow for looping on nodes by chaining:\n// qsa('.foo').forEach(function () {})\nNodeList.prototype.forEach = Array.prototype.forEach;\n","/* eslint no-invalid-this: 0, complexity:[2, 9] */\nimport { qs, qsa, $on, $parent, $delegate } from \"./helpers\";\n\n/**\n * View that abstracts away the browser's DOM completely.\n * It has two simple entry points:\n *\n *   - bind(eventName, handler)\n *     Takes a todo application event and registers the handler\n *   - render(command, parameterObject)\n *     Renders the given command with the options\n */\nexport default class View {\n    constructor(template) {\n        this.template = template;\n\n        this.ENTER_KEY = 13;\n        this.ESCAPE_KEY = 27;\n\n        this.$todoList = qs(\".todo-list\");\n        this.$todoItemCounter = qs(\".todo-count\");\n        this.$clearCompleted = qs(\".clear-completed\");\n        this.$main = qs(\".main\");\n        this.$footer = qs(\".footer\");\n        this.$toggleAll = qs(\".toggle-all\");\n        this.$newTodo = qs(\".new-todo\");\n    }\n\n    _removeItem(id) {\n        var elem = qs(`[data-id=\"${id}\"]`);\n\n        if (elem) {\n            this.$todoList.removeChild(elem);\n        }\n    }\n\n    _clearCompletedButton(completedCount, visible) {\n        this.$clearCompleted.innerHTML = this.template.clearCompletedButton(completedCount);\n        this.$clearCompleted.style.display = visible ? \"block\" : \"none\";\n    }\n\n    _editItemDone(id, title) {\n        var listItem = qs(`[data-id=\"${id}\"]`);\n\n        if (!listItem) {\n            return;\n        }\n\n        var input = qs(\"input.edit\", listItem);\n        listItem.removeChild(input);\n\n        listItem.className = listItem.className.replace(\"editing\", \"\");\n\n        qsa(\"label\", listItem).forEach(function (label) {\n            label.textContent = title;\n        });\n    }\n\n    render(viewCmd, parameter) {\n        var that = this;\n        var viewCommands = {\n            showEntries: function () {\n                that.$todoList.innerHTML = that.template.show(parameter);\n            },\n            removeItem: function () {\n                that._removeItem(parameter);\n            },\n            updateElementCount: function () {\n                that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n            },\n            clearCompletedButton: function () {\n                that._clearCompletedButton(parameter.completed, parameter.visible);\n            },\n            contentBlockVisibility: function () {\n                that.$main.style.display = that.$footer.style.display = parameter.visible ? \"block\" : \"none\";\n            },\n            toggleAll: function () {\n                that.$toggleAll.checked = parameter.checked;\n            },\n            setFilter: function () {\n                _setFilter(parameter);\n            },\n            clearNewTodo: function () {\n                that.$newTodo.value = \"\";\n            },\n            elementComplete: function () {\n                _elementComplete(parameter.id, parameter.completed);\n            },\n            editItem: function () {\n                _editItem(parameter.id, parameter.title);\n            },\n            editItemDone: function () {\n                that._editItemDone(parameter.id, parameter.title);\n            },\n        };\n\n        viewCommands[viewCmd]();\n    }\n\n    _bindItemEditDone(handler) {\n        var that = this;\n        $delegate(that.$todoList, \"li .edit\", \"blur\", function () {\n            if (!this.dataset.iscanceled) {\n                handler({\n                    id: _itemId(this),\n                    title: this.value,\n                });\n            }\n        });\n\n        $delegate(that.$todoList, \"li .edit\", \"keypress\", function (event) {\n            if (event.keyCode === that.ENTER_KEY) {\n                // Remove the cursor from the input when you hit enter just like if it\n                // were a real form\n                this.blur();\n            }\n        });\n    }\n\n    _bindItemEditCancel(handler) {\n        var that = this;\n        $delegate(that.$todoList, \"li .edit\", \"keyup\", function (event) {\n            if (event.keyCode === that.ESCAPE_KEY) {\n                this.dataset.iscanceled = true;\n                this.blur();\n\n                handler({ id: _itemId(this) });\n            }\n        });\n    }\n\n    bind(event, handler) {\n        var that = this;\n        if (event === \"newTodo\") {\n            $on(that.$newTodo, \"change\", function () {\n                handler(that.$newTodo.value);\n            });\n        } else if (event === \"removeCompleted\") {\n            $on(that.$clearCompleted, \"click\", function () {\n                handler();\n            });\n        } else if (event === \"toggleAll\") {\n            $on(that.$toggleAll, \"click\", function () {\n                handler({ completed: this.checked });\n            });\n        } else if (event === \"itemEdit\") {\n            $delegate(that.$todoList, \"li label\", \"dblclick\", function () {\n                handler({ id: _itemId(this) });\n            });\n        } else if (event === \"itemRemove\") {\n            $delegate(that.$todoList, \".destroy\", \"click\", function () {\n                handler({ id: _itemId(this) });\n            });\n        } else if (event === \"itemToggle\") {\n            $delegate(that.$todoList, \".toggle\", \"click\", function () {\n                handler({\n                    id: _itemId(this),\n                    completed: this.checked,\n                });\n            });\n        } else if (event === \"itemEditDone\") {\n            that._bindItemEditDone(handler);\n        } else if (event === \"itemEditCancel\") {\n            that._bindItemEditCancel(handler);\n        }\n    }\n}\n\nfunction _setFilter(currentPage) {\n    qs(\".filters .selected\").className = \"\";\n    qs(`.filters [href=\"#/${currentPage}\"]`).className = \"selected\";\n}\n\nfunction _elementComplete(id, completed) {\n    var listItem = qs(`[data-id=\"${id}\"]`);\n\n    if (!listItem) {\n        return;\n    }\n\n    listItem.className = completed ? \"completed\" : \"\";\n\n    // In case it was toggled from an event and not by clicking the checkbox\n    qs(\"input\", listItem).checked = completed;\n}\n\nfunction _editItem(id, title) {\n    var listItem = qs(`[data-id=\"${id}\"]`);\n\n    if (!listItem) {\n        return;\n    }\n\n    listItem.className = `${listItem.className} editing`;\n\n    var input = document.createElement(\"input\");\n    input.className = \"edit\";\n\n    listItem.appendChild(input);\n    input.focus();\n    input.value = title;\n}\n\nfunction _itemId(element) {\n    var li = $parent(element, \"li\");\n    return parseInt(li.dataset.id, 10);\n}\n","export default Controller;\n\n/**\n * Takes a model and view and acts as the controller between them\n *\n * @constructor\n * @param {object} model The model instance\n * @param {object} view The view instance\n */\nfunction Controller(model, view) {\n    var that = this;\n    that.model = model;\n    that.view = view;\n\n    that.view.bind(\"newTodo\", function (title) {\n        that.addItem(title);\n    });\n\n    that.view.bind(\"itemEdit\", function (item) {\n        that.editItem(item.id);\n    });\n\n    that.view.bind(\"itemEditDone\", function (item) {\n        that.editItemSave(item.id, item.title);\n    });\n\n    that.view.bind(\"itemEditCancel\", function (item) {\n        that.editItemCancel(item.id);\n    });\n\n    that.view.bind(\"itemRemove\", function (item) {\n        that.removeItem(item.id);\n    });\n\n    that.view.bind(\"itemToggle\", function (item) {\n        that.toggleComplete(item.id, item.completed);\n    });\n\n    that.view.bind(\"removeCompleted\", function () {\n        that.removeCompletedItems();\n    });\n\n    that.view.bind(\"toggleAll\", function (status) {\n        that.toggleAll(status.completed);\n    });\n}\n\n/**\n * Loads and initialises the view\n *\n * @param {string} '' | 'active' | 'completed'\n */\nController.prototype.setView = function (locationHash) {\n    var route = locationHash.split(\"/\")[1];\n    var page = route || \"\";\n    this._updateFilterState(page);\n};\n\n/**\n * An event to fire on load. Will get all items and display them in the\n * todo-list\n */\nController.prototype.showAll = function () {\n    var that = this;\n    that.model.read(function (data) {\n        that.view.render(\"showEntries\", data);\n    });\n};\n\n/**\n * Renders all active tasks\n */\nController.prototype.showActive = function () {\n    var that = this;\n    that.model.read({ completed: false }, function (data) {\n        that.view.render(\"showEntries\", data);\n    });\n};\n\n/**\n * Renders all completed tasks\n */\nController.prototype.showCompleted = function () {\n    var that = this;\n    that.model.read({ completed: true }, function (data) {\n        that.view.render(\"showEntries\", data);\n    });\n};\n\n/**\n * An event to fire whenever you want to add an item. Simply pass in the event\n * object and it'll handle the DOM insertion and saving of the new item.\n */\nController.prototype.addItem = function (title) {\n    var that = this;\n\n    if (title.trim() === \"\") {\n        return;\n    }\n\n    that.model.create(title, function () {\n        that.view.render(\"clearNewTodo\");\n        that._filter(true);\n    });\n};\n\n/*\n * Triggers the item editing mode.\n */\nController.prototype.editItem = function (id) {\n    var that = this;\n    that.model.read(id, function (data) {\n        that.view.render(\"editItem\", { id, title: data[0].title });\n    });\n};\n\n/*\n * Finishes the item editing mode successfully.\n */\nController.prototype.editItemSave = function (id, title) {\n    var that = this;\n    if (title.trim()) {\n        that.model.update(id, { title }, function () {\n            that.view.render(\"editItemDone\", { id, title });\n        });\n    } else {\n        that.removeItem(id);\n    }\n};\n\n/*\n * Cancels the item editing mode.\n */\nController.prototype.editItemCancel = function (id) {\n    var that = this;\n    that.model.read(id, function (data) {\n        that.view.render(\"editItemDone\", { id, title: data[0].title });\n    });\n};\n\n/**\n * By giving it an ID it'll find the DOM element matching that ID,\n * remove it from the DOM and also remove it from storage.\n *\n * @param {number} id The ID of the item to remove from the DOM and\n * storage\n */\nController.prototype.removeItem = function (id) {\n    var that = this;\n    that.model.remove(id, function () {\n        that.view.render(\"removeItem\", id);\n    });\n\n    that._filter();\n};\n\n/**\n * Will remove all completed items from the DOM and storage.\n */\nController.prototype.removeCompletedItems = function () {\n    var that = this;\n    that.model.read({ completed: true }, function (data) {\n        data.forEach(function (item) {\n            that.removeItem(item.id);\n        });\n    });\n\n    that._filter();\n};\n\n/**\n * Give it an ID of a model and a checkbox and it will update the item\n * in storage based on the checkbox's state.\n *\n * @param {number} id The ID of the element to complete or uncomplete\n * @param {object} checkbox The checkbox to check the state of complete\n *                          or not\n * @param {boolean|undefined} silent Prevent re-filtering the todo items\n */\nController.prototype.toggleComplete = function (id, completed, silent) {\n    var that = this;\n    that.model.update(id, { completed }, function () {\n        that.view.render(\"elementComplete\", {\n            id,\n            completed,\n        });\n    });\n\n    if (!silent) {\n        that._filter();\n    }\n};\n\n/**\n * Will toggle ALL checkboxes' on/off state and completeness of models.\n * Just pass in the event object.\n */\nController.prototype.toggleAll = function (completed) {\n    var that = this;\n    that.model.read({ completed: !completed }, function (data) {\n        data.forEach(function (item) {\n            that.toggleComplete(item.id, completed, true);\n        });\n    });\n\n    that._filter();\n};\n\n/**\n * Updates the pieces of the page which change depending on the remaining\n * number of todos.\n */\nController.prototype._updateCount = function () {\n    var that = this;\n    that.model.getCount(function (todos) {\n        that.view.render(\"updateElementCount\", todos.active);\n        that.view.render(\"clearCompletedButton\", {\n            completed: todos.completed,\n            visible: todos.completed > 0,\n        });\n\n        that.view.render(\"toggleAll\", { checked: todos.completed === todos.total });\n        that.view.render(\"contentBlockVisibility\", { visible: todos.total > 0 });\n    });\n};\n\n/**\n * Re-filters the todo items, based on the active route.\n * @param {boolean|undefined} force  forces a re-painting of todo items.\n */\nController.prototype._filter = function (force) {\n    var activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1);\n\n    // Update the elements on the page, which change with each completed todo\n    this._updateCount();\n\n    // If the last active route isn't \"All\", or we're switching routes, we\n    // re-create the todo item elements, calling:\n    //   this.show[All|Active|Completed]();\n    if (force || this._lastActiveRoute !== \"All\" || this._lastActiveRoute !== activeRoute) {\n        this[`show${activeRoute}`]();\n    }\n\n    this._lastActiveRoute = activeRoute;\n};\n\n/**\n * Simply updates the filter nav's selected states\n */\nController.prototype._updateFilterState = function (currentPage) {\n    // Store a reference to the active route, allowing us to re-filter todo\n    // items as they are marked complete or incomplete.\n    currentPage = currentPage.split(\"?\")[0];\n    this._activeRoute = currentPage;\n\n    if (currentPage === \"\") {\n        this._activeRoute = \"All\";\n    }\n\n    this._filter();\n\n    this.view.render(\"setFilter\", currentPage);\n};\n","export default Model;\n\n/**\n * Creates a new Model instance and hooks up the storage.\n *\n * @constructor\n * @param {object} storage A reference to the client side storage class\n */\nfunction Model(storage) {\n    this.storage = storage;\n}\n\n/**\n * Creates a new todo model\n *\n * @param {string} [title] The title of the task\n * @param {function} [callback] The callback to fire after the model is created\n */\nModel.prototype.create = function (title, callback) {\n    title = title || \"\";\n    callback = callback || function () {};\n\n    var newItem = {\n        title: title.trim(),\n        completed: false,\n    };\n\n    this.storage.save(newItem, callback);\n};\n\n/**\n * Finds and returns a model in storage. If no query is given it'll simply\n * return everything. If you pass in a string or number it'll look that up as\n * the ID of the model to find. Lastly, you can pass it an object to match against.\n *\n * @param {string|number|object} [query] A query to match models against\n * @param {function} [callback] The callback to fire after the model is found\n *\n * @example\n * model.read(1, func); // Will find the model with an ID of 1\n * model.read('1'); // Same as above\n * //Below will find a model with foo equalling bar and hello equalling world.\n * model.read({ foo: 'bar', hello: 'world' });\n */\nModel.prototype.read = function (query, callback) {\n    var queryType = typeof query;\n    callback = callback || function () {};\n\n    if (queryType === \"function\") {\n        callback = query;\n        return this.storage.findAll(callback);\n    } else if (queryType === \"string\" || queryType === \"number\") {\n        query = parseInt(query, 10);\n        this.storage.find({ id: query }, callback);\n    } else {\n        this.storage.find(query, callback);\n    }\n    return undefined;\n};\n\n/**\n * Updates a model by giving it an ID, data to update, and a callback to fire when\n * the update is complete.\n *\n * @param {number} id The id of the model to update\n * @param {object} data The properties to update and their new value\n * @param {function} callback The callback to fire when the update is complete.\n */\nModel.prototype.update = function (id, data, callback) {\n    this.storage.save(data, callback, id);\n};\n\n/**\n * Removes a model from storage\n *\n * @param {number} id The ID of the model to remove\n * @param {function} callback The callback to fire when the removal is complete.\n */\nModel.prototype.remove = function (id, callback) {\n    this.storage.remove(id, callback);\n};\n\n/**\n * WARNING: Will remove ALL data from storage.\n *\n * @param {function} callback The callback to fire when the storage is wiped.\n */\nModel.prototype.removeAll = function (callback) {\n    this.storage.drop(callback);\n};\n\n/**\n * Returns a count of all todos\n */\nModel.prototype.getCount = function (callback) {\n    var todos = {\n        active: 0,\n        completed: 0,\n        total: 0,\n    };\n\n    this.storage.findAll(function (data) {\n        data.forEach(function (todo) {\n            if (todo.completed) {\n                todos.completed++;\n            } else {\n                todos.active++;\n            }\n\n            todos.total++;\n        });\n        callback(todos);\n    });\n};\n","/* eslint no-import-assign: 0 */\nimport { remove } from \"./helpers\";\nimport * as localStorageMemory from \"./memory\";\nexport default Store;\n\nvar uniqueID = 1;\n\n/**\n * Creates a new client side storage object and will create an empty\n * collection if no collection already exists.\n *\n * @param {string} name The name of our DB we want to use\n * @param {function} callback Our fake DB uses callbacks because in\n * real life you probably would be making AJAX calls\n */\nfunction Store(name, callback) {\n    callback = callback || function () {};\n\n    this._dbName = name;\n\n    if (!localStorageMemory[name]) {\n        var data = {\n            todos: [],\n        };\n\n        localStorageMemory[name] = JSON.stringify(data);\n    }\n\n    callback.call(this, JSON.parse(localStorageMemory[name]));\n    this.subscribers = [];\n}\n\nStore.prototype.subscribe = function (subscriber) {\n    this.subscribers.push(subscriber);\n    return () => remove(this.subscribers, subscriber);\n};\n\nStore.prototype._notify = function () {\n    this.subscribers.forEach((s) => s());\n};\n\n/**\n * Finds items based on a query given as a JS object\n *\n * @param {object} query The query to match against (i.e. {foo: 'bar'})\n * @param {function} callback   The callback to fire when the query has\n * completed running\n *\n * @example\n * db.find({foo: 'bar', hello: 'world'}, function (data) {\n *   // data will return any items that have foo: bar and\n *   // hello: world in their properties\n * });\n */\nStore.prototype.find = function (query, callback) {\n    if (!callback) {\n        return;\n    }\n\n    var todos = JSON.parse(localStorageMemory[this._dbName]).todos;\n\n    callback.call(\n        this,\n        todos.filter(function (todo) {\n            for (var q in query) {\n                if (query[q] !== todo[q]) {\n                    return false;\n                }\n            }\n            return true;\n        })\n    );\n};\n\n/**\n * Will retrieve all data from the collection\n *\n * @param {function} callback The callback to fire upon retrieving data\n */\nStore.prototype.findAll = function (callback) {\n    callback = callback || function () {};\n    callback.call(this, JSON.parse(localStorageMemory[this._dbName]).todos);\n};\n\n/**\n * Will save the given data to the DB. If no item exists it will create a new\n * item, otherwise it'll simply update an existing item's properties\n *\n * @param {object} updateData The data to save back into the DB\n * @param {function} callback The callback to fire after saving\n * @param {number} id An optional param to enter an ID of an item to update\n */\nStore.prototype.save = function (updateData, callback, id) {\n    var data = JSON.parse(localStorageMemory[this._dbName]);\n    var todos = data.todos;\n\n    callback = callback || function () {};\n\n    // If an ID was actually given, find the item and update each property\n    if (id) {\n        for (var i = 0; i < todos.length; i++) {\n            if (todos[i].id === id) {\n                for (var key in updateData) {\n                    // eslint-disable-line guard-for-in\n                    todos[i][key] = updateData[key];\n                }\n                break;\n            }\n        }\n\n        localStorageMemory[this._dbName] = JSON.stringify(data);\n        callback.call(this, JSON.parse(localStorageMemory[this._dbName]).todos);\n    } else {\n        // Generate an ID\n        updateData.id = uniqueID++;\n\n        todos.push(updateData);\n        localStorageMemory[this._dbName] = JSON.stringify(data);\n        callback.call(this, [updateData]);\n    }\n    this._notify();\n};\n\n/**\n * Will remove an item from the Store based on its ID\n *\n * @param {number} id The ID of the item you want to remove\n * @param {function} callback The callback to fire after saving\n */\nStore.prototype.remove = function (id, callback) {\n    var data = JSON.parse(localStorageMemory[this._dbName]);\n    var todos = data.todos;\n\n    for (var i = 0; i < todos.length; i++) {\n        if (todos[i].id === id) {\n            todos.splice(i, 1);\n            break;\n        }\n    }\n\n    localStorageMemory[this._dbName] = JSON.stringify(data);\n    callback.call(this, JSON.parse(localStorageMemory[this._dbName]).todos);\n    this._notify();\n};\n\n/**\n * Will drop all storage and start fresh\n *\n * @param {function} callback The callback to fire after dropping the data\n */\nStore.prototype.drop = function (callback) {\n    localStorageMemory[this._dbName] = JSON.stringify({ todos: [] });\n    callback.call(this, JSON.parse(localStorageMemory[this._dbName]).todos);\n    this._notify();\n};\n","export default Template;\n\nvar htmlEscapes = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#x27;\",\n    \"`\": \"&#x60;\",\n};\n\nvar escapeHtmlChar = function (chr) {\n    return htmlEscapes[chr];\n};\n\nvar reUnescapedHtml = /[&<>\"'`]/g;\nvar reHasUnescapedHtml = new RegExp(reUnescapedHtml.source);\n\nvar escape = function (string) {\n    if (string && reHasUnescapedHtml.test(string)) {\n        return string.replace(reUnescapedHtml, escapeHtmlChar);\n    } else {\n        return string;\n    }\n};\n\n/**\n * Sets up defaults for all the Template methods such as a default template\n *\n * @constructor\n */\nfunction Template() {\n    this.defaultTemplate = `\n    <li data-id=\"{{id}}\" class=\"{{completed}}\">\n      <div class=\"view\">\n        <input class=\"toggle\" type=\"checkbox\" {{checked}} />\n        <label>{{title}}</label>\n        <button class=\"destroy\"></button>\n      </div>\n    </li>\n  `;\n}\n\n/**\n * Creates an <li> HTML string and returns it for placement in your app.\n *\n * NOTE: In real life you should be using a templating engine such as Mustache\n * or Handlebars, however, this is a vanilla JS example.\n *\n * @param {object} data The object containing keys you want to find in the\n *                      template to replace.\n * @returns {string} HTML String of an <li> element\n *\n * @example\n * view.show({\n *  id: 1,\n *  title: \"Hello World\",\n *  completed: 0,\n * });\n */\nTemplate.prototype.show = function (data) {\n    var i, l;\n    var view = \"\";\n\n    for (i = 0, l = data.length; i < l; i++) {\n        var template = this.defaultTemplate;\n        var completed = \"\";\n        var checked = \"\";\n\n        if (data[i].completed) {\n            completed = \"completed\";\n            checked = \"checked\";\n        }\n\n        template = template.replace(\"{{id}}\", data[i].id);\n        template = template.replace(\"{{title}}\", escape(data[i].title));\n        template = template.replace(\"{{completed}}\", completed);\n        template = template.replace(\"{{checked}}\", checked);\n\n        view = view + template;\n    }\n\n    return view;\n};\n\n/**\n * Displays a counter of how many to dos are left to complete\n *\n * @param {number} activeTodos The number of active todos.\n * @returns {string} String containing the count\n */\nTemplate.prototype.itemCounter = function (activeTodos) {\n    var plural = activeTodos === 1 ? \"\" : \"s\";\n\n    return `<strong>${activeTodos}</strong> item${plural} left`;\n};\n\n/**\n * Updates the text within the \"Clear completed\" button\n *\n * @param  {[type]} completedTodos The number of completed todos.\n * @returns {string} String containing the count\n */\nTemplate.prototype.clearCompletedButton = function (completedTodos) {\n    if (completedTodos > 0) {\n        return \"Clear completed\";\n    } else {\n        return \"\";\n    }\n};\n","import View from \"./view\";\nimport Controller from \"./controller\";\nimport Model from \"./model\";\nimport Store from \"./store\";\nimport Template from \"./template\";\nimport { remove } from \"./helpers\";\n\nexport { updateTodo, getTodo, subscribe };\n\nlet todo;\nconst subscribers = [];\n\n/**\n * Sets up a brand new Todo list.\n *\n * @param {string} name The name of your new to do list.\n */\nfunction Todo(name) {\n    this.storage = new Store(name);\n    this.model = new Model(this.storage);\n    this.template = new Template();\n    this.view = new View(this.template);\n    this.controller = new Controller(this.model, this.view);\n}\n\nfunction updateTodo() {\n    todo = new Todo(\"todos-vanillajs\");\n    todo.controller.setView(document.location.hash);\n    subscribers.forEach((s) => s());\n}\n\nfunction getTodo() {\n    return todo;\n}\n\nfunction subscribe(cb) {\n    subscribers.push(cb);\n    return function unsubscribe() {\n        remove(subscribers, cb);\n    };\n}\n","import \"todomvc-app-css/index.css\";\nimport \"./app.css\";\n\nimport { updateTodo } from \"./todo\";\n\nif (module.hot) {\n    module.hot.accept(function (err) {});\n    if (document.readyState === \"complete\") {\n        updateTodo();\n    }\n}\n\nwindow.addEventListener(\"load\", updateTodo);\nwindow.addEventListener(\"hashchange\", updateTodo);\n"],"names":[],"sourceRoot":""}