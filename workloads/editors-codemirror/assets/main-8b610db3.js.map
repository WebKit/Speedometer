{"version":3,"file":"main-8b610db3.js","sources":["../../shorttext.js","../../assets/longscript.js?raw","../../../../../node_modules/.pnpm/@codemirror+state@6.4.1/node_modules/@codemirror/state/dist/index.js","../../../../../node_modules/.pnpm/style-mod@4.1.2/node_modules/style-mod/src/style-mod.js","../../../../../node_modules/.pnpm/w3c-keyname@2.2.8/node_modules/w3c-keyname/index.js","../../../../../node_modules/.pnpm/@codemirror+view@6.26.3/node_modules/@codemirror/view/dist/index.js","../../../../../node_modules/.pnpm/@lezer+common@1.2.1/node_modules/@lezer/common/dist/index.js","../../../../../node_modules/.pnpm/@lezer+highlight@1.2.0/node_modules/@lezer/highlight/dist/index.js","../../../../../node_modules/.pnpm/@codemirror+language@6.10.1/node_modules/@codemirror/language/dist/index.js","../../../../../node_modules/.pnpm/@codemirror+commands@6.5.0/node_modules/@codemirror/commands/dist/index.js","../../../../../node_modules/.pnpm/crelt@1.0.6/node_modules/crelt/index.js","../../../../../node_modules/.pnpm/@codemirror+search@6.5.6/node_modules/@codemirror/search/dist/index.js","../../../../../node_modules/.pnpm/@codemirror+autocomplete@6.16.0_@codemirror+language@6.10.1_@codemirror+state@6.4.1_@codemirr_qcasyxi6mzyomgtmwaexnqdcvy/node_modules/@codemirror/autocomplete/dist/index.js","../../../../../node_modules/.pnpm/@codemirror+lint@6.5.0/node_modules/@codemirror/lint/dist/index.js","../../../../../node_modules/.pnpm/codemirror@6.0.1_@lezer+common@1.2.1/node_modules/codemirror/dist/index.js","../../../../../node_modules/.pnpm/@lezer+lr@1.4.0/node_modules/@lezer/lr/dist/index.js","../../../../../node_modules/.pnpm/@lezer+javascript@1.4.15/node_modules/@lezer/javascript/dist/index.js","../../../../../node_modules/.pnpm/@codemirror+lang-javascript@6.2.2/node_modules/@codemirror/lang-javascript/dist/index.js","../../codemirror.js","../../index.html?html-proxy&index=0.js","../../benchmark-connector.min.js"],"sourcesContent":["export const code = `\nfunction x() {\n  console.log(\"Hello world!\");\n}\n`;\n\nexport const text = `\n<h1>MOBY-DICK;<br>or, THE WHALE.</h1><p>By Herman Melville</p><hr><h2>CHAPTER 1. Loomings.</h2><p>Call me Ishmael. Some years ago—never mind how long precisely—having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world. It is a way I have of driving off the spleen and regulating the circulation. Whenever I find myself growing grim about the mouth; whenever it is a damp, drizzly November in my soul; whenever I find myself involuntarily pausing before coffin warehouses, and bringing up the rear of every funeral I meet; and especially whenever my hypos get such an upper hand of me, that it requires a strong moral principle to prevent me from deliberately stepping into the street, and methodically knocking people’s hats off—then, I account it high time to get to sea as soon as I can. This is my substitute for pistol and ball. With a philosophical flourish Cato throws himself upon his sword; I quietly take to the ship. There is nothing surprising in this. If they but knew it, almost all men in their degree, some time or other, cherish very nearly the same feelings towards the ocean with me.</p>\n`;\n","export default \"/**\\n * @license React\\n * react-dom.development.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n(function (global, factory) {\\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :\\n  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :\\n  (global = global || self, factory(global.ReactDOM = {}, global.React));\\n}(this, (function (exports, React) { 'use strict';\\n\\n  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\\n\\n  var suppressWarning = false;\\n  function setSuppressWarning(newSuppressWarning) {\\n    {\\n      suppressWarning = newSuppressWarning;\\n    }\\n  } // In DEV, calls to console.warn and console.error get replaced\\n  // by calls to these methods by a Babel plugin.\\n  //\\n  // In PROD (or in packages without access to React internals),\\n  // they are left as they are instead.\\n\\n  function warn(format) {\\n    {\\n      if (!suppressWarning) {\\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n          args[_key - 1] = arguments[_key];\\n        }\\n\\n        printWarning('warn', format, args);\\n      }\\n    }\\n  }\\n  function error(format) {\\n    {\\n      if (!suppressWarning) {\\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\\n          args[_key2 - 1] = arguments[_key2];\\n        }\\n\\n        printWarning('error', format, args);\\n      }\\n    }\\n  }\\n\\n  function printWarning(level, format, args) {\\n    // When changing this logic, you might want to also\\n    // update consoleWithStackDev.www.js as well.\\n    {\\n      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\\n      var stack = ReactDebugCurrentFrame.getStackAddendum();\\n\\n      if (stack !== '') {\\n        format += '%s';\\n        args = args.concat([stack]);\\n      } // eslint-disable-next-line react-internal/safe-string-coercion\\n\\n\\n      var argsWithFormat = args.map(function (item) {\\n        return String(item);\\n      }); // Careful: RN currently depends on this prefix\\n\\n      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\\n      // breaks IE9: https://github.com/facebook/react/issues/13610\\n      // eslint-disable-next-line react-internal/no-production-logging\\n\\n      Function.prototype.apply.call(console[level], console, argsWithFormat);\\n    }\\n  }\\n\\n  var FunctionComponent = 0;\\n  var ClassComponent = 1;\\n  var IndeterminateComponent = 2; // Before we know whether it is function or class\\n\\n  var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\\n\\n  var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\\n\\n  var HostComponent = 5;\\n  var HostText = 6;\\n  var Fragment = 7;\\n  var Mode = 8;\\n  var ContextConsumer = 9;\\n  var ContextProvider = 10;\\n  var ForwardRef = 11;\\n  var Profiler = 12;\\n  var SuspenseComponent = 13;\\n  var MemoComponent = 14;\\n  var SimpleMemoComponent = 15;\\n  var LazyComponent = 16;\\n  var IncompleteClassComponent = 17;\\n  var DehydratedFragment = 18;\\n  var SuspenseListComponent = 19;\\n  var ScopeComponent = 21;\\n  var OffscreenComponent = 22;\\n  var LegacyHiddenComponent = 23;\\n  var CacheComponent = 24;\\n  var TracingMarkerComponent = 25;\\n\\n  // -----------------------------------------------------------------------------\\n\\n  var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing\\n  // the react-reconciler package.\\n\\n  var enableNewReconciler = false; // Support legacy Primer support on internal FB www\\n\\n  var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\\n\\n  var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\\n\\n  var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\\n  // React DOM Chopping Block\\n  //\\n  // Similar to main Chopping Block but only flags related to React DOM. These are\\n  // grouped because we will likely batch all of them into a single major release.\\n  // -----------------------------------------------------------------------------\\n  // Disable support for comment nodes as React DOM containers. Already disabled\\n  // in open source, but www codebase still relies on it. Need to remove.\\n\\n  var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.\\n  // and client rendering, mostly to allow JSX attributes to apply to the custom\\n  // element's object properties instead of only HTML attributes.\\n  // https://github.com/facebook/react/issues/11347\\n\\n  var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements\\n  var warnAboutStringRefs = false; // -----------------------------------------------------------------------------\\n  // Debugging and DevTools\\n  // -----------------------------------------------------------------------------\\n  // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\\n  // for an experimental timeline tool.\\n\\n  var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\\n\\n  var enableProfilerTimer = true; // Record durations for commit and passive effects phases.\\n\\n  var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \\\"update\\\" and a \\\"cascading-update\\\".\\n\\n  var allNativeEvents = new Set();\\n  /**\\n   * Mapping from registration name to event name\\n   */\\n\\n\\n  var registrationNameDependencies = {};\\n  /**\\n   * Mapping from lowercase registration names to the properly cased version,\\n   * used to warn in the case of missing event handlers. Available\\n   * only in true.\\n   * @type {Object}\\n   */\\n\\n  var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true\\n\\n  function registerTwoPhaseEvent(registrationName, dependencies) {\\n    registerDirectEvent(registrationName, dependencies);\\n    registerDirectEvent(registrationName + 'Capture', dependencies);\\n  }\\n  function registerDirectEvent(registrationName, dependencies) {\\n    {\\n      if (registrationNameDependencies[registrationName]) {\\n        error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);\\n      }\\n    }\\n\\n    registrationNameDependencies[registrationName] = dependencies;\\n\\n    {\\n      var lowerCasedName = registrationName.toLowerCase();\\n      possibleRegistrationNames[lowerCasedName] = registrationName;\\n\\n      if (registrationName === 'onDoubleClick') {\\n        possibleRegistrationNames.ondblclick = registrationName;\\n      }\\n    }\\n\\n    for (var i = 0; i < dependencies.length; i++) {\\n      allNativeEvents.add(dependencies[i]);\\n    }\\n  }\\n\\n  var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');\\n\\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\\n\\n  /*\\n   * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\\n   * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\\n   *\\n   * The functions in this module will throw an easier-to-understand,\\n   * easier-to-debug exception with a clear errors message message explaining the\\n   * problem. (Instead of a confusing exception thrown inside the implementation\\n   * of the `value` object).\\n   */\\n  // $FlowFixMe only called in DEV, so void return is not possible.\\n  function typeName(value) {\\n    {\\n      // toStringTag is needed for namespaced types like Temporal.Instant\\n      var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\\n      var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\\n      return type;\\n    }\\n  } // $FlowFixMe only called in DEV, so void return is not possible.\\n\\n\\n  function willCoercionThrow(value) {\\n    {\\n      try {\\n        testStringCoercion(value);\\n        return false;\\n      } catch (e) {\\n        return true;\\n      }\\n    }\\n  }\\n\\n  function testStringCoercion(value) {\\n    // If you ended up here by following an exception call stack, here's what's\\n    // happened: you supplied an object or symbol value to React (as a prop, key,\\n    // DOM attribute, CSS property, string ref, etc.) and when React tried to\\n    // coerce it to a string using `'' + value`, an exception was thrown.\\n    //\\n    // The most common types that will cause this exception are `Symbol` instances\\n    // and Temporal objects like `Temporal.Instant`. But any object that has a\\n    // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\\n    // exception. (Library authors do this to prevent users from using built-in\\n    // numeric operators like `+` or comparison operators like `>=` because custom\\n    // methods are needed to perform accurate arithmetic or comparison.)\\n    //\\n    // To fix the problem, coerce this object or symbol value to a string before\\n    // passing it to React. The most reliable way is usually `String(value)`.\\n    //\\n    // To find which value is throwing, check the browser or debugger console.\\n    // Before this exception was thrown, there should be `console.error` output\\n    // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\\n    // problem and how that type was used: key, atrribute, input value prop, etc.\\n    // In most cases, this console output also shows the component and its\\n    // ancestor components where the exception happened.\\n    //\\n    // eslint-disable-next-line react-internal/safe-string-coercion\\n    return '' + value;\\n  }\\n\\n  function checkAttributeStringCoercion(value, attributeName) {\\n    {\\n      if (willCoercionThrow(value)) {\\n        error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));\\n\\n        return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\\n      }\\n    }\\n  }\\n  function checkKeyStringCoercion(value) {\\n    {\\n      if (willCoercionThrow(value)) {\\n        error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\\n\\n        return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\\n      }\\n    }\\n  }\\n  function checkPropStringCoercion(value, propName) {\\n    {\\n      if (willCoercionThrow(value)) {\\n        error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\\n\\n        return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\\n      }\\n    }\\n  }\\n  function checkCSSPropertyStringCoercion(value, propName) {\\n    {\\n      if (willCoercionThrow(value)) {\\n        error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\\n\\n        return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\\n      }\\n    }\\n  }\\n  function checkHtmlStringCoercion(value) {\\n    {\\n      if (willCoercionThrow(value)) {\\n        error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\\n\\n        return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\\n      }\\n    }\\n  }\\n  function checkFormFieldValueStringCoercion(value) {\\n    {\\n      if (willCoercionThrow(value)) {\\n        error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\\n\\n        return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\\n      }\\n    }\\n  }\\n\\n  // A reserved attribute.\\n  // It is handled by React separately and shouldn't be written to the DOM.\\n  var RESERVED = 0; // A simple string attribute.\\n  // Attributes that aren't in the filter are presumed to have this type.\\n\\n  var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called\\n  // \\\"enumerated\\\" attributes with \\\"true\\\" and \\\"false\\\" as possible values.\\n  // When true, it should be set to a \\\"true\\\" string.\\n  // When false, it should be set to a \\\"false\\\" string.\\n\\n  var BOOLEANISH_STRING = 2; // A real boolean attribute.\\n  // When true, it should be present (set either to an empty string or its name).\\n  // When false, it should be omitted.\\n\\n  var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.\\n  // When true, it should be present (set either to an empty string or its name).\\n  // When false, it should be omitted.\\n  // For any other value, should be present with that value.\\n\\n  var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.\\n  // When falsy, it should be removed.\\n\\n  var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.\\n  // When falsy, it should be removed.\\n\\n  var POSITIVE_NUMERIC = 6;\\n\\n  /* eslint-disable max-len */\\n  var ATTRIBUTE_NAME_START_CHAR = \\\":A-Z_a-z\\\\\\\\u00C0-\\\\\\\\u00D6\\\\\\\\u00D8-\\\\\\\\u00F6\\\\\\\\u00F8-\\\\\\\\u02FF\\\\\\\\u0370-\\\\\\\\u037D\\\\\\\\u037F-\\\\\\\\u1FFF\\\\\\\\u200C-\\\\\\\\u200D\\\\\\\\u2070-\\\\\\\\u218F\\\\\\\\u2C00-\\\\\\\\u2FEF\\\\\\\\u3001-\\\\\\\\uD7FF\\\\\\\\uF900-\\\\\\\\uFDCF\\\\\\\\uFDF0-\\\\\\\\uFFFD\\\";\\n  /* eslint-enable max-len */\\n\\n  var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \\\"\\\\\\\\-.0-9\\\\\\\\u00B7\\\\\\\\u0300-\\\\\\\\u036F\\\\\\\\u203F-\\\\\\\\u2040\\\";\\n  var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\\n  var illegalAttributeNameCache = {};\\n  var validatedAttributeNameCache = {};\\n  function isAttributeNameSafe(attributeName) {\\n    if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\\n      return true;\\n    }\\n\\n    if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\\n      return false;\\n    }\\n\\n    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\\n      validatedAttributeNameCache[attributeName] = true;\\n      return true;\\n    }\\n\\n    illegalAttributeNameCache[attributeName] = true;\\n\\n    {\\n      error('Invalid attribute name: `%s`', attributeName);\\n    }\\n\\n    return false;\\n  }\\n  function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {\\n    if (propertyInfo !== null) {\\n      return propertyInfo.type === RESERVED;\\n    }\\n\\n    if (isCustomComponentTag) {\\n      return false;\\n    }\\n\\n    if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n  function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {\\n    if (propertyInfo !== null && propertyInfo.type === RESERVED) {\\n      return false;\\n    }\\n\\n    switch (typeof value) {\\n      case 'function': // $FlowIssue symbol is perfectly valid here\\n\\n      case 'symbol':\\n        // eslint-disable-line\\n        return true;\\n\\n      case 'boolean':\\n        {\\n          if (isCustomComponentTag) {\\n            return false;\\n          }\\n\\n          if (propertyInfo !== null) {\\n            return !propertyInfo.acceptsBooleans;\\n          } else {\\n            var prefix = name.toLowerCase().slice(0, 5);\\n            return prefix !== 'data-' && prefix !== 'aria-';\\n          }\\n        }\\n\\n      default:\\n        return false;\\n    }\\n  }\\n  function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {\\n    if (value === null || typeof value === 'undefined') {\\n      return true;\\n    }\\n\\n    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {\\n      return true;\\n    }\\n\\n    if (isCustomComponentTag) {\\n\\n      return false;\\n    }\\n\\n    if (propertyInfo !== null) {\\n\\n      switch (propertyInfo.type) {\\n        case BOOLEAN:\\n          return !value;\\n\\n        case OVERLOADED_BOOLEAN:\\n          return value === false;\\n\\n        case NUMERIC:\\n          return isNaN(value);\\n\\n        case POSITIVE_NUMERIC:\\n          return isNaN(value) || value < 1;\\n      }\\n    }\\n\\n    return false;\\n  }\\n  function getPropertyInfo(name) {\\n    return properties.hasOwnProperty(name) ? properties[name] : null;\\n  }\\n\\n  function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {\\n    this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;\\n    this.attributeName = attributeName;\\n    this.attributeNamespace = attributeNamespace;\\n    this.mustUseProperty = mustUseProperty;\\n    this.propertyName = name;\\n    this.type = type;\\n    this.sanitizeURL = sanitizeURL;\\n    this.removeEmptyString = removeEmptyString;\\n  } // When adding attributes to this list, be sure to also add them to\\n  // the `possibleStandardNames` module to ensure casing and incorrect\\n  // name warnings.\\n\\n\\n  var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.\\n\\n  var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular\\n  // elements (not just inputs). Now that ReactDOMInput assigns to the\\n  // defaultValue property -- do we need this?\\n  'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];\\n\\n  reservedProps.forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty\\n    name, // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // A few React string attributes have a different name.\\n  // This is a mapping from React prop names to the attribute names.\\n\\n  [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {\\n    var name = _ref[0],\\n        attributeName = _ref[1];\\n    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\\n    attributeName, // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These are \\\"enumerated\\\" HTML attributes that accept \\\"true\\\" and \\\"false\\\".\\n  // In React, we let users pass `true` and `false` even though technically\\n  // these aren't boolean attributes (they are coerced to strings).\\n\\n  ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\\n    name.toLowerCase(), // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These are \\\"enumerated\\\" SVG attributes that accept \\\"true\\\" and \\\"false\\\".\\n  // In React, we let users pass `true` and `false` even though technically\\n  // these aren't boolean attributes (they are coerced to strings).\\n  // Since these are SVG attributes, their attribute names are case-sensitive.\\n\\n  ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\\n    name, // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These are HTML boolean attributes.\\n\\n  ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM\\n  // on the client side because the browsers are inconsistent. Instead we call focus().\\n  'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata\\n  'itemScope'].forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty\\n    name.toLowerCase(), // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These are the few React props that we set as DOM properties\\n  // rather than attributes. These are all booleans.\\n\\n  ['checked', // Note: `option.selected` is not updated if `select.multiple` is\\n  // disabled with `removeAttribute`. We have special logic for handling this.\\n  'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,\\n  // you'll need to set attributeName to name.toLowerCase()\\n  // instead in the assignment below.\\n  ].forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty\\n    name, // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These are HTML attributes that are \\\"overloaded booleans\\\": they behave like\\n  // booleans, but can also accept a string value.\\n\\n  ['capture', 'download' // NOTE: if you add a camelCased prop to this list,\\n  // you'll need to set attributeName to name.toLowerCase()\\n  // instead in the assignment below.\\n  ].forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty\\n    name, // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These are HTML attributes that must be positive numbers.\\n\\n  ['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,\\n  // you'll need to set attributeName to name.toLowerCase()\\n  // instead in the assignment below.\\n  ].forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty\\n    name, // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These are HTML attributes that must be numbers.\\n\\n  ['rowSpan', 'start'].forEach(function (name) {\\n    properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty\\n    name.toLowerCase(), // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  });\\n  var CAMELIZE = /[\\\\-\\\\:]([a-z])/g;\\n\\n  var capitalize = function (token) {\\n    return token[1].toUpperCase();\\n  }; // This is a list of all SVG attributes that need special casing, namespacing,\\n  // or boolean value assignment. Regular attributes that just accept strings\\n  // and have the same names are omitted, just like in the HTML attribute filter.\\n  // Some of these attributes can be hard to find. This list was created by\\n  // scraping the MDN documentation.\\n\\n\\n  ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,\\n  // you'll need to set attributeName to name.toLowerCase()\\n  // instead in the assignment below.\\n  ].forEach(function (attributeName) {\\n    var name = attributeName.replace(CAMELIZE, capitalize);\\n    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\\n    attributeName, null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // String SVG attributes with the xlink namespace.\\n\\n  ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,\\n  // you'll need to set attributeName to name.toLowerCase()\\n  // instead in the assignment below.\\n  ].forEach(function (attributeName) {\\n    var name = attributeName.replace(CAMELIZE, capitalize);\\n    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\\n    attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL\\n    false);\\n  }); // String SVG attributes with the xml namespace.\\n\\n  ['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,\\n  // you'll need to set attributeName to name.toLowerCase()\\n  // instead in the assignment below.\\n  ].forEach(function (attributeName) {\\n    var name = attributeName.replace(CAMELIZE, capitalize);\\n    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\\n    attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL\\n    false);\\n  }); // These attribute exists both in HTML and SVG.\\n  // The attribute name is case-sensitive in SVG so we can't just use\\n  // the React name like we do for attributes that exist only in HTML.\\n\\n  ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {\\n    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\\n    attributeName.toLowerCase(), // attributeName\\n    null, // attributeNamespace\\n    false, // sanitizeURL\\n    false);\\n  }); // These attributes accept URLs. These must not allow javascript: URLS.\\n  // These will also need to accept Trusted Types object in the future.\\n\\n  var xlinkHref = 'xlinkHref';\\n  properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty\\n  'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL\\n  false);\\n  ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {\\n    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\\n    attributeName.toLowerCase(), // attributeName\\n    null, // attributeNamespace\\n    true, // sanitizeURL\\n    true);\\n  });\\n\\n  // and any newline or tab are filtered out as if they're not part of the URL.\\n  // https://url.spec.whatwg.org/#url-parsing\\n  // Tab or newline are defined as \\\\r\\\\n\\\\t:\\n  // https://infra.spec.whatwg.org/#ascii-tab-or-newline\\n  // A C0 control is a code point in the range \\\\u0000 NULL to \\\\u001F\\n  // INFORMATION SEPARATOR ONE, inclusive:\\n  // https://infra.spec.whatwg.org/#c0-control-or-space\\n\\n  /* eslint-disable max-len */\\n\\n  var isJavaScriptProtocol = /^[\\\\u0000-\\\\u001F ]*j[\\\\r\\\\n\\\\t]*a[\\\\r\\\\n\\\\t]*v[\\\\r\\\\n\\\\t]*a[\\\\r\\\\n\\\\t]*s[\\\\r\\\\n\\\\t]*c[\\\\r\\\\n\\\\t]*r[\\\\r\\\\n\\\\t]*i[\\\\r\\\\n\\\\t]*p[\\\\r\\\\n\\\\t]*t[\\\\r\\\\n\\\\t]*\\\\:/i;\\n  var didWarn = false;\\n\\n  function sanitizeURL(url) {\\n    {\\n      if (!didWarn && isJavaScriptProtocol.test(url)) {\\n        didWarn = true;\\n\\n        error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Get the value for a property on a node. Only used in DEV for SSR validation.\\n   * The \\\"expected\\\" argument is used as a hint of what the expected value is.\\n   * Some properties have multiple equivalent values.\\n   */\\n  function getValueForProperty(node, name, expected, propertyInfo) {\\n    {\\n      if (propertyInfo.mustUseProperty) {\\n        var propertyName = propertyInfo.propertyName;\\n        return node[propertyName];\\n      } else {\\n        // This check protects multiple uses of `expected`, which is why the\\n        // react-internal/safe-string-coercion rule is disabled in several spots\\n        // below.\\n        {\\n          checkAttributeStringCoercion(expected, name);\\n        }\\n\\n        if ( propertyInfo.sanitizeURL) {\\n          // If we haven't fully disabled javascript: URLs, and if\\n          // the hydration is successful of a javascript: URL, we\\n          // still want to warn on the client.\\n          // eslint-disable-next-line react-internal/safe-string-coercion\\n          sanitizeURL('' + expected);\\n        }\\n\\n        var attributeName = propertyInfo.attributeName;\\n        var stringValue = null;\\n\\n        if (propertyInfo.type === OVERLOADED_BOOLEAN) {\\n          if (node.hasAttribute(attributeName)) {\\n            var value = node.getAttribute(attributeName);\\n\\n            if (value === '') {\\n              return true;\\n            }\\n\\n            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\\n              return value;\\n            } // eslint-disable-next-line react-internal/safe-string-coercion\\n\\n\\n            if (value === '' + expected) {\\n              return expected;\\n            }\\n\\n            return value;\\n          }\\n        } else if (node.hasAttribute(attributeName)) {\\n          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\\n            // We had an attribute but shouldn't have had one, so read it\\n            // for the error message.\\n            return node.getAttribute(attributeName);\\n          }\\n\\n          if (propertyInfo.type === BOOLEAN) {\\n            // If this was a boolean, it doesn't matter what the value is\\n            // the fact that we have it is the same as the expected.\\n            return expected;\\n          } // Even if this property uses a namespace we use getAttribute\\n          // because we assume its namespaced name is the same as our config.\\n          // To use getAttributeNS we need the local name which we don't have\\n          // in our config atm.\\n\\n\\n          stringValue = node.getAttribute(attributeName);\\n        }\\n\\n        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\\n          return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion\\n        } else if (stringValue === '' + expected) {\\n          return expected;\\n        } else {\\n          return stringValue;\\n        }\\n      }\\n    }\\n  }\\n  /**\\n   * Get the value for a attribute on a node. Only used in DEV for SSR validation.\\n   * The third argument is used as a hint of what the expected value is. Some\\n   * attributes have multiple equivalent values.\\n   */\\n\\n  function getValueForAttribute(node, name, expected, isCustomComponentTag) {\\n    {\\n      if (!isAttributeNameSafe(name)) {\\n        return;\\n      }\\n\\n      if (!node.hasAttribute(name)) {\\n        return expected === undefined ? undefined : null;\\n      }\\n\\n      var value = node.getAttribute(name);\\n\\n      {\\n        checkAttributeStringCoercion(expected, name);\\n      }\\n\\n      if (value === '' + expected) {\\n        return expected;\\n      }\\n\\n      return value;\\n    }\\n  }\\n  /**\\n   * Sets the value for a property on a node.\\n   *\\n   * @param {DOMElement} node\\n   * @param {string} name\\n   * @param {*} value\\n   */\\n\\n  function setValueForProperty(node, name, value, isCustomComponentTag) {\\n    var propertyInfo = getPropertyInfo(name);\\n\\n    if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {\\n      return;\\n    }\\n\\n    if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {\\n      value = null;\\n    }\\n\\n\\n    if (isCustomComponentTag || propertyInfo === null) {\\n      if (isAttributeNameSafe(name)) {\\n        var _attributeName = name;\\n\\n        if (value === null) {\\n          node.removeAttribute(_attributeName);\\n        } else {\\n          {\\n            checkAttributeStringCoercion(value, name);\\n          }\\n\\n          node.setAttribute(_attributeName,  '' + value);\\n        }\\n      }\\n\\n      return;\\n    }\\n\\n    var mustUseProperty = propertyInfo.mustUseProperty;\\n\\n    if (mustUseProperty) {\\n      var propertyName = propertyInfo.propertyName;\\n\\n      if (value === null) {\\n        var type = propertyInfo.type;\\n        node[propertyName] = type === BOOLEAN ? false : '';\\n      } else {\\n        // Contrary to `setAttribute`, object properties are properly\\n        // `toString`ed by IE8/9.\\n        node[propertyName] = value;\\n      }\\n\\n      return;\\n    } // The rest are treated as attributes with special cases.\\n\\n\\n    var attributeName = propertyInfo.attributeName,\\n        attributeNamespace = propertyInfo.attributeNamespace;\\n\\n    if (value === null) {\\n      node.removeAttribute(attributeName);\\n    } else {\\n      var _type = propertyInfo.type;\\n      var attributeValue;\\n\\n      if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {\\n        // If attribute type is boolean, we know for sure it won't be an execution sink\\n        // and we won't require Trusted Type here.\\n        attributeValue = '';\\n      } else {\\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\\n        // ('' + value) makes it output the correct toString()-value.\\n        {\\n          {\\n            checkAttributeStringCoercion(value, attributeName);\\n          }\\n\\n          attributeValue = '' + value;\\n        }\\n\\n        if (propertyInfo.sanitizeURL) {\\n          sanitizeURL(attributeValue.toString());\\n        }\\n      }\\n\\n      if (attributeNamespace) {\\n        node.setAttributeNS(attributeNamespace, attributeName, attributeValue);\\n      } else {\\n        node.setAttribute(attributeName, attributeValue);\\n      }\\n    }\\n  }\\n\\n  // ATTENTION\\n  // When adding new symbols to this file,\\n  // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\\n  // The Symbol used to tag the ReactElement-like types.\\n  var REACT_ELEMENT_TYPE = Symbol.for('react.element');\\n  var REACT_PORTAL_TYPE = Symbol.for('react.portal');\\n  var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\\n  var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\\n  var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\\n  var REACT_PROVIDER_TYPE = Symbol.for('react.provider');\\n  var REACT_CONTEXT_TYPE = Symbol.for('react.context');\\n  var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\\n  var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\\n  var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\\n  var REACT_MEMO_TYPE = Symbol.for('react.memo');\\n  var REACT_LAZY_TYPE = Symbol.for('react.lazy');\\n  var REACT_SCOPE_TYPE = Symbol.for('react.scope');\\n  var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\\n  var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\\n  var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\\n  var REACT_CACHE_TYPE = Symbol.for('react.cache');\\n  var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\\n  var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\\n  function getIteratorFn(maybeIterable) {\\n    if (maybeIterable === null || typeof maybeIterable !== 'object') {\\n      return null;\\n    }\\n\\n    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\\n\\n    if (typeof maybeIterator === 'function') {\\n      return maybeIterator;\\n    }\\n\\n    return null;\\n  }\\n\\n  var assign = Object.assign;\\n\\n  // Helpers to patch console.logs to avoid logging during side-effect free\\n  // replaying on render function. This currently only patches the object\\n  // lazily which won't cover if the log function was extracted eagerly.\\n  // We could also eagerly patch the method.\\n  var disabledDepth = 0;\\n  var prevLog;\\n  var prevInfo;\\n  var prevWarn;\\n  var prevError;\\n  var prevGroup;\\n  var prevGroupCollapsed;\\n  var prevGroupEnd;\\n\\n  function disabledLog() {}\\n\\n  disabledLog.__reactDisabledLog = true;\\n  function disableLogs() {\\n    {\\n      if (disabledDepth === 0) {\\n        /* eslint-disable react-internal/no-production-logging */\\n        prevLog = console.log;\\n        prevInfo = console.info;\\n        prevWarn = console.warn;\\n        prevError = console.error;\\n        prevGroup = console.group;\\n        prevGroupCollapsed = console.groupCollapsed;\\n        prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\\n\\n        var props = {\\n          configurable: true,\\n          enumerable: true,\\n          value: disabledLog,\\n          writable: true\\n        }; // $FlowFixMe Flow thinks console is immutable.\\n\\n        Object.defineProperties(console, {\\n          info: props,\\n          log: props,\\n          warn: props,\\n          error: props,\\n          group: props,\\n          groupCollapsed: props,\\n          groupEnd: props\\n        });\\n        /* eslint-enable react-internal/no-production-logging */\\n      }\\n\\n      disabledDepth++;\\n    }\\n  }\\n  function reenableLogs() {\\n    {\\n      disabledDepth--;\\n\\n      if (disabledDepth === 0) {\\n        /* eslint-disable react-internal/no-production-logging */\\n        var props = {\\n          configurable: true,\\n          enumerable: true,\\n          writable: true\\n        }; // $FlowFixMe Flow thinks console is immutable.\\n\\n        Object.defineProperties(console, {\\n          log: assign({}, props, {\\n            value: prevLog\\n          }),\\n          info: assign({}, props, {\\n            value: prevInfo\\n          }),\\n          warn: assign({}, props, {\\n            value: prevWarn\\n          }),\\n          error: assign({}, props, {\\n            value: prevError\\n          }),\\n          group: assign({}, props, {\\n            value: prevGroup\\n          }),\\n          groupCollapsed: assign({}, props, {\\n            value: prevGroupCollapsed\\n          }),\\n          groupEnd: assign({}, props, {\\n            value: prevGroupEnd\\n          })\\n        });\\n        /* eslint-enable react-internal/no-production-logging */\\n      }\\n\\n      if (disabledDepth < 0) {\\n        error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\\n      }\\n    }\\n  }\\n\\n  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\\n  var prefix;\\n  function describeBuiltInComponentFrame(name, source, ownerFn) {\\n    {\\n      if (prefix === undefined) {\\n        // Extract the VM specific prefix used by each line.\\n        try {\\n          throw Error();\\n        } catch (x) {\\n          var match = x.stack.trim().match(/\\\\n( *(at )?)/);\\n          prefix = match && match[1] || '';\\n        }\\n      } // We use the prefix to ensure our stacks line up with native stack frames.\\n\\n\\n      return '\\\\n' + prefix + name;\\n    }\\n  }\\n  var reentry = false;\\n  var componentFrameCache;\\n\\n  {\\n    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\\n    componentFrameCache = new PossiblyWeakMap();\\n  }\\n\\n  function describeNativeComponentFrame(fn, construct) {\\n    // If something asked for a stack inside a fake render, it should get ignored.\\n    if ( !fn || reentry) {\\n      return '';\\n    }\\n\\n    {\\n      var frame = componentFrameCache.get(fn);\\n\\n      if (frame !== undefined) {\\n        return frame;\\n      }\\n    }\\n\\n    var control;\\n    reentry = true;\\n    var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\\n\\n    Error.prepareStackTrace = undefined;\\n    var previousDispatcher;\\n\\n    {\\n      previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\\n      // for warnings.\\n\\n      ReactCurrentDispatcher.current = null;\\n      disableLogs();\\n    }\\n\\n    try {\\n      // This should throw.\\n      if (construct) {\\n        // Something should be setting the props in the constructor.\\n        var Fake = function () {\\n          throw Error();\\n        }; // $FlowFixMe\\n\\n\\n        Object.defineProperty(Fake.prototype, 'props', {\\n          set: function () {\\n            // We use a throwing setter instead of frozen or non-writable props\\n            // because that won't throw in a non-strict mode function.\\n            throw Error();\\n          }\\n        });\\n\\n        if (typeof Reflect === 'object' && Reflect.construct) {\\n          // We construct a different control for this case to include any extra\\n          // frames added by the construct call.\\n          try {\\n            Reflect.construct(Fake, []);\\n          } catch (x) {\\n            control = x;\\n          }\\n\\n          Reflect.construct(fn, [], Fake);\\n        } else {\\n          try {\\n            Fake.call();\\n          } catch (x) {\\n            control = x;\\n          }\\n\\n          fn.call(Fake.prototype);\\n        }\\n      } else {\\n        try {\\n          throw Error();\\n        } catch (x) {\\n          control = x;\\n        }\\n\\n        fn();\\n      }\\n    } catch (sample) {\\n      // This is inlined manually because closure doesn't do it for us.\\n      if (sample && control && typeof sample.stack === 'string') {\\n        // This extracts the first frame from the sample that isn't also in the control.\\n        // Skipping one frame that we assume is the frame that calls the two.\\n        var sampleLines = sample.stack.split('\\\\n');\\n        var controlLines = control.stack.split('\\\\n');\\n        var s = sampleLines.length - 1;\\n        var c = controlLines.length - 1;\\n\\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\\n          // We expect at least one stack frame to be shared.\\n          // Typically this will be the root most one. However, stack frames may be\\n          // cut off due to maximum stack limits. In this case, one maybe cut off\\n          // earlier than the other. We assume that the sample is longer or the same\\n          // and there for cut off earlier. So we should find the root most frame in\\n          // the sample somewhere in the control.\\n          c--;\\n        }\\n\\n        for (; s >= 1 && c >= 0; s--, c--) {\\n          // Next we find the first one that isn't the same which should be the\\n          // frame that called our sample function and the control.\\n          if (sampleLines[s] !== controlLines[c]) {\\n            // In V8, the first line is describing the message but other VMs don't.\\n            // If we're about to return the first line, and the control is also on the same\\n            // line, that's a pretty good indicator that our sample threw at same line as\\n            // the control. I.e. before we entered the sample frame. So we ignore this result.\\n            // This can happen if you passed a class to function component, or non-function.\\n            if (s !== 1 || c !== 1) {\\n              do {\\n                s--;\\n                c--; // We may still have similar intermediate frames from the construct call.\\n                // The next one that isn't the same should be our match though.\\n\\n                if (c < 0 || sampleLines[s] !== controlLines[c]) {\\n                  // V8 adds a \\\"new\\\" prefix for native classes. Let's remove it to make it prettier.\\n                  var _frame = '\\\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \\\"<anonymous>\\\"\\n                  // but we have a user-provided \\\"displayName\\\"\\n                  // splice it in to make the stack more readable.\\n\\n\\n                  if (fn.displayName && _frame.includes('<anonymous>')) {\\n                    _frame = _frame.replace('<anonymous>', fn.displayName);\\n                  }\\n\\n                  {\\n                    if (typeof fn === 'function') {\\n                      componentFrameCache.set(fn, _frame);\\n                    }\\n                  } // Return the line we found.\\n\\n\\n                  return _frame;\\n                }\\n              } while (s >= 1 && c >= 0);\\n            }\\n\\n            break;\\n          }\\n        }\\n      }\\n    } finally {\\n      reentry = false;\\n\\n      {\\n        ReactCurrentDispatcher.current = previousDispatcher;\\n        reenableLogs();\\n      }\\n\\n      Error.prepareStackTrace = previousPrepareStackTrace;\\n    } // Fallback to just using the name if we couldn't make it throw.\\n\\n\\n    var name = fn ? fn.displayName || fn.name : '';\\n    var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\\n\\n    {\\n      if (typeof fn === 'function') {\\n        componentFrameCache.set(fn, syntheticFrame);\\n      }\\n    }\\n\\n    return syntheticFrame;\\n  }\\n\\n  function describeClassComponentFrame(ctor, source, ownerFn) {\\n    {\\n      return describeNativeComponentFrame(ctor, true);\\n    }\\n  }\\n  function describeFunctionComponentFrame(fn, source, ownerFn) {\\n    {\\n      return describeNativeComponentFrame(fn, false);\\n    }\\n  }\\n\\n  function shouldConstruct(Component) {\\n    var prototype = Component.prototype;\\n    return !!(prototype && prototype.isReactComponent);\\n  }\\n\\n  function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\\n\\n    if (type == null) {\\n      return '';\\n    }\\n\\n    if (typeof type === 'function') {\\n      {\\n        return describeNativeComponentFrame(type, shouldConstruct(type));\\n      }\\n    }\\n\\n    if (typeof type === 'string') {\\n      return describeBuiltInComponentFrame(type);\\n    }\\n\\n    switch (type) {\\n      case REACT_SUSPENSE_TYPE:\\n        return describeBuiltInComponentFrame('Suspense');\\n\\n      case REACT_SUSPENSE_LIST_TYPE:\\n        return describeBuiltInComponentFrame('SuspenseList');\\n    }\\n\\n    if (typeof type === 'object') {\\n      switch (type.$$typeof) {\\n        case REACT_FORWARD_REF_TYPE:\\n          return describeFunctionComponentFrame(type.render);\\n\\n        case REACT_MEMO_TYPE:\\n          // Memo may contain any component type so we recursively resolve it.\\n          return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\\n\\n        case REACT_LAZY_TYPE:\\n          {\\n            var lazyComponent = type;\\n            var payload = lazyComponent._payload;\\n            var init = lazyComponent._init;\\n\\n            try {\\n              // Lazy may contain any component type so we recursively resolve it.\\n              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\\n            } catch (x) {}\\n          }\\n      }\\n    }\\n\\n    return '';\\n  }\\n\\n  function describeFiber(fiber) {\\n    var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;\\n    var source =  fiber._debugSource ;\\n\\n    switch (fiber.tag) {\\n      case HostComponent:\\n        return describeBuiltInComponentFrame(fiber.type);\\n\\n      case LazyComponent:\\n        return describeBuiltInComponentFrame('Lazy');\\n\\n      case SuspenseComponent:\\n        return describeBuiltInComponentFrame('Suspense');\\n\\n      case SuspenseListComponent:\\n        return describeBuiltInComponentFrame('SuspenseList');\\n\\n      case FunctionComponent:\\n      case IndeterminateComponent:\\n      case SimpleMemoComponent:\\n        return describeFunctionComponentFrame(fiber.type);\\n\\n      case ForwardRef:\\n        return describeFunctionComponentFrame(fiber.type.render);\\n\\n      case ClassComponent:\\n        return describeClassComponentFrame(fiber.type);\\n\\n      default:\\n        return '';\\n    }\\n  }\\n\\n  function getStackByFiberInDevAndProd(workInProgress) {\\n    try {\\n      var info = '';\\n      var node = workInProgress;\\n\\n      do {\\n        info += describeFiber(node);\\n        node = node.return;\\n      } while (node);\\n\\n      return info;\\n    } catch (x) {\\n      return '\\\\nError generating stack: ' + x.message + '\\\\n' + x.stack;\\n    }\\n  }\\n\\n  function getWrappedName(outerType, innerType, wrapperName) {\\n    var displayName = outerType.displayName;\\n\\n    if (displayName) {\\n      return displayName;\\n    }\\n\\n    var functionName = innerType.displayName || innerType.name || '';\\n    return functionName !== '' ? wrapperName + \\\"(\\\" + functionName + \\\")\\\" : wrapperName;\\n  } // Keep in sync with react-reconciler/getComponentNameFromFiber\\n\\n\\n  function getContextName(type) {\\n    return type.displayName || 'Context';\\n  } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\\n\\n\\n  function getComponentNameFromType(type) {\\n    if (type == null) {\\n      // Host root, text node or just invalid type.\\n      return null;\\n    }\\n\\n    {\\n      if (typeof type.tag === 'number') {\\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\\n      }\\n    }\\n\\n    if (typeof type === 'function') {\\n      return type.displayName || type.name || null;\\n    }\\n\\n    if (typeof type === 'string') {\\n      return type;\\n    }\\n\\n    switch (type) {\\n      case REACT_FRAGMENT_TYPE:\\n        return 'Fragment';\\n\\n      case REACT_PORTAL_TYPE:\\n        return 'Portal';\\n\\n      case REACT_PROFILER_TYPE:\\n        return 'Profiler';\\n\\n      case REACT_STRICT_MODE_TYPE:\\n        return 'StrictMode';\\n\\n      case REACT_SUSPENSE_TYPE:\\n        return 'Suspense';\\n\\n      case REACT_SUSPENSE_LIST_TYPE:\\n        return 'SuspenseList';\\n\\n    }\\n\\n    if (typeof type === 'object') {\\n      switch (type.$$typeof) {\\n        case REACT_CONTEXT_TYPE:\\n          var context = type;\\n          return getContextName(context) + '.Consumer';\\n\\n        case REACT_PROVIDER_TYPE:\\n          var provider = type;\\n          return getContextName(provider._context) + '.Provider';\\n\\n        case REACT_FORWARD_REF_TYPE:\\n          return getWrappedName(type, type.render, 'ForwardRef');\\n\\n        case REACT_MEMO_TYPE:\\n          var outerName = type.displayName || null;\\n\\n          if (outerName !== null) {\\n            return outerName;\\n          }\\n\\n          return getComponentNameFromType(type.type) || 'Memo';\\n\\n        case REACT_LAZY_TYPE:\\n          {\\n            var lazyComponent = type;\\n            var payload = lazyComponent._payload;\\n            var init = lazyComponent._init;\\n\\n            try {\\n              return getComponentNameFromType(init(payload));\\n            } catch (x) {\\n              return null;\\n            }\\n          }\\n\\n        // eslint-disable-next-line no-fallthrough\\n      }\\n    }\\n\\n    return null;\\n  }\\n\\n  function getWrappedName$1(outerType, innerType, wrapperName) {\\n    var functionName = innerType.displayName || innerType.name || '';\\n    return outerType.displayName || (functionName !== '' ? wrapperName + \\\"(\\\" + functionName + \\\")\\\" : wrapperName);\\n  } // Keep in sync with shared/getComponentNameFromType\\n\\n\\n  function getContextName$1(type) {\\n    return type.displayName || 'Context';\\n  }\\n\\n  function getComponentNameFromFiber(fiber) {\\n    var tag = fiber.tag,\\n        type = fiber.type;\\n\\n    switch (tag) {\\n      case CacheComponent:\\n        return 'Cache';\\n\\n      case ContextConsumer:\\n        var context = type;\\n        return getContextName$1(context) + '.Consumer';\\n\\n      case ContextProvider:\\n        var provider = type;\\n        return getContextName$1(provider._context) + '.Provider';\\n\\n      case DehydratedFragment:\\n        return 'DehydratedFragment';\\n\\n      case ForwardRef:\\n        return getWrappedName$1(type, type.render, 'ForwardRef');\\n\\n      case Fragment:\\n        return 'Fragment';\\n\\n      case HostComponent:\\n        // Host component type is the display name (e.g. \\\"div\\\", \\\"View\\\")\\n        return type;\\n\\n      case HostPortal:\\n        return 'Portal';\\n\\n      case HostRoot:\\n        return 'Root';\\n\\n      case HostText:\\n        return 'Text';\\n\\n      case LazyComponent:\\n        // Name comes from the type in this case; we don't have a tag.\\n        return getComponentNameFromType(type);\\n\\n      case Mode:\\n        if (type === REACT_STRICT_MODE_TYPE) {\\n          // Don't be less specific than shared/getComponentNameFromType\\n          return 'StrictMode';\\n        }\\n\\n        return 'Mode';\\n\\n      case OffscreenComponent:\\n        return 'Offscreen';\\n\\n      case Profiler:\\n        return 'Profiler';\\n\\n      case ScopeComponent:\\n        return 'Scope';\\n\\n      case SuspenseComponent:\\n        return 'Suspense';\\n\\n      case SuspenseListComponent:\\n        return 'SuspenseList';\\n\\n      case TracingMarkerComponent:\\n        return 'TracingMarker';\\n      // The display name for this tags come from the user-provided type:\\n\\n      case ClassComponent:\\n      case FunctionComponent:\\n      case IncompleteClassComponent:\\n      case IndeterminateComponent:\\n      case MemoComponent:\\n      case SimpleMemoComponent:\\n        if (typeof type === 'function') {\\n          return type.displayName || type.name || null;\\n        }\\n\\n        if (typeof type === 'string') {\\n          return type;\\n        }\\n\\n        break;\\n\\n    }\\n\\n    return null;\\n  }\\n\\n  var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\\n  var current = null;\\n  var isRendering = false;\\n  function getCurrentFiberOwnerNameInDevOrNull() {\\n    {\\n      if (current === null) {\\n        return null;\\n      }\\n\\n      var owner = current._debugOwner;\\n\\n      if (owner !== null && typeof owner !== 'undefined') {\\n        return getComponentNameFromFiber(owner);\\n      }\\n    }\\n\\n    return null;\\n  }\\n\\n  function getCurrentFiberStackInDev() {\\n    {\\n      if (current === null) {\\n        return '';\\n      } // Safe because if current fiber exists, we are reconciling,\\n      // and it is guaranteed to be the work-in-progress version.\\n\\n\\n      return getStackByFiberInDevAndProd(current);\\n    }\\n  }\\n\\n  function resetCurrentFiber() {\\n    {\\n      ReactDebugCurrentFrame.getCurrentStack = null;\\n      current = null;\\n      isRendering = false;\\n    }\\n  }\\n  function setCurrentFiber(fiber) {\\n    {\\n      ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\\n      current = fiber;\\n      isRendering = false;\\n    }\\n  }\\n  function getCurrentFiber() {\\n    {\\n      return current;\\n    }\\n  }\\n  function setIsRendering(rendering) {\\n    {\\n      isRendering = rendering;\\n    }\\n  }\\n\\n  // Flow does not allow string concatenation of most non-string types. To work\\n  // around this limitation, we use an opaque type that can only be obtained by\\n  // passing the value through getToStringValue first.\\n  function toString(value) {\\n    // The coercion safety check is performed in getToStringValue().\\n    // eslint-disable-next-line react-internal/safe-string-coercion\\n    return '' + value;\\n  }\\n  function getToStringValue(value) {\\n    switch (typeof value) {\\n      case 'boolean':\\n      case 'number':\\n      case 'string':\\n      case 'undefined':\\n        return value;\\n\\n      case 'object':\\n        {\\n          checkFormFieldValueStringCoercion(value);\\n        }\\n\\n        return value;\\n\\n      default:\\n        // function, symbol are assigned as empty strings\\n        return '';\\n    }\\n  }\\n\\n  var hasReadOnlyValue = {\\n    button: true,\\n    checkbox: true,\\n    image: true,\\n    hidden: true,\\n    radio: true,\\n    reset: true,\\n    submit: true\\n  };\\n  function checkControlledValueProps(tagName, props) {\\n    {\\n      if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\\n        error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\\n      }\\n\\n      if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\\n        error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\\n      }\\n    }\\n  }\\n\\n  function isCheckable(elem) {\\n    var type = elem.type;\\n    var nodeName = elem.nodeName;\\n    return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\\n  }\\n\\n  function getTracker(node) {\\n    return node._valueTracker;\\n  }\\n\\n  function detachTracker(node) {\\n    node._valueTracker = null;\\n  }\\n\\n  function getValueFromNode(node) {\\n    var value = '';\\n\\n    if (!node) {\\n      return value;\\n    }\\n\\n    if (isCheckable(node)) {\\n      value = node.checked ? 'true' : 'false';\\n    } else {\\n      value = node.value;\\n    }\\n\\n    return value;\\n  }\\n\\n  function trackValueOnNode(node) {\\n    var valueField = isCheckable(node) ? 'checked' : 'value';\\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\\n\\n    {\\n      checkFormFieldValueStringCoercion(node[valueField]);\\n    }\\n\\n    var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail\\n    // and don't track value will cause over reporting of changes,\\n    // but it's better then a hard failure\\n    // (needed for certain tests that spyOn input values and Safari)\\n\\n    if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\\n      return;\\n    }\\n\\n    var get = descriptor.get,\\n        set = descriptor.set;\\n    Object.defineProperty(node, valueField, {\\n      configurable: true,\\n      get: function () {\\n        return get.call(this);\\n      },\\n      set: function (value) {\\n        {\\n          checkFormFieldValueStringCoercion(value);\\n        }\\n\\n        currentValue = '' + value;\\n        set.call(this, value);\\n      }\\n    }); // We could've passed this the first time\\n    // but it triggers a bug in IE11 and Edge 14/15.\\n    // Calling defineProperty() again should be equivalent.\\n    // https://github.com/facebook/react/issues/11768\\n\\n    Object.defineProperty(node, valueField, {\\n      enumerable: descriptor.enumerable\\n    });\\n    var tracker = {\\n      getValue: function () {\\n        return currentValue;\\n      },\\n      setValue: function (value) {\\n        {\\n          checkFormFieldValueStringCoercion(value);\\n        }\\n\\n        currentValue = '' + value;\\n      },\\n      stopTracking: function () {\\n        detachTracker(node);\\n        delete node[valueField];\\n      }\\n    };\\n    return tracker;\\n  }\\n\\n  function track(node) {\\n    if (getTracker(node)) {\\n      return;\\n    } // TODO: Once it's just Fiber we can move this to node._wrapperState\\n\\n\\n    node._valueTracker = trackValueOnNode(node);\\n  }\\n  function updateValueIfChanged(node) {\\n    if (!node) {\\n      return false;\\n    }\\n\\n    var tracker = getTracker(node); // if there is no tracker at this point it's unlikely\\n    // that trying again will succeed\\n\\n    if (!tracker) {\\n      return true;\\n    }\\n\\n    var lastValue = tracker.getValue();\\n    var nextValue = getValueFromNode(node);\\n\\n    if (nextValue !== lastValue) {\\n      tracker.setValue(nextValue);\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  function getActiveElement(doc) {\\n    doc = doc || (typeof document !== 'undefined' ? document : undefined);\\n\\n    if (typeof doc === 'undefined') {\\n      return null;\\n    }\\n\\n    try {\\n      return doc.activeElement || doc.body;\\n    } catch (e) {\\n      return doc.body;\\n    }\\n  }\\n\\n  var didWarnValueDefaultValue = false;\\n  var didWarnCheckedDefaultChecked = false;\\n  var didWarnControlledToUncontrolled = false;\\n  var didWarnUncontrolledToControlled = false;\\n\\n  function isControlled(props) {\\n    var usesChecked = props.type === 'checkbox' || props.type === 'radio';\\n    return usesChecked ? props.checked != null : props.value != null;\\n  }\\n  /**\\n   * Implements an <input> host component that allows setting these optional\\n   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\\n   *\\n   * If `checked` or `value` are not supplied (or null/undefined), user actions\\n   * that affect the checked state or value will trigger updates to the element.\\n   *\\n   * If they are supplied (and not null/undefined), the rendered element will not\\n   * trigger updates to the element. Instead, the props must change in order for\\n   * the rendered element to be updated.\\n   *\\n   * The rendered element will be initialized as unchecked (or `defaultChecked`)\\n   * with an empty value (or `defaultValue`).\\n   *\\n   * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\\n   */\\n\\n\\n  function getHostProps(element, props) {\\n    var node = element;\\n    var checked = props.checked;\\n    var hostProps = assign({}, props, {\\n      defaultChecked: undefined,\\n      defaultValue: undefined,\\n      value: undefined,\\n      checked: checked != null ? checked : node._wrapperState.initialChecked\\n    });\\n    return hostProps;\\n  }\\n  function initWrapperState(element, props) {\\n    {\\n      checkControlledValueProps('input', props);\\n\\n      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\\n        error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);\\n\\n        didWarnCheckedDefaultChecked = true;\\n      }\\n\\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\\n        error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);\\n\\n        didWarnValueDefaultValue = true;\\n      }\\n    }\\n\\n    var node = element;\\n    var defaultValue = props.defaultValue == null ? '' : props.defaultValue;\\n    node._wrapperState = {\\n      initialChecked: props.checked != null ? props.checked : props.defaultChecked,\\n      initialValue: getToStringValue(props.value != null ? props.value : defaultValue),\\n      controlled: isControlled(props)\\n    };\\n  }\\n  function updateChecked(element, props) {\\n    var node = element;\\n    var checked = props.checked;\\n\\n    if (checked != null) {\\n      setValueForProperty(node, 'checked', checked, false);\\n    }\\n  }\\n  function updateWrapper(element, props) {\\n    var node = element;\\n\\n    {\\n      var controlled = isControlled(props);\\n\\n      if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {\\n        error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\\n\\n        didWarnUncontrolledToControlled = true;\\n      }\\n\\n      if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {\\n        error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');\\n\\n        didWarnControlledToUncontrolled = true;\\n      }\\n    }\\n\\n    updateChecked(element, props);\\n    var value = getToStringValue(props.value);\\n    var type = props.type;\\n\\n    if (value != null) {\\n      if (type === 'number') {\\n        if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.\\n        // eslint-disable-next-line\\n        node.value != value) {\\n          node.value = toString(value);\\n        }\\n      } else if (node.value !== toString(value)) {\\n        node.value = toString(value);\\n      }\\n    } else if (type === 'submit' || type === 'reset') {\\n      // Submit/reset inputs need the attribute removed completely to avoid\\n      // blank-text buttons.\\n      node.removeAttribute('value');\\n      return;\\n    }\\n\\n    {\\n      // When syncing the value attribute, the value comes from a cascade of\\n      // properties:\\n      //  1. The value React property\\n      //  2. The defaultValue React property\\n      //  3. Otherwise there should be no change\\n      if (props.hasOwnProperty('value')) {\\n        setDefaultValue(node, props.type, value);\\n      } else if (props.hasOwnProperty('defaultValue')) {\\n        setDefaultValue(node, props.type, getToStringValue(props.defaultValue));\\n      }\\n    }\\n\\n    {\\n      // When syncing the checked attribute, it only changes when it needs\\n      // to be removed, such as transitioning from a checkbox into a text input\\n      if (props.checked == null && props.defaultChecked != null) {\\n        node.defaultChecked = !!props.defaultChecked;\\n      }\\n    }\\n  }\\n  function postMountWrapper(element, props, isHydrating) {\\n    var node = element; // Do not assign value if it is already set. This prevents user text input\\n    // from being lost during SSR hydration.\\n\\n    if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {\\n      var type = props.type;\\n      var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the\\n      // default value provided by the browser. See: #12872\\n\\n      if (isButton && (props.value === undefined || props.value === null)) {\\n        return;\\n      }\\n\\n      var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input\\n      // from being lost during SSR hydration.\\n\\n      if (!isHydrating) {\\n        {\\n          // When syncing the value attribute, the value property should use\\n          // the wrapperState._initialValue property. This uses:\\n          //\\n          //   1. The value React property when present\\n          //   2. The defaultValue React property when present\\n          //   3. An empty string\\n          if (initialValue !== node.value) {\\n            node.value = initialValue;\\n          }\\n        }\\n      }\\n\\n      {\\n        // Otherwise, the value attribute is synchronized to the property,\\n        // so we assign defaultValue to the same thing as the value property\\n        // assignment step above.\\n        node.defaultValue = initialValue;\\n      }\\n    } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\\n    // this is needed to work around a chrome bug where setting defaultChecked\\n    // will sometimes influence the value of checked (even after detachment).\\n    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\\n    // We need to temporarily unset name to avoid disrupting radio button groups.\\n\\n\\n    var name = node.name;\\n\\n    if (name !== '') {\\n      node.name = '';\\n    }\\n\\n    {\\n      // When syncing the checked attribute, both the checked property and\\n      // attribute are assigned at the same time using defaultChecked. This uses:\\n      //\\n      //   1. The checked React property when present\\n      //   2. The defaultChecked React property when present\\n      //   3. Otherwise, false\\n      node.defaultChecked = !node.defaultChecked;\\n      node.defaultChecked = !!node._wrapperState.initialChecked;\\n    }\\n\\n    if (name !== '') {\\n      node.name = name;\\n    }\\n  }\\n  function restoreControlledState(element, props) {\\n    var node = element;\\n    updateWrapper(node, props);\\n    updateNamedCousins(node, props);\\n  }\\n\\n  function updateNamedCousins(rootNode, props) {\\n    var name = props.name;\\n\\n    if (props.type === 'radio' && name != null) {\\n      var queryRoot = rootNode;\\n\\n      while (queryRoot.parentNode) {\\n        queryRoot = queryRoot.parentNode;\\n      } // If `rootNode.form` was non-null, then we could try `form.elements`,\\n      // but that sometimes behaves strangely in IE8. We could also try using\\n      // `form.getElementsByName`, but that will only return direct children\\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\\n      // the input might not even be in a form. It might not even be in the\\n      // document. Let's just use the local `querySelectorAll` to ensure we don't\\n      // miss anything.\\n\\n\\n      {\\n        checkAttributeStringCoercion(name, 'name');\\n      }\\n\\n      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\\\"radio\\\"]');\\n\\n      for (var i = 0; i < group.length; i++) {\\n        var otherNode = group[i];\\n\\n        if (otherNode === rootNode || otherNode.form !== rootNode.form) {\\n          continue;\\n        } // This will throw if radio buttons rendered by different copies of React\\n        // and the same name are rendered into the same form (same as #1939).\\n        // That's probably okay; we don't support it just as we don't support\\n        // mixing React radio buttons with non-React ones.\\n\\n\\n        var otherProps = getFiberCurrentPropsFromNode(otherNode);\\n\\n        if (!otherProps) {\\n          throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');\\n        } // We need update the tracked value on the named cousin since the value\\n        // was changed but the input saw no event or value set\\n\\n\\n        updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that\\n        // was previously checked to update will cause it to be come re-checked\\n        // as appropriate.\\n\\n        updateWrapper(otherNode, otherProps);\\n      }\\n    }\\n  } // In Chrome, assigning defaultValue to certain input types triggers input validation.\\n  // For number inputs, the display value loses trailing decimal points. For email inputs,\\n  // Chrome raises \\\"The specified value <x> is not a valid email address\\\".\\n  //\\n  // Here we check to see if the defaultValue has actually changed, avoiding these problems\\n  // when the user is inputting text\\n  //\\n  // https://github.com/facebook/react/issues/7253\\n\\n\\n  function setDefaultValue(node, type, value) {\\n    if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js\\n    type !== 'number' || getActiveElement(node.ownerDocument) !== node) {\\n      if (value == null) {\\n        node.defaultValue = toString(node._wrapperState.initialValue);\\n      } else if (node.defaultValue !== toString(value)) {\\n        node.defaultValue = toString(value);\\n      }\\n    }\\n  }\\n\\n  var didWarnSelectedSetOnOption = false;\\n  var didWarnInvalidChild = false;\\n  var didWarnInvalidInnerHTML = false;\\n  /**\\n   * Implements an <option> host component that warns when `selected` is set.\\n   */\\n\\n  function validateProps(element, props) {\\n    {\\n      // If a value is not provided, then the children must be simple.\\n      if (props.value == null) {\\n        if (typeof props.children === 'object' && props.children !== null) {\\n          React.Children.forEach(props.children, function (child) {\\n            if (child == null) {\\n              return;\\n            }\\n\\n            if (typeof child === 'string' || typeof child === 'number') {\\n              return;\\n            }\\n\\n            if (!didWarnInvalidChild) {\\n              didWarnInvalidChild = true;\\n\\n              error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\\n            }\\n          });\\n        } else if (props.dangerouslySetInnerHTML != null) {\\n          if (!didWarnInvalidInnerHTML) {\\n            didWarnInvalidInnerHTML = true;\\n\\n            error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\\n          }\\n        }\\n      } // TODO: Remove support for `selected` in <option>.\\n\\n\\n      if (props.selected != null && !didWarnSelectedSetOnOption) {\\n        error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\\n\\n        didWarnSelectedSetOnOption = true;\\n      }\\n    }\\n  }\\n  function postMountWrapper$1(element, props) {\\n    // value=\\\"\\\" should make a value attribute (#6219)\\n    if (props.value != null) {\\n      element.setAttribute('value', toString(getToStringValue(props.value)));\\n    }\\n  }\\n\\n  var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\\n\\n  function isArray(a) {\\n    return isArrayImpl(a);\\n  }\\n\\n  var didWarnValueDefaultValue$1;\\n\\n  {\\n    didWarnValueDefaultValue$1 = false;\\n  }\\n\\n  function getDeclarationErrorAddendum() {\\n    var ownerName = getCurrentFiberOwnerNameInDevOrNull();\\n\\n    if (ownerName) {\\n      return '\\\\n\\\\nCheck the render method of `' + ownerName + '`.';\\n    }\\n\\n    return '';\\n  }\\n\\n  var valuePropNames = ['value', 'defaultValue'];\\n  /**\\n   * Validation function for `value` and `defaultValue`.\\n   */\\n\\n  function checkSelectPropTypes(props) {\\n    {\\n      checkControlledValueProps('select', props);\\n\\n      for (var i = 0; i < valuePropNames.length; i++) {\\n        var propName = valuePropNames[i];\\n\\n        if (props[propName] == null) {\\n          continue;\\n        }\\n\\n        var propNameIsArray = isArray(props[propName]);\\n\\n        if (props.multiple && !propNameIsArray) {\\n          error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());\\n        } else if (!props.multiple && propNameIsArray) {\\n          error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());\\n        }\\n      }\\n    }\\n  }\\n\\n  function updateOptions(node, multiple, propValue, setDefaultSelected) {\\n    var options = node.options;\\n\\n    if (multiple) {\\n      var selectedValues = propValue;\\n      var selectedValue = {};\\n\\n      for (var i = 0; i < selectedValues.length; i++) {\\n        // Prefix to avoid chaos with special keys.\\n        selectedValue['$' + selectedValues[i]] = true;\\n      }\\n\\n      for (var _i = 0; _i < options.length; _i++) {\\n        var selected = selectedValue.hasOwnProperty('$' + options[_i].value);\\n\\n        if (options[_i].selected !== selected) {\\n          options[_i].selected = selected;\\n        }\\n\\n        if (selected && setDefaultSelected) {\\n          options[_i].defaultSelected = true;\\n        }\\n      }\\n    } else {\\n      // Do not set `select.value` as exact behavior isn't consistent across all\\n      // browsers for all cases.\\n      var _selectedValue = toString(getToStringValue(propValue));\\n\\n      var defaultSelected = null;\\n\\n      for (var _i2 = 0; _i2 < options.length; _i2++) {\\n        if (options[_i2].value === _selectedValue) {\\n          options[_i2].selected = true;\\n\\n          if (setDefaultSelected) {\\n            options[_i2].defaultSelected = true;\\n          }\\n\\n          return;\\n        }\\n\\n        if (defaultSelected === null && !options[_i2].disabled) {\\n          defaultSelected = options[_i2];\\n        }\\n      }\\n\\n      if (defaultSelected !== null) {\\n        defaultSelected.selected = true;\\n      }\\n    }\\n  }\\n  /**\\n   * Implements a <select> host component that allows optionally setting the\\n   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\\n   * stringable. If `multiple` is true, the prop must be an array of stringables.\\n   *\\n   * If `value` is not supplied (or null/undefined), user actions that change the\\n   * selected option will trigger updates to the rendered options.\\n   *\\n   * If it is supplied (and not null/undefined), the rendered options will not\\n   * update in response to user actions. Instead, the `value` prop must change in\\n   * order for the rendered options to update.\\n   *\\n   * If `defaultValue` is provided, any options with the supplied values will be\\n   * selected.\\n   */\\n\\n\\n  function getHostProps$1(element, props) {\\n    return assign({}, props, {\\n      value: undefined\\n    });\\n  }\\n  function initWrapperState$1(element, props) {\\n    var node = element;\\n\\n    {\\n      checkSelectPropTypes(props);\\n    }\\n\\n    node._wrapperState = {\\n      wasMultiple: !!props.multiple\\n    };\\n\\n    {\\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {\\n        error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\\n\\n        didWarnValueDefaultValue$1 = true;\\n      }\\n    }\\n  }\\n  function postMountWrapper$2(element, props) {\\n    var node = element;\\n    node.multiple = !!props.multiple;\\n    var value = props.value;\\n\\n    if (value != null) {\\n      updateOptions(node, !!props.multiple, value, false);\\n    } else if (props.defaultValue != null) {\\n      updateOptions(node, !!props.multiple, props.defaultValue, true);\\n    }\\n  }\\n  function postUpdateWrapper(element, props) {\\n    var node = element;\\n    var wasMultiple = node._wrapperState.wasMultiple;\\n    node._wrapperState.wasMultiple = !!props.multiple;\\n    var value = props.value;\\n\\n    if (value != null) {\\n      updateOptions(node, !!props.multiple, value, false);\\n    } else if (wasMultiple !== !!props.multiple) {\\n      // For simplicity, reapply `defaultValue` if `multiple` is toggled.\\n      if (props.defaultValue != null) {\\n        updateOptions(node, !!props.multiple, props.defaultValue, true);\\n      } else {\\n        // Revert the select back to its default unselected state.\\n        updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);\\n      }\\n    }\\n  }\\n  function restoreControlledState$1(element, props) {\\n    var node = element;\\n    var value = props.value;\\n\\n    if (value != null) {\\n      updateOptions(node, !!props.multiple, value, false);\\n    }\\n  }\\n\\n  var didWarnValDefaultVal = false;\\n\\n  /**\\n   * Implements a <textarea> host component that allows setting `value`, and\\n   * `defaultValue`. This differs from the traditional DOM API because value is\\n   * usually set as PCDATA children.\\n   *\\n   * If `value` is not supplied (or null/undefined), user actions that affect the\\n   * value will trigger updates to the element.\\n   *\\n   * If `value` is supplied (and not null/undefined), the rendered element will\\n   * not trigger updates to the element. Instead, the `value` prop must change in\\n   * order for the rendered element to be updated.\\n   *\\n   * The rendered element will be initialized with an empty value, the prop\\n   * `defaultValue` if specified, or the children content (deprecated).\\n   */\\n  function getHostProps$2(element, props) {\\n    var node = element;\\n\\n    if (props.dangerouslySetInnerHTML != null) {\\n      throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');\\n    } // Always set children to the same thing. In IE9, the selection range will\\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent\\n    // to only set the value if/when the value differs from the node value (which would\\n    // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\\n    // solution. The value can be a boolean or object so that's why it's forced\\n    // to be a string.\\n\\n\\n    var hostProps = assign({}, props, {\\n      value: undefined,\\n      defaultValue: undefined,\\n      children: toString(node._wrapperState.initialValue)\\n    });\\n\\n    return hostProps;\\n  }\\n  function initWrapperState$2(element, props) {\\n    var node = element;\\n\\n    {\\n      checkControlledValueProps('textarea', props);\\n\\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\\n        error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');\\n\\n        didWarnValDefaultVal = true;\\n      }\\n    }\\n\\n    var initialValue = props.value; // Only bother fetching default value if we're going to use it\\n\\n    if (initialValue == null) {\\n      var children = props.children,\\n          defaultValue = props.defaultValue;\\n\\n      if (children != null) {\\n        {\\n          error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\\n        }\\n\\n        {\\n          if (defaultValue != null) {\\n            throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');\\n          }\\n\\n          if (isArray(children)) {\\n            if (children.length > 1) {\\n              throw new Error('<textarea> can only have at most one child.');\\n            }\\n\\n            children = children[0];\\n          }\\n\\n          defaultValue = children;\\n        }\\n      }\\n\\n      if (defaultValue == null) {\\n        defaultValue = '';\\n      }\\n\\n      initialValue = defaultValue;\\n    }\\n\\n    node._wrapperState = {\\n      initialValue: getToStringValue(initialValue)\\n    };\\n  }\\n  function updateWrapper$1(element, props) {\\n    var node = element;\\n    var value = getToStringValue(props.value);\\n    var defaultValue = getToStringValue(props.defaultValue);\\n\\n    if (value != null) {\\n      // Cast `value` to a string to ensure the value is set correctly. While\\n      // browsers typically do this as necessary, jsdom doesn't.\\n      var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed\\n\\n      if (newValue !== node.value) {\\n        node.value = newValue;\\n      }\\n\\n      if (props.defaultValue == null && node.defaultValue !== newValue) {\\n        node.defaultValue = newValue;\\n      }\\n    }\\n\\n    if (defaultValue != null) {\\n      node.defaultValue = toString(defaultValue);\\n    }\\n  }\\n  function postMountWrapper$3(element, props) {\\n    var node = element; // This is in postMount because we need access to the DOM node, which is not\\n    // available until after the component has mounted.\\n\\n    var textContent = node.textContent; // Only set node.value if textContent is equal to the expected\\n    // initial value. In IE10/IE11 there is a bug where the placeholder attribute\\n    // will populate textContent as well.\\n    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\\n\\n    if (textContent === node._wrapperState.initialValue) {\\n      if (textContent !== '' && textContent !== null) {\\n        node.value = textContent;\\n      }\\n    }\\n  }\\n  function restoreControlledState$2(element, props) {\\n    // DOM component is still mounted; update\\n    updateWrapper$1(element, props);\\n  }\\n\\n  var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\\n  var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\\n  var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.\\n\\n  function getIntrinsicNamespace(type) {\\n    switch (type) {\\n      case 'svg':\\n        return SVG_NAMESPACE;\\n\\n      case 'math':\\n        return MATH_NAMESPACE;\\n\\n      default:\\n        return HTML_NAMESPACE;\\n    }\\n  }\\n  function getChildNamespace(parentNamespace, type) {\\n    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {\\n      // No (or default) parent namespace: potential entry point.\\n      return getIntrinsicNamespace(type);\\n    }\\n\\n    if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {\\n      // We're leaving SVG.\\n      return HTML_NAMESPACE;\\n    } // By default, pass namespace below.\\n\\n\\n    return parentNamespace;\\n  }\\n\\n  /* globals MSApp */\\n\\n  /**\\n   * Create a function which has 'unsafe' privileges (required by windows8 apps)\\n   */\\n  var createMicrosoftUnsafeLocalFunction = function (func) {\\n    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\\n      return function (arg0, arg1, arg2, arg3) {\\n        MSApp.execUnsafeLocalFunction(function () {\\n          return func(arg0, arg1, arg2, arg3);\\n        });\\n      };\\n    } else {\\n      return func;\\n    }\\n  };\\n\\n  var reusableSVGContainer;\\n  /**\\n   * Set the innerHTML property of a node\\n   *\\n   * @param {DOMElement} node\\n   * @param {string} html\\n   * @internal\\n   */\\n\\n  var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {\\n    if (node.namespaceURI === SVG_NAMESPACE) {\\n\\n      if (!('innerHTML' in node)) {\\n        // IE does not have innerHTML for SVG nodes, so instead we inject the\\n        // new markup in a temp node and then move the child nodes across into\\n        // the target node\\n        reusableSVGContainer = reusableSVGContainer || document.createElement('div');\\n        reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';\\n        var svgNode = reusableSVGContainer.firstChild;\\n\\n        while (node.firstChild) {\\n          node.removeChild(node.firstChild);\\n        }\\n\\n        while (svgNode.firstChild) {\\n          node.appendChild(svgNode.firstChild);\\n        }\\n\\n        return;\\n      }\\n    }\\n\\n    node.innerHTML = html;\\n  });\\n\\n  /**\\n   * HTML nodeType values that represent the type of the node\\n   */\\n  var ELEMENT_NODE = 1;\\n  var TEXT_NODE = 3;\\n  var COMMENT_NODE = 8;\\n  var DOCUMENT_NODE = 9;\\n  var DOCUMENT_FRAGMENT_NODE = 11;\\n\\n  /**\\n   * Set the textContent property of a node. For text updates, it's faster\\n   * to set the `nodeValue` of the Text node directly instead of using\\n   * `.textContent` which will remove the existing node and create a new one.\\n   *\\n   * @param {DOMElement} node\\n   * @param {string} text\\n   * @internal\\n   */\\n\\n  var setTextContent = function (node, text) {\\n    if (text) {\\n      var firstChild = node.firstChild;\\n\\n      if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {\\n        firstChild.nodeValue = text;\\n        return;\\n      }\\n    }\\n\\n    node.textContent = text;\\n  };\\n\\n  // List derived from Gecko source code:\\n  // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js\\n  var shorthandToLonghand = {\\n    animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],\\n    background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],\\n    backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],\\n    border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],\\n    borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],\\n    borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],\\n    borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],\\n    borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],\\n    borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],\\n    borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],\\n    borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],\\n    borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],\\n    borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],\\n    borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],\\n    borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],\\n    borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],\\n    borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],\\n    columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],\\n    columns: ['columnCount', 'columnWidth'],\\n    flex: ['flexBasis', 'flexGrow', 'flexShrink'],\\n    flexFlow: ['flexDirection', 'flexWrap'],\\n    font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],\\n    fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],\\n    gap: ['columnGap', 'rowGap'],\\n    grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],\\n    gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],\\n    gridColumn: ['gridColumnEnd', 'gridColumnStart'],\\n    gridColumnGap: ['columnGap'],\\n    gridGap: ['columnGap', 'rowGap'],\\n    gridRow: ['gridRowEnd', 'gridRowStart'],\\n    gridRowGap: ['rowGap'],\\n    gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],\\n    listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],\\n    margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],\\n    marker: ['markerEnd', 'markerMid', 'markerStart'],\\n    mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],\\n    maskPosition: ['maskPositionX', 'maskPositionY'],\\n    outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],\\n    overflow: ['overflowX', 'overflowY'],\\n    padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],\\n    placeContent: ['alignContent', 'justifyContent'],\\n    placeItems: ['alignItems', 'justifyItems'],\\n    placeSelf: ['alignSelf', 'justifySelf'],\\n    textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],\\n    textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],\\n    transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],\\n    wordWrap: ['overflowWrap']\\n  };\\n\\n  /**\\n   * CSS properties which accept numbers but are not in units of \\\"px\\\".\\n   */\\n  var isUnitlessNumber = {\\n    animationIterationCount: true,\\n    aspectRatio: true,\\n    borderImageOutset: true,\\n    borderImageSlice: true,\\n    borderImageWidth: true,\\n    boxFlex: true,\\n    boxFlexGroup: true,\\n    boxOrdinalGroup: true,\\n    columnCount: true,\\n    columns: true,\\n    flex: true,\\n    flexGrow: true,\\n    flexPositive: true,\\n    flexShrink: true,\\n    flexNegative: true,\\n    flexOrder: true,\\n    gridArea: true,\\n    gridRow: true,\\n    gridRowEnd: true,\\n    gridRowSpan: true,\\n    gridRowStart: true,\\n    gridColumn: true,\\n    gridColumnEnd: true,\\n    gridColumnSpan: true,\\n    gridColumnStart: true,\\n    fontWeight: true,\\n    lineClamp: true,\\n    lineHeight: true,\\n    opacity: true,\\n    order: true,\\n    orphans: true,\\n    tabSize: true,\\n    widows: true,\\n    zIndex: true,\\n    zoom: true,\\n    // SVG-related properties\\n    fillOpacity: true,\\n    floodOpacity: true,\\n    stopOpacity: true,\\n    strokeDasharray: true,\\n    strokeDashoffset: true,\\n    strokeMiterlimit: true,\\n    strokeOpacity: true,\\n    strokeWidth: true\\n  };\\n  /**\\n   * @param {string} prefix vendor-specific prefix, eg: Webkit\\n   * @param {string} key style name, eg: transitionDuration\\n   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\\n   * WebkitTransitionDuration\\n   */\\n\\n  function prefixKey(prefix, key) {\\n    return prefix + key.charAt(0).toUpperCase() + key.substring(1);\\n  }\\n  /**\\n   * Support style names that may come passed in prefixed by adding permutations\\n   * of vendor prefixes.\\n   */\\n\\n\\n  var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\\n  // infinite loop, because it iterates over the newly added props too.\\n\\n  Object.keys(isUnitlessNumber).forEach(function (prop) {\\n    prefixes.forEach(function (prefix) {\\n      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\\n    });\\n  });\\n\\n  /**\\n   * Convert a value into the proper css writable value. The style name `name`\\n   * should be logical (no hyphens), as specified\\n   * in `CSSProperty.isUnitlessNumber`.\\n   *\\n   * @param {string} name CSS property name such as `topMargin`.\\n   * @param {*} value CSS property value such as `10px`.\\n   * @return {string} Normalized style value with dimensions applied.\\n   */\\n\\n  function dangerousStyleValue(name, value, isCustomProperty) {\\n    // Note that we've removed escapeTextForBrowser() calls here since the\\n    // whole string will be escaped when the attribute is injected into\\n    // the markup. If you provide unsafe user data here they can inject\\n    // arbitrary CSS which may be problematic (I couldn't repro this):\\n    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\\n    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\\n    // This is not an XSS hole but instead a potential CSS injection issue\\n    // which has lead to a greater discussion about how we're going to\\n    // trust URLs moving forward. See #2115901\\n    var isEmpty = value == null || typeof value === 'boolean' || value === '';\\n\\n    if (isEmpty) {\\n      return '';\\n    }\\n\\n    if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\\n      return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\\n    }\\n\\n    {\\n      checkCSSPropertyStringCoercion(value, name);\\n    }\\n\\n    return ('' + value).trim();\\n  }\\n\\n  var uppercasePattern = /([A-Z])/g;\\n  var msPattern = /^ms-/;\\n  /**\\n   * Hyphenates a camelcased CSS property name, for example:\\n   *\\n   *   > hyphenateStyleName('backgroundColor')\\n   *   < \\\"background-color\\\"\\n   *   > hyphenateStyleName('MozTransition')\\n   *   < \\\"-moz-transition\\\"\\n   *   > hyphenateStyleName('msTransition')\\n   *   < \\\"-ms-transition\\\"\\n   *\\n   * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\\n   * is converted to `-ms-`.\\n   */\\n\\n  function hyphenateStyleName(name) {\\n    return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');\\n  }\\n\\n  var warnValidStyle = function () {};\\n\\n  {\\n    // 'msTransform' is correct, but the other prefixes should be capitalized\\n    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\\n    var msPattern$1 = /^-ms-/;\\n    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\\n\\n    var badStyleValueWithSemicolonPattern = /;\\\\s*$/;\\n    var warnedStyleNames = {};\\n    var warnedStyleValues = {};\\n    var warnedForNaNValue = false;\\n    var warnedForInfinityValue = false;\\n\\n    var camelize = function (string) {\\n      return string.replace(hyphenPattern, function (_, character) {\\n        return character.toUpperCase();\\n      });\\n    };\\n\\n    var warnHyphenatedStyleName = function (name) {\\n      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\\n        return;\\n      }\\n\\n      warnedStyleNames[name] = true;\\n\\n      error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests\\n      // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\\n      // is converted to lowercase `ms`.\\n      camelize(name.replace(msPattern$1, 'ms-')));\\n    };\\n\\n    var warnBadVendoredStyleName = function (name) {\\n      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\\n        return;\\n      }\\n\\n      warnedStyleNames[name] = true;\\n\\n      error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));\\n    };\\n\\n    var warnStyleValueWithSemicolon = function (name, value) {\\n      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\\n        return;\\n      }\\n\\n      warnedStyleValues[value] = true;\\n\\n      error(\\\"Style property values shouldn't contain a semicolon. \\\" + 'Try \\\"%s: %s\\\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));\\n    };\\n\\n    var warnStyleValueIsNaN = function (name, value) {\\n      if (warnedForNaNValue) {\\n        return;\\n      }\\n\\n      warnedForNaNValue = true;\\n\\n      error('`NaN` is an invalid value for the `%s` css style property.', name);\\n    };\\n\\n    var warnStyleValueIsInfinity = function (name, value) {\\n      if (warnedForInfinityValue) {\\n        return;\\n      }\\n\\n      warnedForInfinityValue = true;\\n\\n      error('`Infinity` is an invalid value for the `%s` css style property.', name);\\n    };\\n\\n    warnValidStyle = function (name, value) {\\n      if (name.indexOf('-') > -1) {\\n        warnHyphenatedStyleName(name);\\n      } else if (badVendoredStyleNamePattern.test(name)) {\\n        warnBadVendoredStyleName(name);\\n      } else if (badStyleValueWithSemicolonPattern.test(value)) {\\n        warnStyleValueWithSemicolon(name, value);\\n      }\\n\\n      if (typeof value === 'number') {\\n        if (isNaN(value)) {\\n          warnStyleValueIsNaN(name, value);\\n        } else if (!isFinite(value)) {\\n          warnStyleValueIsInfinity(name, value);\\n        }\\n      }\\n    };\\n  }\\n\\n  var warnValidStyle$1 = warnValidStyle;\\n\\n  /**\\n   * Operations for dealing with CSS properties.\\n   */\\n\\n  /**\\n   * This creates a string that is expected to be equivalent to the style\\n   * attribute generated by server-side rendering. It by-passes warnings and\\n   * security checks so it's not safe to use this value for anything other than\\n   * comparison. It is only used in DEV for SSR validation.\\n   */\\n\\n  function createDangerousStringForStyles(styles) {\\n    {\\n      var serialized = '';\\n      var delimiter = '';\\n\\n      for (var styleName in styles) {\\n        if (!styles.hasOwnProperty(styleName)) {\\n          continue;\\n        }\\n\\n        var styleValue = styles[styleName];\\n\\n        if (styleValue != null) {\\n          var isCustomProperty = styleName.indexOf('--') === 0;\\n          serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';\\n          serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);\\n          delimiter = ';';\\n        }\\n      }\\n\\n      return serialized || null;\\n    }\\n  }\\n  /**\\n   * Sets the value for multiple styles on a node.  If a value is specified as\\n   * '' (empty string), the corresponding style property will be unset.\\n   *\\n   * @param {DOMElement} node\\n   * @param {object} styles\\n   */\\n\\n  function setValueForStyles(node, styles) {\\n    var style = node.style;\\n\\n    for (var styleName in styles) {\\n      if (!styles.hasOwnProperty(styleName)) {\\n        continue;\\n      }\\n\\n      var isCustomProperty = styleName.indexOf('--') === 0;\\n\\n      {\\n        if (!isCustomProperty) {\\n          warnValidStyle$1(styleName, styles[styleName]);\\n        }\\n      }\\n\\n      var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);\\n\\n      if (styleName === 'float') {\\n        styleName = 'cssFloat';\\n      }\\n\\n      if (isCustomProperty) {\\n        style.setProperty(styleName, styleValue);\\n      } else {\\n        style[styleName] = styleValue;\\n      }\\n    }\\n  }\\n\\n  function isValueEmpty(value) {\\n    return value == null || typeof value === 'boolean' || value === '';\\n  }\\n  /**\\n   * Given {color: 'red', overflow: 'hidden'} returns {\\n   *   color: 'color',\\n   *   overflowX: 'overflow',\\n   *   overflowY: 'overflow',\\n   * }. This can be read as \\\"the overflowY property was set by the overflow\\n   * shorthand\\\". That is, the values are the property that each was derived from.\\n   */\\n\\n\\n  function expandShorthandMap(styles) {\\n    var expanded = {};\\n\\n    for (var key in styles) {\\n      var longhands = shorthandToLonghand[key] || [key];\\n\\n      for (var i = 0; i < longhands.length; i++) {\\n        expanded[longhands[i]] = key;\\n      }\\n    }\\n\\n    return expanded;\\n  }\\n  /**\\n   * When mixing shorthand and longhand property names, we warn during updates if\\n   * we expect an incorrect result to occur. In particular, we warn for:\\n   *\\n   * Updating a shorthand property (longhand gets overwritten):\\n   *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}\\n   *   becomes .style.font = 'baz'\\n   * Removing a shorthand property (longhand gets lost too):\\n   *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}\\n   *   becomes .style.font = ''\\n   * Removing a longhand property (should revert to shorthand; doesn't):\\n   *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}\\n   *   becomes .style.fontVariant = ''\\n   */\\n\\n\\n  function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {\\n    {\\n      if (!nextStyles) {\\n        return;\\n      }\\n\\n      var expandedUpdates = expandShorthandMap(styleUpdates);\\n      var expandedStyles = expandShorthandMap(nextStyles);\\n      var warnedAbout = {};\\n\\n      for (var key in expandedUpdates) {\\n        var originalKey = expandedUpdates[key];\\n        var correctOriginalKey = expandedStyles[key];\\n\\n        if (correctOriginalKey && originalKey !== correctOriginalKey) {\\n          var warningKey = originalKey + ',' + correctOriginalKey;\\n\\n          if (warnedAbout[warningKey]) {\\n            continue;\\n          }\\n\\n          warnedAbout[warningKey] = true;\\n\\n          error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + \\\"avoid this, don't mix shorthand and non-shorthand properties \\\" + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);\\n        }\\n      }\\n    }\\n  }\\n\\n  // For HTML, certain tags should omit their close tag. We keep a list for\\n  // those special-case tags.\\n  var omittedCloseTags = {\\n    area: true,\\n    base: true,\\n    br: true,\\n    col: true,\\n    embed: true,\\n    hr: true,\\n    img: true,\\n    input: true,\\n    keygen: true,\\n    link: true,\\n    meta: true,\\n    param: true,\\n    source: true,\\n    track: true,\\n    wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.\\n\\n  };\\n\\n  // `omittedCloseTags` except that `menuitem` should still have its closing tag.\\n\\n  var voidElementTags = assign({\\n    menuitem: true\\n  }, omittedCloseTags);\\n\\n  var HTML = '__html';\\n\\n  function assertValidProps(tag, props) {\\n    if (!props) {\\n      return;\\n    } // Note the use of `==` which checks for null or undefined.\\n\\n\\n    if (voidElementTags[tag]) {\\n      if (props.children != null || props.dangerouslySetInnerHTML != null) {\\n        throw new Error(tag + \\\" is a void element tag and must neither have `children` nor \\\" + 'use `dangerouslySetInnerHTML`.');\\n      }\\n    }\\n\\n    if (props.dangerouslySetInnerHTML != null) {\\n      if (props.children != null) {\\n        throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\\n      }\\n\\n      if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {\\n        throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');\\n      }\\n    }\\n\\n    {\\n      if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\\n        error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');\\n      }\\n    }\\n\\n    if (props.style != null && typeof props.style !== 'object') {\\n      throw new Error('The `style` prop expects a mapping from style properties to values, ' + \\\"not a string. For example, style={{marginRight: spacing + 'em'}} when \\\" + 'using JSX.');\\n    }\\n  }\\n\\n  function isCustomComponent(tagName, props) {\\n    if (tagName.indexOf('-') === -1) {\\n      return typeof props.is === 'string';\\n    }\\n\\n    switch (tagName) {\\n      // These are reserved SVG and MathML elements.\\n      // We don't mind this list too much because we expect it to never grow.\\n      // The alternative is to track the namespace in a few places which is convoluted.\\n      // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\\n      case 'annotation-xml':\\n      case 'color-profile':\\n      case 'font-face':\\n      case 'font-face-src':\\n      case 'font-face-uri':\\n      case 'font-face-format':\\n      case 'font-face-name':\\n      case 'missing-glyph':\\n        return false;\\n\\n      default:\\n        return true;\\n    }\\n  }\\n\\n  // When adding attributes to the HTML or SVG allowed attribute list, be sure to\\n  // also add them to this module to ensure casing and incorrect name\\n  // warnings.\\n  var possibleStandardNames = {\\n    // HTML\\n    accept: 'accept',\\n    acceptcharset: 'acceptCharset',\\n    'accept-charset': 'acceptCharset',\\n    accesskey: 'accessKey',\\n    action: 'action',\\n    allowfullscreen: 'allowFullScreen',\\n    alt: 'alt',\\n    as: 'as',\\n    async: 'async',\\n    autocapitalize: 'autoCapitalize',\\n    autocomplete: 'autoComplete',\\n    autocorrect: 'autoCorrect',\\n    autofocus: 'autoFocus',\\n    autoplay: 'autoPlay',\\n    autosave: 'autoSave',\\n    capture: 'capture',\\n    cellpadding: 'cellPadding',\\n    cellspacing: 'cellSpacing',\\n    challenge: 'challenge',\\n    charset: 'charSet',\\n    checked: 'checked',\\n    children: 'children',\\n    cite: 'cite',\\n    class: 'className',\\n    classid: 'classID',\\n    classname: 'className',\\n    cols: 'cols',\\n    colspan: 'colSpan',\\n    content: 'content',\\n    contenteditable: 'contentEditable',\\n    contextmenu: 'contextMenu',\\n    controls: 'controls',\\n    controlslist: 'controlsList',\\n    coords: 'coords',\\n    crossorigin: 'crossOrigin',\\n    dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\\n    data: 'data',\\n    datetime: 'dateTime',\\n    default: 'default',\\n    defaultchecked: 'defaultChecked',\\n    defaultvalue: 'defaultValue',\\n    defer: 'defer',\\n    dir: 'dir',\\n    disabled: 'disabled',\\n    disablepictureinpicture: 'disablePictureInPicture',\\n    disableremoteplayback: 'disableRemotePlayback',\\n    download: 'download',\\n    draggable: 'draggable',\\n    enctype: 'encType',\\n    enterkeyhint: 'enterKeyHint',\\n    for: 'htmlFor',\\n    form: 'form',\\n    formmethod: 'formMethod',\\n    formaction: 'formAction',\\n    formenctype: 'formEncType',\\n    formnovalidate: 'formNoValidate',\\n    formtarget: 'formTarget',\\n    frameborder: 'frameBorder',\\n    headers: 'headers',\\n    height: 'height',\\n    hidden: 'hidden',\\n    high: 'high',\\n    href: 'href',\\n    hreflang: 'hrefLang',\\n    htmlfor: 'htmlFor',\\n    httpequiv: 'httpEquiv',\\n    'http-equiv': 'httpEquiv',\\n    icon: 'icon',\\n    id: 'id',\\n    imagesizes: 'imageSizes',\\n    imagesrcset: 'imageSrcSet',\\n    innerhtml: 'innerHTML',\\n    inputmode: 'inputMode',\\n    integrity: 'integrity',\\n    is: 'is',\\n    itemid: 'itemID',\\n    itemprop: 'itemProp',\\n    itemref: 'itemRef',\\n    itemscope: 'itemScope',\\n    itemtype: 'itemType',\\n    keyparams: 'keyParams',\\n    keytype: 'keyType',\\n    kind: 'kind',\\n    label: 'label',\\n    lang: 'lang',\\n    list: 'list',\\n    loop: 'loop',\\n    low: 'low',\\n    manifest: 'manifest',\\n    marginwidth: 'marginWidth',\\n    marginheight: 'marginHeight',\\n    max: 'max',\\n    maxlength: 'maxLength',\\n    media: 'media',\\n    mediagroup: 'mediaGroup',\\n    method: 'method',\\n    min: 'min',\\n    minlength: 'minLength',\\n    multiple: 'multiple',\\n    muted: 'muted',\\n    name: 'name',\\n    nomodule: 'noModule',\\n    nonce: 'nonce',\\n    novalidate: 'noValidate',\\n    open: 'open',\\n    optimum: 'optimum',\\n    pattern: 'pattern',\\n    placeholder: 'placeholder',\\n    playsinline: 'playsInline',\\n    poster: 'poster',\\n    preload: 'preload',\\n    profile: 'profile',\\n    radiogroup: 'radioGroup',\\n    readonly: 'readOnly',\\n    referrerpolicy: 'referrerPolicy',\\n    rel: 'rel',\\n    required: 'required',\\n    reversed: 'reversed',\\n    role: 'role',\\n    rows: 'rows',\\n    rowspan: 'rowSpan',\\n    sandbox: 'sandbox',\\n    scope: 'scope',\\n    scoped: 'scoped',\\n    scrolling: 'scrolling',\\n    seamless: 'seamless',\\n    selected: 'selected',\\n    shape: 'shape',\\n    size: 'size',\\n    sizes: 'sizes',\\n    span: 'span',\\n    spellcheck: 'spellCheck',\\n    src: 'src',\\n    srcdoc: 'srcDoc',\\n    srclang: 'srcLang',\\n    srcset: 'srcSet',\\n    start: 'start',\\n    step: 'step',\\n    style: 'style',\\n    summary: 'summary',\\n    tabindex: 'tabIndex',\\n    target: 'target',\\n    title: 'title',\\n    type: 'type',\\n    usemap: 'useMap',\\n    value: 'value',\\n    width: 'width',\\n    wmode: 'wmode',\\n    wrap: 'wrap',\\n    // SVG\\n    about: 'about',\\n    accentheight: 'accentHeight',\\n    'accent-height': 'accentHeight',\\n    accumulate: 'accumulate',\\n    additive: 'additive',\\n    alignmentbaseline: 'alignmentBaseline',\\n    'alignment-baseline': 'alignmentBaseline',\\n    allowreorder: 'allowReorder',\\n    alphabetic: 'alphabetic',\\n    amplitude: 'amplitude',\\n    arabicform: 'arabicForm',\\n    'arabic-form': 'arabicForm',\\n    ascent: 'ascent',\\n    attributename: 'attributeName',\\n    attributetype: 'attributeType',\\n    autoreverse: 'autoReverse',\\n    azimuth: 'azimuth',\\n    basefrequency: 'baseFrequency',\\n    baselineshift: 'baselineShift',\\n    'baseline-shift': 'baselineShift',\\n    baseprofile: 'baseProfile',\\n    bbox: 'bbox',\\n    begin: 'begin',\\n    bias: 'bias',\\n    by: 'by',\\n    calcmode: 'calcMode',\\n    capheight: 'capHeight',\\n    'cap-height': 'capHeight',\\n    clip: 'clip',\\n    clippath: 'clipPath',\\n    'clip-path': 'clipPath',\\n    clippathunits: 'clipPathUnits',\\n    cliprule: 'clipRule',\\n    'clip-rule': 'clipRule',\\n    color: 'color',\\n    colorinterpolation: 'colorInterpolation',\\n    'color-interpolation': 'colorInterpolation',\\n    colorinterpolationfilters: 'colorInterpolationFilters',\\n    'color-interpolation-filters': 'colorInterpolationFilters',\\n    colorprofile: 'colorProfile',\\n    'color-profile': 'colorProfile',\\n    colorrendering: 'colorRendering',\\n    'color-rendering': 'colorRendering',\\n    contentscripttype: 'contentScriptType',\\n    contentstyletype: 'contentStyleType',\\n    cursor: 'cursor',\\n    cx: 'cx',\\n    cy: 'cy',\\n    d: 'd',\\n    datatype: 'datatype',\\n    decelerate: 'decelerate',\\n    descent: 'descent',\\n    diffuseconstant: 'diffuseConstant',\\n    direction: 'direction',\\n    display: 'display',\\n    divisor: 'divisor',\\n    dominantbaseline: 'dominantBaseline',\\n    'dominant-baseline': 'dominantBaseline',\\n    dur: 'dur',\\n    dx: 'dx',\\n    dy: 'dy',\\n    edgemode: 'edgeMode',\\n    elevation: 'elevation',\\n    enablebackground: 'enableBackground',\\n    'enable-background': 'enableBackground',\\n    end: 'end',\\n    exponent: 'exponent',\\n    externalresourcesrequired: 'externalResourcesRequired',\\n    fill: 'fill',\\n    fillopacity: 'fillOpacity',\\n    'fill-opacity': 'fillOpacity',\\n    fillrule: 'fillRule',\\n    'fill-rule': 'fillRule',\\n    filter: 'filter',\\n    filterres: 'filterRes',\\n    filterunits: 'filterUnits',\\n    floodopacity: 'floodOpacity',\\n    'flood-opacity': 'floodOpacity',\\n    floodcolor: 'floodColor',\\n    'flood-color': 'floodColor',\\n    focusable: 'focusable',\\n    fontfamily: 'fontFamily',\\n    'font-family': 'fontFamily',\\n    fontsize: 'fontSize',\\n    'font-size': 'fontSize',\\n    fontsizeadjust: 'fontSizeAdjust',\\n    'font-size-adjust': 'fontSizeAdjust',\\n    fontstretch: 'fontStretch',\\n    'font-stretch': 'fontStretch',\\n    fontstyle: 'fontStyle',\\n    'font-style': 'fontStyle',\\n    fontvariant: 'fontVariant',\\n    'font-variant': 'fontVariant',\\n    fontweight: 'fontWeight',\\n    'font-weight': 'fontWeight',\\n    format: 'format',\\n    from: 'from',\\n    fx: 'fx',\\n    fy: 'fy',\\n    g1: 'g1',\\n    g2: 'g2',\\n    glyphname: 'glyphName',\\n    'glyph-name': 'glyphName',\\n    glyphorientationhorizontal: 'glyphOrientationHorizontal',\\n    'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\\n    glyphorientationvertical: 'glyphOrientationVertical',\\n    'glyph-orientation-vertical': 'glyphOrientationVertical',\\n    glyphref: 'glyphRef',\\n    gradienttransform: 'gradientTransform',\\n    gradientunits: 'gradientUnits',\\n    hanging: 'hanging',\\n    horizadvx: 'horizAdvX',\\n    'horiz-adv-x': 'horizAdvX',\\n    horizoriginx: 'horizOriginX',\\n    'horiz-origin-x': 'horizOriginX',\\n    ideographic: 'ideographic',\\n    imagerendering: 'imageRendering',\\n    'image-rendering': 'imageRendering',\\n    in2: 'in2',\\n    in: 'in',\\n    inlist: 'inlist',\\n    intercept: 'intercept',\\n    k1: 'k1',\\n    k2: 'k2',\\n    k3: 'k3',\\n    k4: 'k4',\\n    k: 'k',\\n    kernelmatrix: 'kernelMatrix',\\n    kernelunitlength: 'kernelUnitLength',\\n    kerning: 'kerning',\\n    keypoints: 'keyPoints',\\n    keysplines: 'keySplines',\\n    keytimes: 'keyTimes',\\n    lengthadjust: 'lengthAdjust',\\n    letterspacing: 'letterSpacing',\\n    'letter-spacing': 'letterSpacing',\\n    lightingcolor: 'lightingColor',\\n    'lighting-color': 'lightingColor',\\n    limitingconeangle: 'limitingConeAngle',\\n    local: 'local',\\n    markerend: 'markerEnd',\\n    'marker-end': 'markerEnd',\\n    markerheight: 'markerHeight',\\n    markermid: 'markerMid',\\n    'marker-mid': 'markerMid',\\n    markerstart: 'markerStart',\\n    'marker-start': 'markerStart',\\n    markerunits: 'markerUnits',\\n    markerwidth: 'markerWidth',\\n    mask: 'mask',\\n    maskcontentunits: 'maskContentUnits',\\n    maskunits: 'maskUnits',\\n    mathematical: 'mathematical',\\n    mode: 'mode',\\n    numoctaves: 'numOctaves',\\n    offset: 'offset',\\n    opacity: 'opacity',\\n    operator: 'operator',\\n    order: 'order',\\n    orient: 'orient',\\n    orientation: 'orientation',\\n    origin: 'origin',\\n    overflow: 'overflow',\\n    overlineposition: 'overlinePosition',\\n    'overline-position': 'overlinePosition',\\n    overlinethickness: 'overlineThickness',\\n    'overline-thickness': 'overlineThickness',\\n    paintorder: 'paintOrder',\\n    'paint-order': 'paintOrder',\\n    panose1: 'panose1',\\n    'panose-1': 'panose1',\\n    pathlength: 'pathLength',\\n    patterncontentunits: 'patternContentUnits',\\n    patterntransform: 'patternTransform',\\n    patternunits: 'patternUnits',\\n    pointerevents: 'pointerEvents',\\n    'pointer-events': 'pointerEvents',\\n    points: 'points',\\n    pointsatx: 'pointsAtX',\\n    pointsaty: 'pointsAtY',\\n    pointsatz: 'pointsAtZ',\\n    prefix: 'prefix',\\n    preservealpha: 'preserveAlpha',\\n    preserveaspectratio: 'preserveAspectRatio',\\n    primitiveunits: 'primitiveUnits',\\n    property: 'property',\\n    r: 'r',\\n    radius: 'radius',\\n    refx: 'refX',\\n    refy: 'refY',\\n    renderingintent: 'renderingIntent',\\n    'rendering-intent': 'renderingIntent',\\n    repeatcount: 'repeatCount',\\n    repeatdur: 'repeatDur',\\n    requiredextensions: 'requiredExtensions',\\n    requiredfeatures: 'requiredFeatures',\\n    resource: 'resource',\\n    restart: 'restart',\\n    result: 'result',\\n    results: 'results',\\n    rotate: 'rotate',\\n    rx: 'rx',\\n    ry: 'ry',\\n    scale: 'scale',\\n    security: 'security',\\n    seed: 'seed',\\n    shaperendering: 'shapeRendering',\\n    'shape-rendering': 'shapeRendering',\\n    slope: 'slope',\\n    spacing: 'spacing',\\n    specularconstant: 'specularConstant',\\n    specularexponent: 'specularExponent',\\n    speed: 'speed',\\n    spreadmethod: 'spreadMethod',\\n    startoffset: 'startOffset',\\n    stddeviation: 'stdDeviation',\\n    stemh: 'stemh',\\n    stemv: 'stemv',\\n    stitchtiles: 'stitchTiles',\\n    stopcolor: 'stopColor',\\n    'stop-color': 'stopColor',\\n    stopopacity: 'stopOpacity',\\n    'stop-opacity': 'stopOpacity',\\n    strikethroughposition: 'strikethroughPosition',\\n    'strikethrough-position': 'strikethroughPosition',\\n    strikethroughthickness: 'strikethroughThickness',\\n    'strikethrough-thickness': 'strikethroughThickness',\\n    string: 'string',\\n    stroke: 'stroke',\\n    strokedasharray: 'strokeDasharray',\\n    'stroke-dasharray': 'strokeDasharray',\\n    strokedashoffset: 'strokeDashoffset',\\n    'stroke-dashoffset': 'strokeDashoffset',\\n    strokelinecap: 'strokeLinecap',\\n    'stroke-linecap': 'strokeLinecap',\\n    strokelinejoin: 'strokeLinejoin',\\n    'stroke-linejoin': 'strokeLinejoin',\\n    strokemiterlimit: 'strokeMiterlimit',\\n    'stroke-miterlimit': 'strokeMiterlimit',\\n    strokewidth: 'strokeWidth',\\n    'stroke-width': 'strokeWidth',\\n    strokeopacity: 'strokeOpacity',\\n    'stroke-opacity': 'strokeOpacity',\\n    suppresscontenteditablewarning: 'suppressContentEditableWarning',\\n    suppresshydrationwarning: 'suppressHydrationWarning',\\n    surfacescale: 'surfaceScale',\\n    systemlanguage: 'systemLanguage',\\n    tablevalues: 'tableValues',\\n    targetx: 'targetX',\\n    targety: 'targetY',\\n    textanchor: 'textAnchor',\\n    'text-anchor': 'textAnchor',\\n    textdecoration: 'textDecoration',\\n    'text-decoration': 'textDecoration',\\n    textlength: 'textLength',\\n    textrendering: 'textRendering',\\n    'text-rendering': 'textRendering',\\n    to: 'to',\\n    transform: 'transform',\\n    typeof: 'typeof',\\n    u1: 'u1',\\n    u2: 'u2',\\n    underlineposition: 'underlinePosition',\\n    'underline-position': 'underlinePosition',\\n    underlinethickness: 'underlineThickness',\\n    'underline-thickness': 'underlineThickness',\\n    unicode: 'unicode',\\n    unicodebidi: 'unicodeBidi',\\n    'unicode-bidi': 'unicodeBidi',\\n    unicoderange: 'unicodeRange',\\n    'unicode-range': 'unicodeRange',\\n    unitsperem: 'unitsPerEm',\\n    'units-per-em': 'unitsPerEm',\\n    unselectable: 'unselectable',\\n    valphabetic: 'vAlphabetic',\\n    'v-alphabetic': 'vAlphabetic',\\n    values: 'values',\\n    vectoreffect: 'vectorEffect',\\n    'vector-effect': 'vectorEffect',\\n    version: 'version',\\n    vertadvy: 'vertAdvY',\\n    'vert-adv-y': 'vertAdvY',\\n    vertoriginx: 'vertOriginX',\\n    'vert-origin-x': 'vertOriginX',\\n    vertoriginy: 'vertOriginY',\\n    'vert-origin-y': 'vertOriginY',\\n    vhanging: 'vHanging',\\n    'v-hanging': 'vHanging',\\n    videographic: 'vIdeographic',\\n    'v-ideographic': 'vIdeographic',\\n    viewbox: 'viewBox',\\n    viewtarget: 'viewTarget',\\n    visibility: 'visibility',\\n    vmathematical: 'vMathematical',\\n    'v-mathematical': 'vMathematical',\\n    vocab: 'vocab',\\n    widths: 'widths',\\n    wordspacing: 'wordSpacing',\\n    'word-spacing': 'wordSpacing',\\n    writingmode: 'writingMode',\\n    'writing-mode': 'writingMode',\\n    x1: 'x1',\\n    x2: 'x2',\\n    x: 'x',\\n    xchannelselector: 'xChannelSelector',\\n    xheight: 'xHeight',\\n    'x-height': 'xHeight',\\n    xlinkactuate: 'xlinkActuate',\\n    'xlink:actuate': 'xlinkActuate',\\n    xlinkarcrole: 'xlinkArcrole',\\n    'xlink:arcrole': 'xlinkArcrole',\\n    xlinkhref: 'xlinkHref',\\n    'xlink:href': 'xlinkHref',\\n    xlinkrole: 'xlinkRole',\\n    'xlink:role': 'xlinkRole',\\n    xlinkshow: 'xlinkShow',\\n    'xlink:show': 'xlinkShow',\\n    xlinktitle: 'xlinkTitle',\\n    'xlink:title': 'xlinkTitle',\\n    xlinktype: 'xlinkType',\\n    'xlink:type': 'xlinkType',\\n    xmlbase: 'xmlBase',\\n    'xml:base': 'xmlBase',\\n    xmllang: 'xmlLang',\\n    'xml:lang': 'xmlLang',\\n    xmlns: 'xmlns',\\n    'xml:space': 'xmlSpace',\\n    xmlnsxlink: 'xmlnsXlink',\\n    'xmlns:xlink': 'xmlnsXlink',\\n    xmlspace: 'xmlSpace',\\n    y1: 'y1',\\n    y2: 'y2',\\n    y: 'y',\\n    ychannelselector: 'yChannelSelector',\\n    z: 'z',\\n    zoomandpan: 'zoomAndPan'\\n  };\\n\\n  var ariaProperties = {\\n    'aria-current': 0,\\n    // state\\n    'aria-description': 0,\\n    'aria-details': 0,\\n    'aria-disabled': 0,\\n    // state\\n    'aria-hidden': 0,\\n    // state\\n    'aria-invalid': 0,\\n    // state\\n    'aria-keyshortcuts': 0,\\n    'aria-label': 0,\\n    'aria-roledescription': 0,\\n    // Widget Attributes\\n    'aria-autocomplete': 0,\\n    'aria-checked': 0,\\n    'aria-expanded': 0,\\n    'aria-haspopup': 0,\\n    'aria-level': 0,\\n    'aria-modal': 0,\\n    'aria-multiline': 0,\\n    'aria-multiselectable': 0,\\n    'aria-orientation': 0,\\n    'aria-placeholder': 0,\\n    'aria-pressed': 0,\\n    'aria-readonly': 0,\\n    'aria-required': 0,\\n    'aria-selected': 0,\\n    'aria-sort': 0,\\n    'aria-valuemax': 0,\\n    'aria-valuemin': 0,\\n    'aria-valuenow': 0,\\n    'aria-valuetext': 0,\\n    // Live Region Attributes\\n    'aria-atomic': 0,\\n    'aria-busy': 0,\\n    'aria-live': 0,\\n    'aria-relevant': 0,\\n    // Drag-and-Drop Attributes\\n    'aria-dropeffect': 0,\\n    'aria-grabbed': 0,\\n    // Relationship Attributes\\n    'aria-activedescendant': 0,\\n    'aria-colcount': 0,\\n    'aria-colindex': 0,\\n    'aria-colspan': 0,\\n    'aria-controls': 0,\\n    'aria-describedby': 0,\\n    'aria-errormessage': 0,\\n    'aria-flowto': 0,\\n    'aria-labelledby': 0,\\n    'aria-owns': 0,\\n    'aria-posinset': 0,\\n    'aria-rowcount': 0,\\n    'aria-rowindex': 0,\\n    'aria-rowspan': 0,\\n    'aria-setsize': 0\\n  };\\n\\n  var warnedProperties = {};\\n  var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\\n  var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\\n\\n  function validateProperty(tagName, name) {\\n    {\\n      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\\n        return true;\\n      }\\n\\n      if (rARIACamel.test(name)) {\\n        var ariaName = 'aria-' + name.slice(4).toLowerCase();\\n        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\\n        // DOM properties, then it is an invalid aria-* attribute.\\n\\n        if (correctName == null) {\\n          error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);\\n\\n          warnedProperties[name] = true;\\n          return true;\\n        } // aria-* attributes should be lowercase; suggest the lowercase version.\\n\\n\\n        if (name !== correctName) {\\n          error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);\\n\\n          warnedProperties[name] = true;\\n          return true;\\n        }\\n      }\\n\\n      if (rARIA.test(name)) {\\n        var lowerCasedName = name.toLowerCase();\\n        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\\n        // DOM properties, then it is an invalid aria-* attribute.\\n\\n        if (standardName == null) {\\n          warnedProperties[name] = true;\\n          return false;\\n        } // aria-* attributes should be lowercase; suggest the lowercase version.\\n\\n\\n        if (name !== standardName) {\\n          error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);\\n\\n          warnedProperties[name] = true;\\n          return true;\\n        }\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  function warnInvalidARIAProps(type, props) {\\n    {\\n      var invalidProps = [];\\n\\n      for (var key in props) {\\n        var isValid = validateProperty(type, key);\\n\\n        if (!isValid) {\\n          invalidProps.push(key);\\n        }\\n      }\\n\\n      var unknownPropString = invalidProps.map(function (prop) {\\n        return '`' + prop + '`';\\n      }).join(', ');\\n\\n      if (invalidProps.length === 1) {\\n        error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\\n      } else if (invalidProps.length > 1) {\\n        error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\\n      }\\n    }\\n  }\\n\\n  function validateProperties(type, props) {\\n    if (isCustomComponent(type, props)) {\\n      return;\\n    }\\n\\n    warnInvalidARIAProps(type, props);\\n  }\\n\\n  var didWarnValueNull = false;\\n  function validateProperties$1(type, props) {\\n    {\\n      if (type !== 'input' && type !== 'textarea' && type !== 'select') {\\n        return;\\n      }\\n\\n      if (props != null && props.value === null && !didWarnValueNull) {\\n        didWarnValueNull = true;\\n\\n        if (type === 'select' && props.multiple) {\\n          error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);\\n        } else {\\n          error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);\\n        }\\n      }\\n    }\\n  }\\n\\n  var validateProperty$1 = function () {};\\n\\n  {\\n    var warnedProperties$1 = {};\\n    var EVENT_NAME_REGEX = /^on./;\\n    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\\n    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\\n    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\\n\\n    validateProperty$1 = function (tagName, name, value, eventRegistry) {\\n      if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\\n        return true;\\n      }\\n\\n      var lowerCasedName = name.toLowerCase();\\n\\n      if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\\n        error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      } // We can't rely on the event system being injected on the server.\\n\\n\\n      if (eventRegistry != null) {\\n        var registrationNameDependencies = eventRegistry.registrationNameDependencies,\\n            possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\\n\\n        if (registrationNameDependencies.hasOwnProperty(name)) {\\n          return true;\\n        }\\n\\n        var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\\n\\n        if (registrationName != null) {\\n          error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);\\n\\n          warnedProperties$1[name] = true;\\n          return true;\\n        }\\n\\n        if (EVENT_NAME_REGEX.test(name)) {\\n          error('Unknown event handler property `%s`. It will be ignored.', name);\\n\\n          warnedProperties$1[name] = true;\\n          return true;\\n        }\\n      } else if (EVENT_NAME_REGEX.test(name)) {\\n        // If no event plugins have been injected, we are in a server environment.\\n        // So we can't tell if the event name is correct for sure, but we can filter\\n        // out known bad ones like `onclick`. We can't suggest a specific replacement though.\\n        if (INVALID_EVENT_NAME_REGEX.test(name)) {\\n          error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);\\n        }\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      } // Let the ARIA attribute hook validate ARIA attributes\\n\\n\\n      if (rARIA$1.test(name) || rARIACamel$1.test(name)) {\\n        return true;\\n      }\\n\\n      if (lowerCasedName === 'innerhtml') {\\n        error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      }\\n\\n      if (lowerCasedName === 'aria') {\\n        error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      }\\n\\n      if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\\n        error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      }\\n\\n      if (typeof value === 'number' && isNaN(value)) {\\n        error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      }\\n\\n      var propertyInfo = getPropertyInfo(name);\\n      var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.\\n\\n      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\\n        var standardName = possibleStandardNames[lowerCasedName];\\n\\n        if (standardName !== name) {\\n          error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);\\n\\n          warnedProperties$1[name] = true;\\n          return true;\\n        }\\n      } else if (!isReserved && name !== lowerCasedName) {\\n        // Unknown attributes should have lowercase casing since that's how they\\n        // will be cased anyway with server rendering.\\n        error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      }\\n\\n      if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\\n        if (value) {\\n          error('Received `%s` for a non-boolean attribute `%s`.\\\\n\\\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\\\"%s\\\" or %s={value.toString()}.', value, name, name, value, name);\\n        } else {\\n          error('Received `%s` for a non-boolean attribute `%s`.\\\\n\\\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\\\"%s\\\" or %s={value.toString()}.\\\\n\\\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);\\n        }\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      } // Now that we've validated casing, do not validate\\n      // data types for reserved props\\n\\n\\n      if (isReserved) {\\n        return true;\\n      } // Warn when a known attribute is a bad type\\n\\n\\n      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\\n        warnedProperties$1[name] = true;\\n        return false;\\n      } // Warn when passing the strings 'false' or 'true' into a boolean prop\\n\\n\\n      if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {\\n        error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string \\\"false\\\".', name, value);\\n\\n        warnedProperties$1[name] = true;\\n        return true;\\n      }\\n\\n      return true;\\n    };\\n  }\\n\\n  var warnUnknownProperties = function (type, props, eventRegistry) {\\n    {\\n      var unknownProps = [];\\n\\n      for (var key in props) {\\n        var isValid = validateProperty$1(type, key, props[key], eventRegistry);\\n\\n        if (!isValid) {\\n          unknownProps.push(key);\\n        }\\n      }\\n\\n      var unknownPropString = unknownProps.map(function (prop) {\\n        return '`' + prop + '`';\\n      }).join(', ');\\n\\n      if (unknownProps.length === 1) {\\n        error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\\n      } else if (unknownProps.length > 1) {\\n        error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\\n      }\\n    }\\n  };\\n\\n  function validateProperties$2(type, props, eventRegistry) {\\n    if (isCustomComponent(type, props)) {\\n      return;\\n    }\\n\\n    warnUnknownProperties(type, props, eventRegistry);\\n  }\\n\\n  var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;\\n  var IS_NON_DELEGATED = 1 << 1;\\n  var IS_CAPTURE_PHASE = 1 << 2;\\n  // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when\\n  // we call willDeferLaterForLegacyFBSupport, thus not bailing out\\n  // will result in endless cycles like an infinite loop.\\n  // We also don't want to defer during event replaying.\\n\\n  var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;\\n\\n  // This exists to avoid circular dependency between ReactDOMEventReplaying\\n  // and DOMPluginEventSystem.\\n  var currentReplayingEvent = null;\\n  function setReplayingEvent(event) {\\n    {\\n      if (currentReplayingEvent !== null) {\\n        error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');\\n      }\\n    }\\n\\n    currentReplayingEvent = event;\\n  }\\n  function resetReplayingEvent() {\\n    {\\n      if (currentReplayingEvent === null) {\\n        error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');\\n      }\\n    }\\n\\n    currentReplayingEvent = null;\\n  }\\n  function isReplayingEvent(event) {\\n    return event === currentReplayingEvent;\\n  }\\n\\n  /**\\n   * Gets the target node from a native browser event by accounting for\\n   * inconsistencies in browser DOM APIs.\\n   *\\n   * @param {object} nativeEvent Native browser event.\\n   * @return {DOMEventTarget} Target node.\\n   */\\n\\n  function getEventTarget(nativeEvent) {\\n    // Fallback to nativeEvent.srcElement for IE9\\n    // https://github.com/facebook/react/issues/12506\\n    var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963\\n\\n    if (target.correspondingUseElement) {\\n      target = target.correspondingUseElement;\\n    } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\\n    // @see http://www.quirksmode.org/js/events_properties.html\\n\\n\\n    return target.nodeType === TEXT_NODE ? target.parentNode : target;\\n  }\\n\\n  var restoreImpl = null;\\n  var restoreTarget = null;\\n  var restoreQueue = null;\\n\\n  function restoreStateOfTarget(target) {\\n    // We perform this translation at the end of the event loop so that we\\n    // always receive the correct fiber here\\n    var internalInstance = getInstanceFromNode(target);\\n\\n    if (!internalInstance) {\\n      // Unmounted\\n      return;\\n    }\\n\\n    if (typeof restoreImpl !== 'function') {\\n      throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');\\n    }\\n\\n    var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.\\n\\n    if (stateNode) {\\n      var _props = getFiberCurrentPropsFromNode(stateNode);\\n\\n      restoreImpl(internalInstance.stateNode, internalInstance.type, _props);\\n    }\\n  }\\n\\n  function setRestoreImplementation(impl) {\\n    restoreImpl = impl;\\n  }\\n  function enqueueStateRestore(target) {\\n    if (restoreTarget) {\\n      if (restoreQueue) {\\n        restoreQueue.push(target);\\n      } else {\\n        restoreQueue = [target];\\n      }\\n    } else {\\n      restoreTarget = target;\\n    }\\n  }\\n  function needsStateRestore() {\\n    return restoreTarget !== null || restoreQueue !== null;\\n  }\\n  function restoreStateIfNeeded() {\\n    if (!restoreTarget) {\\n      return;\\n    }\\n\\n    var target = restoreTarget;\\n    var queuedTargets = restoreQueue;\\n    restoreTarget = null;\\n    restoreQueue = null;\\n    restoreStateOfTarget(target);\\n\\n    if (queuedTargets) {\\n      for (var i = 0; i < queuedTargets.length; i++) {\\n        restoreStateOfTarget(queuedTargets[i]);\\n      }\\n    }\\n  }\\n\\n  // the renderer. Such as when we're dispatching events or if third party\\n  // libraries need to call batchedUpdates. Eventually, this API will go away when\\n  // everything is batched by default. We'll then have a similar API to opt-out of\\n  // scheduled work and instead do synchronous work.\\n  // Defaults\\n\\n  var batchedUpdatesImpl = function (fn, bookkeeping) {\\n    return fn(bookkeeping);\\n  };\\n\\n  var flushSyncImpl = function () {};\\n\\n  var isInsideEventHandler = false;\\n\\n  function finishEventHandler() {\\n    // Here we wait until all updates have propagated, which is important\\n    // when using controlled components within layers:\\n    // https://github.com/facebook/react/issues/1698\\n    // Then we restore state of any controlled component.\\n    var controlledComponentsHavePendingUpdates = needsStateRestore();\\n\\n    if (controlledComponentsHavePendingUpdates) {\\n      // If a controlled event was fired, we may need to restore the state of\\n      // the DOM node back to the controlled value. This is necessary when React\\n      // bails out of the update without touching the DOM.\\n      // TODO: Restore state in the microtask, after the discrete updates flush,\\n      // instead of early flushing them here.\\n      flushSyncImpl();\\n      restoreStateIfNeeded();\\n    }\\n  }\\n\\n  function batchedUpdates(fn, a, b) {\\n    if (isInsideEventHandler) {\\n      // If we are currently inside another batch, we need to wait until it\\n      // fully completes before restoring state.\\n      return fn(a, b);\\n    }\\n\\n    isInsideEventHandler = true;\\n\\n    try {\\n      return batchedUpdatesImpl(fn, a, b);\\n    } finally {\\n      isInsideEventHandler = false;\\n      finishEventHandler();\\n    }\\n  } // TODO: Replace with flushSync\\n  function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {\\n    batchedUpdatesImpl = _batchedUpdatesImpl;\\n    flushSyncImpl = _flushSyncImpl;\\n  }\\n\\n  function isInteractive(tag) {\\n    return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\\n  }\\n\\n  function shouldPreventMouseEvent(name, type, props) {\\n    switch (name) {\\n      case 'onClick':\\n      case 'onClickCapture':\\n      case 'onDoubleClick':\\n      case 'onDoubleClickCapture':\\n      case 'onMouseDown':\\n      case 'onMouseDownCapture':\\n      case 'onMouseMove':\\n      case 'onMouseMoveCapture':\\n      case 'onMouseUp':\\n      case 'onMouseUpCapture':\\n      case 'onMouseEnter':\\n        return !!(props.disabled && isInteractive(type));\\n\\n      default:\\n        return false;\\n    }\\n  }\\n  /**\\n   * @param {object} inst The instance, which is the source of events.\\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\\n   * @return {?function} The stored callback.\\n   */\\n\\n\\n  function getListener(inst, registrationName) {\\n    var stateNode = inst.stateNode;\\n\\n    if (stateNode === null) {\\n      // Work in progress (ex: onload events in incremental mode).\\n      return null;\\n    }\\n\\n    var props = getFiberCurrentPropsFromNode(stateNode);\\n\\n    if (props === null) {\\n      // Work in progress.\\n      return null;\\n    }\\n\\n    var listener = props[registrationName];\\n\\n    if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\\n      return null;\\n    }\\n\\n    if (listener && typeof listener !== 'function') {\\n      throw new Error(\\\"Expected `\\\" + registrationName + \\\"` listener to be a function, instead got a value of `\\\" + typeof listener + \\\"` type.\\\");\\n    }\\n\\n    return listener;\\n  }\\n\\n  var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners\\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\\n\\n  if (canUseDOM) {\\n    try {\\n      var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value\\n\\n      Object.defineProperty(options, 'passive', {\\n        get: function () {\\n          passiveBrowserEventsSupported = true;\\n        }\\n      });\\n      window.addEventListener('test', options, options);\\n      window.removeEventListener('test', options, options);\\n    } catch (e) {\\n      passiveBrowserEventsSupported = false;\\n    }\\n  }\\n\\n  function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\\n    var funcArgs = Array.prototype.slice.call(arguments, 3);\\n\\n    try {\\n      func.apply(context, funcArgs);\\n    } catch (error) {\\n      this.onError(error);\\n    }\\n  }\\n\\n  var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\\n\\n  {\\n    // In DEV mode, we swap out invokeGuardedCallback for a special version\\n    // that plays more nicely with the browser's DevTools. The idea is to preserve\\n    // \\\"Pause on exceptions\\\" behavior. Because React wraps all user-provided\\n    // functions in invokeGuardedCallback, and the production version of\\n    // invokeGuardedCallback uses a try-catch, all user exceptions are treated\\n    // like caught exceptions, and the DevTools won't pause unless the developer\\n    // takes the extra step of enabling pause on caught exceptions. This is\\n    // unintuitive, though, because even though React has caught the error, from\\n    // the developer's perspective, the error is uncaught.\\n    //\\n    // To preserve the expected \\\"Pause on exceptions\\\" behavior, we don't use a\\n    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\\n    // DOM node, and call the user-provided callback from inside an event handler\\n    // for that fake event. If the callback throws, the error is \\\"captured\\\" using\\n    // a global event handler. But because the error happens in a different\\n    // event loop context, it does not interrupt the normal program flow.\\n    // Effectively, this gives us try-catch behavior without actually using\\n    // try-catch. Neat!\\n    // Check that the browser supports the APIs we need to implement our special\\n    // DEV version of invokeGuardedCallback\\n    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\\n      var fakeNode = document.createElement('react');\\n\\n      invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\\n        // If document doesn't exist we know for sure we will crash in this method\\n        // when we call document.createEvent(). However this can cause confusing\\n        // errors: https://github.com/facebook/create-react-app/issues/3482\\n        // So we preemptively throw with a better message instead.\\n        if (typeof document === 'undefined' || document === null) {\\n          throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\\n        }\\n\\n        var evt = document.createEvent('Event');\\n        var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\\n        // set this to true at the beginning, then set it to false right after\\n        // calling the function. If the function errors, `didError` will never be\\n        // set to false. This strategy works even if the browser is flaky and\\n        // fails to call our global error handler, because it doesn't rely on\\n        // the error event at all.\\n\\n        var didError = true; // Keeps track of the value of window.event so that we can reset it\\n        // during the callback to let user code access window.event in the\\n        // browsers that support it.\\n\\n        var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\\n        // dispatching: https://github.com/facebook/react/issues/13688\\n\\n        var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\\n\\n        function restoreAfterDispatch() {\\n          // We immediately remove the callback from event listeners so that\\n          // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\\n          // nested call would trigger the fake event handlers of any call higher\\n          // in the stack.\\n          fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\\n          // window.event assignment in both IE <= 10 as they throw an error\\n          // \\\"Member not found\\\" in strict mode, and in Firefox which does not\\n          // support window.event.\\n\\n          if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\\n            window.event = windowEvent;\\n          }\\n        } // Create an event handler for our fake event. We will synchronously\\n        // dispatch our fake event using `dispatchEvent`. Inside the handler, we\\n        // call the user-provided callback.\\n\\n\\n        var funcArgs = Array.prototype.slice.call(arguments, 3);\\n\\n        function callCallback() {\\n          didCall = true;\\n          restoreAfterDispatch();\\n          func.apply(context, funcArgs);\\n          didError = false;\\n        } // Create a global error event handler. We use this to capture the value\\n        // that was thrown. It's possible that this error handler will fire more\\n        // than once; for example, if non-React code also calls `dispatchEvent`\\n        // and a handler for that event throws. We should be resilient to most of\\n        // those cases. Even if our error event handler fires more than once, the\\n        // last error event is always used. If the callback actually does error,\\n        // we know that the last error event is the correct one, because it's not\\n        // possible for anything else to have happened in between our callback\\n        // erroring and the code that follows the `dispatchEvent` call below. If\\n        // the callback doesn't error, but the error event was fired, we know to\\n        // ignore it because `didError` will be false, as described above.\\n\\n\\n        var error; // Use this to track whether the error event is ever called.\\n\\n        var didSetError = false;\\n        var isCrossOriginError = false;\\n\\n        function handleWindowError(event) {\\n          error = event.error;\\n          didSetError = true;\\n\\n          if (error === null && event.colno === 0 && event.lineno === 0) {\\n            isCrossOriginError = true;\\n          }\\n\\n          if (event.defaultPrevented) {\\n            // Some other error handler has prevented default.\\n            // Browsers silence the error report if this happens.\\n            // We'll remember this to later decide whether to log it or not.\\n            if (error != null && typeof error === 'object') {\\n              try {\\n                error._suppressLogging = true;\\n              } catch (inner) {// Ignore.\\n              }\\n            }\\n          }\\n        } // Create a fake event type.\\n\\n\\n        var evtType = \\\"react-\\\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\\n\\n        window.addEventListener('error', handleWindowError);\\n        fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\\n        // errors, it will trigger our global error handler.\\n\\n        evt.initEvent(evtType, false, false);\\n        fakeNode.dispatchEvent(evt);\\n\\n        if (windowEventDescriptor) {\\n          Object.defineProperty(window, 'event', windowEventDescriptor);\\n        }\\n\\n        if (didCall && didError) {\\n          if (!didSetError) {\\n            // The callback errored, but the error event never fired.\\n            // eslint-disable-next-line react-internal/prod-error-codes\\n            error = new Error('An error was thrown inside one of your components, but React ' + \\\"doesn't know what it was. This is likely due to browser \\\" + 'flakiness. React does its best to preserve the \\\"Pause on ' + 'exceptions\\\" behavior of the DevTools, which requires some ' + \\\"DEV-mode only tricks. It's possible that these don't work in \\\" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\\n          } else if (isCrossOriginError) {\\n            // eslint-disable-next-line react-internal/prod-error-codes\\n            error = new Error(\\\"A cross-origin error was thrown. React doesn't have access to \\\" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\\n          }\\n\\n          this.onError(error);\\n        } // Remove our event listeners\\n\\n\\n        window.removeEventListener('error', handleWindowError);\\n\\n        if (!didCall) {\\n          // Something went really wrong, and our event was not dispatched.\\n          // https://github.com/facebook/react/issues/16734\\n          // https://github.com/facebook/react/issues/16585\\n          // Fall back to the production implementation.\\n          restoreAfterDispatch();\\n          return invokeGuardedCallbackProd.apply(this, arguments);\\n        }\\n      };\\n    }\\n  }\\n\\n  var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\\n\\n  var hasError = false;\\n  var caughtError = null; // Used by event system to capture/rethrow the first error.\\n\\n  var hasRethrowError = false;\\n  var rethrowError = null;\\n  var reporter = {\\n    onError: function (error) {\\n      hasError = true;\\n      caughtError = error;\\n    }\\n  };\\n  /**\\n   * Call a function while guarding against errors that happens within it.\\n   * Returns an error if it throws, otherwise null.\\n   *\\n   * In production, this is implemented using a try-catch. The reason we don't\\n   * use a try-catch directly is so that we can swap out a different\\n   * implementation in DEV mode.\\n   *\\n   * @param {String} name of the guard to use for logging or debugging\\n   * @param {Function} func The function to invoke\\n   * @param {*} context The context to use when calling the function\\n   * @param {...*} args Arguments for function\\n   */\\n\\n  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\\n    hasError = false;\\n    caughtError = null;\\n    invokeGuardedCallbackImpl$1.apply(reporter, arguments);\\n  }\\n  /**\\n   * Same as invokeGuardedCallback, but instead of returning an error, it stores\\n   * it in a global so it can be rethrown by `rethrowCaughtError` later.\\n   * TODO: See if caughtError and rethrowError can be unified.\\n   *\\n   * @param {String} name of the guard to use for logging or debugging\\n   * @param {Function} func The function to invoke\\n   * @param {*} context The context to use when calling the function\\n   * @param {...*} args Arguments for function\\n   */\\n\\n  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {\\n    invokeGuardedCallback.apply(this, arguments);\\n\\n    if (hasError) {\\n      var error = clearCaughtError();\\n\\n      if (!hasRethrowError) {\\n        hasRethrowError = true;\\n        rethrowError = error;\\n      }\\n    }\\n  }\\n  /**\\n   * During execution of guarded functions we will capture the first error which\\n   * we will rethrow to be handled by the top level error handler.\\n   */\\n\\n  function rethrowCaughtError() {\\n    if (hasRethrowError) {\\n      var error = rethrowError;\\n      hasRethrowError = false;\\n      rethrowError = null;\\n      throw error;\\n    }\\n  }\\n  function hasCaughtError() {\\n    return hasError;\\n  }\\n  function clearCaughtError() {\\n    if (hasError) {\\n      var error = caughtError;\\n      hasError = false;\\n      caughtError = null;\\n      return error;\\n    } else {\\n      throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\\n    }\\n  }\\n\\n  var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\\n  var _ReactInternals$Sched = ReactInternals.Scheduler,\\n      unstable_cancelCallback = _ReactInternals$Sched.unstable_cancelCallback,\\n      unstable_now = _ReactInternals$Sched.unstable_now,\\n      unstable_scheduleCallback = _ReactInternals$Sched.unstable_scheduleCallback,\\n      unstable_shouldYield = _ReactInternals$Sched.unstable_shouldYield,\\n      unstable_requestPaint = _ReactInternals$Sched.unstable_requestPaint,\\n      unstable_getFirstCallbackNode = _ReactInternals$Sched.unstable_getFirstCallbackNode,\\n      unstable_runWithPriority = _ReactInternals$Sched.unstable_runWithPriority,\\n      unstable_next = _ReactInternals$Sched.unstable_next,\\n      unstable_continueExecution = _ReactInternals$Sched.unstable_continueExecution,\\n      unstable_pauseExecution = _ReactInternals$Sched.unstable_pauseExecution,\\n      unstable_getCurrentPriorityLevel = _ReactInternals$Sched.unstable_getCurrentPriorityLevel,\\n      unstable_ImmediatePriority = _ReactInternals$Sched.unstable_ImmediatePriority,\\n      unstable_UserBlockingPriority = _ReactInternals$Sched.unstable_UserBlockingPriority,\\n      unstable_NormalPriority = _ReactInternals$Sched.unstable_NormalPriority,\\n      unstable_LowPriority = _ReactInternals$Sched.unstable_LowPriority,\\n      unstable_IdlePriority = _ReactInternals$Sched.unstable_IdlePriority,\\n      unstable_forceFrameRate = _ReactInternals$Sched.unstable_forceFrameRate,\\n      unstable_flushAllWithoutAsserting = _ReactInternals$Sched.unstable_flushAllWithoutAsserting,\\n      unstable_yieldValue = _ReactInternals$Sched.unstable_yieldValue,\\n      unstable_setDisableYieldValue = _ReactInternals$Sched.unstable_setDisableYieldValue;\\n\\n  /**\\n   * `ReactInstanceMap` maintains a mapping from a public facing stateful\\n   * instance (key) and the internal representation (value). This allows public\\n   * methods to accept the user facing instance as an argument and map them back\\n   * to internal methods.\\n   *\\n   * Note that this module is currently shared and assumed to be stateless.\\n   * If this becomes an actual Map, that will break.\\n   */\\n  function get(key) {\\n    return key._reactInternals;\\n  }\\n  function has(key) {\\n    return key._reactInternals !== undefined;\\n  }\\n  function set(key, value) {\\n    key._reactInternals = value;\\n  }\\n\\n  // Don't change these two values. They're used by React Dev Tools.\\n  var NoFlags =\\n  /*                      */\\n  0;\\n  var PerformedWork =\\n  /*                */\\n  1; // You can change the rest (and add more).\\n\\n  var Placement =\\n  /*                    */\\n  2;\\n  var Update =\\n  /*                       */\\n  4;\\n  var ChildDeletion =\\n  /*                */\\n  16;\\n  var ContentReset =\\n  /*                 */\\n  32;\\n  var Callback =\\n  /*                     */\\n  64;\\n  var DidCapture =\\n  /*                   */\\n  128;\\n  var ForceClientRender =\\n  /*            */\\n  256;\\n  var Ref =\\n  /*                          */\\n  512;\\n  var Snapshot =\\n  /*                     */\\n  1024;\\n  var Passive =\\n  /*                      */\\n  2048;\\n  var Hydrating =\\n  /*                    */\\n  4096;\\n  var Visibility =\\n  /*                   */\\n  8192;\\n  var StoreConsistency =\\n  /*             */\\n  16384;\\n  var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\\n\\n  var HostEffectMask =\\n  /*               */\\n  32767; // These are not really side effects, but we still reuse this field.\\n\\n  var Incomplete =\\n  /*                   */\\n  32768;\\n  var ShouldCapture =\\n  /*                */\\n  65536;\\n  var ForceUpdateForLegacySuspense =\\n  /* */\\n  131072;\\n  var Forked =\\n  /*                       */\\n  1048576; // Static tags describe aspects of a fiber that are not specific to a render,\\n  // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\\n  // This enables us to defer more work in the unmount case,\\n  // since we can defer traversing the tree during layout to look for Passive effects,\\n  // and instead rely on the static flag as a signal that there may be cleanup work.\\n\\n  var RefStatic =\\n  /*                    */\\n  2097152;\\n  var LayoutStatic =\\n  /*                 */\\n  4194304;\\n  var PassiveStatic =\\n  /*                */\\n  8388608; // These flags allow us to traverse to fibers that have effects on mount\\n  // without traversing the entire tree after every commit for\\n  // double invoking\\n\\n  var MountLayoutDev =\\n  /*               */\\n  16777216;\\n  var MountPassiveDev =\\n  /*              */\\n  33554432; // Groups of flags that are used in the commit phase to skip over trees that\\n  // don't contain effects, by checking subtreeFlags.\\n\\n  var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\\n  // flag logic (see #20043)\\n  Update | Snapshot | ( 0);\\n  var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\\n  var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\\n\\n  var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\\n  // This allows certain concepts to persist without recalculating them,\\n  // e.g. whether a subtree contains passive effects or portals.\\n\\n  var StaticMask = LayoutStatic | PassiveStatic | RefStatic;\\n\\n  var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\\n  function getNearestMountedFiber(fiber) {\\n    var node = fiber;\\n    var nearestMounted = fiber;\\n\\n    if (!fiber.alternate) {\\n      // If there is no alternate, this might be a new tree that isn't inserted\\n      // yet. If it is, then it will have a pending insertion effect on it.\\n      var nextNode = node;\\n\\n      do {\\n        node = nextNode;\\n\\n        if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\\n          // This is an insertion or in-progress hydration. The nearest possible\\n          // mounted fiber is the parent but we need to continue to figure out\\n          // if that one is still mounted.\\n          nearestMounted = node.return;\\n        }\\n\\n        nextNode = node.return;\\n      } while (nextNode);\\n    } else {\\n      while (node.return) {\\n        node = node.return;\\n      }\\n    }\\n\\n    if (node.tag === HostRoot) {\\n      // TODO: Check if this was a nested HostRoot when used with\\n      // renderContainerIntoSubtree.\\n      return nearestMounted;\\n    } // If we didn't hit the root, that means that we're in an disconnected tree\\n    // that has been unmounted.\\n\\n\\n    return null;\\n  }\\n  function getSuspenseInstanceFromFiber(fiber) {\\n    if (fiber.tag === SuspenseComponent) {\\n      var suspenseState = fiber.memoizedState;\\n\\n      if (suspenseState === null) {\\n        var current = fiber.alternate;\\n\\n        if (current !== null) {\\n          suspenseState = current.memoizedState;\\n        }\\n      }\\n\\n      if (suspenseState !== null) {\\n        return suspenseState.dehydrated;\\n      }\\n    }\\n\\n    return null;\\n  }\\n  function getContainerFromFiber(fiber) {\\n    return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;\\n  }\\n  function isFiberMounted(fiber) {\\n    return getNearestMountedFiber(fiber) === fiber;\\n  }\\n  function isMounted(component) {\\n    {\\n      var owner = ReactCurrentOwner.current;\\n\\n      if (owner !== null && owner.tag === ClassComponent) {\\n        var ownerFiber = owner;\\n        var instance = ownerFiber.stateNode;\\n\\n        if (!instance._warnedAboutRefsInRender) {\\n          error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\\n        }\\n\\n        instance._warnedAboutRefsInRender = true;\\n      }\\n    }\\n\\n    var fiber = get(component);\\n\\n    if (!fiber) {\\n      return false;\\n    }\\n\\n    return getNearestMountedFiber(fiber) === fiber;\\n  }\\n\\n  function assertIsMounted(fiber) {\\n    if (getNearestMountedFiber(fiber) !== fiber) {\\n      throw new Error('Unable to find node on an unmounted component.');\\n    }\\n  }\\n\\n  function findCurrentFiberUsingSlowPath(fiber) {\\n    var alternate = fiber.alternate;\\n\\n    if (!alternate) {\\n      // If there is no alternate, then we only need to check if it is mounted.\\n      var nearestMounted = getNearestMountedFiber(fiber);\\n\\n      if (nearestMounted === null) {\\n        throw new Error('Unable to find node on an unmounted component.');\\n      }\\n\\n      if (nearestMounted !== fiber) {\\n        return null;\\n      }\\n\\n      return fiber;\\n    } // If we have two possible branches, we'll walk backwards up to the root\\n    // to see what path the root points to. On the way we may hit one of the\\n    // special cases and we'll deal with them.\\n\\n\\n    var a = fiber;\\n    var b = alternate;\\n\\n    while (true) {\\n      var parentA = a.return;\\n\\n      if (parentA === null) {\\n        // We're at the root.\\n        break;\\n      }\\n\\n      var parentB = parentA.alternate;\\n\\n      if (parentB === null) {\\n        // There is no alternate. This is an unusual case. Currently, it only\\n        // happens when a Suspense component is hidden. An extra fragment fiber\\n        // is inserted in between the Suspense fiber and its children. Skip\\n        // over this extra fragment fiber and proceed to the next parent.\\n        var nextParent = parentA.return;\\n\\n        if (nextParent !== null) {\\n          a = b = nextParent;\\n          continue;\\n        } // If there's no parent, we're at the root.\\n\\n\\n        break;\\n      } // If both copies of the parent fiber point to the same child, we can\\n      // assume that the child is current. This happens when we bailout on low\\n      // priority: the bailed out fiber's child reuses the current child.\\n\\n\\n      if (parentA.child === parentB.child) {\\n        var child = parentA.child;\\n\\n        while (child) {\\n          if (child === a) {\\n            // We've determined that A is the current branch.\\n            assertIsMounted(parentA);\\n            return fiber;\\n          }\\n\\n          if (child === b) {\\n            // We've determined that B is the current branch.\\n            assertIsMounted(parentA);\\n            return alternate;\\n          }\\n\\n          child = child.sibling;\\n        } // We should never have an alternate for any mounting node. So the only\\n        // way this could possibly happen is if this was unmounted, if at all.\\n\\n\\n        throw new Error('Unable to find node on an unmounted component.');\\n      }\\n\\n      if (a.return !== b.return) {\\n        // The return pointer of A and the return pointer of B point to different\\n        // fibers. We assume that return pointers never criss-cross, so A must\\n        // belong to the child set of A.return, and B must belong to the child\\n        // set of B.return.\\n        a = parentA;\\n        b = parentB;\\n      } else {\\n        // The return pointers point to the same fiber. We'll have to use the\\n        // default, slow path: scan the child sets of each parent alternate to see\\n        // which child belongs to which set.\\n        //\\n        // Search parent A's child set\\n        var didFindChild = false;\\n        var _child = parentA.child;\\n\\n        while (_child) {\\n          if (_child === a) {\\n            didFindChild = true;\\n            a = parentA;\\n            b = parentB;\\n            break;\\n          }\\n\\n          if (_child === b) {\\n            didFindChild = true;\\n            b = parentA;\\n            a = parentB;\\n            break;\\n          }\\n\\n          _child = _child.sibling;\\n        }\\n\\n        if (!didFindChild) {\\n          // Search parent B's child set\\n          _child = parentB.child;\\n\\n          while (_child) {\\n            if (_child === a) {\\n              didFindChild = true;\\n              a = parentB;\\n              b = parentA;\\n              break;\\n            }\\n\\n            if (_child === b) {\\n              didFindChild = true;\\n              b = parentB;\\n              a = parentA;\\n              break;\\n            }\\n\\n            _child = _child.sibling;\\n          }\\n\\n          if (!didFindChild) {\\n            throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\\n          }\\n        }\\n      }\\n\\n      if (a.alternate !== b) {\\n        throw new Error(\\\"Return fibers should always be each others' alternates. \\\" + 'This error is likely caused by a bug in React. Please file an issue.');\\n      }\\n    } // If the root is not a host container, we're in a disconnected tree. I.e.\\n    // unmounted.\\n\\n\\n    if (a.tag !== HostRoot) {\\n      throw new Error('Unable to find node on an unmounted component.');\\n    }\\n\\n    if (a.stateNode.current === a) {\\n      // We've determined that A is the current branch.\\n      return fiber;\\n    } // Otherwise B has to be current branch.\\n\\n\\n    return alternate;\\n  }\\n  function findCurrentHostFiber(parent) {\\n    var currentParent = findCurrentFiberUsingSlowPath(parent);\\n    return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\\n  }\\n\\n  function findCurrentHostFiberImpl(node) {\\n    // Next we'll drill down this component to find the first HostComponent/Text.\\n    if (node.tag === HostComponent || node.tag === HostText) {\\n      return node;\\n    }\\n\\n    var child = node.child;\\n\\n    while (child !== null) {\\n      var match = findCurrentHostFiberImpl(child);\\n\\n      if (match !== null) {\\n        return match;\\n      }\\n\\n      child = child.sibling;\\n    }\\n\\n    return null;\\n  }\\n\\n  function findCurrentHostFiberWithNoPortals(parent) {\\n    var currentParent = findCurrentFiberUsingSlowPath(parent);\\n    return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\\n  }\\n\\n  function findCurrentHostFiberWithNoPortalsImpl(node) {\\n    // Next we'll drill down this component to find the first HostComponent/Text.\\n    if (node.tag === HostComponent || node.tag === HostText) {\\n      return node;\\n    }\\n\\n    var child = node.child;\\n\\n    while (child !== null) {\\n      if (child.tag !== HostPortal) {\\n        var match = findCurrentHostFiberWithNoPortalsImpl(child);\\n\\n        if (match !== null) {\\n          return match;\\n        }\\n      }\\n\\n      child = child.sibling;\\n    }\\n\\n    return null;\\n  }\\n\\n  // This module only exists as an ESM wrapper around the external CommonJS\\n  var scheduleCallback = unstable_scheduleCallback;\\n  var cancelCallback = unstable_cancelCallback;\\n  var shouldYield = unstable_shouldYield;\\n  var requestPaint = unstable_requestPaint;\\n  var now = unstable_now;\\n  var getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\\n  var ImmediatePriority = unstable_ImmediatePriority;\\n  var UserBlockingPriority = unstable_UserBlockingPriority;\\n  var NormalPriority = unstable_NormalPriority;\\n  var LowPriority = unstable_LowPriority;\\n  var IdlePriority = unstable_IdlePriority;\\n  // this doesn't actually exist on the scheduler, but it *does*\\n  // on scheduler/unstable_mock, which we'll need for internal testing\\n  var unstable_yieldValue$1 = unstable_yieldValue;\\n  var unstable_setDisableYieldValue$1 = unstable_setDisableYieldValue;\\n\\n  var rendererID = null;\\n  var injectedHook = null;\\n  var injectedProfilingHooks = null;\\n  var hasLoggedError = false;\\n  var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\\n  function injectInternals(internals) {\\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\\n      // No DevTools\\n      return false;\\n    }\\n\\n    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\\n\\n    if (hook.isDisabled) {\\n      // This isn't a real property on the hook, but it can be set to opt out\\n      // of DevTools integration and associated warnings and logs.\\n      // https://github.com/facebook/react/issues/3877\\n      return true;\\n    }\\n\\n    if (!hook.supportsFiber) {\\n      {\\n        error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\\n      } // DevTools exists, even though it doesn't support Fiber.\\n\\n\\n      return true;\\n    }\\n\\n    try {\\n      if (enableSchedulingProfiler) {\\n        // Conditionally inject these hooks only if Timeline profiler is supported by this build.\\n        // This gives DevTools a way to feature detect that isn't tied to version number\\n        // (since profiling and timeline are controlled by different feature flags).\\n        internals = assign({}, internals, {\\n          getLaneLabelMap: getLaneLabelMap,\\n          injectProfilingHooks: injectProfilingHooks\\n        });\\n      }\\n\\n      rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\\n\\n      injectedHook = hook;\\n    } catch (err) {\\n      // Catch all errors because it is unsafe to throw during initialization.\\n      {\\n        error('React instrumentation encountered an error: %s.', err);\\n      }\\n    }\\n\\n    if (hook.checkDCE) {\\n      // This is the real DevTools.\\n      return true;\\n    } else {\\n      // This is likely a hook installed by Fast Refresh runtime.\\n      return false;\\n    }\\n  }\\n  function onScheduleRoot(root, children) {\\n    {\\n      if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\\n        try {\\n          injectedHook.onScheduleFiberRoot(rendererID, root, children);\\n        } catch (err) {\\n          if ( !hasLoggedError) {\\n            hasLoggedError = true;\\n\\n            error('React instrumentation encountered an error: %s', err);\\n          }\\n        }\\n      }\\n    }\\n  }\\n  function onCommitRoot(root, eventPriority) {\\n    if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\\n      try {\\n        var didError = (root.current.flags & DidCapture) === DidCapture;\\n\\n        if (enableProfilerTimer) {\\n          var schedulerPriority;\\n\\n          switch (eventPriority) {\\n            case DiscreteEventPriority:\\n              schedulerPriority = ImmediatePriority;\\n              break;\\n\\n            case ContinuousEventPriority:\\n              schedulerPriority = UserBlockingPriority;\\n              break;\\n\\n            case DefaultEventPriority:\\n              schedulerPriority = NormalPriority;\\n              break;\\n\\n            case IdleEventPriority:\\n              schedulerPriority = IdlePriority;\\n              break;\\n\\n            default:\\n              schedulerPriority = NormalPriority;\\n              break;\\n          }\\n\\n          injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\\n        } else {\\n          injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\\n        }\\n      } catch (err) {\\n        {\\n          if (!hasLoggedError) {\\n            hasLoggedError = true;\\n\\n            error('React instrumentation encountered an error: %s', err);\\n          }\\n        }\\n      }\\n    }\\n  }\\n  function onPostCommitRoot(root) {\\n    if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\\n      try {\\n        injectedHook.onPostCommitFiberRoot(rendererID, root);\\n      } catch (err) {\\n        {\\n          if (!hasLoggedError) {\\n            hasLoggedError = true;\\n\\n            error('React instrumentation encountered an error: %s', err);\\n          }\\n        }\\n      }\\n    }\\n  }\\n  function onCommitUnmount(fiber) {\\n    if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\\n      try {\\n        injectedHook.onCommitFiberUnmount(rendererID, fiber);\\n      } catch (err) {\\n        {\\n          if (!hasLoggedError) {\\n            hasLoggedError = true;\\n\\n            error('React instrumentation encountered an error: %s', err);\\n          }\\n        }\\n      }\\n    }\\n  }\\n  function setIsStrictModeForDevtools(newIsStrictMode) {\\n    {\\n      if (typeof unstable_yieldValue$1 === 'function') {\\n        // We're in a test because Scheduler.unstable_yieldValue only exists\\n        // in SchedulerMock. To reduce the noise in strict mode tests,\\n        // suppress warnings and disable scheduler yielding during the double render\\n        unstable_setDisableYieldValue$1(newIsStrictMode);\\n        setSuppressWarning(newIsStrictMode);\\n      }\\n\\n      if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\\n        try {\\n          injectedHook.setStrictMode(rendererID, newIsStrictMode);\\n        } catch (err) {\\n          {\\n            if (!hasLoggedError) {\\n              hasLoggedError = true;\\n\\n              error('React instrumentation encountered an error: %s', err);\\n            }\\n          }\\n        }\\n      }\\n    }\\n  } // Profiler API hooks\\n\\n  function injectProfilingHooks(profilingHooks) {\\n    injectedProfilingHooks = profilingHooks;\\n  }\\n\\n  function getLaneLabelMap() {\\n    {\\n      var map = new Map();\\n      var lane = 1;\\n\\n      for (var index = 0; index < TotalLanes; index++) {\\n        var label = getLabelForLane(lane);\\n        map.set(lane, label);\\n        lane *= 2;\\n      }\\n\\n      return map;\\n    }\\n  }\\n\\n  function markCommitStarted(lanes) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\\n        injectedProfilingHooks.markCommitStarted(lanes);\\n      }\\n    }\\n  }\\n  function markCommitStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\\n        injectedProfilingHooks.markCommitStopped();\\n      }\\n    }\\n  }\\n  function markComponentRenderStarted(fiber) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\\n        injectedProfilingHooks.markComponentRenderStarted(fiber);\\n      }\\n    }\\n  }\\n  function markComponentRenderStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\\n        injectedProfilingHooks.markComponentRenderStopped();\\n      }\\n    }\\n  }\\n  function markComponentPassiveEffectMountStarted(fiber) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\\n        injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\\n      }\\n    }\\n  }\\n  function markComponentPassiveEffectMountStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\\n        injectedProfilingHooks.markComponentPassiveEffectMountStopped();\\n      }\\n    }\\n  }\\n  function markComponentPassiveEffectUnmountStarted(fiber) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\\n        injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\\n      }\\n    }\\n  }\\n  function markComponentPassiveEffectUnmountStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\\n        injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\\n      }\\n    }\\n  }\\n  function markComponentLayoutEffectMountStarted(fiber) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\\n        injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\\n      }\\n    }\\n  }\\n  function markComponentLayoutEffectMountStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\\n        injectedProfilingHooks.markComponentLayoutEffectMountStopped();\\n      }\\n    }\\n  }\\n  function markComponentLayoutEffectUnmountStarted(fiber) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\\n        injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\\n      }\\n    }\\n  }\\n  function markComponentLayoutEffectUnmountStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\\n        injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\\n      }\\n    }\\n  }\\n  function markComponentErrored(fiber, thrownValue, lanes) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\\n        injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\\n      }\\n    }\\n  }\\n  function markComponentSuspended(fiber, wakeable, lanes) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\\n        injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\\n      }\\n    }\\n  }\\n  function markLayoutEffectsStarted(lanes) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\\n        injectedProfilingHooks.markLayoutEffectsStarted(lanes);\\n      }\\n    }\\n  }\\n  function markLayoutEffectsStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\\n        injectedProfilingHooks.markLayoutEffectsStopped();\\n      }\\n    }\\n  }\\n  function markPassiveEffectsStarted(lanes) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\\n        injectedProfilingHooks.markPassiveEffectsStarted(lanes);\\n      }\\n    }\\n  }\\n  function markPassiveEffectsStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\\n        injectedProfilingHooks.markPassiveEffectsStopped();\\n      }\\n    }\\n  }\\n  function markRenderStarted(lanes) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\\n        injectedProfilingHooks.markRenderStarted(lanes);\\n      }\\n    }\\n  }\\n  function markRenderYielded() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\\n        injectedProfilingHooks.markRenderYielded();\\n      }\\n    }\\n  }\\n  function markRenderStopped() {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\\n        injectedProfilingHooks.markRenderStopped();\\n      }\\n    }\\n  }\\n  function markRenderScheduled(lane) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\\n        injectedProfilingHooks.markRenderScheduled(lane);\\n      }\\n    }\\n  }\\n  function markForceUpdateScheduled(fiber, lane) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\\n        injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\\n      }\\n    }\\n  }\\n  function markStateUpdateScheduled(fiber, lane) {\\n    {\\n      if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\\n        injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\\n      }\\n    }\\n  }\\n\\n  var NoMode =\\n  /*                         */\\n  0; // TODO: Remove ConcurrentMode by reading from the root tag instead\\n\\n  var ConcurrentMode =\\n  /*                 */\\n  1;\\n  var ProfileMode =\\n  /*                    */\\n  2;\\n  var StrictLegacyMode =\\n  /*               */\\n  8;\\n  var StrictEffectsMode =\\n  /*              */\\n  16;\\n\\n  // TODO: This is pretty well supported by browsers. Maybe we can drop it.\\n  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\\n  // Based on:\\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\\n\\n  var log = Math.log;\\n  var LN2 = Math.LN2;\\n\\n  function clz32Fallback(x) {\\n    var asUint = x >>> 0;\\n\\n    if (asUint === 0) {\\n      return 32;\\n    }\\n\\n    return 31 - (log(asUint) / LN2 | 0) | 0;\\n  }\\n\\n  // If those values are changed that package should be rebuilt and redeployed.\\n\\n  var TotalLanes = 31;\\n  var NoLanes =\\n  /*                        */\\n  0;\\n  var NoLane =\\n  /*                          */\\n  0;\\n  var SyncLane =\\n  /*                        */\\n  1;\\n  var InputContinuousHydrationLane =\\n  /*    */\\n  2;\\n  var InputContinuousLane =\\n  /*             */\\n  4;\\n  var DefaultHydrationLane =\\n  /*            */\\n  8;\\n  var DefaultLane =\\n  /*                     */\\n  16;\\n  var TransitionHydrationLane =\\n  /*                */\\n  32;\\n  var TransitionLanes =\\n  /*                       */\\n  4194240;\\n  var TransitionLane1 =\\n  /*                        */\\n  64;\\n  var TransitionLane2 =\\n  /*                        */\\n  128;\\n  var TransitionLane3 =\\n  /*                        */\\n  256;\\n  var TransitionLane4 =\\n  /*                        */\\n  512;\\n  var TransitionLane5 =\\n  /*                        */\\n  1024;\\n  var TransitionLane6 =\\n  /*                        */\\n  2048;\\n  var TransitionLane7 =\\n  /*                        */\\n  4096;\\n  var TransitionLane8 =\\n  /*                        */\\n  8192;\\n  var TransitionLane9 =\\n  /*                        */\\n  16384;\\n  var TransitionLane10 =\\n  /*                       */\\n  32768;\\n  var TransitionLane11 =\\n  /*                       */\\n  65536;\\n  var TransitionLane12 =\\n  /*                       */\\n  131072;\\n  var TransitionLane13 =\\n  /*                       */\\n  262144;\\n  var TransitionLane14 =\\n  /*                       */\\n  524288;\\n  var TransitionLane15 =\\n  /*                       */\\n  1048576;\\n  var TransitionLane16 =\\n  /*                       */\\n  2097152;\\n  var RetryLanes =\\n  /*                            */\\n  130023424;\\n  var RetryLane1 =\\n  /*                             */\\n  4194304;\\n  var RetryLane2 =\\n  /*                             */\\n  8388608;\\n  var RetryLane3 =\\n  /*                             */\\n  16777216;\\n  var RetryLane4 =\\n  /*                             */\\n  33554432;\\n  var RetryLane5 =\\n  /*                             */\\n  67108864;\\n  var SomeRetryLane = RetryLane1;\\n  var SelectiveHydrationLane =\\n  /*          */\\n  134217728;\\n  var NonIdleLanes =\\n  /*                          */\\n  268435455;\\n  var IdleHydrationLane =\\n  /*               */\\n  268435456;\\n  var IdleLane =\\n  /*                        */\\n  536870912;\\n  var OffscreenLane =\\n  /*                   */\\n  1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\\n  // It should be kept in sync with the Lanes values above.\\n\\n  function getLabelForLane(lane) {\\n    {\\n      if (lane & SyncLane) {\\n        return 'Sync';\\n      }\\n\\n      if (lane & InputContinuousHydrationLane) {\\n        return 'InputContinuousHydration';\\n      }\\n\\n      if (lane & InputContinuousLane) {\\n        return 'InputContinuous';\\n      }\\n\\n      if (lane & DefaultHydrationLane) {\\n        return 'DefaultHydration';\\n      }\\n\\n      if (lane & DefaultLane) {\\n        return 'Default';\\n      }\\n\\n      if (lane & TransitionHydrationLane) {\\n        return 'TransitionHydration';\\n      }\\n\\n      if (lane & TransitionLanes) {\\n        return 'Transition';\\n      }\\n\\n      if (lane & RetryLanes) {\\n        return 'Retry';\\n      }\\n\\n      if (lane & SelectiveHydrationLane) {\\n        return 'SelectiveHydration';\\n      }\\n\\n      if (lane & IdleHydrationLane) {\\n        return 'IdleHydration';\\n      }\\n\\n      if (lane & IdleLane) {\\n        return 'Idle';\\n      }\\n\\n      if (lane & OffscreenLane) {\\n        return 'Offscreen';\\n      }\\n    }\\n  }\\n  var NoTimestamp = -1;\\n  var nextTransitionLane = TransitionLane1;\\n  var nextRetryLane = RetryLane1;\\n\\n  function getHighestPriorityLanes(lanes) {\\n    switch (getHighestPriorityLane(lanes)) {\\n      case SyncLane:\\n        return SyncLane;\\n\\n      case InputContinuousHydrationLane:\\n        return InputContinuousHydrationLane;\\n\\n      case InputContinuousLane:\\n        return InputContinuousLane;\\n\\n      case DefaultHydrationLane:\\n        return DefaultHydrationLane;\\n\\n      case DefaultLane:\\n        return DefaultLane;\\n\\n      case TransitionHydrationLane:\\n        return TransitionHydrationLane;\\n\\n      case TransitionLane1:\\n      case TransitionLane2:\\n      case TransitionLane3:\\n      case TransitionLane4:\\n      case TransitionLane5:\\n      case TransitionLane6:\\n      case TransitionLane7:\\n      case TransitionLane8:\\n      case TransitionLane9:\\n      case TransitionLane10:\\n      case TransitionLane11:\\n      case TransitionLane12:\\n      case TransitionLane13:\\n      case TransitionLane14:\\n      case TransitionLane15:\\n      case TransitionLane16:\\n        return lanes & TransitionLanes;\\n\\n      case RetryLane1:\\n      case RetryLane2:\\n      case RetryLane3:\\n      case RetryLane4:\\n      case RetryLane5:\\n        return lanes & RetryLanes;\\n\\n      case SelectiveHydrationLane:\\n        return SelectiveHydrationLane;\\n\\n      case IdleHydrationLane:\\n        return IdleHydrationLane;\\n\\n      case IdleLane:\\n        return IdleLane;\\n\\n      case OffscreenLane:\\n        return OffscreenLane;\\n\\n      default:\\n        {\\n          error('Should have found matching lanes. This is a bug in React.');\\n        } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\\n\\n\\n        return lanes;\\n    }\\n  }\\n\\n  function getNextLanes(root, wipLanes) {\\n    // Early bailout if there's no pending work left.\\n    var pendingLanes = root.pendingLanes;\\n\\n    if (pendingLanes === NoLanes) {\\n      return NoLanes;\\n    }\\n\\n    var nextLanes = NoLanes;\\n    var suspendedLanes = root.suspendedLanes;\\n    var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\\n    // even if the work is suspended.\\n\\n    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\\n\\n    if (nonIdlePendingLanes !== NoLanes) {\\n      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\\n\\n      if (nonIdleUnblockedLanes !== NoLanes) {\\n        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\\n      } else {\\n        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\\n\\n        if (nonIdlePingedLanes !== NoLanes) {\\n          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\\n        }\\n      }\\n    } else {\\n      // The only remaining work is Idle.\\n      var unblockedLanes = pendingLanes & ~suspendedLanes;\\n\\n      if (unblockedLanes !== NoLanes) {\\n        nextLanes = getHighestPriorityLanes(unblockedLanes);\\n      } else {\\n        if (pingedLanes !== NoLanes) {\\n          nextLanes = getHighestPriorityLanes(pingedLanes);\\n        }\\n      }\\n    }\\n\\n    if (nextLanes === NoLanes) {\\n      // This should only be reachable if we're suspended\\n      // TODO: Consider warning in this path if a fallback timer is not scheduled.\\n      return NoLanes;\\n    } // If we're already in the middle of a render, switching lanes will interrupt\\n    // it and we'll lose our progress. We should only do this if the new lanes are\\n    // higher priority.\\n\\n\\n    if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\\n    // bother waiting until the root is complete.\\n    (wipLanes & suspendedLanes) === NoLanes) {\\n      var nextLane = getHighestPriorityLane(nextLanes);\\n      var wipLane = getHighestPriorityLane(wipLanes);\\n\\n      if ( // Tests whether the next lane is equal or lower priority than the wip\\n      // one. This works because the bits decrease in priority as you go left.\\n      nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\\n      // only difference between default updates and transition updates is that\\n      // default updates do not support refresh transitions.\\n      nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\\n        // Keep working on the existing in-progress tree. Do not interrupt.\\n        return wipLanes;\\n      }\\n    }\\n\\n    if ((nextLanes & InputContinuousLane) !== NoLanes) {\\n      // When updates are sync by default, we entangle continuous priority updates\\n      // and default updates, so they render in the same batch. The only reason\\n      // they use separate lanes is because continuous updates should interrupt\\n      // transitions, but default updates should not.\\n      nextLanes |= pendingLanes & DefaultLane;\\n    } // Check for entangled lanes and add them to the batch.\\n    //\\n    // A lane is said to be entangled with another when it's not allowed to render\\n    // in a batch that does not also include the other lane. Typically we do this\\n    // when multiple updates have the same source, and we only want to respond to\\n    // the most recent event from that source.\\n    //\\n    // Note that we apply entanglements *after* checking for partial work above.\\n    // This means that if a lane is entangled during an interleaved event while\\n    // it's already rendering, we won't interrupt it. This is intentional, since\\n    // entanglement is usually \\\"best effort\\\": we'll try our best to render the\\n    // lanes in the same batch, but it's not worth throwing out partially\\n    // completed work in order to do it.\\n    // TODO: Reconsider this. The counter-argument is that the partial work\\n    // represents an intermediate state, which we don't want to show to the user.\\n    // And by spending extra time finishing it, we're increasing the amount of\\n    // time it takes to show the final state, which is what they are actually\\n    // waiting for.\\n    //\\n    // For those exceptions where entanglement is semantically important, like\\n    // useMutableSource, we should ensure that there is no partial work at the\\n    // time we apply the entanglement.\\n\\n\\n    var entangledLanes = root.entangledLanes;\\n\\n    if (entangledLanes !== NoLanes) {\\n      var entanglements = root.entanglements;\\n      var lanes = nextLanes & entangledLanes;\\n\\n      while (lanes > 0) {\\n        var index = pickArbitraryLaneIndex(lanes);\\n        var lane = 1 << index;\\n        nextLanes |= entanglements[index];\\n        lanes &= ~lane;\\n      }\\n    }\\n\\n    return nextLanes;\\n  }\\n  function getMostRecentEventTime(root, lanes) {\\n    var eventTimes = root.eventTimes;\\n    var mostRecentEventTime = NoTimestamp;\\n\\n    while (lanes > 0) {\\n      var index = pickArbitraryLaneIndex(lanes);\\n      var lane = 1 << index;\\n      var eventTime = eventTimes[index];\\n\\n      if (eventTime > mostRecentEventTime) {\\n        mostRecentEventTime = eventTime;\\n      }\\n\\n      lanes &= ~lane;\\n    }\\n\\n    return mostRecentEventTime;\\n  }\\n\\n  function computeExpirationTime(lane, currentTime) {\\n    switch (lane) {\\n      case SyncLane:\\n      case InputContinuousHydrationLane:\\n      case InputContinuousLane:\\n        // User interactions should expire slightly more quickly.\\n        //\\n        // NOTE: This is set to the corresponding constant as in Scheduler.js.\\n        // When we made it larger, a product metric in www regressed, suggesting\\n        // there's a user interaction that's being starved by a series of\\n        // synchronous updates. If that theory is correct, the proper solution is\\n        // to fix the starvation. However, this scenario supports the idea that\\n        // expiration times are an important safeguard when starvation\\n        // does happen.\\n        return currentTime + 250;\\n\\n      case DefaultHydrationLane:\\n      case DefaultLane:\\n      case TransitionHydrationLane:\\n      case TransitionLane1:\\n      case TransitionLane2:\\n      case TransitionLane3:\\n      case TransitionLane4:\\n      case TransitionLane5:\\n      case TransitionLane6:\\n      case TransitionLane7:\\n      case TransitionLane8:\\n      case TransitionLane9:\\n      case TransitionLane10:\\n      case TransitionLane11:\\n      case TransitionLane12:\\n      case TransitionLane13:\\n      case TransitionLane14:\\n      case TransitionLane15:\\n      case TransitionLane16:\\n        return currentTime + 5000;\\n\\n      case RetryLane1:\\n      case RetryLane2:\\n      case RetryLane3:\\n      case RetryLane4:\\n      case RetryLane5:\\n        // TODO: Retries should be allowed to expire if they are CPU bound for\\n        // too long, but when I made this change it caused a spike in browser\\n        // crashes. There must be some other underlying bug; not super urgent but\\n        // ideally should figure out why and fix it. Unfortunately we don't have\\n        // a repro for the crashes, only detected via production metrics.\\n        return NoTimestamp;\\n\\n      case SelectiveHydrationLane:\\n      case IdleHydrationLane:\\n      case IdleLane:\\n      case OffscreenLane:\\n        // Anything idle priority or lower should never expire.\\n        return NoTimestamp;\\n\\n      default:\\n        {\\n          error('Should have found matching lanes. This is a bug in React.');\\n        }\\n\\n        return NoTimestamp;\\n    }\\n  }\\n\\n  function markStarvedLanesAsExpired(root, currentTime) {\\n    // TODO: This gets called every time we yield. We can optimize by storing\\n    // the earliest expiration time on the root. Then use that to quickly bail out\\n    // of this function.\\n    var pendingLanes = root.pendingLanes;\\n    var suspendedLanes = root.suspendedLanes;\\n    var pingedLanes = root.pingedLanes;\\n    var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\\n    // expiration time. If so, we'll assume the update is being starved and mark\\n    // it as expired to force it to finish.\\n\\n    var lanes = pendingLanes;\\n\\n    while (lanes > 0) {\\n      var index = pickArbitraryLaneIndex(lanes);\\n      var lane = 1 << index;\\n      var expirationTime = expirationTimes[index];\\n\\n      if (expirationTime === NoTimestamp) {\\n        // Found a pending lane with no expiration time. If it's not suspended, or\\n        // if it's pinged, assume it's CPU-bound. Compute a new expiration time\\n        // using the current time.\\n        if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\\n          // Assumes timestamps are monotonically increasing.\\n          expirationTimes[index] = computeExpirationTime(lane, currentTime);\\n        }\\n      } else if (expirationTime <= currentTime) {\\n        // This lane expired\\n        root.expiredLanes |= lane;\\n      }\\n\\n      lanes &= ~lane;\\n    }\\n  } // This returns the highest priority pending lanes regardless of whether they\\n  // are suspended.\\n\\n  function getHighestPriorityPendingLanes(root) {\\n    return getHighestPriorityLanes(root.pendingLanes);\\n  }\\n  function getLanesToRetrySynchronouslyOnError(root) {\\n    var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\\n\\n    if (everythingButOffscreen !== NoLanes) {\\n      return everythingButOffscreen;\\n    }\\n\\n    if (everythingButOffscreen & OffscreenLane) {\\n      return OffscreenLane;\\n    }\\n\\n    return NoLanes;\\n  }\\n  function includesSyncLane(lanes) {\\n    return (lanes & SyncLane) !== NoLanes;\\n  }\\n  function includesNonIdleWork(lanes) {\\n    return (lanes & NonIdleLanes) !== NoLanes;\\n  }\\n  function includesOnlyRetries(lanes) {\\n    return (lanes & RetryLanes) === lanes;\\n  }\\n  function includesOnlyNonUrgentLanes(lanes) {\\n    var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\\n    return (lanes & UrgentLanes) === NoLanes;\\n  }\\n  function includesOnlyTransitions(lanes) {\\n    return (lanes & TransitionLanes) === lanes;\\n  }\\n  function includesBlockingLane(root, lanes) {\\n\\n    var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\\n    return (lanes & SyncDefaultLanes) !== NoLanes;\\n  }\\n  function includesExpiredLane(root, lanes) {\\n    // This is a separate check from includesBlockingLane because a lane can\\n    // expire after a render has already started.\\n    return (lanes & root.expiredLanes) !== NoLanes;\\n  }\\n  function isTransitionLane(lane) {\\n    return (lane & TransitionLanes) !== NoLanes;\\n  }\\n  function claimNextTransitionLane() {\\n    // Cycle through the lanes, assigning each new transition to the next lane.\\n    // In most cases, this means every transition gets its own lane, until we\\n    // run out of lanes and cycle back to the beginning.\\n    var lane = nextTransitionLane;\\n    nextTransitionLane <<= 1;\\n\\n    if ((nextTransitionLane & TransitionLanes) === NoLanes) {\\n      nextTransitionLane = TransitionLane1;\\n    }\\n\\n    return lane;\\n  }\\n  function claimNextRetryLane() {\\n    var lane = nextRetryLane;\\n    nextRetryLane <<= 1;\\n\\n    if ((nextRetryLane & RetryLanes) === NoLanes) {\\n      nextRetryLane = RetryLane1;\\n    }\\n\\n    return lane;\\n  }\\n  function getHighestPriorityLane(lanes) {\\n    return lanes & -lanes;\\n  }\\n  function pickArbitraryLane(lanes) {\\n    // This wrapper function gets inlined. Only exists so to communicate that it\\n    // doesn't matter which bit is selected; you can pick any bit without\\n    // affecting the algorithms where its used. Here I'm using\\n    // getHighestPriorityLane because it requires the fewest operations.\\n    return getHighestPriorityLane(lanes);\\n  }\\n\\n  function pickArbitraryLaneIndex(lanes) {\\n    return 31 - clz32(lanes);\\n  }\\n\\n  function laneToIndex(lane) {\\n    return pickArbitraryLaneIndex(lane);\\n  }\\n\\n  function includesSomeLane(a, b) {\\n    return (a & b) !== NoLanes;\\n  }\\n  function isSubsetOfLanes(set, subset) {\\n    return (set & subset) === subset;\\n  }\\n  function mergeLanes(a, b) {\\n    return a | b;\\n  }\\n  function removeLanes(set, subset) {\\n    return set & ~subset;\\n  }\\n  function intersectLanes(a, b) {\\n    return a & b;\\n  } // Seems redundant, but it changes the type from a single lane (used for\\n  // updates) to a group of lanes (used for flushing work).\\n\\n  function laneToLanes(lane) {\\n    return lane;\\n  }\\n  function higherPriorityLane(a, b) {\\n    // This works because the bit ranges decrease in priority as you go left.\\n    return a !== NoLane && a < b ? a : b;\\n  }\\n  function createLaneMap(initial) {\\n    // Intentionally pushing one by one.\\n    // https://v8.dev/blog/elements-kinds#avoid-creating-holes\\n    var laneMap = [];\\n\\n    for (var i = 0; i < TotalLanes; i++) {\\n      laneMap.push(initial);\\n    }\\n\\n    return laneMap;\\n  }\\n  function markRootUpdated(root, updateLane, eventTime) {\\n    root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\\n    // could unblock them. Clear the suspended lanes so that we can try rendering\\n    // them again.\\n    //\\n    // TODO: We really only need to unsuspend only lanes that are in the\\n    // `subtreeLanes` of the updated fiber, or the update lanes of the return\\n    // path. This would exclude suspended updates in an unrelated sibling tree,\\n    // since there's no way for this update to unblock it.\\n    //\\n    // We don't do this if the incoming update is idle, because we never process\\n    // idle updates until after all the regular updates have finished; there's no\\n    // way it could unblock a transition.\\n\\n    if (updateLane !== IdleLane) {\\n      root.suspendedLanes = NoLanes;\\n      root.pingedLanes = NoLanes;\\n    }\\n\\n    var eventTimes = root.eventTimes;\\n    var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\\n    // recent event, and we assume time is monotonically increasing.\\n\\n    eventTimes[index] = eventTime;\\n  }\\n  function markRootSuspended(root, suspendedLanes) {\\n    root.suspendedLanes |= suspendedLanes;\\n    root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\\n\\n    var expirationTimes = root.expirationTimes;\\n    var lanes = suspendedLanes;\\n\\n    while (lanes > 0) {\\n      var index = pickArbitraryLaneIndex(lanes);\\n      var lane = 1 << index;\\n      expirationTimes[index] = NoTimestamp;\\n      lanes &= ~lane;\\n    }\\n  }\\n  function markRootPinged(root, pingedLanes, eventTime) {\\n    root.pingedLanes |= root.suspendedLanes & pingedLanes;\\n  }\\n  function markRootFinished(root, remainingLanes) {\\n    var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\\n    root.pendingLanes = remainingLanes; // Let's try everything again\\n\\n    root.suspendedLanes = NoLanes;\\n    root.pingedLanes = NoLanes;\\n    root.expiredLanes &= remainingLanes;\\n    root.mutableReadLanes &= remainingLanes;\\n    root.entangledLanes &= remainingLanes;\\n    var entanglements = root.entanglements;\\n    var eventTimes = root.eventTimes;\\n    var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\\n\\n    var lanes = noLongerPendingLanes;\\n\\n    while (lanes > 0) {\\n      var index = pickArbitraryLaneIndex(lanes);\\n      var lane = 1 << index;\\n      entanglements[index] = NoLanes;\\n      eventTimes[index] = NoTimestamp;\\n      expirationTimes[index] = NoTimestamp;\\n      lanes &= ~lane;\\n    }\\n  }\\n  function markRootEntangled(root, entangledLanes) {\\n    // In addition to entangling each of the given lanes with each other, we also\\n    // have to consider _transitive_ entanglements. For each lane that is already\\n    // entangled with *any* of the given lanes, that lane is now transitively\\n    // entangled with *all* the given lanes.\\n    //\\n    // Translated: If C is entangled with A, then entangling A with B also\\n    // entangles C with B.\\n    //\\n    // If this is hard to grasp, it might help to intentionally break this\\n    // function and look at the tests that fail in ReactTransition-test.js. Try\\n    // commenting out one of the conditions below.\\n    var rootEntangledLanes = root.entangledLanes |= entangledLanes;\\n    var entanglements = root.entanglements;\\n    var lanes = rootEntangledLanes;\\n\\n    while (lanes) {\\n      var index = pickArbitraryLaneIndex(lanes);\\n      var lane = 1 << index;\\n\\n      if ( // Is this one of the newly entangled lanes?\\n      lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\\n      entanglements[index] & entangledLanes) {\\n        entanglements[index] |= entangledLanes;\\n      }\\n\\n      lanes &= ~lane;\\n    }\\n  }\\n  function getBumpedLaneForHydration(root, renderLanes) {\\n    var renderLane = getHighestPriorityLane(renderLanes);\\n    var lane;\\n\\n    switch (renderLane) {\\n      case InputContinuousLane:\\n        lane = InputContinuousHydrationLane;\\n        break;\\n\\n      case DefaultLane:\\n        lane = DefaultHydrationLane;\\n        break;\\n\\n      case TransitionLane1:\\n      case TransitionLane2:\\n      case TransitionLane3:\\n      case TransitionLane4:\\n      case TransitionLane5:\\n      case TransitionLane6:\\n      case TransitionLane7:\\n      case TransitionLane8:\\n      case TransitionLane9:\\n      case TransitionLane10:\\n      case TransitionLane11:\\n      case TransitionLane12:\\n      case TransitionLane13:\\n      case TransitionLane14:\\n      case TransitionLane15:\\n      case TransitionLane16:\\n      case RetryLane1:\\n      case RetryLane2:\\n      case RetryLane3:\\n      case RetryLane4:\\n      case RetryLane5:\\n        lane = TransitionHydrationLane;\\n        break;\\n\\n      case IdleLane:\\n        lane = IdleHydrationLane;\\n        break;\\n\\n      default:\\n        // Everything else is already either a hydration lane, or shouldn't\\n        // be retried at a hydration lane.\\n        lane = NoLane;\\n        break;\\n    } // Check if the lane we chose is suspended. If so, that indicates that we\\n    // already attempted and failed to hydrate at that level. Also check if we're\\n    // already rendering that lane, which is rare but could happen.\\n\\n\\n    if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\\n      // Give up trying to hydrate and fall back to client render.\\n      return NoLane;\\n    }\\n\\n    return lane;\\n  }\\n  function addFiberToLanesMap(root, fiber, lanes) {\\n\\n    if (!isDevToolsPresent) {\\n      return;\\n    }\\n\\n    var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\\n\\n    while (lanes > 0) {\\n      var index = laneToIndex(lanes);\\n      var lane = 1 << index;\\n      var updaters = pendingUpdatersLaneMap[index];\\n      updaters.add(fiber);\\n      lanes &= ~lane;\\n    }\\n  }\\n  function movePendingFibersToMemoized(root, lanes) {\\n\\n    if (!isDevToolsPresent) {\\n      return;\\n    }\\n\\n    var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\\n    var memoizedUpdaters = root.memoizedUpdaters;\\n\\n    while (lanes > 0) {\\n      var index = laneToIndex(lanes);\\n      var lane = 1 << index;\\n      var updaters = pendingUpdatersLaneMap[index];\\n\\n      if (updaters.size > 0) {\\n        updaters.forEach(function (fiber) {\\n          var alternate = fiber.alternate;\\n\\n          if (alternate === null || !memoizedUpdaters.has(alternate)) {\\n            memoizedUpdaters.add(fiber);\\n          }\\n        });\\n        updaters.clear();\\n      }\\n\\n      lanes &= ~lane;\\n    }\\n  }\\n  function getTransitionsForLanes(root, lanes) {\\n    {\\n      return null;\\n    }\\n  }\\n\\n  var DiscreteEventPriority = SyncLane;\\n  var ContinuousEventPriority = InputContinuousLane;\\n  var DefaultEventPriority = DefaultLane;\\n  var IdleEventPriority = IdleLane;\\n  var currentUpdatePriority = NoLane;\\n  function getCurrentUpdatePriority() {\\n    return currentUpdatePriority;\\n  }\\n  function setCurrentUpdatePriority(newPriority) {\\n    currentUpdatePriority = newPriority;\\n  }\\n  function runWithPriority(priority, fn) {\\n    var previousPriority = currentUpdatePriority;\\n\\n    try {\\n      currentUpdatePriority = priority;\\n      return fn();\\n    } finally {\\n      currentUpdatePriority = previousPriority;\\n    }\\n  }\\n  function higherEventPriority(a, b) {\\n    return a !== 0 && a < b ? a : b;\\n  }\\n  function lowerEventPriority(a, b) {\\n    return a === 0 || a > b ? a : b;\\n  }\\n  function isHigherEventPriority(a, b) {\\n    return a !== 0 && a < b;\\n  }\\n  function lanesToEventPriority(lanes) {\\n    var lane = getHighestPriorityLane(lanes);\\n\\n    if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\\n      return DiscreteEventPriority;\\n    }\\n\\n    if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\\n      return ContinuousEventPriority;\\n    }\\n\\n    if (includesNonIdleWork(lane)) {\\n      return DefaultEventPriority;\\n    }\\n\\n    return IdleEventPriority;\\n  }\\n\\n  // This is imported by the event replaying implementation in React DOM. It's\\n  // in a separate file to break a circular dependency between the renderer and\\n  // the reconciler.\\n  function isRootDehydrated(root) {\\n    var currentState = root.current.memoizedState;\\n    return currentState.isDehydrated;\\n  }\\n\\n  var _attemptSynchronousHydration;\\n\\n  function setAttemptSynchronousHydration(fn) {\\n    _attemptSynchronousHydration = fn;\\n  }\\n  function attemptSynchronousHydration(fiber) {\\n    _attemptSynchronousHydration(fiber);\\n  }\\n  var attemptContinuousHydration;\\n  function setAttemptContinuousHydration(fn) {\\n    attemptContinuousHydration = fn;\\n  }\\n  var attemptHydrationAtCurrentPriority;\\n  function setAttemptHydrationAtCurrentPriority(fn) {\\n    attemptHydrationAtCurrentPriority = fn;\\n  }\\n  var getCurrentUpdatePriority$1;\\n  function setGetCurrentUpdatePriority(fn) {\\n    getCurrentUpdatePriority$1 = fn;\\n  }\\n  var attemptHydrationAtPriority;\\n  function setAttemptHydrationAtPriority(fn) {\\n    attemptHydrationAtPriority = fn;\\n  } // TODO: Upgrade this definition once we're on a newer version of Flow that\\n  // has this definition built-in.\\n\\n  var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.\\n\\n  var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.\\n  // if the last target was dehydrated.\\n\\n  var queuedFocus = null;\\n  var queuedDrag = null;\\n  var queuedMouse = null; // For pointer events there can be one latest event per pointerId.\\n\\n  var queuedPointers = new Map();\\n  var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.\\n\\n  var queuedExplicitHydrationTargets = [];\\n  var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase\\n  'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];\\n  function isDiscreteEventThatRequiresHydration(eventType) {\\n    return discreteReplayableEvents.indexOf(eventType) > -1;\\n  }\\n\\n  function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\\n    return {\\n      blockedOn: blockedOn,\\n      domEventName: domEventName,\\n      eventSystemFlags: eventSystemFlags,\\n      nativeEvent: nativeEvent,\\n      targetContainers: [targetContainer]\\n    };\\n  }\\n\\n  function clearIfContinuousEvent(domEventName, nativeEvent) {\\n    switch (domEventName) {\\n      case 'focusin':\\n      case 'focusout':\\n        queuedFocus = null;\\n        break;\\n\\n      case 'dragenter':\\n      case 'dragleave':\\n        queuedDrag = null;\\n        break;\\n\\n      case 'mouseover':\\n      case 'mouseout':\\n        queuedMouse = null;\\n        break;\\n\\n      case 'pointerover':\\n      case 'pointerout':\\n        {\\n          var pointerId = nativeEvent.pointerId;\\n          queuedPointers.delete(pointerId);\\n          break;\\n        }\\n\\n      case 'gotpointercapture':\\n      case 'lostpointercapture':\\n        {\\n          var _pointerId = nativeEvent.pointerId;\\n          queuedPointerCaptures.delete(_pointerId);\\n          break;\\n        }\\n    }\\n  }\\n\\n  function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\\n    if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {\\n      var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);\\n\\n      if (blockedOn !== null) {\\n        var _fiber2 = getInstanceFromNode(blockedOn);\\n\\n        if (_fiber2 !== null) {\\n          // Attempt to increase the priority of this target.\\n          attemptContinuousHydration(_fiber2);\\n        }\\n      }\\n\\n      return queuedEvent;\\n    } // If we have already queued this exact event, then it's because\\n    // the different event systems have different DOM event listeners.\\n    // We can accumulate the flags, and the targetContainers, and\\n    // store a single event to be replayed.\\n\\n\\n    existingQueuedEvent.eventSystemFlags |= eventSystemFlags;\\n    var targetContainers = existingQueuedEvent.targetContainers;\\n\\n    if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {\\n      targetContainers.push(targetContainer);\\n    }\\n\\n    return existingQueuedEvent;\\n  }\\n\\n  function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {\\n    // These set relatedTarget to null because the replayed event will be treated as if we\\n    // moved from outside the window (no target) onto the target once it hydrates.\\n    // Instead of mutating we could clone the event.\\n    switch (domEventName) {\\n      case 'focusin':\\n        {\\n          var focusEvent = nativeEvent;\\n          queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);\\n          return true;\\n        }\\n\\n      case 'dragenter':\\n        {\\n          var dragEvent = nativeEvent;\\n          queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);\\n          return true;\\n        }\\n\\n      case 'mouseover':\\n        {\\n          var mouseEvent = nativeEvent;\\n          queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);\\n          return true;\\n        }\\n\\n      case 'pointerover':\\n        {\\n          var pointerEvent = nativeEvent;\\n          var pointerId = pointerEvent.pointerId;\\n          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));\\n          return true;\\n        }\\n\\n      case 'gotpointercapture':\\n        {\\n          var _pointerEvent = nativeEvent;\\n          var _pointerId2 = _pointerEvent.pointerId;\\n          queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));\\n          return true;\\n        }\\n    }\\n\\n    return false;\\n  } // Check if this target is unblocked. Returns true if it's unblocked.\\n\\n  function attemptExplicitHydrationTarget(queuedTarget) {\\n    // TODO: This function shares a lot of logic with findInstanceBlockingEvent.\\n    // Try to unify them. It's a bit tricky since it would require two return\\n    // values.\\n    var targetInst = getClosestInstanceFromNode(queuedTarget.target);\\n\\n    if (targetInst !== null) {\\n      var nearestMounted = getNearestMountedFiber(targetInst);\\n\\n      if (nearestMounted !== null) {\\n        var tag = nearestMounted.tag;\\n\\n        if (tag === SuspenseComponent) {\\n          var instance = getSuspenseInstanceFromFiber(nearestMounted);\\n\\n          if (instance !== null) {\\n            // We're blocked on hydrating this boundary.\\n            // Increase its priority.\\n            queuedTarget.blockedOn = instance;\\n            attemptHydrationAtPriority(queuedTarget.priority, function () {\\n              attemptHydrationAtCurrentPriority(nearestMounted);\\n            });\\n            return;\\n          }\\n        } else if (tag === HostRoot) {\\n          var root = nearestMounted.stateNode;\\n\\n          if (isRootDehydrated(root)) {\\n            queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of\\n            // a root other than sync.\\n\\n            return;\\n          }\\n        }\\n      }\\n    }\\n\\n    queuedTarget.blockedOn = null;\\n  }\\n\\n  function queueExplicitHydrationTarget(target) {\\n    // TODO: This will read the priority if it's dispatched by the React\\n    // event system but not native events. Should read window.event.type, like\\n    // we do for updates (getCurrentEventPriority).\\n    var updatePriority = getCurrentUpdatePriority$1();\\n    var queuedTarget = {\\n      blockedOn: null,\\n      target: target,\\n      priority: updatePriority\\n    };\\n    var i = 0;\\n\\n    for (; i < queuedExplicitHydrationTargets.length; i++) {\\n      // Stop once we hit the first target with lower priority than\\n      if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {\\n        break;\\n      }\\n    }\\n\\n    queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);\\n\\n    if (i === 0) {\\n      attemptExplicitHydrationTarget(queuedTarget);\\n    }\\n  }\\n\\n  function attemptReplayContinuousQueuedEvent(queuedEvent) {\\n    if (queuedEvent.blockedOn !== null) {\\n      return false;\\n    }\\n\\n    var targetContainers = queuedEvent.targetContainers;\\n\\n    while (targetContainers.length > 0) {\\n      var targetContainer = targetContainers[0];\\n      var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);\\n\\n      if (nextBlockedOn === null) {\\n        {\\n          var nativeEvent = queuedEvent.nativeEvent;\\n          var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);\\n          setReplayingEvent(nativeEventClone);\\n          nativeEvent.target.dispatchEvent(nativeEventClone);\\n          resetReplayingEvent();\\n        }\\n      } else {\\n        // We're still blocked. Try again later.\\n        var _fiber3 = getInstanceFromNode(nextBlockedOn);\\n\\n        if (_fiber3 !== null) {\\n          attemptContinuousHydration(_fiber3);\\n        }\\n\\n        queuedEvent.blockedOn = nextBlockedOn;\\n        return false;\\n      } // This target container was successfully dispatched. Try the next.\\n\\n\\n      targetContainers.shift();\\n    }\\n\\n    return true;\\n  }\\n\\n  function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {\\n    if (attemptReplayContinuousQueuedEvent(queuedEvent)) {\\n      map.delete(key);\\n    }\\n  }\\n\\n  function replayUnblockedEvents() {\\n    hasScheduledReplayAttempt = false;\\n\\n\\n    if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {\\n      queuedFocus = null;\\n    }\\n\\n    if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {\\n      queuedDrag = null;\\n    }\\n\\n    if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {\\n      queuedMouse = null;\\n    }\\n\\n    queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);\\n    queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);\\n  }\\n\\n  function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {\\n    if (queuedEvent.blockedOn === unblocked) {\\n      queuedEvent.blockedOn = null;\\n\\n      if (!hasScheduledReplayAttempt) {\\n        hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are\\n        // now unblocked. This first might not actually be unblocked yet.\\n        // We could check it early to avoid scheduling an unnecessary callback.\\n\\n        unstable_scheduleCallback(unstable_NormalPriority, replayUnblockedEvents);\\n      }\\n    }\\n  }\\n\\n  function retryIfBlockedOn(unblocked) {\\n    // Mark anything that was blocked on this as no longer blocked\\n    // and eligible for a replay.\\n    if (queuedDiscreteEvents.length > 0) {\\n      scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's\\n      // worth it because we expect very few discrete events to queue up and once\\n      // we are actually fully unblocked it will be fast to replay them.\\n\\n      for (var i = 1; i < queuedDiscreteEvents.length; i++) {\\n        var queuedEvent = queuedDiscreteEvents[i];\\n\\n        if (queuedEvent.blockedOn === unblocked) {\\n          queuedEvent.blockedOn = null;\\n        }\\n      }\\n    }\\n\\n    if (queuedFocus !== null) {\\n      scheduleCallbackIfUnblocked(queuedFocus, unblocked);\\n    }\\n\\n    if (queuedDrag !== null) {\\n      scheduleCallbackIfUnblocked(queuedDrag, unblocked);\\n    }\\n\\n    if (queuedMouse !== null) {\\n      scheduleCallbackIfUnblocked(queuedMouse, unblocked);\\n    }\\n\\n    var unblock = function (queuedEvent) {\\n      return scheduleCallbackIfUnblocked(queuedEvent, unblocked);\\n    };\\n\\n    queuedPointers.forEach(unblock);\\n    queuedPointerCaptures.forEach(unblock);\\n\\n    for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {\\n      var queuedTarget = queuedExplicitHydrationTargets[_i];\\n\\n      if (queuedTarget.blockedOn === unblocked) {\\n        queuedTarget.blockedOn = null;\\n      }\\n    }\\n\\n    while (queuedExplicitHydrationTargets.length > 0) {\\n      var nextExplicitTarget = queuedExplicitHydrationTargets[0];\\n\\n      if (nextExplicitTarget.blockedOn !== null) {\\n        // We're still blocked.\\n        break;\\n      } else {\\n        attemptExplicitHydrationTarget(nextExplicitTarget);\\n\\n        if (nextExplicitTarget.blockedOn === null) {\\n          // We're unblocked.\\n          queuedExplicitHydrationTargets.shift();\\n        }\\n      }\\n    }\\n  }\\n\\n  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?\\n\\n  var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.\\n  // We'd like to remove this but it's not clear if this is safe.\\n\\n  function setEnabled(enabled) {\\n    _enabled = !!enabled;\\n  }\\n  function isEnabled() {\\n    return _enabled;\\n  }\\n  function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {\\n    var eventPriority = getEventPriority(domEventName);\\n    var listenerWrapper;\\n\\n    switch (eventPriority) {\\n      case DiscreteEventPriority:\\n        listenerWrapper = dispatchDiscreteEvent;\\n        break;\\n\\n      case ContinuousEventPriority:\\n        listenerWrapper = dispatchContinuousEvent;\\n        break;\\n\\n      case DefaultEventPriority:\\n      default:\\n        listenerWrapper = dispatchEvent;\\n        break;\\n    }\\n\\n    return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);\\n  }\\n\\n  function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {\\n    var previousPriority = getCurrentUpdatePriority();\\n    var prevTransition = ReactCurrentBatchConfig.transition;\\n    ReactCurrentBatchConfig.transition = null;\\n\\n    try {\\n      setCurrentUpdatePriority(DiscreteEventPriority);\\n      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\\n    } finally {\\n      setCurrentUpdatePriority(previousPriority);\\n      ReactCurrentBatchConfig.transition = prevTransition;\\n    }\\n  }\\n\\n  function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {\\n    var previousPriority = getCurrentUpdatePriority();\\n    var prevTransition = ReactCurrentBatchConfig.transition;\\n    ReactCurrentBatchConfig.transition = null;\\n\\n    try {\\n      setCurrentUpdatePriority(ContinuousEventPriority);\\n      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\\n    } finally {\\n      setCurrentUpdatePriority(previousPriority);\\n      ReactCurrentBatchConfig.transition = prevTransition;\\n    }\\n  }\\n\\n  function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {\\n    if (!_enabled) {\\n      return;\\n    }\\n\\n    {\\n      dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);\\n    }\\n  }\\n\\n  function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {\\n    var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);\\n\\n    if (blockedOn === null) {\\n      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);\\n      clearIfContinuousEvent(domEventName, nativeEvent);\\n      return;\\n    }\\n\\n    if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {\\n      nativeEvent.stopPropagation();\\n      return;\\n    } // We need to clear only if we didn't queue because\\n    // queueing is accumulative.\\n\\n\\n    clearIfContinuousEvent(domEventName, nativeEvent);\\n\\n    if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {\\n      while (blockedOn !== null) {\\n        var fiber = getInstanceFromNode(blockedOn);\\n\\n        if (fiber !== null) {\\n          attemptSynchronousHydration(fiber);\\n        }\\n\\n        var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);\\n\\n        if (nextBlockedOn === null) {\\n          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);\\n        }\\n\\n        if (nextBlockedOn === blockedOn) {\\n          break;\\n        }\\n\\n        blockedOn = nextBlockedOn;\\n      }\\n\\n      if (blockedOn !== null) {\\n        nativeEvent.stopPropagation();\\n      }\\n\\n      return;\\n    } // This is not replayable so we'll invoke it but without a target,\\n    // in case the event system needs to trace it.\\n\\n\\n    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);\\n  }\\n\\n  var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.\\n  // The return_targetInst field above is conceptually part of the return value.\\n\\n  function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {\\n    // TODO: Warn if _enabled is false.\\n    return_targetInst = null;\\n    var nativeEventTarget = getEventTarget(nativeEvent);\\n    var targetInst = getClosestInstanceFromNode(nativeEventTarget);\\n\\n    if (targetInst !== null) {\\n      var nearestMounted = getNearestMountedFiber(targetInst);\\n\\n      if (nearestMounted === null) {\\n        // This tree has been unmounted already. Dispatch without a target.\\n        targetInst = null;\\n      } else {\\n        var tag = nearestMounted.tag;\\n\\n        if (tag === SuspenseComponent) {\\n          var instance = getSuspenseInstanceFromFiber(nearestMounted);\\n\\n          if (instance !== null) {\\n            // Queue the event to be replayed later. Abort dispatching since we\\n            // don't want this event dispatched twice through the event system.\\n            // TODO: If this is the first discrete event in the queue. Schedule an increased\\n            // priority for this boundary.\\n            return instance;\\n          } // This shouldn't happen, something went wrong but to avoid blocking\\n          // the whole system, dispatch the event without a target.\\n          // TODO: Warn.\\n\\n\\n          targetInst = null;\\n        } else if (tag === HostRoot) {\\n          var root = nearestMounted.stateNode;\\n\\n          if (isRootDehydrated(root)) {\\n            // If this happens during a replay something went wrong and it might block\\n            // the whole system.\\n            return getContainerFromFiber(nearestMounted);\\n          }\\n\\n          targetInst = null;\\n        } else if (nearestMounted !== targetInst) {\\n          // If we get an event (ex: img onload) before committing that\\n          // component's mount, ignore it for now (that is, treat it as if it was an\\n          // event on a non-React tree). We might also consider queueing events and\\n          // dispatching them after the mount.\\n          targetInst = null;\\n        }\\n      }\\n    }\\n\\n    return_targetInst = targetInst; // We're not blocked on anything.\\n\\n    return null;\\n  }\\n  function getEventPriority(domEventName) {\\n    switch (domEventName) {\\n      // Used by SimpleEventPlugin:\\n      case 'cancel':\\n      case 'click':\\n      case 'close':\\n      case 'contextmenu':\\n      case 'copy':\\n      case 'cut':\\n      case 'auxclick':\\n      case 'dblclick':\\n      case 'dragend':\\n      case 'dragstart':\\n      case 'drop':\\n      case 'focusin':\\n      case 'focusout':\\n      case 'input':\\n      case 'invalid':\\n      case 'keydown':\\n      case 'keypress':\\n      case 'keyup':\\n      case 'mousedown':\\n      case 'mouseup':\\n      case 'paste':\\n      case 'pause':\\n      case 'play':\\n      case 'pointercancel':\\n      case 'pointerdown':\\n      case 'pointerup':\\n      case 'ratechange':\\n      case 'reset':\\n      case 'resize':\\n      case 'seeked':\\n      case 'submit':\\n      case 'touchcancel':\\n      case 'touchend':\\n      case 'touchstart':\\n      case 'volumechange': // Used by polyfills:\\n      // eslint-disable-next-line no-fallthrough\\n\\n      case 'change':\\n      case 'selectionchange':\\n      case 'textInput':\\n      case 'compositionstart':\\n      case 'compositionend':\\n      case 'compositionupdate': // Only enableCreateEventHandleAPI:\\n      // eslint-disable-next-line no-fallthrough\\n\\n      case 'beforeblur':\\n      case 'afterblur': // Not used by React but could be by user code:\\n      // eslint-disable-next-line no-fallthrough\\n\\n      case 'beforeinput':\\n      case 'blur':\\n      case 'fullscreenchange':\\n      case 'focus':\\n      case 'hashchange':\\n      case 'popstate':\\n      case 'select':\\n      case 'selectstart':\\n        return DiscreteEventPriority;\\n\\n      case 'drag':\\n      case 'dragenter':\\n      case 'dragexit':\\n      case 'dragleave':\\n      case 'dragover':\\n      case 'mousemove':\\n      case 'mouseout':\\n      case 'mouseover':\\n      case 'pointermove':\\n      case 'pointerout':\\n      case 'pointerover':\\n      case 'scroll':\\n      case 'toggle':\\n      case 'touchmove':\\n      case 'wheel': // Not used by React but could be by user code:\\n      // eslint-disable-next-line no-fallthrough\\n\\n      case 'mouseenter':\\n      case 'mouseleave':\\n      case 'pointerenter':\\n      case 'pointerleave':\\n        return ContinuousEventPriority;\\n\\n      case 'message':\\n        {\\n          // We might be in the Scheduler callback.\\n          // Eventually this mechanism will be replaced by a check\\n          // of the current priority on the native scheduler.\\n          var schedulerPriority = getCurrentPriorityLevel();\\n\\n          switch (schedulerPriority) {\\n            case ImmediatePriority:\\n              return DiscreteEventPriority;\\n\\n            case UserBlockingPriority:\\n              return ContinuousEventPriority;\\n\\n            case NormalPriority:\\n            case LowPriority:\\n              // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\\n              return DefaultEventPriority;\\n\\n            case IdlePriority:\\n              return IdleEventPriority;\\n\\n            default:\\n              return DefaultEventPriority;\\n          }\\n        }\\n\\n      default:\\n        return DefaultEventPriority;\\n    }\\n  }\\n\\n  function addEventBubbleListener(target, eventType, listener) {\\n    target.addEventListener(eventType, listener, false);\\n    return listener;\\n  }\\n  function addEventCaptureListener(target, eventType, listener) {\\n    target.addEventListener(eventType, listener, true);\\n    return listener;\\n  }\\n  function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {\\n    target.addEventListener(eventType, listener, {\\n      capture: true,\\n      passive: passive\\n    });\\n    return listener;\\n  }\\n  function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {\\n    target.addEventListener(eventType, listener, {\\n      passive: passive\\n    });\\n    return listener;\\n  }\\n\\n  /**\\n   * These variables store information about text content of a target node,\\n   * allowing comparison of content before and after a given event.\\n   *\\n   * Identify the node where selection currently begins, then observe\\n   * both its text content and its current position in the DOM. Since the\\n   * browser may natively replace the target node during composition, we can\\n   * use its position to find its replacement.\\n   *\\n   *\\n   */\\n  var root = null;\\n  var startText = null;\\n  var fallbackText = null;\\n  function initialize(nativeEventTarget) {\\n    root = nativeEventTarget;\\n    startText = getText();\\n    return true;\\n  }\\n  function reset() {\\n    root = null;\\n    startText = null;\\n    fallbackText = null;\\n  }\\n  function getData() {\\n    if (fallbackText) {\\n      return fallbackText;\\n    }\\n\\n    var start;\\n    var startValue = startText;\\n    var startLength = startValue.length;\\n    var end;\\n    var endValue = getText();\\n    var endLength = endValue.length;\\n\\n    for (start = 0; start < startLength; start++) {\\n      if (startValue[start] !== endValue[start]) {\\n        break;\\n      }\\n    }\\n\\n    var minEnd = startLength - start;\\n\\n    for (end = 1; end <= minEnd; end++) {\\n      if (startValue[startLength - end] !== endValue[endLength - end]) {\\n        break;\\n      }\\n    }\\n\\n    var sliceTail = end > 1 ? 1 - end : undefined;\\n    fallbackText = endValue.slice(start, sliceTail);\\n    return fallbackText;\\n  }\\n  function getText() {\\n    if ('value' in root) {\\n      return root.value;\\n    }\\n\\n    return root.textContent;\\n  }\\n\\n  /**\\n   * `charCode` represents the actual \\\"character code\\\" and is safe to use with\\n   * `String.fromCharCode`. As such, only keys that correspond to printable\\n   * characters produce a valid `charCode`, the only exception to this is Enter.\\n   * The Tab-key is considered non-printable and does not have a `charCode`,\\n   * presumably because it does not produce a tab-character in browsers.\\n   *\\n   * @param {object} nativeEvent Native browser event.\\n   * @return {number} Normalized `charCode` property.\\n   */\\n  function getEventCharCode(nativeEvent) {\\n    var charCode;\\n    var keyCode = nativeEvent.keyCode;\\n\\n    if ('charCode' in nativeEvent) {\\n      charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.\\n\\n      if (charCode === 0 && keyCode === 13) {\\n        charCode = 13;\\n      }\\n    } else {\\n      // IE8 does not implement `charCode`, but `keyCode` has the correct value.\\n      charCode = keyCode;\\n    } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)\\n    // report Enter as charCode 10 when ctrl is pressed.\\n\\n\\n    if (charCode === 10) {\\n      charCode = 13;\\n    } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\\n    // Must not discard the (non-)printable Enter-key.\\n\\n\\n    if (charCode >= 32 || charCode === 13) {\\n      return charCode;\\n    }\\n\\n    return 0;\\n  }\\n\\n  function functionThatReturnsTrue() {\\n    return true;\\n  }\\n\\n  function functionThatReturnsFalse() {\\n    return false;\\n  } // This is intentionally a factory so that we have different returned constructors.\\n  // If we had a single constructor, it would be megamorphic and engines would deopt.\\n\\n\\n  function createSyntheticEvent(Interface) {\\n    /**\\n     * Synthetic events are dispatched by event plugins, typically in response to a\\n     * top-level event delegation handler.\\n     *\\n     * These systems should generally use pooling to reduce the frequency of garbage\\n     * collection. The system should check `isPersistent` to determine whether the\\n     * event should be released into the pool after being dispatched. Users that\\n     * need a persisted event should invoke `persist`.\\n     *\\n     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\\n     * normalizing browser quirks. Subclasses do not necessarily have to implement a\\n     * DOM interface; custom application-specific events can also subclass this.\\n     */\\n    function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {\\n      this._reactName = reactName;\\n      this._targetInst = targetInst;\\n      this.type = reactEventType;\\n      this.nativeEvent = nativeEvent;\\n      this.target = nativeEventTarget;\\n      this.currentTarget = null;\\n\\n      for (var _propName in Interface) {\\n        if (!Interface.hasOwnProperty(_propName)) {\\n          continue;\\n        }\\n\\n        var normalize = Interface[_propName];\\n\\n        if (normalize) {\\n          this[_propName] = normalize(nativeEvent);\\n        } else {\\n          this[_propName] = nativeEvent[_propName];\\n        }\\n      }\\n\\n      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\\n\\n      if (defaultPrevented) {\\n        this.isDefaultPrevented = functionThatReturnsTrue;\\n      } else {\\n        this.isDefaultPrevented = functionThatReturnsFalse;\\n      }\\n\\n      this.isPropagationStopped = functionThatReturnsFalse;\\n      return this;\\n    }\\n\\n    assign(SyntheticBaseEvent.prototype, {\\n      preventDefault: function () {\\n        this.defaultPrevented = true;\\n        var event = this.nativeEvent;\\n\\n        if (!event) {\\n          return;\\n        }\\n\\n        if (event.preventDefault) {\\n          event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE\\n        } else if (typeof event.returnValue !== 'unknown') {\\n          event.returnValue = false;\\n        }\\n\\n        this.isDefaultPrevented = functionThatReturnsTrue;\\n      },\\n      stopPropagation: function () {\\n        var event = this.nativeEvent;\\n\\n        if (!event) {\\n          return;\\n        }\\n\\n        if (event.stopPropagation) {\\n          event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE\\n        } else if (typeof event.cancelBubble !== 'unknown') {\\n          // The ChangeEventPlugin registers a \\\"propertychange\\\" event for\\n          // IE. This event does not support bubbling or cancelling, and\\n          // any references to cancelBubble throw \\\"Member not found\\\".  A\\n          // typeof check of \\\"unknown\\\" circumvents this issue (and is also\\n          // IE specific).\\n          event.cancelBubble = true;\\n        }\\n\\n        this.isPropagationStopped = functionThatReturnsTrue;\\n      },\\n\\n      /**\\n       * We release all dispatched `SyntheticEvent`s after each event loop, adding\\n       * them back into the pool. This allows a way to hold onto a reference that\\n       * won't be added back into the pool.\\n       */\\n      persist: function () {// Modern event system doesn't use pooling.\\n      },\\n\\n      /**\\n       * Checks if this event should be released back into the pool.\\n       *\\n       * @return {boolean} True if this should not be released, false otherwise.\\n       */\\n      isPersistent: functionThatReturnsTrue\\n    });\\n    return SyntheticBaseEvent;\\n  }\\n  /**\\n   * @interface Event\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/\\n   */\\n\\n\\n  var EventInterface = {\\n    eventPhase: 0,\\n    bubbles: 0,\\n    cancelable: 0,\\n    timeStamp: function (event) {\\n      return event.timeStamp || Date.now();\\n    },\\n    defaultPrevented: 0,\\n    isTrusted: 0\\n  };\\n  var SyntheticEvent = createSyntheticEvent(EventInterface);\\n\\n  var UIEventInterface = assign({}, EventInterface, {\\n    view: 0,\\n    detail: 0\\n  });\\n\\n  var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);\\n  var lastMovementX;\\n  var lastMovementY;\\n  var lastMouseEvent;\\n\\n  function updateMouseMovementPolyfillState(event) {\\n    if (event !== lastMouseEvent) {\\n      if (lastMouseEvent && event.type === 'mousemove') {\\n        lastMovementX = event.screenX - lastMouseEvent.screenX;\\n        lastMovementY = event.screenY - lastMouseEvent.screenY;\\n      } else {\\n        lastMovementX = 0;\\n        lastMovementY = 0;\\n      }\\n\\n      lastMouseEvent = event;\\n    }\\n  }\\n  /**\\n   * @interface MouseEvent\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/\\n   */\\n\\n\\n  var MouseEventInterface = assign({}, UIEventInterface, {\\n    screenX: 0,\\n    screenY: 0,\\n    clientX: 0,\\n    clientY: 0,\\n    pageX: 0,\\n    pageY: 0,\\n    ctrlKey: 0,\\n    shiftKey: 0,\\n    altKey: 0,\\n    metaKey: 0,\\n    getModifierState: getEventModifierState,\\n    button: 0,\\n    buttons: 0,\\n    relatedTarget: function (event) {\\n      if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;\\n      return event.relatedTarget;\\n    },\\n    movementX: function (event) {\\n      if ('movementX' in event) {\\n        return event.movementX;\\n      }\\n\\n      updateMouseMovementPolyfillState(event);\\n      return lastMovementX;\\n    },\\n    movementY: function (event) {\\n      if ('movementY' in event) {\\n        return event.movementY;\\n      } // Don't need to call updateMouseMovementPolyfillState() here\\n      // because it's guaranteed to have already run when movementX\\n      // was copied.\\n\\n\\n      return lastMovementY;\\n    }\\n  });\\n\\n  var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);\\n  /**\\n   * @interface DragEvent\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/\\n   */\\n\\n  var DragEventInterface = assign({}, MouseEventInterface, {\\n    dataTransfer: 0\\n  });\\n\\n  var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);\\n  /**\\n   * @interface FocusEvent\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/\\n   */\\n\\n  var FocusEventInterface = assign({}, UIEventInterface, {\\n    relatedTarget: 0\\n  });\\n\\n  var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);\\n  /**\\n   * @interface Event\\n   * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\\n   */\\n\\n  var AnimationEventInterface = assign({}, EventInterface, {\\n    animationName: 0,\\n    elapsedTime: 0,\\n    pseudoElement: 0\\n  });\\n\\n  var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);\\n  /**\\n   * @interface Event\\n   * @see http://www.w3.org/TR/clipboard-apis/\\n   */\\n\\n  var ClipboardEventInterface = assign({}, EventInterface, {\\n    clipboardData: function (event) {\\n      return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\\n    }\\n  });\\n\\n  var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);\\n  /**\\n   * @interface Event\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\\n   */\\n\\n  var CompositionEventInterface = assign({}, EventInterface, {\\n    data: 0\\n  });\\n\\n  var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);\\n  /**\\n   * @interface Event\\n   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\\n   *      /#events-inputevents\\n   */\\n  // Happens to share the same list for now.\\n\\n  var SyntheticInputEvent = SyntheticCompositionEvent;\\n  /**\\n   * Normalization of deprecated HTML5 `key` values\\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\\n   */\\n\\n  var normalizeKey = {\\n    Esc: 'Escape',\\n    Spacebar: ' ',\\n    Left: 'ArrowLeft',\\n    Up: 'ArrowUp',\\n    Right: 'ArrowRight',\\n    Down: 'ArrowDown',\\n    Del: 'Delete',\\n    Win: 'OS',\\n    Menu: 'ContextMenu',\\n    Apps: 'ContextMenu',\\n    Scroll: 'ScrollLock',\\n    MozPrintableKey: 'Unidentified'\\n  };\\n  /**\\n   * Translation from legacy `keyCode` to HTML5 `key`\\n   * Only special keys supported, all others depend on keyboard layout or browser\\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\\n   */\\n\\n  var translateToKey = {\\n    '8': 'Backspace',\\n    '9': 'Tab',\\n    '12': 'Clear',\\n    '13': 'Enter',\\n    '16': 'Shift',\\n    '17': 'Control',\\n    '18': 'Alt',\\n    '19': 'Pause',\\n    '20': 'CapsLock',\\n    '27': 'Escape',\\n    '32': ' ',\\n    '33': 'PageUp',\\n    '34': 'PageDown',\\n    '35': 'End',\\n    '36': 'Home',\\n    '37': 'ArrowLeft',\\n    '38': 'ArrowUp',\\n    '39': 'ArrowRight',\\n    '40': 'ArrowDown',\\n    '45': 'Insert',\\n    '46': 'Delete',\\n    '112': 'F1',\\n    '113': 'F2',\\n    '114': 'F3',\\n    '115': 'F4',\\n    '116': 'F5',\\n    '117': 'F6',\\n    '118': 'F7',\\n    '119': 'F8',\\n    '120': 'F9',\\n    '121': 'F10',\\n    '122': 'F11',\\n    '123': 'F12',\\n    '144': 'NumLock',\\n    '145': 'ScrollLock',\\n    '224': 'Meta'\\n  };\\n  /**\\n   * @param {object} nativeEvent Native browser event.\\n   * @return {string} Normalized `key` property.\\n   */\\n\\n  function getEventKey(nativeEvent) {\\n    if (nativeEvent.key) {\\n      // Normalize inconsistent values reported by browsers due to\\n      // implementations of a working draft specification.\\n      // FireFox implements `key` but returns `MozPrintableKey` for all\\n      // printable characters (normalized to `Unidentified`), ignore it.\\n      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\\n\\n      if (key !== 'Unidentified') {\\n        return key;\\n      }\\n    } // Browser does not implement `key`, polyfill as much of it as we can.\\n\\n\\n    if (nativeEvent.type === 'keypress') {\\n      var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can\\n      // thus be captured by `keypress`, no other non-printable key should.\\n\\n      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\\n    }\\n\\n    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\\n      // While user keyboard layout determines the actual meaning of each\\n      // `keyCode` value, almost all function keys have a universal value.\\n      return translateToKey[nativeEvent.keyCode] || 'Unidentified';\\n    }\\n\\n    return '';\\n  }\\n  /**\\n   * Translation from modifier key to the associated property in the event.\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\\n   */\\n\\n\\n  var modifierKeyToProp = {\\n    Alt: 'altKey',\\n    Control: 'ctrlKey',\\n    Meta: 'metaKey',\\n    Shift: 'shiftKey'\\n  }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support\\n  // getModifierState. If getModifierState is not supported, we map it to a set of\\n  // modifier keys exposed by the event. In this case, Lock-keys are not supported.\\n\\n  function modifierStateGetter(keyArg) {\\n    var syntheticEvent = this;\\n    var nativeEvent = syntheticEvent.nativeEvent;\\n\\n    if (nativeEvent.getModifierState) {\\n      return nativeEvent.getModifierState(keyArg);\\n    }\\n\\n    var keyProp = modifierKeyToProp[keyArg];\\n    return keyProp ? !!nativeEvent[keyProp] : false;\\n  }\\n\\n  function getEventModifierState(nativeEvent) {\\n    return modifierStateGetter;\\n  }\\n  /**\\n   * @interface KeyboardEvent\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/\\n   */\\n\\n\\n  var KeyboardEventInterface = assign({}, UIEventInterface, {\\n    key: getEventKey,\\n    code: 0,\\n    location: 0,\\n    ctrlKey: 0,\\n    shiftKey: 0,\\n    altKey: 0,\\n    metaKey: 0,\\n    repeat: 0,\\n    locale: 0,\\n    getModifierState: getEventModifierState,\\n    // Legacy Interface\\n    charCode: function (event) {\\n      // `charCode` is the result of a KeyPress event and represents the value of\\n      // the actual printable character.\\n      // KeyPress is deprecated, but its replacement is not yet final and not\\n      // implemented in any major browser. Only KeyPress has charCode.\\n      if (event.type === 'keypress') {\\n        return getEventCharCode(event);\\n      }\\n\\n      return 0;\\n    },\\n    keyCode: function (event) {\\n      // `keyCode` is the result of a KeyDown/Up event and represents the value of\\n      // physical keyboard key.\\n      // The actual meaning of the value depends on the users' keyboard layout\\n      // which cannot be detected. Assuming that it is a US keyboard layout\\n      // provides a surprisingly accurate mapping for US and European users.\\n      // Due to this, it is left to the user to implement at this time.\\n      if (event.type === 'keydown' || event.type === 'keyup') {\\n        return event.keyCode;\\n      }\\n\\n      return 0;\\n    },\\n    which: function (event) {\\n      // `which` is an alias for either `keyCode` or `charCode` depending on the\\n      // type of the event.\\n      if (event.type === 'keypress') {\\n        return getEventCharCode(event);\\n      }\\n\\n      if (event.type === 'keydown' || event.type === 'keyup') {\\n        return event.keyCode;\\n      }\\n\\n      return 0;\\n    }\\n  });\\n\\n  var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);\\n  /**\\n   * @interface PointerEvent\\n   * @see http://www.w3.org/TR/pointerevents/\\n   */\\n\\n  var PointerEventInterface = assign({}, MouseEventInterface, {\\n    pointerId: 0,\\n    width: 0,\\n    height: 0,\\n    pressure: 0,\\n    tangentialPressure: 0,\\n    tiltX: 0,\\n    tiltY: 0,\\n    twist: 0,\\n    pointerType: 0,\\n    isPrimary: 0\\n  });\\n\\n  var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);\\n  /**\\n   * @interface TouchEvent\\n   * @see http://www.w3.org/TR/touch-events/\\n   */\\n\\n  var TouchEventInterface = assign({}, UIEventInterface, {\\n    touches: 0,\\n    targetTouches: 0,\\n    changedTouches: 0,\\n    altKey: 0,\\n    metaKey: 0,\\n    ctrlKey: 0,\\n    shiftKey: 0,\\n    getModifierState: getEventModifierState\\n  });\\n\\n  var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);\\n  /**\\n   * @interface Event\\n   * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\\n   */\\n\\n  var TransitionEventInterface = assign({}, EventInterface, {\\n    propertyName: 0,\\n    elapsedTime: 0,\\n    pseudoElement: 0\\n  });\\n\\n  var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);\\n  /**\\n   * @interface WheelEvent\\n   * @see http://www.w3.org/TR/DOM-Level-3-Events/\\n   */\\n\\n  var WheelEventInterface = assign({}, MouseEventInterface, {\\n    deltaX: function (event) {\\n      return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\\n      'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\\n    },\\n    deltaY: function (event) {\\n      return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\\n      'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\\n      'wheelDelta' in event ? -event.wheelDelta : 0;\\n    },\\n    deltaZ: 0,\\n    // Browsers without \\\"deltaMode\\\" is reporting in raw wheel delta where one\\n    // notch on the scroll is always +/- 120, roughly equivalent to pixels.\\n    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\\n    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\\n    deltaMode: 0\\n  });\\n\\n  var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);\\n\\n  var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\\n\\n  var START_KEYCODE = 229;\\n  var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\\n  var documentMode = null;\\n\\n  if (canUseDOM && 'documentMode' in document) {\\n    documentMode = document.documentMode;\\n  } // Webkit offers a very useful `textInput` event that can be used to\\n  // directly represent `beforeInput`. The IE `textinput` event is not as\\n  // useful, so we don't use it.\\n\\n\\n  var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied\\n  // by the native compositionend event may be incorrect. Japanese ideographic\\n  // spaces, for instance (\\\\u3000) are not recorded correctly.\\n\\n  var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\\n  var SPACEBAR_CODE = 32;\\n  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\\n\\n  function registerEvents() {\\n    registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);\\n    registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\\n    registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\\n    registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);\\n  } // Track whether we've ever handled a keypress on the space key.\\n\\n\\n  var hasSpaceKeypress = false;\\n  /**\\n   * Return whether a native keypress event is assumed to be a command.\\n   * This is required because Firefox fires `keypress` events for key commands\\n   * (cut, copy, select-all, etc.) even though no character is inserted.\\n   */\\n\\n  function isKeypressCommand(nativeEvent) {\\n    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.\\n    !(nativeEvent.ctrlKey && nativeEvent.altKey);\\n  }\\n  /**\\n   * Translate native top level events into event types.\\n   */\\n\\n\\n  function getCompositionEventType(domEventName) {\\n    switch (domEventName) {\\n      case 'compositionstart':\\n        return 'onCompositionStart';\\n\\n      case 'compositionend':\\n        return 'onCompositionEnd';\\n\\n      case 'compositionupdate':\\n        return 'onCompositionUpdate';\\n    }\\n  }\\n  /**\\n   * Does our fallback best-guess model think this event signifies that\\n   * composition has begun?\\n   */\\n\\n\\n  function isFallbackCompositionStart(domEventName, nativeEvent) {\\n    return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\\n  }\\n  /**\\n   * Does our fallback mode think that this event is the end of composition?\\n   */\\n\\n\\n  function isFallbackCompositionEnd(domEventName, nativeEvent) {\\n    switch (domEventName) {\\n      case 'keyup':\\n        // Command keys insert or clear IME input.\\n        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\\n\\n      case 'keydown':\\n        // Expect IME keyCode on each keydown. If we get any other\\n        // code we must have exited earlier.\\n        return nativeEvent.keyCode !== START_KEYCODE;\\n\\n      case 'keypress':\\n      case 'mousedown':\\n      case 'focusout':\\n        // Events are not possible without cancelling IME.\\n        return true;\\n\\n      default:\\n        return false;\\n    }\\n  }\\n  /**\\n   * Google Input Tools provides composition data via a CustomEvent,\\n   * with the `data` property populated in the `detail` object. If this\\n   * is available on the event object, use it. If not, this is a plain\\n   * composition event and we have nothing special to extract.\\n   *\\n   * @param {object} nativeEvent\\n   * @return {?string}\\n   */\\n\\n\\n  function getDataFromCustomEvent(nativeEvent) {\\n    var detail = nativeEvent.detail;\\n\\n    if (typeof detail === 'object' && 'data' in detail) {\\n      return detail.data;\\n    }\\n\\n    return null;\\n  }\\n  /**\\n   * Check if a composition event was triggered by Korean IME.\\n   * Our fallback mode does not work well with IE's Korean IME,\\n   * so just use native composition events when Korean IME is used.\\n   * Although CompositionEvent.locale property is deprecated,\\n   * it is available in IE, where our fallback mode is enabled.\\n   *\\n   * @param {object} nativeEvent\\n   * @return {boolean}\\n   */\\n\\n\\n  function isUsingKoreanIME(nativeEvent) {\\n    return nativeEvent.locale === 'ko';\\n  } // Track the current IME composition status, if any.\\n\\n\\n  var isComposing = false;\\n  /**\\n   * @return {?object} A SyntheticCompositionEvent.\\n   */\\n\\n  function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {\\n    var eventType;\\n    var fallbackData;\\n\\n    if (canUseCompositionEvent) {\\n      eventType = getCompositionEventType(domEventName);\\n    } else if (!isComposing) {\\n      if (isFallbackCompositionStart(domEventName, nativeEvent)) {\\n        eventType = 'onCompositionStart';\\n      }\\n    } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\\n      eventType = 'onCompositionEnd';\\n    }\\n\\n    if (!eventType) {\\n      return null;\\n    }\\n\\n    if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\\n      // The current composition is stored statically and must not be\\n      // overwritten while composition continues.\\n      if (!isComposing && eventType === 'onCompositionStart') {\\n        isComposing = initialize(nativeEventTarget);\\n      } else if (eventType === 'onCompositionEnd') {\\n        if (isComposing) {\\n          fallbackData = getData();\\n        }\\n      }\\n    }\\n\\n    var listeners = accumulateTwoPhaseListeners(targetInst, eventType);\\n\\n    if (listeners.length > 0) {\\n      var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);\\n      dispatchQueue.push({\\n        event: event,\\n        listeners: listeners\\n      });\\n\\n      if (fallbackData) {\\n        // Inject data generated from fallback path into the synthetic event.\\n        // This matches the property of native CompositionEventInterface.\\n        event.data = fallbackData;\\n      } else {\\n        var customData = getDataFromCustomEvent(nativeEvent);\\n\\n        if (customData !== null) {\\n          event.data = customData;\\n        }\\n      }\\n    }\\n  }\\n\\n  function getNativeBeforeInputChars(domEventName, nativeEvent) {\\n    switch (domEventName) {\\n      case 'compositionend':\\n        return getDataFromCustomEvent(nativeEvent);\\n\\n      case 'keypress':\\n        /**\\n         * If native `textInput` events are available, our goal is to make\\n         * use of them. However, there is a special case: the spacebar key.\\n         * In Webkit, preventing default on a spacebar `textInput` event\\n         * cancels character insertion, but it *also* causes the browser\\n         * to fall back to its default spacebar behavior of scrolling the\\n         * page.\\n         *\\n         * Tracking at:\\n         * https://code.google.com/p/chromium/issues/detail?id=355103\\n         *\\n         * To avoid this issue, use the keypress event as if no `textInput`\\n         * event is available.\\n         */\\n        var which = nativeEvent.which;\\n\\n        if (which !== SPACEBAR_CODE) {\\n          return null;\\n        }\\n\\n        hasSpaceKeypress = true;\\n        return SPACEBAR_CHAR;\\n\\n      case 'textInput':\\n        // Record the characters to be added to the DOM.\\n        var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled\\n        // it at the keypress level and bail immediately. Android Chrome\\n        // doesn't give us keycodes, so we need to ignore it.\\n\\n        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\\n          return null;\\n        }\\n\\n        return chars;\\n\\n      default:\\n        // For other native event types, do nothing.\\n        return null;\\n    }\\n  }\\n  /**\\n   * For browsers that do not provide the `textInput` event, extract the\\n   * appropriate string to use for SyntheticInputEvent.\\n   */\\n\\n\\n  function getFallbackBeforeInputChars(domEventName, nativeEvent) {\\n    // If we are currently composing (IME) and using a fallback to do so,\\n    // try to extract the composed characters from the fallback object.\\n    // If composition event is available, we extract a string only at\\n    // compositionevent, otherwise extract it at fallback events.\\n    if (isComposing) {\\n      if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {\\n        var chars = getData();\\n        reset();\\n        isComposing = false;\\n        return chars;\\n      }\\n\\n      return null;\\n    }\\n\\n    switch (domEventName) {\\n      case 'paste':\\n        // If a paste event occurs after a keypress, throw out the input\\n        // chars. Paste events should not lead to BeforeInput events.\\n        return null;\\n\\n      case 'keypress':\\n        /**\\n         * As of v27, Firefox may fire keypress events even when no character\\n         * will be inserted. A few possibilities:\\n         *\\n         * - `which` is `0`. Arrow keys, Esc key, etc.\\n         *\\n         * - `which` is the pressed key code, but no char is available.\\n         *   Ex: 'AltGr + d` in Polish. There is no modified character for\\n         *   this key combination and no character is inserted into the\\n         *   document, but FF fires the keypress for char code `100` anyway.\\n         *   No `input` event will occur.\\n         *\\n         * - `which` is the pressed key code, but a command combination is\\n         *   being used. Ex: `Cmd+C`. No character is inserted, and no\\n         *   `input` event will occur.\\n         */\\n        if (!isKeypressCommand(nativeEvent)) {\\n          // IE fires the `keypress` event when a user types an emoji via\\n          // Touch keyboard of Windows.  In such a case, the `char` property\\n          // holds an emoji character like `\\\\uD83D\\\\uDE0A`.  Because its length\\n          // is 2, the property `which` does not represent an emoji correctly.\\n          // In such a case, we directly return the `char` property instead of\\n          // using `which`.\\n          if (nativeEvent.char && nativeEvent.char.length > 1) {\\n            return nativeEvent.char;\\n          } else if (nativeEvent.which) {\\n            return String.fromCharCode(nativeEvent.which);\\n          }\\n        }\\n\\n        return null;\\n\\n      case 'compositionend':\\n        return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;\\n\\n      default:\\n        return null;\\n    }\\n  }\\n  /**\\n   * Extract a SyntheticInputEvent for `beforeInput`, based on either native\\n   * `textInput` or fallback behavior.\\n   *\\n   * @return {?object} A SyntheticInputEvent.\\n   */\\n\\n\\n  function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {\\n    var chars;\\n\\n    if (canUseTextInputEvent) {\\n      chars = getNativeBeforeInputChars(domEventName, nativeEvent);\\n    } else {\\n      chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\\n    } // If no characters are being inserted, no BeforeInput event should\\n    // be fired.\\n\\n\\n    if (!chars) {\\n      return null;\\n    }\\n\\n    var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\\n\\n    if (listeners.length > 0) {\\n      var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);\\n      dispatchQueue.push({\\n        event: event,\\n        listeners: listeners\\n      });\\n      event.data = chars;\\n    }\\n  }\\n  /**\\n   * Create an `onBeforeInput` event to match\\n   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\\n   *\\n   * This event plugin is based on the native `textInput` event\\n   * available in Chrome, Safari, Opera, and IE. This event fires after\\n   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\\n   *\\n   * `beforeInput` is spec'd but not implemented in any browsers, and\\n   * the `input` event does not provide any useful information about what has\\n   * actually been added, contrary to the spec. Thus, `textInput` is the best\\n   * available event to identify the characters that have actually been inserted\\n   * into the target node.\\n   *\\n   * This plugin is also responsible for emitting `composition` events, thus\\n   * allowing us to share composition fallback code for both `beforeInput` and\\n   * `composition` event types.\\n   */\\n\\n\\n  function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\\n    extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\\n    extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\\n  }\\n\\n  /**\\n   * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\\n   */\\n  var supportedInputTypes = {\\n    color: true,\\n    date: true,\\n    datetime: true,\\n    'datetime-local': true,\\n    email: true,\\n    month: true,\\n    number: true,\\n    password: true,\\n    range: true,\\n    search: true,\\n    tel: true,\\n    text: true,\\n    time: true,\\n    url: true,\\n    week: true\\n  };\\n\\n  function isTextInputElement(elem) {\\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\\n\\n    if (nodeName === 'input') {\\n      return !!supportedInputTypes[elem.type];\\n    }\\n\\n    if (nodeName === 'textarea') {\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * Checks if an event is supported in the current execution environment.\\n   *\\n   * NOTE: This will not work correctly for non-generic events such as `change`,\\n   * `reset`, `load`, `error`, and `select`.\\n   *\\n   * Borrows from Modernizr.\\n   *\\n   * @param {string} eventNameSuffix Event name, e.g. \\\"click\\\".\\n   * @return {boolean} True if the event is supported.\\n   * @internal\\n   * @license Modernizr 3.0.0pre (Custom Build) | MIT\\n   */\\n\\n  function isEventSupported(eventNameSuffix) {\\n    if (!canUseDOM) {\\n      return false;\\n    }\\n\\n    var eventName = 'on' + eventNameSuffix;\\n    var isSupported = (eventName in document);\\n\\n    if (!isSupported) {\\n      var element = document.createElement('div');\\n      element.setAttribute(eventName, 'return;');\\n      isSupported = typeof element[eventName] === 'function';\\n    }\\n\\n    return isSupported;\\n  }\\n\\n  function registerEvents$1() {\\n    registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);\\n  }\\n\\n  function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {\\n    // Flag this event loop as needing state restore.\\n    enqueueStateRestore(target);\\n    var listeners = accumulateTwoPhaseListeners(inst, 'onChange');\\n\\n    if (listeners.length > 0) {\\n      var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);\\n      dispatchQueue.push({\\n        event: event,\\n        listeners: listeners\\n      });\\n    }\\n  }\\n  /**\\n   * For IE shims\\n   */\\n\\n\\n  var activeElement = null;\\n  var activeElementInst = null;\\n  /**\\n   * SECTION: handle `change` event\\n   */\\n\\n  function shouldUseChangeEvent(elem) {\\n    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\\n    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\\n  }\\n\\n  function manualDispatchChangeEvent(nativeEvent) {\\n    var dispatchQueue = [];\\n    createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the\\n    // other events and have it go through ReactBrowserEventEmitter. Since it\\n    // doesn't, we manually listen for the events and so we have to enqueue and\\n    // process the abstract event manually.\\n    //\\n    // Batching is necessary here in order to ensure that all event handlers run\\n    // before the next rerender (including event handlers attached to ancestor\\n    // elements instead of directly on the input). Without this, controlled\\n    // components don't work properly in conjunction with event bubbling because\\n    // the component is rerendered and the value reverted before all the event\\n    // handlers can run. See https://github.com/facebook/react/issues/708.\\n\\n    batchedUpdates(runEventInBatch, dispatchQueue);\\n  }\\n\\n  function runEventInBatch(dispatchQueue) {\\n    processDispatchQueue(dispatchQueue, 0);\\n  }\\n\\n  function getInstIfValueChanged(targetInst) {\\n    var targetNode = getNodeFromInstance(targetInst);\\n\\n    if (updateValueIfChanged(targetNode)) {\\n      return targetInst;\\n    }\\n  }\\n\\n  function getTargetInstForChangeEvent(domEventName, targetInst) {\\n    if (domEventName === 'change') {\\n      return targetInst;\\n    }\\n  }\\n  /**\\n   * SECTION: handle `input` event\\n   */\\n\\n\\n  var isInputEventSupported = false;\\n\\n  if (canUseDOM) {\\n    // IE9 claims to support the input event but fails to trigger it when\\n    // deleting text, so we ignore its input events.\\n    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);\\n  }\\n  /**\\n   * (For IE <=9) Starts tracking propertychange events on the passed-in element\\n   * and override the value property so that we can distinguish user events from\\n   * value changes in JS.\\n   */\\n\\n\\n  function startWatchingForValueChange(target, targetInst) {\\n    activeElement = target;\\n    activeElementInst = targetInst;\\n    activeElement.attachEvent('onpropertychange', handlePropertyChange);\\n  }\\n  /**\\n   * (For IE <=9) Removes the event listeners from the currently-tracked element,\\n   * if any exists.\\n   */\\n\\n\\n  function stopWatchingForValueChange() {\\n    if (!activeElement) {\\n      return;\\n    }\\n\\n    activeElement.detachEvent('onpropertychange', handlePropertyChange);\\n    activeElement = null;\\n    activeElementInst = null;\\n  }\\n  /**\\n   * (For IE <=9) Handles a propertychange event, sending a `change` event if\\n   * the value of the active element has changed.\\n   */\\n\\n\\n  function handlePropertyChange(nativeEvent) {\\n    if (nativeEvent.propertyName !== 'value') {\\n      return;\\n    }\\n\\n    if (getInstIfValueChanged(activeElementInst)) {\\n      manualDispatchChangeEvent(nativeEvent);\\n    }\\n  }\\n\\n  function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {\\n    if (domEventName === 'focusin') {\\n      // In IE9, propertychange fires for most input events but is buggy and\\n      // doesn't fire when text is deleted, but conveniently, selectionchange\\n      // appears to fire in all of the remaining cases so we catch those and\\n      // forward the event if the value has changed\\n      // In either case, we don't want to call the event handler if the value\\n      // is changed from JS so we redefine a setter for `.value` that updates\\n      // our activeElementValue variable, allowing us to ignore those changes\\n      //\\n      // stopWatching() should be a noop here but we call it just in case we\\n      // missed a blur event somehow.\\n      stopWatchingForValueChange();\\n      startWatchingForValueChange(target, targetInst);\\n    } else if (domEventName === 'focusout') {\\n      stopWatchingForValueChange();\\n    }\\n  } // For IE8 and IE9.\\n\\n\\n  function getTargetInstForInputEventPolyfill(domEventName, targetInst) {\\n    if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {\\n      // On the selectionchange event, the target is just document which isn't\\n      // helpful for us so just check activeElement instead.\\n      //\\n      // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\\n      // propertychange on the first input event after setting `value` from a\\n      // script and fires only keydown, keypress, keyup. Catching keyup usually\\n      // gets it and catching keydown lets us fire an event for the first\\n      // keystroke if user does a key repeat (it'll be a little delayed: right\\n      // before the second keystroke). Other input methods (e.g., paste) seem to\\n      // fire selectionchange normally.\\n      return getInstIfValueChanged(activeElementInst);\\n    }\\n  }\\n  /**\\n   * SECTION: handle `click` event\\n   */\\n\\n\\n  function shouldUseClickEvent(elem) {\\n    // Use the `click` event to detect changes to checkbox and radio inputs.\\n    // This approach works across all browsers, whereas `change` does not fire\\n    // until `blur` in IE8.\\n    var nodeName = elem.nodeName;\\n    return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\\n  }\\n\\n  function getTargetInstForClickEvent(domEventName, targetInst) {\\n    if (domEventName === 'click') {\\n      return getInstIfValueChanged(targetInst);\\n    }\\n  }\\n\\n  function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {\\n    if (domEventName === 'input' || domEventName === 'change') {\\n      return getInstIfValueChanged(targetInst);\\n    }\\n  }\\n\\n  function handleControlledInputBlur(node) {\\n    var state = node._wrapperState;\\n\\n    if (!state || !state.controlled || node.type !== 'number') {\\n      return;\\n    }\\n\\n    {\\n      // If controlled, assign the value attribute to the current value on blur\\n      setDefaultValue(node, 'number', node.value);\\n    }\\n  }\\n  /**\\n   * This plugin creates an `onChange` event that normalizes change events\\n   * across form elements. This event fires at a time when it's possible to\\n   * change the element's value without seeing a flicker.\\n   *\\n   * Supported elements are:\\n   * - input (see `isTextInputElement`)\\n   * - textarea\\n   * - select\\n   */\\n\\n\\n  function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\\n    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\\n    var getTargetInstFunc, handleEventFunc;\\n\\n    if (shouldUseChangeEvent(targetNode)) {\\n      getTargetInstFunc = getTargetInstForChangeEvent;\\n    } else if (isTextInputElement(targetNode)) {\\n      if (isInputEventSupported) {\\n        getTargetInstFunc = getTargetInstForInputOrChangeEvent;\\n      } else {\\n        getTargetInstFunc = getTargetInstForInputEventPolyfill;\\n        handleEventFunc = handleEventsForInputEventPolyfill;\\n      }\\n    } else if (shouldUseClickEvent(targetNode)) {\\n      getTargetInstFunc = getTargetInstForClickEvent;\\n    }\\n\\n    if (getTargetInstFunc) {\\n      var inst = getTargetInstFunc(domEventName, targetInst);\\n\\n      if (inst) {\\n        createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);\\n        return;\\n      }\\n    }\\n\\n    if (handleEventFunc) {\\n      handleEventFunc(domEventName, targetNode, targetInst);\\n    } // When blurring, set the value attribute for number inputs\\n\\n\\n    if (domEventName === 'focusout') {\\n      handleControlledInputBlur(targetNode);\\n    }\\n  }\\n\\n  function registerEvents$2() {\\n    registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);\\n    registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);\\n    registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);\\n    registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);\\n  }\\n  /**\\n   * For almost every interaction we care about, there will be both a top-level\\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\\n   * we do not extract duplicate events. However, moving the mouse into the\\n   * browser from outside will not fire a `mouseout` event. In this case, we use\\n   * the `mouseover` top-level event.\\n   */\\n\\n\\n  function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\\n    var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';\\n    var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';\\n\\n    if (isOverEvent && !isReplayingEvent(nativeEvent)) {\\n      // If this is an over event with a target, we might have already dispatched\\n      // the event in the out event of the other target. If this is replayed,\\n      // then it's because we couldn't dispatch against this target previously\\n      // so we have to do it now instead.\\n      var related = nativeEvent.relatedTarget || nativeEvent.fromElement;\\n\\n      if (related) {\\n        // If the related node is managed by React, we can assume that we have\\n        // already dispatched the corresponding events during its mouseout.\\n        if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {\\n          return;\\n        }\\n      }\\n    }\\n\\n    if (!isOutEvent && !isOverEvent) {\\n      // Must not be a mouse or pointer in or out - ignoring.\\n      return;\\n    }\\n\\n    var win; // TODO: why is this nullable in the types but we read from it?\\n\\n    if (nativeEventTarget.window === nativeEventTarget) {\\n      // `nativeEventTarget` is probably a window object.\\n      win = nativeEventTarget;\\n    } else {\\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\\n      var doc = nativeEventTarget.ownerDocument;\\n\\n      if (doc) {\\n        win = doc.defaultView || doc.parentWindow;\\n      } else {\\n        win = window;\\n      }\\n    }\\n\\n    var from;\\n    var to;\\n\\n    if (isOutEvent) {\\n      var _related = nativeEvent.relatedTarget || nativeEvent.toElement;\\n\\n      from = targetInst;\\n      to = _related ? getClosestInstanceFromNode(_related) : null;\\n\\n      if (to !== null) {\\n        var nearestMounted = getNearestMountedFiber(to);\\n\\n        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {\\n          to = null;\\n        }\\n      }\\n    } else {\\n      // Moving to a node from outside the window.\\n      from = null;\\n      to = targetInst;\\n    }\\n\\n    if (from === to) {\\n      // Nothing pertains to our managed components.\\n      return;\\n    }\\n\\n    var SyntheticEventCtor = SyntheticMouseEvent;\\n    var leaveEventType = 'onMouseLeave';\\n    var enterEventType = 'onMouseEnter';\\n    var eventTypePrefix = 'mouse';\\n\\n    if (domEventName === 'pointerout' || domEventName === 'pointerover') {\\n      SyntheticEventCtor = SyntheticPointerEvent;\\n      leaveEventType = 'onPointerLeave';\\n      enterEventType = 'onPointerEnter';\\n      eventTypePrefix = 'pointer';\\n    }\\n\\n    var fromNode = from == null ? win : getNodeFromInstance(from);\\n    var toNode = to == null ? win : getNodeFromInstance(to);\\n    var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);\\n    leave.target = fromNode;\\n    leave.relatedTarget = toNode;\\n    var enter = null; // We should only process this nativeEvent if we are processing\\n    // the first ancestor. Next time, we will ignore the event.\\n\\n    var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);\\n\\n    if (nativeTargetInst === targetInst) {\\n      var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);\\n      enterEvent.target = toNode;\\n      enterEvent.relatedTarget = fromNode;\\n      enter = enterEvent;\\n    }\\n\\n    accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);\\n  }\\n\\n  /**\\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\n   */\\n  function is(x, y) {\\n    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\\n    ;\\n  }\\n\\n  var objectIs = typeof Object.is === 'function' ? Object.is : is;\\n\\n  /**\\n   * Performs equality by iterating through keys on an object and returning false\\n   * when any key has values which are not strictly equal between the arguments.\\n   * Returns true when the values of all keys are strictly equal.\\n   */\\n\\n  function shallowEqual(objA, objB) {\\n    if (objectIs(objA, objB)) {\\n      return true;\\n    }\\n\\n    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\\n      return false;\\n    }\\n\\n    var keysA = Object.keys(objA);\\n    var keysB = Object.keys(objB);\\n\\n    if (keysA.length !== keysB.length) {\\n      return false;\\n    } // Test for A's keys different from B.\\n\\n\\n    for (var i = 0; i < keysA.length; i++) {\\n      var currentKey = keysA[i];\\n\\n      if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Given any node return the first leaf node without children.\\n   *\\n   * @param {DOMElement|DOMTextNode} node\\n   * @return {DOMElement|DOMTextNode}\\n   */\\n\\n  function getLeafNode(node) {\\n    while (node && node.firstChild) {\\n      node = node.firstChild;\\n    }\\n\\n    return node;\\n  }\\n  /**\\n   * Get the next sibling within a container. This will walk up the\\n   * DOM if a node's siblings have been exhausted.\\n   *\\n   * @param {DOMElement|DOMTextNode} node\\n   * @return {?DOMElement|DOMTextNode}\\n   */\\n\\n\\n  function getSiblingNode(node) {\\n    while (node) {\\n      if (node.nextSibling) {\\n        return node.nextSibling;\\n      }\\n\\n      node = node.parentNode;\\n    }\\n  }\\n  /**\\n   * Get object describing the nodes which contain characters at offset.\\n   *\\n   * @param {DOMElement|DOMTextNode} root\\n   * @param {number} offset\\n   * @return {?object}\\n   */\\n\\n\\n  function getNodeForCharacterOffset(root, offset) {\\n    var node = getLeafNode(root);\\n    var nodeStart = 0;\\n    var nodeEnd = 0;\\n\\n    while (node) {\\n      if (node.nodeType === TEXT_NODE) {\\n        nodeEnd = nodeStart + node.textContent.length;\\n\\n        if (nodeStart <= offset && nodeEnd >= offset) {\\n          return {\\n            node: node,\\n            offset: offset - nodeStart\\n          };\\n        }\\n\\n        nodeStart = nodeEnd;\\n      }\\n\\n      node = getLeafNode(getSiblingNode(node));\\n    }\\n  }\\n\\n  /**\\n   * @param {DOMElement} outerNode\\n   * @return {?object}\\n   */\\n\\n  function getOffsets(outerNode) {\\n    var ownerDocument = outerNode.ownerDocument;\\n    var win = ownerDocument && ownerDocument.defaultView || window;\\n    var selection = win.getSelection && win.getSelection();\\n\\n    if (!selection || selection.rangeCount === 0) {\\n      return null;\\n    }\\n\\n    var anchorNode = selection.anchorNode,\\n        anchorOffset = selection.anchorOffset,\\n        focusNode = selection.focusNode,\\n        focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be \\\"anonymous divs\\\", e.g. the\\n    // up/down buttons on an <input type=\\\"number\\\">. Anonymous divs do not seem to\\n    // expose properties, triggering a \\\"Permission denied error\\\" if any of its\\n    // properties are accessed. The only seemingly possible way to avoid erroring\\n    // is to access a property that typically works for non-anonymous divs and\\n    // catch any error that may otherwise arise. See\\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\\n\\n    try {\\n      /* eslint-disable no-unused-expressions */\\n      anchorNode.nodeType;\\n      focusNode.nodeType;\\n      /* eslint-enable no-unused-expressions */\\n    } catch (e) {\\n      return null;\\n    }\\n\\n    return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);\\n  }\\n  /**\\n   * Returns {start, end} where `start` is the character/codepoint index of\\n   * (anchorNode, anchorOffset) within the textContent of `outerNode`, and\\n   * `end` is the index of (focusNode, focusOffset).\\n   *\\n   * Returns null if you pass in garbage input but we should probably just crash.\\n   *\\n   * Exported only for testing.\\n   */\\n\\n  function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {\\n    var length = 0;\\n    var start = -1;\\n    var end = -1;\\n    var indexWithinAnchor = 0;\\n    var indexWithinFocus = 0;\\n    var node = outerNode;\\n    var parentNode = null;\\n\\n    outer: while (true) {\\n      var next = null;\\n\\n      while (true) {\\n        if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {\\n          start = length + anchorOffset;\\n        }\\n\\n        if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {\\n          end = length + focusOffset;\\n        }\\n\\n        if (node.nodeType === TEXT_NODE) {\\n          length += node.nodeValue.length;\\n        }\\n\\n        if ((next = node.firstChild) === null) {\\n          break;\\n        } // Moving from `node` to its first child `next`.\\n\\n\\n        parentNode = node;\\n        node = next;\\n      }\\n\\n      while (true) {\\n        if (node === outerNode) {\\n          // If `outerNode` has children, this is always the second time visiting\\n          // it. If it has no children, this is still the first loop, and the only\\n          // valid selection is anchorNode and focusNode both equal to this node\\n          // and both offsets 0, in which case we will have handled above.\\n          break outer;\\n        }\\n\\n        if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {\\n          start = length;\\n        }\\n\\n        if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {\\n          end = length;\\n        }\\n\\n        if ((next = node.nextSibling) !== null) {\\n          break;\\n        }\\n\\n        node = parentNode;\\n        parentNode = node.parentNode;\\n      } // Moving from `node` to its next sibling `next`.\\n\\n\\n      node = next;\\n    }\\n\\n    if (start === -1 || end === -1) {\\n      // This should never happen. (Would happen if the anchor/focus nodes aren't\\n      // actually inside the passed-in node.)\\n      return null;\\n    }\\n\\n    return {\\n      start: start,\\n      end: end\\n    };\\n  }\\n  /**\\n   * In modern non-IE browsers, we can support both forward and backward\\n   * selections.\\n   *\\n   * Note: IE10+ supports the Selection object, but it does not support\\n   * the `extend` method, which means that even in modern IE, it's not possible\\n   * to programmatically create a backward selection. Thus, for all IE\\n   * versions, we use the old IE API to create our selections.\\n   *\\n   * @param {DOMElement|DOMTextNode} node\\n   * @param {object} offsets\\n   */\\n\\n  function setOffsets(node, offsets) {\\n    var doc = node.ownerDocument || document;\\n    var win = doc && doc.defaultView || window; // Edge fails with \\\"Object expected\\\" in some scenarios.\\n    // (For instance: TinyMCE editor used in a list component that supports pasting to add more,\\n    // fails when pasting 100+ items)\\n\\n    if (!win.getSelection) {\\n      return;\\n    }\\n\\n    var selection = win.getSelection();\\n    var length = node.textContent.length;\\n    var start = Math.min(offsets.start, length);\\n    var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.\\n    // Flip backward selections, so we can set with a single range.\\n\\n    if (!selection.extend && start > end) {\\n      var temp = end;\\n      end = start;\\n      start = temp;\\n    }\\n\\n    var startMarker = getNodeForCharacterOffset(node, start);\\n    var endMarker = getNodeForCharacterOffset(node, end);\\n\\n    if (startMarker && endMarker) {\\n      if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {\\n        return;\\n      }\\n\\n      var range = doc.createRange();\\n      range.setStart(startMarker.node, startMarker.offset);\\n      selection.removeAllRanges();\\n\\n      if (start > end) {\\n        selection.addRange(range);\\n        selection.extend(endMarker.node, endMarker.offset);\\n      } else {\\n        range.setEnd(endMarker.node, endMarker.offset);\\n        selection.addRange(range);\\n      }\\n    }\\n  }\\n\\n  function isTextNode(node) {\\n    return node && node.nodeType === TEXT_NODE;\\n  }\\n\\n  function containsNode(outerNode, innerNode) {\\n    if (!outerNode || !innerNode) {\\n      return false;\\n    } else if (outerNode === innerNode) {\\n      return true;\\n    } else if (isTextNode(outerNode)) {\\n      return false;\\n    } else if (isTextNode(innerNode)) {\\n      return containsNode(outerNode, innerNode.parentNode);\\n    } else if ('contains' in outerNode) {\\n      return outerNode.contains(innerNode);\\n    } else if (outerNode.compareDocumentPosition) {\\n      return !!(outerNode.compareDocumentPosition(innerNode) & 16);\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  function isInDocument(node) {\\n    return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);\\n  }\\n\\n  function isSameOriginFrame(iframe) {\\n    try {\\n      // Accessing the contentDocument of a HTMLIframeElement can cause the browser\\n      // to throw, e.g. if it has a cross-origin src attribute.\\n      // Safari will show an error in the console when the access results in \\\"Blocked a frame with origin\\\". e.g:\\n      // iframe.contentDocument.defaultView;\\n      // A safety way is to access one of the cross origin properties: Window or Location\\n      // Which might result in \\\"SecurityError\\\" DOM Exception and it is compatible to Safari.\\n      // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl\\n      return typeof iframe.contentWindow.location.href === 'string';\\n    } catch (err) {\\n      return false;\\n    }\\n  }\\n\\n  function getActiveElementDeep() {\\n    var win = window;\\n    var element = getActiveElement();\\n\\n    while (element instanceof win.HTMLIFrameElement) {\\n      if (isSameOriginFrame(element)) {\\n        win = element.contentWindow;\\n      } else {\\n        return element;\\n      }\\n\\n      element = getActiveElement(win.document);\\n    }\\n\\n    return element;\\n  }\\n  /**\\n   * @ReactInputSelection: React input selection module. Based on Selection.js,\\n   * but modified to be suitable for react and has a couple of bug fixes (doesn't\\n   * assume buttons have range selections allowed).\\n   * Input selection module for React.\\n   */\\n\\n  /**\\n   * @hasSelectionCapabilities: we get the element types that support selection\\n   * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`\\n   * and `selectionEnd` rows.\\n   */\\n\\n\\n  function hasSelectionCapabilities(elem) {\\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\\n    return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');\\n  }\\n  function getSelectionInformation() {\\n    var focusedElem = getActiveElementDeep();\\n    return {\\n      focusedElem: focusedElem,\\n      selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null\\n    };\\n  }\\n  /**\\n   * @restoreSelection: If any selection information was potentially lost,\\n   * restore it. This is useful when performing operations that could remove dom\\n   * nodes and place them back in, resulting in focus being lost.\\n   */\\n\\n  function restoreSelection(priorSelectionInformation) {\\n    var curFocusedElem = getActiveElementDeep();\\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\\n\\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\\n      if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {\\n        setSelection(priorFocusedElem, priorSelectionRange);\\n      } // Focusing a node can change the scroll position, which is undesirable\\n\\n\\n      var ancestors = [];\\n      var ancestor = priorFocusedElem;\\n\\n      while (ancestor = ancestor.parentNode) {\\n        if (ancestor.nodeType === ELEMENT_NODE) {\\n          ancestors.push({\\n            element: ancestor,\\n            left: ancestor.scrollLeft,\\n            top: ancestor.scrollTop\\n          });\\n        }\\n      }\\n\\n      if (typeof priorFocusedElem.focus === 'function') {\\n        priorFocusedElem.focus();\\n      }\\n\\n      for (var i = 0; i < ancestors.length; i++) {\\n        var info = ancestors[i];\\n        info.element.scrollLeft = info.left;\\n        info.element.scrollTop = info.top;\\n      }\\n    }\\n  }\\n  /**\\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\\n   * contentEditable node.\\n   * -@input: Look up selection bounds of this input\\n   * -@return {start: selectionStart, end: selectionEnd}\\n   */\\n\\n  function getSelection(input) {\\n    var selection;\\n\\n    if ('selectionStart' in input) {\\n      // Modern browser with input or textarea.\\n      selection = {\\n        start: input.selectionStart,\\n        end: input.selectionEnd\\n      };\\n    } else {\\n      // Content editable or old IE textarea.\\n      selection = getOffsets(input);\\n    }\\n\\n    return selection || {\\n      start: 0,\\n      end: 0\\n    };\\n  }\\n  /**\\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\\n   * the input.\\n   * -@input     Set selection bounds of this input or textarea\\n   * -@offsets   Object of same form that is returned from get*\\n   */\\n\\n  function setSelection(input, offsets) {\\n    var start = offsets.start;\\n    var end = offsets.end;\\n\\n    if (end === undefined) {\\n      end = start;\\n    }\\n\\n    if ('selectionStart' in input) {\\n      input.selectionStart = start;\\n      input.selectionEnd = Math.min(end, input.value.length);\\n    } else {\\n      setOffsets(input, offsets);\\n    }\\n  }\\n\\n  var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;\\n\\n  function registerEvents$3() {\\n    registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);\\n  }\\n\\n  var activeElement$1 = null;\\n  var activeElementInst$1 = null;\\n  var lastSelection = null;\\n  var mouseDown = false;\\n  /**\\n   * Get an object which is a unique representation of the current selection.\\n   *\\n   * The return value will not be consistent across nodes or browsers, but\\n   * two identical selections on the same node will return identical objects.\\n   */\\n\\n  function getSelection$1(node) {\\n    if ('selectionStart' in node && hasSelectionCapabilities(node)) {\\n      return {\\n        start: node.selectionStart,\\n        end: node.selectionEnd\\n      };\\n    } else {\\n      var win = node.ownerDocument && node.ownerDocument.defaultView || window;\\n      var selection = win.getSelection();\\n      return {\\n        anchorNode: selection.anchorNode,\\n        anchorOffset: selection.anchorOffset,\\n        focusNode: selection.focusNode,\\n        focusOffset: selection.focusOffset\\n      };\\n    }\\n  }\\n  /**\\n   * Get document associated with the event target.\\n   */\\n\\n\\n  function getEventTargetDocument(eventTarget) {\\n    return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;\\n  }\\n  /**\\n   * Poll selection to see whether it's changed.\\n   *\\n   * @param {object} nativeEvent\\n   * @param {object} nativeEventTarget\\n   * @return {?SyntheticEvent}\\n   */\\n\\n\\n  function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {\\n    // Ensure we have the right element, and that the user is not dragging a\\n    // selection (this matches native `select` event behavior). In HTML5, select\\n    // fires only on input and textarea thus if there's no focused element we\\n    // won't dispatch.\\n    var doc = getEventTargetDocument(nativeEventTarget);\\n\\n    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {\\n      return;\\n    } // Only fire when selection has actually changed.\\n\\n\\n    var currentSelection = getSelection$1(activeElement$1);\\n\\n    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\\n      lastSelection = currentSelection;\\n      var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');\\n\\n      if (listeners.length > 0) {\\n        var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);\\n        dispatchQueue.push({\\n          event: event,\\n          listeners: listeners\\n        });\\n        event.target = activeElement$1;\\n      }\\n    }\\n  }\\n  /**\\n   * This plugin creates an `onSelect` event that normalizes select events\\n   * across form elements.\\n   *\\n   * Supported elements are:\\n   * - input (see `isTextInputElement`)\\n   * - textarea\\n   * - contentEditable\\n   *\\n   * This differs from native browser implementations in the following ways:\\n   * - Fires on contentEditable fields as well as inputs.\\n   * - Fires for collapsed selection.\\n   * - Fires after user input.\\n   */\\n\\n\\n  function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\\n    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\\n\\n    switch (domEventName) {\\n      // Track the input node that has focus.\\n      case 'focusin':\\n        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {\\n          activeElement$1 = targetNode;\\n          activeElementInst$1 = targetInst;\\n          lastSelection = null;\\n        }\\n\\n        break;\\n\\n      case 'focusout':\\n        activeElement$1 = null;\\n        activeElementInst$1 = null;\\n        lastSelection = null;\\n        break;\\n      // Don't fire the event while the user is dragging. This matches the\\n      // semantics of the native select event.\\n\\n      case 'mousedown':\\n        mouseDown = true;\\n        break;\\n\\n      case 'contextmenu':\\n      case 'mouseup':\\n      case 'dragend':\\n        mouseDown = false;\\n        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\\n        break;\\n      // Chrome and IE fire non-standard event when selection is changed (and\\n      // sometimes when it hasn't). IE's event fires out of order with respect\\n      // to key and input events on deletion, so we discard it.\\n      //\\n      // Firefox doesn't support selectionchange, so check selection status\\n      // after each key entry. The selection changes after keydown and before\\n      // keyup, but we check on keydown as well in the case of holding down a\\n      // key, when multiple keydown events are fired but only one keyup is.\\n      // This is also our approach for IE handling, for the reason above.\\n\\n      case 'selectionchange':\\n        if (skipSelectionChangeEvent) {\\n          break;\\n        }\\n\\n      // falls through\\n\\n      case 'keydown':\\n      case 'keyup':\\n        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\\n    }\\n  }\\n\\n  /**\\n   * Generate a mapping of standard vendor prefixes using the defined style property and event name.\\n   *\\n   * @param {string} styleProp\\n   * @param {string} eventName\\n   * @returns {object}\\n   */\\n\\n  function makePrefixMap(styleProp, eventName) {\\n    var prefixes = {};\\n    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\\n    prefixes['Webkit' + styleProp] = 'webkit' + eventName;\\n    prefixes['Moz' + styleProp] = 'moz' + eventName;\\n    return prefixes;\\n  }\\n  /**\\n   * A list of event names to a configurable list of vendor prefixes.\\n   */\\n\\n\\n  var vendorPrefixes = {\\n    animationend: makePrefixMap('Animation', 'AnimationEnd'),\\n    animationiteration: makePrefixMap('Animation', 'AnimationIteration'),\\n    animationstart: makePrefixMap('Animation', 'AnimationStart'),\\n    transitionend: makePrefixMap('Transition', 'TransitionEnd')\\n  };\\n  /**\\n   * Event names that have already been detected and prefixed (if applicable).\\n   */\\n\\n  var prefixedEventNames = {};\\n  /**\\n   * Element to check for prefixes on.\\n   */\\n\\n  var style = {};\\n  /**\\n   * Bootstrap if a DOM exists.\\n   */\\n\\n  if (canUseDOM) {\\n    style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,\\n    // the un-prefixed \\\"animation\\\" and \\\"transition\\\" properties are defined on the\\n    // style object but the events that fire will still be prefixed, so we need\\n    // to check if the un-prefixed events are usable, and if not remove them from the map.\\n\\n    if (!('AnimationEvent' in window)) {\\n      delete vendorPrefixes.animationend.animation;\\n      delete vendorPrefixes.animationiteration.animation;\\n      delete vendorPrefixes.animationstart.animation;\\n    } // Same as above\\n\\n\\n    if (!('TransitionEvent' in window)) {\\n      delete vendorPrefixes.transitionend.transition;\\n    }\\n  }\\n  /**\\n   * Attempts to determine the correct vendor prefixed event name.\\n   *\\n   * @param {string} eventName\\n   * @returns {string}\\n   */\\n\\n\\n  function getVendorPrefixedEventName(eventName) {\\n    if (prefixedEventNames[eventName]) {\\n      return prefixedEventNames[eventName];\\n    } else if (!vendorPrefixes[eventName]) {\\n      return eventName;\\n    }\\n\\n    var prefixMap = vendorPrefixes[eventName];\\n\\n    for (var styleProp in prefixMap) {\\n      if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\\n        return prefixedEventNames[eventName] = prefixMap[styleProp];\\n      }\\n    }\\n\\n    return eventName;\\n  }\\n\\n  var ANIMATION_END = getVendorPrefixedEventName('animationend');\\n  var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');\\n  var ANIMATION_START = getVendorPrefixedEventName('animationstart');\\n  var TRANSITION_END = getVendorPrefixedEventName('transitionend');\\n\\n  var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!\\n  //\\n  // E.g. it needs \\\"pointerDown\\\", not \\\"pointerdown\\\".\\n  // This is because we derive both React name (\\\"onPointerDown\\\")\\n  // and DOM name (\\\"pointerdown\\\") from the same list.\\n  //\\n  // Exceptions that don't match this convention are listed separately.\\n  //\\n  // prettier-ignore\\n\\n  var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];\\n\\n  function registerSimpleEvent(domEventName, reactName) {\\n    topLevelEventsToReactNames.set(domEventName, reactName);\\n    registerTwoPhaseEvent(reactName, [domEventName]);\\n  }\\n\\n  function registerSimpleEvents() {\\n    for (var i = 0; i < simpleEventPluginEvents.length; i++) {\\n      var eventName = simpleEventPluginEvents[i];\\n      var domEventName = eventName.toLowerCase();\\n      var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);\\n      registerSimpleEvent(domEventName, 'on' + capitalizedEvent);\\n    } // Special cases where event names don't match.\\n\\n\\n    registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');\\n    registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');\\n    registerSimpleEvent(ANIMATION_START, 'onAnimationStart');\\n    registerSimpleEvent('dblclick', 'onDoubleClick');\\n    registerSimpleEvent('focusin', 'onFocus');\\n    registerSimpleEvent('focusout', 'onBlur');\\n    registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');\\n  }\\n\\n  function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\\n    var reactName = topLevelEventsToReactNames.get(domEventName);\\n\\n    if (reactName === undefined) {\\n      return;\\n    }\\n\\n    var SyntheticEventCtor = SyntheticEvent;\\n    var reactEventType = domEventName;\\n\\n    switch (domEventName) {\\n      case 'keypress':\\n        // Firefox creates a keypress event for function keys too. This removes\\n        // the unwanted keypress events. Enter is however both printable and\\n        // non-printable. One would expect Tab to be as well (but it isn't).\\n        if (getEventCharCode(nativeEvent) === 0) {\\n          return;\\n        }\\n\\n      /* falls through */\\n\\n      case 'keydown':\\n      case 'keyup':\\n        SyntheticEventCtor = SyntheticKeyboardEvent;\\n        break;\\n\\n      case 'focusin':\\n        reactEventType = 'focus';\\n        SyntheticEventCtor = SyntheticFocusEvent;\\n        break;\\n\\n      case 'focusout':\\n        reactEventType = 'blur';\\n        SyntheticEventCtor = SyntheticFocusEvent;\\n        break;\\n\\n      case 'beforeblur':\\n      case 'afterblur':\\n        SyntheticEventCtor = SyntheticFocusEvent;\\n        break;\\n\\n      case 'click':\\n        // Firefox creates a click event on right mouse clicks. This removes the\\n        // unwanted click events.\\n        if (nativeEvent.button === 2) {\\n          return;\\n        }\\n\\n      /* falls through */\\n\\n      case 'auxclick':\\n      case 'dblclick':\\n      case 'mousedown':\\n      case 'mousemove':\\n      case 'mouseup': // TODO: Disabled elements should not respond to mouse events\\n\\n      /* falls through */\\n\\n      case 'mouseout':\\n      case 'mouseover':\\n      case 'contextmenu':\\n        SyntheticEventCtor = SyntheticMouseEvent;\\n        break;\\n\\n      case 'drag':\\n      case 'dragend':\\n      case 'dragenter':\\n      case 'dragexit':\\n      case 'dragleave':\\n      case 'dragover':\\n      case 'dragstart':\\n      case 'drop':\\n        SyntheticEventCtor = SyntheticDragEvent;\\n        break;\\n\\n      case 'touchcancel':\\n      case 'touchend':\\n      case 'touchmove':\\n      case 'touchstart':\\n        SyntheticEventCtor = SyntheticTouchEvent;\\n        break;\\n\\n      case ANIMATION_END:\\n      case ANIMATION_ITERATION:\\n      case ANIMATION_START:\\n        SyntheticEventCtor = SyntheticAnimationEvent;\\n        break;\\n\\n      case TRANSITION_END:\\n        SyntheticEventCtor = SyntheticTransitionEvent;\\n        break;\\n\\n      case 'scroll':\\n        SyntheticEventCtor = SyntheticUIEvent;\\n        break;\\n\\n      case 'wheel':\\n        SyntheticEventCtor = SyntheticWheelEvent;\\n        break;\\n\\n      case 'copy':\\n      case 'cut':\\n      case 'paste':\\n        SyntheticEventCtor = SyntheticClipboardEvent;\\n        break;\\n\\n      case 'gotpointercapture':\\n      case 'lostpointercapture':\\n      case 'pointercancel':\\n      case 'pointerdown':\\n      case 'pointermove':\\n      case 'pointerout':\\n      case 'pointerover':\\n      case 'pointerup':\\n        SyntheticEventCtor = SyntheticPointerEvent;\\n        break;\\n    }\\n\\n    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\\n\\n    {\\n      // Some events don't bubble in the browser.\\n      // In the past, React has always bubbled them, but this can be surprising.\\n      // We're going to try aligning closer to the browser behavior by not bubbling\\n      // them in React either. We'll start by not bubbling onScroll, and then expand.\\n      var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from\\n      // nonDelegatedEvents list in DOMPluginEventSystem.\\n      // Then we can remove this special list.\\n      // This is a breaking change that can wait until React 18.\\n      domEventName === 'scroll';\\n\\n      var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);\\n\\n      if (_listeners.length > 0) {\\n        // Intentionally create event lazily.\\n        var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);\\n\\n        dispatchQueue.push({\\n          event: _event,\\n          listeners: _listeners\\n        });\\n      }\\n    }\\n  }\\n\\n  // TODO: remove top-level side effect.\\n  registerSimpleEvents();\\n  registerEvents$2();\\n  registerEvents$1();\\n  registerEvents$3();\\n  registerEvents();\\n\\n  function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {\\n    // TODO: we should remove the concept of a \\\"SimpleEventPlugin\\\".\\n    // This is the basic functionality of the event system. All\\n    // the other plugins are essentially polyfills. So the plugin\\n    // should probably be inlined somewhere and have its logic\\n    // be core the to event system. This would potentially allow\\n    // us to ship builds of React without the polyfilled plugins below.\\n    extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\\n    var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the\\n    // event's native \\\"bubble\\\" phase, which means that we're\\n    // not in the capture phase. That's because we emulate\\n    // the capture phase here still. This is a trade-off,\\n    // because in an ideal world we would not emulate and use\\n    // the phases properly, like we do with the SimpleEvent\\n    // plugin. However, the plugins below either expect\\n    // emulation (EnterLeave) or use state localized to that\\n    // plugin (BeforeInput, Change, Select). The state in\\n    // these modules complicates things, as you'll essentially\\n    // get the case where the capture phase event might change\\n    // state, only for the following bubble event to come in\\n    // later and not trigger anything as the state now\\n    // invalidates the heuristics of the event plugin. We\\n    // could alter all these plugins to work in such ways, but\\n    // that might cause other unknown side-effects that we\\n    // can't foresee right now.\\n\\n    if (shouldProcessPolyfillPlugins) {\\n      extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\\n      extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\\n      extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\\n      extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);\\n    }\\n  } // List of events that need to be individually attached to media elements.\\n\\n\\n  var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather\\n  // set them on the actual target element itself. This is primarily\\n  // because these events do not consistently bubble in the DOM.\\n\\n  var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));\\n\\n  function executeDispatch(event, listener, currentTarget) {\\n    var type = event.type || 'unknown-event';\\n    event.currentTarget = currentTarget;\\n    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\\n    event.currentTarget = null;\\n  }\\n\\n  function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {\\n    var previousInstance;\\n\\n    if (inCapturePhase) {\\n      for (var i = dispatchListeners.length - 1; i >= 0; i--) {\\n        var _dispatchListeners$i = dispatchListeners[i],\\n            instance = _dispatchListeners$i.instance,\\n            currentTarget = _dispatchListeners$i.currentTarget,\\n            listener = _dispatchListeners$i.listener;\\n\\n        if (instance !== previousInstance && event.isPropagationStopped()) {\\n          return;\\n        }\\n\\n        executeDispatch(event, listener, currentTarget);\\n        previousInstance = instance;\\n      }\\n    } else {\\n      for (var _i = 0; _i < dispatchListeners.length; _i++) {\\n        var _dispatchListeners$_i = dispatchListeners[_i],\\n            _instance = _dispatchListeners$_i.instance,\\n            _currentTarget = _dispatchListeners$_i.currentTarget,\\n            _listener = _dispatchListeners$_i.listener;\\n\\n        if (_instance !== previousInstance && event.isPropagationStopped()) {\\n          return;\\n        }\\n\\n        executeDispatch(event, _listener, _currentTarget);\\n        previousInstance = _instance;\\n      }\\n    }\\n  }\\n\\n  function processDispatchQueue(dispatchQueue, eventSystemFlags) {\\n    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\\n\\n    for (var i = 0; i < dispatchQueue.length; i++) {\\n      var _dispatchQueue$i = dispatchQueue[i],\\n          event = _dispatchQueue$i.event,\\n          listeners = _dispatchQueue$i.listeners;\\n      processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.\\n    } // This would be a good time to rethrow if any of the event handlers threw.\\n\\n\\n    rethrowCaughtError();\\n  }\\n\\n  function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\\n    var nativeEventTarget = getEventTarget(nativeEvent);\\n    var dispatchQueue = [];\\n    extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);\\n    processDispatchQueue(dispatchQueue, eventSystemFlags);\\n  }\\n\\n  function listenToNonDelegatedEvent(domEventName, targetElement) {\\n    {\\n      if (!nonDelegatedEvents.has(domEventName)) {\\n        error('Did not expect a listenToNonDelegatedEvent() call for \\\"%s\\\". ' + 'This is a bug in React. Please file an issue.', domEventName);\\n      }\\n    }\\n\\n    var isCapturePhaseListener = false;\\n    var listenerSet = getEventListenerSet(targetElement);\\n    var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);\\n\\n    if (!listenerSet.has(listenerSetKey)) {\\n      addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);\\n      listenerSet.add(listenerSetKey);\\n    }\\n  }\\n  function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {\\n    {\\n      if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {\\n        error('Did not expect a listenToNativeEvent() call for \\\"%s\\\" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);\\n      }\\n    }\\n\\n    var eventSystemFlags = 0;\\n\\n    if (isCapturePhaseListener) {\\n      eventSystemFlags |= IS_CAPTURE_PHASE;\\n    }\\n\\n    addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);\\n  } // This is only used by createEventHandle when the\\n  var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);\\n  function listenToAllSupportedEvents(rootContainerElement) {\\n    if (!rootContainerElement[listeningMarker]) {\\n      rootContainerElement[listeningMarker] = true;\\n      allNativeEvents.forEach(function (domEventName) {\\n        // We handle selectionchange separately because it\\n        // doesn't bubble and needs to be on the document.\\n        if (domEventName !== 'selectionchange') {\\n          if (!nonDelegatedEvents.has(domEventName)) {\\n            listenToNativeEvent(domEventName, false, rootContainerElement);\\n          }\\n\\n          listenToNativeEvent(domEventName, true, rootContainerElement);\\n        }\\n      });\\n      var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\\n\\n      if (ownerDocument !== null) {\\n        // The selectionchange event also needs deduplication\\n        // but it is attached to the document.\\n        if (!ownerDocument[listeningMarker]) {\\n          ownerDocument[listeningMarker] = true;\\n          listenToNativeEvent('selectionchange', false, ownerDocument);\\n        }\\n      }\\n    }\\n  }\\n\\n  function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {\\n    var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be\\n    // active and not passive.\\n\\n    var isPassiveListener = undefined;\\n\\n    if (passiveBrowserEventsSupported) {\\n      // Browsers introduced an intervention, making these events\\n      // passive by default on document. React doesn't bind them\\n      // to document anymore, but changing this now would undo\\n      // the performance wins from the change. So we emulate\\n      // the existing behavior manually on the roots now.\\n      // https://github.com/facebook/react/issues/19651\\n      if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {\\n        isPassiveListener = true;\\n      }\\n    }\\n\\n    targetContainer =  targetContainer;\\n    var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we\\n\\n\\n    if (isCapturePhaseListener) {\\n      if (isPassiveListener !== undefined) {\\n        unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\\n      } else {\\n        unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);\\n      }\\n    } else {\\n      if (isPassiveListener !== undefined) {\\n        unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);\\n      } else {\\n        unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);\\n      }\\n    }\\n  }\\n\\n  function isMatchingRootContainer(grandContainer, targetContainer) {\\n    return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;\\n  }\\n\\n  function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {\\n    var ancestorInst = targetInst;\\n\\n    if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {\\n      var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we\\n\\n      if (targetInst !== null) {\\n        // The below logic attempts to work out if we need to change\\n        // the target fiber to a different ancestor. We had similar logic\\n        // in the legacy event system, except the big difference between\\n        // systems is that the modern event system now has an event listener\\n        // attached to each React Root and React Portal Root. Together,\\n        // the DOM nodes representing these roots are the \\\"rootContainer\\\".\\n        // To figure out which ancestor instance we should use, we traverse\\n        // up the fiber tree from the target instance and attempt to find\\n        // root boundaries that match that of our current \\\"rootContainer\\\".\\n        // If we find that \\\"rootContainer\\\", we find the parent fiber\\n        // sub-tree for that root and make that our ancestor instance.\\n        var node = targetInst;\\n\\n        mainLoop: while (true) {\\n          if (node === null) {\\n            return;\\n          }\\n\\n          var nodeTag = node.tag;\\n\\n          if (nodeTag === HostRoot || nodeTag === HostPortal) {\\n            var container = node.stateNode.containerInfo;\\n\\n            if (isMatchingRootContainer(container, targetContainerNode)) {\\n              break;\\n            }\\n\\n            if (nodeTag === HostPortal) {\\n              // The target is a portal, but it's not the rootContainer we're looking for.\\n              // Normally portals handle their own events all the way down to the root.\\n              // So we should be able to stop now. However, we don't know if this portal\\n              // was part of *our* root.\\n              var grandNode = node.return;\\n\\n              while (grandNode !== null) {\\n                var grandTag = grandNode.tag;\\n\\n                if (grandTag === HostRoot || grandTag === HostPortal) {\\n                  var grandContainer = grandNode.stateNode.containerInfo;\\n\\n                  if (isMatchingRootContainer(grandContainer, targetContainerNode)) {\\n                    // This is the rootContainer we're looking for and we found it as\\n                    // a parent of the Portal. That means we can ignore it because the\\n                    // Portal will bubble through to us.\\n                    return;\\n                  }\\n                }\\n\\n                grandNode = grandNode.return;\\n              }\\n            } // Now we need to find it's corresponding host fiber in the other\\n            // tree. To do this we can use getClosestInstanceFromNode, but we\\n            // need to validate that the fiber is a host instance, otherwise\\n            // we need to traverse up through the DOM till we find the correct\\n            // node that is from the other tree.\\n\\n\\n            while (container !== null) {\\n              var parentNode = getClosestInstanceFromNode(container);\\n\\n              if (parentNode === null) {\\n                return;\\n              }\\n\\n              var parentTag = parentNode.tag;\\n\\n              if (parentTag === HostComponent || parentTag === HostText) {\\n                node = ancestorInst = parentNode;\\n                continue mainLoop;\\n              }\\n\\n              container = container.parentNode;\\n            }\\n          }\\n\\n          node = node.return;\\n        }\\n      }\\n    }\\n\\n    batchedUpdates(function () {\\n      return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);\\n    });\\n  }\\n\\n  function createDispatchListener(instance, listener, currentTarget) {\\n    return {\\n      instance: instance,\\n      listener: listener,\\n      currentTarget: currentTarget\\n    };\\n  }\\n\\n  function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {\\n    var captureName = reactName !== null ? reactName + 'Capture' : null;\\n    var reactEventName = inCapturePhase ? captureName : reactName;\\n    var listeners = [];\\n    var instance = targetFiber;\\n    var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.\\n\\n    while (instance !== null) {\\n      var _instance2 = instance,\\n          stateNode = _instance2.stateNode,\\n          tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)\\n\\n      if (tag === HostComponent && stateNode !== null) {\\n        lastHostComponent = stateNode; // createEventHandle listeners\\n\\n\\n        if (reactEventName !== null) {\\n          var listener = getListener(instance, reactEventName);\\n\\n          if (listener != null) {\\n            listeners.push(createDispatchListener(instance, listener, lastHostComponent));\\n          }\\n        }\\n      } // If we are only accumulating events for the target, then we don't\\n      // continue to propagate through the React fiber tree to find other\\n      // listeners.\\n\\n\\n      if (accumulateTargetOnly) {\\n        break;\\n      } // If we are processing the onBeforeBlur event, then we need to take\\n\\n      instance = instance.return;\\n    }\\n\\n    return listeners;\\n  } // We should only use this function for:\\n  // - BeforeInputEventPlugin\\n  // - ChangeEventPlugin\\n  // - SelectEventPlugin\\n  // This is because we only process these plugins\\n  // in the bubble phase, so we need to accumulate two\\n  // phase event listeners (via emulation).\\n\\n  function accumulateTwoPhaseListeners(targetFiber, reactName) {\\n    var captureName = reactName + 'Capture';\\n    var listeners = [];\\n    var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.\\n\\n    while (instance !== null) {\\n      var _instance3 = instance,\\n          stateNode = _instance3.stateNode,\\n          tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)\\n\\n      if (tag === HostComponent && stateNode !== null) {\\n        var currentTarget = stateNode;\\n        var captureListener = getListener(instance, captureName);\\n\\n        if (captureListener != null) {\\n          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\\n        }\\n\\n        var bubbleListener = getListener(instance, reactName);\\n\\n        if (bubbleListener != null) {\\n          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\\n        }\\n      }\\n\\n      instance = instance.return;\\n    }\\n\\n    return listeners;\\n  }\\n\\n  function getParent(inst) {\\n    if (inst === null) {\\n      return null;\\n    }\\n\\n    do {\\n      inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\\n      // That is depending on if we want nested subtrees (layers) to bubble\\n      // events to their parent. We could also go through parentNode on the\\n      // host node but that wouldn't work for React Native and doesn't let us\\n      // do the portal feature.\\n    } while (inst && inst.tag !== HostComponent);\\n\\n    if (inst) {\\n      return inst;\\n    }\\n\\n    return null;\\n  }\\n  /**\\n   * Return the lowest common ancestor of A and B, or null if they are in\\n   * different trees.\\n   */\\n\\n\\n  function getLowestCommonAncestor(instA, instB) {\\n    var nodeA = instA;\\n    var nodeB = instB;\\n    var depthA = 0;\\n\\n    for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {\\n      depthA++;\\n    }\\n\\n    var depthB = 0;\\n\\n    for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {\\n      depthB++;\\n    } // If A is deeper, crawl up.\\n\\n\\n    while (depthA - depthB > 0) {\\n      nodeA = getParent(nodeA);\\n      depthA--;\\n    } // If B is deeper, crawl up.\\n\\n\\n    while (depthB - depthA > 0) {\\n      nodeB = getParent(nodeB);\\n      depthB--;\\n    } // Walk in lockstep until we find a match.\\n\\n\\n    var depth = depthA;\\n\\n    while (depth--) {\\n      if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {\\n        return nodeA;\\n      }\\n\\n      nodeA = getParent(nodeA);\\n      nodeB = getParent(nodeB);\\n    }\\n\\n    return null;\\n  }\\n\\n  function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {\\n    var registrationName = event._reactName;\\n    var listeners = [];\\n    var instance = target;\\n\\n    while (instance !== null) {\\n      if (instance === common) {\\n        break;\\n      }\\n\\n      var _instance4 = instance,\\n          alternate = _instance4.alternate,\\n          stateNode = _instance4.stateNode,\\n          tag = _instance4.tag;\\n\\n      if (alternate !== null && alternate === common) {\\n        break;\\n      }\\n\\n      if (tag === HostComponent && stateNode !== null) {\\n        var currentTarget = stateNode;\\n\\n        if (inCapturePhase) {\\n          var captureListener = getListener(instance, registrationName);\\n\\n          if (captureListener != null) {\\n            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));\\n          }\\n        } else if (!inCapturePhase) {\\n          var bubbleListener = getListener(instance, registrationName);\\n\\n          if (bubbleListener != null) {\\n            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));\\n          }\\n        }\\n      }\\n\\n      instance = instance.return;\\n    }\\n\\n    if (listeners.length !== 0) {\\n      dispatchQueue.push({\\n        event: event,\\n        listeners: listeners\\n      });\\n    }\\n  } // We should only use this function for:\\n  // - EnterLeaveEventPlugin\\n  // This is because we only process this plugin\\n  // in the bubble phase, so we need to accumulate two\\n  // phase event listeners.\\n\\n\\n  function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {\\n    var common = from && to ? getLowestCommonAncestor(from, to) : null;\\n\\n    if (from !== null) {\\n      accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);\\n    }\\n\\n    if (to !== null && enterEvent !== null) {\\n      accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);\\n    }\\n  }\\n  function getListenerSetKey(domEventName, capture) {\\n    return domEventName + \\\"__\\\" + (capture ? 'capture' : 'bubble');\\n  }\\n\\n  var didWarnInvalidHydration = false;\\n  var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';\\n  var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';\\n  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';\\n  var AUTOFOCUS = 'autoFocus';\\n  var CHILDREN = 'children';\\n  var STYLE = 'style';\\n  var HTML$1 = '__html';\\n  var warnedUnknownTags;\\n  var validatePropertiesInDevelopment;\\n  var warnForPropDifference;\\n  var warnForExtraAttributes;\\n  var warnForInvalidEventListener;\\n  var canDiffStyleForHydrationWarning;\\n  var normalizeHTML;\\n\\n  {\\n    warnedUnknownTags = {\\n      // There are working polyfills for <dialog>. Let people use it.\\n      dialog: true,\\n      // Electron ships a custom <webview> tag to display external web content in\\n      // an isolated frame and process.\\n      // This tag is not present in non Electron environments such as JSDom which\\n      // is often used for testing purposes.\\n      // @see https://electronjs.org/docs/api/webview-tag\\n      webview: true\\n    };\\n\\n    validatePropertiesInDevelopment = function (type, props) {\\n      validateProperties(type, props);\\n      validateProperties$1(type, props);\\n      validateProperties$2(type, props, {\\n        registrationNameDependencies: registrationNameDependencies,\\n        possibleRegistrationNames: possibleRegistrationNames\\n      });\\n    }; // IE 11 parses & normalizes the style attribute as opposed to other\\n    // browsers. It adds spaces and sorts the properties in some\\n    // non-alphabetical order. Handling that would require sorting CSS\\n    // properties in the client & server versions or applying\\n    // `expectedStyle` to a temporary DOM node to read its `style` attribute\\n    // normalized. Since it only affects IE, we're skipping style warnings\\n    // in that browser completely in favor of doing all that work.\\n    // See https://github.com/facebook/react/issues/11807\\n\\n\\n    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;\\n\\n    warnForPropDifference = function (propName, serverValue, clientValue) {\\n      if (didWarnInvalidHydration) {\\n        return;\\n      }\\n\\n      var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);\\n      var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);\\n\\n      if (normalizedServerValue === normalizedClientValue) {\\n        return;\\n      }\\n\\n      didWarnInvalidHydration = true;\\n\\n      error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));\\n    };\\n\\n    warnForExtraAttributes = function (attributeNames) {\\n      if (didWarnInvalidHydration) {\\n        return;\\n      }\\n\\n      didWarnInvalidHydration = true;\\n      var names = [];\\n      attributeNames.forEach(function (name) {\\n        names.push(name);\\n      });\\n\\n      error('Extra attributes from the server: %s', names);\\n    };\\n\\n    warnForInvalidEventListener = function (registrationName, listener) {\\n      if (listener === false) {\\n        error('Expected `%s` listener to be a function, instead got `false`.\\\\n\\\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);\\n      } else {\\n        error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);\\n      }\\n    }; // Parse the HTML and read it back to normalize the HTML string so that it\\n    // can be used for comparison.\\n\\n\\n    normalizeHTML = function (parent, html) {\\n      // We could have created a separate document here to avoid\\n      // re-initializing custom elements if they exist. But this breaks\\n      // how <noscript> is being handled. So we use the same document.\\n      // See the discussion in https://github.com/facebook/react/pull/11157.\\n      var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);\\n      testElement.innerHTML = html;\\n      return testElement.innerHTML;\\n    };\\n  } // HTML parsing normalizes CR and CRLF to LF.\\n  // It also can turn \\\\u0000 into \\\\uFFFD inside attributes.\\n  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream\\n  // If we have a mismatch, it might be caused by that.\\n  // We will still patch up in this case but not fire the warning.\\n\\n\\n  var NORMALIZE_NEWLINES_REGEX = /\\\\r\\\\n?/g;\\n  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\\\u0000|\\\\uFFFD/g;\\n\\n  function normalizeMarkupForTextOrAttribute(markup) {\\n    {\\n      checkHtmlStringCoercion(markup);\\n    }\\n\\n    var markupString = typeof markup === 'string' ? markup : '' + markup;\\n    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\\\\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');\\n  }\\n\\n  function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {\\n    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);\\n    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);\\n\\n    if (normalizedServerText === normalizedClientText) {\\n      return;\\n    }\\n\\n    if (shouldWarnDev) {\\n      {\\n        if (!didWarnInvalidHydration) {\\n          didWarnInvalidHydration = true;\\n\\n          error('Text content did not match. Server: \\\"%s\\\" Client: \\\"%s\\\"', normalizedServerText, normalizedClientText);\\n        }\\n      }\\n    }\\n\\n    if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {\\n      // In concurrent roots, we throw when there's a text mismatch and revert to\\n      // client rendering, up to the nearest Suspense boundary.\\n      throw new Error('Text content does not match server-rendered HTML.');\\n    }\\n  }\\n\\n  function getOwnerDocumentFromRootContainer(rootContainerElement) {\\n    return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\\n  }\\n\\n  function noop() {}\\n\\n  function trapClickOnNonInteractiveElement(node) {\\n    // Mobile Safari does not fire properly bubble click events on\\n    // non-interactive elements, which means delegated click listeners do not\\n    // fire. The workaround for this bug involves attaching an empty click\\n    // listener on the target node.\\n    // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\\n    // Just set it using the onclick property so that we don't have to manage any\\n    // bookkeeping for it. Not sure if we need to clear it when the listener is\\n    // removed.\\n    // TODO: Only do this for the relevant Safaris maybe?\\n    node.onclick = noop;\\n  }\\n\\n  function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {\\n    for (var propKey in nextProps) {\\n      if (!nextProps.hasOwnProperty(propKey)) {\\n        continue;\\n      }\\n\\n      var nextProp = nextProps[propKey];\\n\\n      if (propKey === STYLE) {\\n        {\\n          if (nextProp) {\\n            // Freeze the next style object so that we can assume it won't be\\n            // mutated. We have already warned for this in the past.\\n            Object.freeze(nextProp);\\n          }\\n        } // Relies on `updateStylesByID` not mutating `styleUpdates`.\\n\\n\\n        setValueForStyles(domElement, nextProp);\\n      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\\n        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;\\n\\n        if (nextHtml != null) {\\n          setInnerHTML(domElement, nextHtml);\\n        }\\n      } else if (propKey === CHILDREN) {\\n        if (typeof nextProp === 'string') {\\n          // Avoid setting initial textContent when the text is empty. In IE11 setting\\n          // textContent on a <textarea> will cause the placeholder to not\\n          // show within the <textarea> until it has been focused and blurred again.\\n          // https://github.com/facebook/react/issues/6731#issuecomment-254874553\\n          var canSetTextContent = tag !== 'textarea' || nextProp !== '';\\n\\n          if (canSetTextContent) {\\n            setTextContent(domElement, nextProp);\\n          }\\n        } else if (typeof nextProp === 'number') {\\n          setTextContent(domElement, '' + nextProp);\\n        }\\n      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {\\n        if (nextProp != null) {\\n          if ( typeof nextProp !== 'function') {\\n            warnForInvalidEventListener(propKey, nextProp);\\n          }\\n\\n          if (propKey === 'onScroll') {\\n            listenToNonDelegatedEvent('scroll', domElement);\\n          }\\n        }\\n      } else if (nextProp != null) {\\n        setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);\\n      }\\n    }\\n  }\\n\\n  function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {\\n    // TODO: Handle wasCustomComponentTag\\n    for (var i = 0; i < updatePayload.length; i += 2) {\\n      var propKey = updatePayload[i];\\n      var propValue = updatePayload[i + 1];\\n\\n      if (propKey === STYLE) {\\n        setValueForStyles(domElement, propValue);\\n      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\\n        setInnerHTML(domElement, propValue);\\n      } else if (propKey === CHILDREN) {\\n        setTextContent(domElement, propValue);\\n      } else {\\n        setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);\\n      }\\n    }\\n  }\\n\\n  function createElement(type, props, rootContainerElement, parentNamespace) {\\n    var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML\\n    // tags get no namespace.\\n\\n    var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);\\n    var domElement;\\n    var namespaceURI = parentNamespace;\\n\\n    if (namespaceURI === HTML_NAMESPACE) {\\n      namespaceURI = getIntrinsicNamespace(type);\\n    }\\n\\n    if (namespaceURI === HTML_NAMESPACE) {\\n      {\\n        isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to\\n        // allow <SVG> or <mATH>.\\n\\n        if (!isCustomComponentTag && type !== type.toLowerCase()) {\\n          error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);\\n        }\\n      }\\n\\n      if (type === 'script') {\\n        // Create the script via .innerHTML so its \\\"parser-inserted\\\" flag is\\n        // set to true and it does not execute\\n        var div = ownerDocument.createElement('div');\\n\\n        div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\\n        // This is guaranteed to yield a script element.\\n\\n        var firstChild = div.firstChild;\\n        domElement = div.removeChild(firstChild);\\n      } else if (typeof props.is === 'string') {\\n        // $FlowIssue `createElement` should be updated for Web Components\\n        domElement = ownerDocument.createElement(type, {\\n          is: props.is\\n        });\\n      } else {\\n        // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\\n        // See discussion in https://github.com/facebook/react/pull/6896\\n        // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\\n        domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`\\n        // attributes on `select`s needs to be added before `option`s are inserted.\\n        // This prevents:\\n        // - a bug where the `select` does not scroll to the correct option because singular\\n        //  `select` elements automatically pick the first item #13222\\n        // - a bug where the `select` set the first item as selected despite the `size` attribute #14239\\n        // See https://github.com/facebook/react/issues/13222\\n        // and https://github.com/facebook/react/issues/14239\\n\\n        if (type === 'select') {\\n          var node = domElement;\\n\\n          if (props.multiple) {\\n            node.multiple = true;\\n          } else if (props.size) {\\n            // Setting a size greater than 1 causes a select to behave like `multiple=true`, where\\n            // it is possible that no option is selected.\\n            //\\n            // This is only necessary when a select in \\\"single selection mode\\\".\\n            node.size = props.size;\\n          }\\n        }\\n      }\\n    } else {\\n      domElement = ownerDocument.createElementNS(namespaceURI, type);\\n    }\\n\\n    {\\n      if (namespaceURI === HTML_NAMESPACE) {\\n        if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {\\n          warnedUnknownTags[type] = true;\\n\\n          error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);\\n        }\\n      }\\n    }\\n\\n    return domElement;\\n  }\\n  function createTextNode(text, rootContainerElement) {\\n    return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);\\n  }\\n  function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {\\n    var isCustomComponentTag = isCustomComponent(tag, rawProps);\\n\\n    {\\n      validatePropertiesInDevelopment(tag, rawProps);\\n    } // TODO: Make sure that we check isMounted before firing any of these events.\\n\\n\\n    var props;\\n\\n    switch (tag) {\\n      case 'dialog':\\n        listenToNonDelegatedEvent('cancel', domElement);\\n        listenToNonDelegatedEvent('close', domElement);\\n        props = rawProps;\\n        break;\\n\\n      case 'iframe':\\n      case 'object':\\n      case 'embed':\\n        // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the load event.\\n        listenToNonDelegatedEvent('load', domElement);\\n        props = rawProps;\\n        break;\\n\\n      case 'video':\\n      case 'audio':\\n        // We listen to these events in case to ensure emulated bubble\\n        // listeners still fire for all the media events.\\n        for (var i = 0; i < mediaEventTypes.length; i++) {\\n          listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\\n        }\\n\\n        props = rawProps;\\n        break;\\n\\n      case 'source':\\n        // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the error event.\\n        listenToNonDelegatedEvent('error', domElement);\\n        props = rawProps;\\n        break;\\n\\n      case 'img':\\n      case 'image':\\n      case 'link':\\n        // We listen to these events in case to ensure emulated bubble\\n        // listeners still fire for error and load events.\\n        listenToNonDelegatedEvent('error', domElement);\\n        listenToNonDelegatedEvent('load', domElement);\\n        props = rawProps;\\n        break;\\n\\n      case 'details':\\n        // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the toggle event.\\n        listenToNonDelegatedEvent('toggle', domElement);\\n        props = rawProps;\\n        break;\\n\\n      case 'input':\\n        initWrapperState(domElement, rawProps);\\n        props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the invalid event.\\n\\n        listenToNonDelegatedEvent('invalid', domElement);\\n        break;\\n\\n      case 'option':\\n        validateProps(domElement, rawProps);\\n        props = rawProps;\\n        break;\\n\\n      case 'select':\\n        initWrapperState$1(domElement, rawProps);\\n        props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the invalid event.\\n\\n        listenToNonDelegatedEvent('invalid', domElement);\\n        break;\\n\\n      case 'textarea':\\n        initWrapperState$2(domElement, rawProps);\\n        props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the invalid event.\\n\\n        listenToNonDelegatedEvent('invalid', domElement);\\n        break;\\n\\n      default:\\n        props = rawProps;\\n    }\\n\\n    assertValidProps(tag, props);\\n    setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);\\n\\n    switch (tag) {\\n      case 'input':\\n        // TODO: Make sure we check if this is still unmounted or do any clean\\n        // up necessary since we never stop tracking anymore.\\n        track(domElement);\\n        postMountWrapper(domElement, rawProps, false);\\n        break;\\n\\n      case 'textarea':\\n        // TODO: Make sure we check if this is still unmounted or do any clean\\n        // up necessary since we never stop tracking anymore.\\n        track(domElement);\\n        postMountWrapper$3(domElement);\\n        break;\\n\\n      case 'option':\\n        postMountWrapper$1(domElement, rawProps);\\n        break;\\n\\n      case 'select':\\n        postMountWrapper$2(domElement, rawProps);\\n        break;\\n\\n      default:\\n        if (typeof props.onClick === 'function') {\\n          // TODO: This cast may not be sound for SVG, MathML or custom elements.\\n          trapClickOnNonInteractiveElement(domElement);\\n        }\\n\\n        break;\\n    }\\n  } // Calculate the diff between the two objects.\\n\\n  function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {\\n    {\\n      validatePropertiesInDevelopment(tag, nextRawProps);\\n    }\\n\\n    var updatePayload = null;\\n    var lastProps;\\n    var nextProps;\\n\\n    switch (tag) {\\n      case 'input':\\n        lastProps = getHostProps(domElement, lastRawProps);\\n        nextProps = getHostProps(domElement, nextRawProps);\\n        updatePayload = [];\\n        break;\\n\\n      case 'select':\\n        lastProps = getHostProps$1(domElement, lastRawProps);\\n        nextProps = getHostProps$1(domElement, nextRawProps);\\n        updatePayload = [];\\n        break;\\n\\n      case 'textarea':\\n        lastProps = getHostProps$2(domElement, lastRawProps);\\n        nextProps = getHostProps$2(domElement, nextRawProps);\\n        updatePayload = [];\\n        break;\\n\\n      default:\\n        lastProps = lastRawProps;\\n        nextProps = nextRawProps;\\n\\n        if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {\\n          // TODO: This cast may not be sound for SVG, MathML or custom elements.\\n          trapClickOnNonInteractiveElement(domElement);\\n        }\\n\\n        break;\\n    }\\n\\n    assertValidProps(tag, nextProps);\\n    var propKey;\\n    var styleName;\\n    var styleUpdates = null;\\n\\n    for (propKey in lastProps) {\\n      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {\\n        continue;\\n      }\\n\\n      if (propKey === STYLE) {\\n        var lastStyle = lastProps[propKey];\\n\\n        for (styleName in lastStyle) {\\n          if (lastStyle.hasOwnProperty(styleName)) {\\n            if (!styleUpdates) {\\n              styleUpdates = {};\\n            }\\n\\n            styleUpdates[styleName] = '';\\n          }\\n        }\\n      } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {\\n        // This is a special case. If any listener updates we need to ensure\\n        // that the \\\"current\\\" fiber pointer gets updated so we need a commit\\n        // to update this element.\\n        if (!updatePayload) {\\n          updatePayload = [];\\n        }\\n      } else {\\n        // For all other deleted properties we add it to the queue. We use\\n        // the allowed property list in the commit phase instead.\\n        (updatePayload = updatePayload || []).push(propKey, null);\\n      }\\n    }\\n\\n    for (propKey in nextProps) {\\n      var nextProp = nextProps[propKey];\\n      var lastProp = lastProps != null ? lastProps[propKey] : undefined;\\n\\n      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {\\n        continue;\\n      }\\n\\n      if (propKey === STYLE) {\\n        {\\n          if (nextProp) {\\n            // Freeze the next style object so that we can assume it won't be\\n            // mutated. We have already warned for this in the past.\\n            Object.freeze(nextProp);\\n          }\\n        }\\n\\n        if (lastProp) {\\n          // Unset styles on `lastProp` but not on `nextProp`.\\n          for (styleName in lastProp) {\\n            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {\\n              if (!styleUpdates) {\\n                styleUpdates = {};\\n              }\\n\\n              styleUpdates[styleName] = '';\\n            }\\n          } // Update styles that changed since `lastProp`.\\n\\n\\n          for (styleName in nextProp) {\\n            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\\n              if (!styleUpdates) {\\n                styleUpdates = {};\\n              }\\n\\n              styleUpdates[styleName] = nextProp[styleName];\\n            }\\n          }\\n        } else {\\n          // Relies on `updateStylesByID` not mutating `styleUpdates`.\\n          if (!styleUpdates) {\\n            if (!updatePayload) {\\n              updatePayload = [];\\n            }\\n\\n            updatePayload.push(propKey, styleUpdates);\\n          }\\n\\n          styleUpdates = nextProp;\\n        }\\n      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\\n        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;\\n        var lastHtml = lastProp ? lastProp[HTML$1] : undefined;\\n\\n        if (nextHtml != null) {\\n          if (lastHtml !== nextHtml) {\\n            (updatePayload = updatePayload || []).push(propKey, nextHtml);\\n          }\\n        }\\n      } else if (propKey === CHILDREN) {\\n        if (typeof nextProp === 'string' || typeof nextProp === 'number') {\\n          (updatePayload = updatePayload || []).push(propKey, '' + nextProp);\\n        }\\n      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {\\n        if (nextProp != null) {\\n          // We eagerly listen to this even though we haven't committed yet.\\n          if ( typeof nextProp !== 'function') {\\n            warnForInvalidEventListener(propKey, nextProp);\\n          }\\n\\n          if (propKey === 'onScroll') {\\n            listenToNonDelegatedEvent('scroll', domElement);\\n          }\\n        }\\n\\n        if (!updatePayload && lastProp !== nextProp) {\\n          // This is a special case. If any listener updates we need to ensure\\n          // that the \\\"current\\\" props pointer gets updated so we need a commit\\n          // to update this element.\\n          updatePayload = [];\\n        }\\n      } else {\\n        // For any other property we always add it to the queue and then we\\n        // filter it out using the allowed property list during the commit.\\n        (updatePayload = updatePayload || []).push(propKey, nextProp);\\n      }\\n    }\\n\\n    if (styleUpdates) {\\n      {\\n        validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);\\n      }\\n\\n      (updatePayload = updatePayload || []).push(STYLE, styleUpdates);\\n    }\\n\\n    return updatePayload;\\n  } // Apply the diff.\\n\\n  function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {\\n    // Update checked *before* name.\\n    // In the middle of an update, it is possible to have multiple checked.\\n    // When a checked radio tries to change name, browser makes another radio's checked false.\\n    if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {\\n      updateChecked(domElement, nextRawProps);\\n    }\\n\\n    var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);\\n    var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.\\n\\n    updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props\\n    // changed.\\n\\n    switch (tag) {\\n      case 'input':\\n        // Update the wrapper around inputs *after* updating props. This has to\\n        // happen after `updateDOMProperties`. Otherwise HTML5 input validations\\n        // raise warnings and prevent the new value from being assigned.\\n        updateWrapper(domElement, nextRawProps);\\n        break;\\n\\n      case 'textarea':\\n        updateWrapper$1(domElement, nextRawProps);\\n        break;\\n\\n      case 'select':\\n        // <select> value update needs to occur after <option> children\\n        // reconciliation\\n        postUpdateWrapper(domElement, nextRawProps);\\n        break;\\n    }\\n  }\\n\\n  function getPossibleStandardName(propName) {\\n    {\\n      var lowerCasedName = propName.toLowerCase();\\n\\n      if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {\\n        return null;\\n      }\\n\\n      return possibleStandardNames[lowerCasedName] || null;\\n    }\\n  }\\n\\n  function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {\\n    var isCustomComponentTag;\\n    var extraAttributeNames;\\n\\n    {\\n      isCustomComponentTag = isCustomComponent(tag, rawProps);\\n      validatePropertiesInDevelopment(tag, rawProps);\\n    } // TODO: Make sure that we check isMounted before firing any of these events.\\n\\n\\n    switch (tag) {\\n      case 'dialog':\\n        listenToNonDelegatedEvent('cancel', domElement);\\n        listenToNonDelegatedEvent('close', domElement);\\n        break;\\n\\n      case 'iframe':\\n      case 'object':\\n      case 'embed':\\n        // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the load event.\\n        listenToNonDelegatedEvent('load', domElement);\\n        break;\\n\\n      case 'video':\\n      case 'audio':\\n        // We listen to these events in case to ensure emulated bubble\\n        // listeners still fire for all the media events.\\n        for (var i = 0; i < mediaEventTypes.length; i++) {\\n          listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\\n        }\\n\\n        break;\\n\\n      case 'source':\\n        // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the error event.\\n        listenToNonDelegatedEvent('error', domElement);\\n        break;\\n\\n      case 'img':\\n      case 'image':\\n      case 'link':\\n        // We listen to these events in case to ensure emulated bubble\\n        // listeners still fire for error and load events.\\n        listenToNonDelegatedEvent('error', domElement);\\n        listenToNonDelegatedEvent('load', domElement);\\n        break;\\n\\n      case 'details':\\n        // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the toggle event.\\n        listenToNonDelegatedEvent('toggle', domElement);\\n        break;\\n\\n      case 'input':\\n        initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the invalid event.\\n\\n        listenToNonDelegatedEvent('invalid', domElement);\\n        break;\\n\\n      case 'option':\\n        validateProps(domElement, rawProps);\\n        break;\\n\\n      case 'select':\\n        initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the invalid event.\\n\\n        listenToNonDelegatedEvent('invalid', domElement);\\n        break;\\n\\n      case 'textarea':\\n        initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble\\n        // listeners still fire for the invalid event.\\n\\n        listenToNonDelegatedEvent('invalid', domElement);\\n        break;\\n    }\\n\\n    assertValidProps(tag, rawProps);\\n\\n    {\\n      extraAttributeNames = new Set();\\n      var attributes = domElement.attributes;\\n\\n      for (var _i = 0; _i < attributes.length; _i++) {\\n        var name = attributes[_i].name.toLowerCase();\\n\\n        switch (name) {\\n          // Controlled attributes are not validated\\n          // TODO: Only ignore them on controlled tags.\\n          case 'value':\\n            break;\\n\\n          case 'checked':\\n            break;\\n\\n          case 'selected':\\n            break;\\n\\n          default:\\n            // Intentionally use the original name.\\n            // See discussion in https://github.com/facebook/react/pull/10676.\\n            extraAttributeNames.add(attributes[_i].name);\\n        }\\n      }\\n    }\\n\\n    var updatePayload = null;\\n\\n    for (var propKey in rawProps) {\\n      if (!rawProps.hasOwnProperty(propKey)) {\\n        continue;\\n      }\\n\\n      var nextProp = rawProps[propKey];\\n\\n      if (propKey === CHILDREN) {\\n        // For text content children we compare against textContent. This\\n        // might match additional HTML that is hidden when we read it using\\n        // textContent. E.g. \\\"foo\\\" will match \\\"f<span>oo</span>\\\" but that still\\n        // satisfies our requirement. Our requirement is not to produce perfect\\n        // HTML and attributes. Ideally we should preserve structure but it's\\n        // ok not to if the visible content is still enough to indicate what\\n        // even listeners these nodes might be wired up to.\\n        // TODO: Warn if there is more than a single textNode as a child.\\n        // TODO: Should we use domElement.firstChild.nodeValue to compare?\\n        if (typeof nextProp === 'string') {\\n          if (domElement.textContent !== nextProp) {\\n            if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {\\n              checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);\\n            }\\n\\n            updatePayload = [CHILDREN, nextProp];\\n          }\\n        } else if (typeof nextProp === 'number') {\\n          if (domElement.textContent !== '' + nextProp) {\\n            if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {\\n              checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);\\n            }\\n\\n            updatePayload = [CHILDREN, '' + nextProp];\\n          }\\n        }\\n      } else if (registrationNameDependencies.hasOwnProperty(propKey)) {\\n        if (nextProp != null) {\\n          if ( typeof nextProp !== 'function') {\\n            warnForInvalidEventListener(propKey, nextProp);\\n          }\\n\\n          if (propKey === 'onScroll') {\\n            listenToNonDelegatedEvent('scroll', domElement);\\n          }\\n        }\\n      } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)\\n      typeof isCustomComponentTag === 'boolean') {\\n        // Validate that the properties correspond to their expected values.\\n        var serverValue = void 0;\\n        var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);\\n\\n        if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated\\n        // TODO: Only ignore them on controlled tags.\\n        propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\\n          var serverHTML = domElement.innerHTML;\\n          var nextHtml = nextProp ? nextProp[HTML$1] : undefined;\\n\\n          if (nextHtml != null) {\\n            var expectedHTML = normalizeHTML(domElement, nextHtml);\\n\\n            if (expectedHTML !== serverHTML) {\\n              warnForPropDifference(propKey, serverHTML, expectedHTML);\\n            }\\n          }\\n        } else if (propKey === STYLE) {\\n          // $FlowFixMe - Should be inferred as not undefined.\\n          extraAttributeNames.delete(propKey);\\n\\n          if (canDiffStyleForHydrationWarning) {\\n            var expectedStyle = createDangerousStringForStyles(nextProp);\\n            serverValue = domElement.getAttribute('style');\\n\\n            if (expectedStyle !== serverValue) {\\n              warnForPropDifference(propKey, serverValue, expectedStyle);\\n            }\\n          }\\n        } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {\\n          // $FlowFixMe - Should be inferred as not undefined.\\n          extraAttributeNames.delete(propKey.toLowerCase());\\n          serverValue = getValueForAttribute(domElement, propKey, nextProp);\\n\\n          if (nextProp !== serverValue) {\\n            warnForPropDifference(propKey, serverValue, nextProp);\\n          }\\n        } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {\\n          var isMismatchDueToBadCasing = false;\\n\\n          if (propertyInfo !== null) {\\n            // $FlowFixMe - Should be inferred as not undefined.\\n            extraAttributeNames.delete(propertyInfo.attributeName);\\n            serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);\\n          } else {\\n            var ownNamespace = parentNamespace;\\n\\n            if (ownNamespace === HTML_NAMESPACE) {\\n              ownNamespace = getIntrinsicNamespace(tag);\\n            }\\n\\n            if (ownNamespace === HTML_NAMESPACE) {\\n              // $FlowFixMe - Should be inferred as not undefined.\\n              extraAttributeNames.delete(propKey.toLowerCase());\\n            } else {\\n              var standardName = getPossibleStandardName(propKey);\\n\\n              if (standardName !== null && standardName !== propKey) {\\n                // If an SVG prop is supplied with bad casing, it will\\n                // be successfully parsed from HTML, but will produce a mismatch\\n                // (and would be incorrectly rendered on the client).\\n                // However, we already warn about bad casing elsewhere.\\n                // So we'll skip the misleading extra mismatch warning in this case.\\n                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.\\n\\n                extraAttributeNames.delete(standardName);\\n              } // $FlowFixMe - Should be inferred as not undefined.\\n\\n\\n              extraAttributeNames.delete(propKey);\\n            }\\n\\n            serverValue = getValueForAttribute(domElement, propKey, nextProp);\\n          }\\n\\n          var dontWarnCustomElement = enableCustomElementPropertySupport  ;\\n\\n          if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {\\n            warnForPropDifference(propKey, serverValue, nextProp);\\n          }\\n        }\\n      }\\n    }\\n\\n    {\\n      if (shouldWarnDev) {\\n        if ( // $FlowFixMe - Should be inferred as not undefined.\\n        extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {\\n          // $FlowFixMe - Should be inferred as not undefined.\\n          warnForExtraAttributes(extraAttributeNames);\\n        }\\n      }\\n    }\\n\\n    switch (tag) {\\n      case 'input':\\n        // TODO: Make sure we check if this is still unmounted or do any clean\\n        // up necessary since we never stop tracking anymore.\\n        track(domElement);\\n        postMountWrapper(domElement, rawProps, true);\\n        break;\\n\\n      case 'textarea':\\n        // TODO: Make sure we check if this is still unmounted or do any clean\\n        // up necessary since we never stop tracking anymore.\\n        track(domElement);\\n        postMountWrapper$3(domElement);\\n        break;\\n\\n      case 'select':\\n      case 'option':\\n        // For input and textarea we current always set the value property at\\n        // post mount to force it to diverge from attributes. However, for\\n        // option and select we don't quite do the same thing and select\\n        // is not resilient to the DOM state changing so we don't do that here.\\n        // TODO: Consider not doing this for input and textarea.\\n        break;\\n\\n      default:\\n        if (typeof rawProps.onClick === 'function') {\\n          // TODO: This cast may not be sound for SVG, MathML or custom elements.\\n          trapClickOnNonInteractiveElement(domElement);\\n        }\\n\\n        break;\\n    }\\n\\n    return updatePayload;\\n  }\\n  function diffHydratedText(textNode, text, isConcurrentMode) {\\n    var isDifferent = textNode.nodeValue !== text;\\n    return isDifferent;\\n  }\\n  function warnForDeletedHydratableElement(parentNode, child) {\\n    {\\n      if (didWarnInvalidHydration) {\\n        return;\\n      }\\n\\n      didWarnInvalidHydration = true;\\n\\n      error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());\\n    }\\n  }\\n  function warnForDeletedHydratableText(parentNode, child) {\\n    {\\n      if (didWarnInvalidHydration) {\\n        return;\\n      }\\n\\n      didWarnInvalidHydration = true;\\n\\n      error('Did not expect server HTML to contain the text node \\\"%s\\\" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());\\n    }\\n  }\\n  function warnForInsertedHydratedElement(parentNode, tag, props) {\\n    {\\n      if (didWarnInvalidHydration) {\\n        return;\\n      }\\n\\n      didWarnInvalidHydration = true;\\n\\n      error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());\\n    }\\n  }\\n  function warnForInsertedHydratedText(parentNode, text) {\\n    {\\n      if (text === '') {\\n        // We expect to insert empty text nodes since they're not represented in\\n        // the HTML.\\n        // TODO: Remove this special case if we can just avoid inserting empty\\n        // text nodes.\\n        return;\\n      }\\n\\n      if (didWarnInvalidHydration) {\\n        return;\\n      }\\n\\n      didWarnInvalidHydration = true;\\n\\n      error('Expected server HTML to contain a matching text node for \\\"%s\\\" in <%s>.', text, parentNode.nodeName.toLowerCase());\\n    }\\n  }\\n  function restoreControlledState$3(domElement, tag, props) {\\n    switch (tag) {\\n      case 'input':\\n        restoreControlledState(domElement, props);\\n        return;\\n\\n      case 'textarea':\\n        restoreControlledState$2(domElement, props);\\n        return;\\n\\n      case 'select':\\n        restoreControlledState$1(domElement, props);\\n        return;\\n    }\\n  }\\n\\n  var validateDOMNesting = function () {};\\n\\n  var updatedAncestorInfo = function () {};\\n\\n  {\\n    // This validation code was written based on the HTML5 parsing spec:\\n    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\\n    //\\n    // Note: this does not catch all invalid nesting, nor does it try to (as it's\\n    // not clear what practical benefit doing so provides); instead, we warn only\\n    // for cases where the parser will give a parse tree differing from what React\\n    // intended. For example, <b><div></div></b> is invalid but we don't warn\\n    // because it still parses correctly; we do warn for other cases like nested\\n    // <p> tags where the beginning of the second element implicitly closes the\\n    // first, causing a confusing mess.\\n    // https://html.spec.whatwg.org/multipage/syntax.html#special\\n    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\\n\\n    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\\n    // TODO: Distinguish by namespace here -- for <title>, including it here\\n    // errs on the side of fewer warnings\\n    'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\\n\\n    var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\\n\\n    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\\n    var emptyAncestorInfo = {\\n      current: null,\\n      formTag: null,\\n      aTagInScope: null,\\n      buttonTagInScope: null,\\n      nobrTagInScope: null,\\n      pTagInButtonScope: null,\\n      listItemTagAutoclosing: null,\\n      dlItemTagAutoclosing: null\\n    };\\n\\n    updatedAncestorInfo = function (oldInfo, tag) {\\n      var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);\\n\\n      var info = {\\n        tag: tag\\n      };\\n\\n      if (inScopeTags.indexOf(tag) !== -1) {\\n        ancestorInfo.aTagInScope = null;\\n        ancestorInfo.buttonTagInScope = null;\\n        ancestorInfo.nobrTagInScope = null;\\n      }\\n\\n      if (buttonScopeTags.indexOf(tag) !== -1) {\\n        ancestorInfo.pTagInButtonScope = null;\\n      } // See rules for 'li', 'dd', 'dt' start tags in\\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\\n\\n\\n      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {\\n        ancestorInfo.listItemTagAutoclosing = null;\\n        ancestorInfo.dlItemTagAutoclosing = null;\\n      }\\n\\n      ancestorInfo.current = info;\\n\\n      if (tag === 'form') {\\n        ancestorInfo.formTag = info;\\n      }\\n\\n      if (tag === 'a') {\\n        ancestorInfo.aTagInScope = info;\\n      }\\n\\n      if (tag === 'button') {\\n        ancestorInfo.buttonTagInScope = info;\\n      }\\n\\n      if (tag === 'nobr') {\\n        ancestorInfo.nobrTagInScope = info;\\n      }\\n\\n      if (tag === 'p') {\\n        ancestorInfo.pTagInButtonScope = info;\\n      }\\n\\n      if (tag === 'li') {\\n        ancestorInfo.listItemTagAutoclosing = info;\\n      }\\n\\n      if (tag === 'dd' || tag === 'dt') {\\n        ancestorInfo.dlItemTagAutoclosing = info;\\n      }\\n\\n      return ancestorInfo;\\n    };\\n    /**\\n     * Returns whether\\n     */\\n\\n\\n    var isTagValidWithParent = function (tag, parentTag) {\\n      // First, let's check if we're in an unusual parsing mode...\\n      switch (parentTag) {\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\\n        case 'select':\\n          return tag === 'option' || tag === 'optgroup' || tag === '#text';\\n\\n        case 'optgroup':\\n          return tag === 'option' || tag === '#text';\\n        // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\\n        // but\\n\\n        case 'option':\\n          return tag === '#text';\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\\n        // No special behavior since these rules fall back to \\\"in body\\\" mode for\\n        // all except special table nodes which cause bad parsing behavior anyway.\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\\n\\n        case 'tr':\\n          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\\n\\n        case 'tbody':\\n        case 'thead':\\n        case 'tfoot':\\n          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\\n\\n        case 'colgroup':\\n          return tag === 'col' || tag === 'template';\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\\n\\n        case 'table':\\n          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\\n        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\\n\\n        case 'head':\\n          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\\n        // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\\n\\n        case 'html':\\n          return tag === 'head' || tag === 'body' || tag === 'frameset';\\n\\n        case 'frameset':\\n          return tag === 'frame';\\n\\n        case '#document':\\n          return tag === 'html';\\n      } // Probably in the \\\"in body\\\" parsing mode, so we outlaw only tag combos\\n      // where the parsing rules cause implicit opens or closes to be added.\\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\\n\\n\\n      switch (tag) {\\n        case 'h1':\\n        case 'h2':\\n        case 'h3':\\n        case 'h4':\\n        case 'h5':\\n        case 'h6':\\n          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\\n\\n        case 'rp':\\n        case 'rt':\\n          return impliedEndTags.indexOf(parentTag) === -1;\\n\\n        case 'body':\\n        case 'caption':\\n        case 'col':\\n        case 'colgroup':\\n        case 'frameset':\\n        case 'frame':\\n        case 'head':\\n        case 'html':\\n        case 'tbody':\\n        case 'td':\\n        case 'tfoot':\\n        case 'th':\\n        case 'thead':\\n        case 'tr':\\n          // These tags are only valid with a few parents that have special child\\n          // parsing rules -- if we're down here, then none of those matched and\\n          // so we allow it only if we don't know what the parent is, as all other\\n          // cases are invalid.\\n          return parentTag == null;\\n      }\\n\\n      return true;\\n    };\\n    /**\\n     * Returns whether\\n     */\\n\\n\\n    var findInvalidAncestorForTag = function (tag, ancestorInfo) {\\n      switch (tag) {\\n        case 'address':\\n        case 'article':\\n        case 'aside':\\n        case 'blockquote':\\n        case 'center':\\n        case 'details':\\n        case 'dialog':\\n        case 'dir':\\n        case 'div':\\n        case 'dl':\\n        case 'fieldset':\\n        case 'figcaption':\\n        case 'figure':\\n        case 'footer':\\n        case 'header':\\n        case 'hgroup':\\n        case 'main':\\n        case 'menu':\\n        case 'nav':\\n        case 'ol':\\n        case 'p':\\n        case 'section':\\n        case 'summary':\\n        case 'ul':\\n        case 'pre':\\n        case 'listing':\\n        case 'table':\\n        case 'hr':\\n        case 'xmp':\\n        case 'h1':\\n        case 'h2':\\n        case 'h3':\\n        case 'h4':\\n        case 'h5':\\n        case 'h6':\\n          return ancestorInfo.pTagInButtonScope;\\n\\n        case 'form':\\n          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\\n\\n        case 'li':\\n          return ancestorInfo.listItemTagAutoclosing;\\n\\n        case 'dd':\\n        case 'dt':\\n          return ancestorInfo.dlItemTagAutoclosing;\\n\\n        case 'button':\\n          return ancestorInfo.buttonTagInScope;\\n\\n        case 'a':\\n          // Spec says something about storing a list of markers, but it sounds\\n          // equivalent to this check.\\n          return ancestorInfo.aTagInScope;\\n\\n        case 'nobr':\\n          return ancestorInfo.nobrTagInScope;\\n      }\\n\\n      return null;\\n    };\\n\\n    var didWarn$1 = {};\\n\\n    validateDOMNesting = function (childTag, childText, ancestorInfo) {\\n      ancestorInfo = ancestorInfo || emptyAncestorInfo;\\n      var parentInfo = ancestorInfo.current;\\n      var parentTag = parentInfo && parentInfo.tag;\\n\\n      if (childText != null) {\\n        if (childTag != null) {\\n          error('validateDOMNesting: when childText is passed, childTag should be null');\\n        }\\n\\n        childTag = '#text';\\n      }\\n\\n      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;\\n      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);\\n      var invalidParentOrAncestor = invalidParent || invalidAncestor;\\n\\n      if (!invalidParentOrAncestor) {\\n        return;\\n      }\\n\\n      var ancestorTag = invalidParentOrAncestor.tag;\\n      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;\\n\\n      if (didWarn$1[warnKey]) {\\n        return;\\n      }\\n\\n      didWarn$1[warnKey] = true;\\n      var tagDisplayName = childTag;\\n      var whitespaceInfo = '';\\n\\n      if (childTag === '#text') {\\n        if (/\\\\S/.test(childText)) {\\n          tagDisplayName = 'Text nodes';\\n        } else {\\n          tagDisplayName = 'Whitespace text nodes';\\n          whitespaceInfo = \\\" Make sure you don't have any extra whitespace between tags on \\\" + 'each line of your source code.';\\n        }\\n      } else {\\n        tagDisplayName = '<' + childTag + '>';\\n      }\\n\\n      if (invalidParent) {\\n        var info = '';\\n\\n        if (ancestorTag === 'table' && childTag === 'tr') {\\n          info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';\\n        }\\n\\n        error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);\\n      } else {\\n        error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);\\n      }\\n    };\\n  }\\n\\n  var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';\\n  var SUSPENSE_START_DATA = '$';\\n  var SUSPENSE_END_DATA = '/$';\\n  var SUSPENSE_PENDING_START_DATA = '$?';\\n  var SUSPENSE_FALLBACK_START_DATA = '$!';\\n  var STYLE$1 = 'style';\\n  var eventsEnabled = null;\\n  var selectionInformation = null;\\n  function getRootHostContext(rootContainerInstance) {\\n    var type;\\n    var namespace;\\n    var nodeType = rootContainerInstance.nodeType;\\n\\n    switch (nodeType) {\\n      case DOCUMENT_NODE:\\n      case DOCUMENT_FRAGMENT_NODE:\\n        {\\n          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';\\n          var root = rootContainerInstance.documentElement;\\n          namespace = root ? root.namespaceURI : getChildNamespace(null, '');\\n          break;\\n        }\\n\\n      default:\\n        {\\n          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;\\n          var ownNamespace = container.namespaceURI || null;\\n          type = container.tagName;\\n          namespace = getChildNamespace(ownNamespace, type);\\n          break;\\n        }\\n    }\\n\\n    {\\n      var validatedTag = type.toLowerCase();\\n      var ancestorInfo = updatedAncestorInfo(null, validatedTag);\\n      return {\\n        namespace: namespace,\\n        ancestorInfo: ancestorInfo\\n      };\\n    }\\n  }\\n  function getChildHostContext(parentHostContext, type, rootContainerInstance) {\\n    {\\n      var parentHostContextDev = parentHostContext;\\n      var namespace = getChildNamespace(parentHostContextDev.namespace, type);\\n      var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);\\n      return {\\n        namespace: namespace,\\n        ancestorInfo: ancestorInfo\\n      };\\n    }\\n  }\\n  function getPublicInstance(instance) {\\n    return instance;\\n  }\\n  function prepareForCommit(containerInfo) {\\n    eventsEnabled = isEnabled();\\n    selectionInformation = getSelectionInformation();\\n    var activeInstance = null;\\n\\n    setEnabled(false);\\n    return activeInstance;\\n  }\\n  function resetAfterCommit(containerInfo) {\\n    restoreSelection(selectionInformation);\\n    setEnabled(eventsEnabled);\\n    eventsEnabled = null;\\n    selectionInformation = null;\\n  }\\n  function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\\n    var parentNamespace;\\n\\n    {\\n      // TODO: take namespace into account when validating.\\n      var hostContextDev = hostContext;\\n      validateDOMNesting(type, null, hostContextDev.ancestorInfo);\\n\\n      if (typeof props.children === 'string' || typeof props.children === 'number') {\\n        var string = '' + props.children;\\n        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);\\n        validateDOMNesting(null, string, ownAncestorInfo);\\n      }\\n\\n      parentNamespace = hostContextDev.namespace;\\n    }\\n\\n    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);\\n    precacheFiberNode(internalInstanceHandle, domElement);\\n    updateFiberProps(domElement, props);\\n    return domElement;\\n  }\\n  function appendInitialChild(parentInstance, child) {\\n    parentInstance.appendChild(child);\\n  }\\n  function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {\\n    setInitialProperties(domElement, type, props, rootContainerInstance);\\n\\n    switch (type) {\\n      case 'button':\\n      case 'input':\\n      case 'select':\\n      case 'textarea':\\n        return !!props.autoFocus;\\n\\n      case 'img':\\n        return true;\\n\\n      default:\\n        return false;\\n    }\\n  }\\n  function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\\n    {\\n      var hostContextDev = hostContext;\\n\\n      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {\\n        var string = '' + newProps.children;\\n        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);\\n        validateDOMNesting(null, string, ownAncestorInfo);\\n      }\\n    }\\n\\n    return diffProperties(domElement, type, oldProps, newProps);\\n  }\\n  function shouldSetTextContent(type, props) {\\n    return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;\\n  }\\n  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\\n    {\\n      var hostContextDev = hostContext;\\n      validateDOMNesting(null, text, hostContextDev.ancestorInfo);\\n    }\\n\\n    var textNode = createTextNode(text, rootContainerInstance);\\n    precacheFiberNode(internalInstanceHandle, textNode);\\n    return textNode;\\n  }\\n  function getCurrentEventPriority() {\\n    var currentEvent = window.event;\\n\\n    if (currentEvent === undefined) {\\n      return DefaultEventPriority;\\n    }\\n\\n    return getEventPriority(currentEvent.type);\\n  }\\n  // if a component just imports ReactDOM (e.g. for findDOMNode).\\n  // Some environments might not have setTimeout or clearTimeout.\\n\\n  var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\\n  var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\\n  var noTimeout = -1;\\n  var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------\\n  var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {\\n    return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);\\n  } : scheduleTimeout; // TODO: Determine the best fallback here.\\n\\n  function handleErrorInNextTick(error) {\\n    setTimeout(function () {\\n      throw error;\\n    });\\n  } // -------------------\\n  function commitMount(domElement, type, newProps, internalInstanceHandle) {\\n    // Despite the naming that might imply otherwise, this method only\\n    // fires if there is an `Update` effect scheduled during mounting.\\n    // This happens if `finalizeInitialChildren` returns `true` (which it\\n    // does to implement the `autoFocus` attribute on the client). But\\n    // there are also other cases when this might happen (such as patching\\n    // up text content during hydration mismatch). So we'll check this again.\\n    switch (type) {\\n      case 'button':\\n      case 'input':\\n      case 'select':\\n      case 'textarea':\\n        if (newProps.autoFocus) {\\n          domElement.focus();\\n        }\\n\\n        return;\\n\\n      case 'img':\\n        {\\n          if (newProps.src) {\\n            domElement.src = newProps.src;\\n          }\\n\\n          return;\\n        }\\n    }\\n  }\\n  function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\\n    // Apply the diff to the DOM node.\\n    updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with\\n    // with current event handlers.\\n\\n    updateFiberProps(domElement, newProps);\\n  }\\n  function resetTextContent(domElement) {\\n    setTextContent(domElement, '');\\n  }\\n  function commitTextUpdate(textInstance, oldText, newText) {\\n    textInstance.nodeValue = newText;\\n  }\\n  function appendChild(parentInstance, child) {\\n    parentInstance.appendChild(child);\\n  }\\n  function appendChildToContainer(container, child) {\\n    var parentNode;\\n\\n    if (container.nodeType === COMMENT_NODE) {\\n      parentNode = container.parentNode;\\n      parentNode.insertBefore(child, container);\\n    } else {\\n      parentNode = container;\\n      parentNode.appendChild(child);\\n    } // This container might be used for a portal.\\n    // If something inside a portal is clicked, that click should bubble\\n    // through the React tree. However, on Mobile Safari the click would\\n    // never bubble through the *DOM* tree unless an ancestor with onclick\\n    // event exists. So we wouldn't see it and dispatch it.\\n    // This is why we ensure that non React root containers have inline onclick\\n    // defined.\\n    // https://github.com/facebook/react/issues/11918\\n\\n\\n    var reactRootContainer = container._reactRootContainer;\\n\\n    if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {\\n      // TODO: This cast may not be sound for SVG, MathML or custom elements.\\n      trapClickOnNonInteractiveElement(parentNode);\\n    }\\n  }\\n  function insertBefore(parentInstance, child, beforeChild) {\\n    parentInstance.insertBefore(child, beforeChild);\\n  }\\n  function insertInContainerBefore(container, child, beforeChild) {\\n    if (container.nodeType === COMMENT_NODE) {\\n      container.parentNode.insertBefore(child, beforeChild);\\n    } else {\\n      container.insertBefore(child, beforeChild);\\n    }\\n  }\\n\\n  function removeChild(parentInstance, child) {\\n    parentInstance.removeChild(child);\\n  }\\n  function removeChildFromContainer(container, child) {\\n    if (container.nodeType === COMMENT_NODE) {\\n      container.parentNode.removeChild(child);\\n    } else {\\n      container.removeChild(child);\\n    }\\n  }\\n  function clearSuspenseBoundary(parentInstance, suspenseInstance) {\\n    var node = suspenseInstance; // Delete all nodes within this suspense boundary.\\n    // There might be nested nodes so we need to keep track of how\\n    // deep we are and only break out when we're back on top.\\n\\n    var depth = 0;\\n\\n    do {\\n      var nextNode = node.nextSibling;\\n      parentInstance.removeChild(node);\\n\\n      if (nextNode && nextNode.nodeType === COMMENT_NODE) {\\n        var data = nextNode.data;\\n\\n        if (data === SUSPENSE_END_DATA) {\\n          if (depth === 0) {\\n            parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.\\n\\n            retryIfBlockedOn(suspenseInstance);\\n            return;\\n          } else {\\n            depth--;\\n          }\\n        } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {\\n          depth++;\\n        }\\n      }\\n\\n      node = nextNode;\\n    } while (node); // TODO: Warn, we didn't find the end comment boundary.\\n    // Retry if any event replaying was blocked on this.\\n\\n\\n    retryIfBlockedOn(suspenseInstance);\\n  }\\n  function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {\\n    if (container.nodeType === COMMENT_NODE) {\\n      clearSuspenseBoundary(container.parentNode, suspenseInstance);\\n    } else if (container.nodeType === ELEMENT_NODE) {\\n      clearSuspenseBoundary(container, suspenseInstance);\\n    } // Retry if any event replaying was blocked on this.\\n\\n\\n    retryIfBlockedOn(container);\\n  }\\n  function hideInstance(instance) {\\n    // TODO: Does this work for all element types? What about MathML? Should we\\n    // pass host context to this method?\\n    instance = instance;\\n    var style = instance.style;\\n\\n    if (typeof style.setProperty === 'function') {\\n      style.setProperty('display', 'none', 'important');\\n    } else {\\n      style.display = 'none';\\n    }\\n  }\\n  function hideTextInstance(textInstance) {\\n    textInstance.nodeValue = '';\\n  }\\n  function unhideInstance(instance, props) {\\n    instance = instance;\\n    var styleProp = props[STYLE$1];\\n    var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;\\n    instance.style.display = dangerousStyleValue('display', display);\\n  }\\n  function unhideTextInstance(textInstance, text) {\\n    textInstance.nodeValue = text;\\n  }\\n  function clearContainer(container) {\\n    if (container.nodeType === ELEMENT_NODE) {\\n      container.textContent = '';\\n    } else if (container.nodeType === DOCUMENT_NODE) {\\n      if (container.documentElement) {\\n        container.removeChild(container.documentElement);\\n      }\\n    }\\n  } // -------------------\\n  function canHydrateInstance(instance, type, props) {\\n    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {\\n      return null;\\n    } // This has now been refined to an element node.\\n\\n\\n    return instance;\\n  }\\n  function canHydrateTextInstance(instance, text) {\\n    if (text === '' || instance.nodeType !== TEXT_NODE) {\\n      // Empty strings are not parsed by HTML so there won't be a correct match here.\\n      return null;\\n    } // This has now been refined to a text node.\\n\\n\\n    return instance;\\n  }\\n  function canHydrateSuspenseInstance(instance) {\\n    if (instance.nodeType !== COMMENT_NODE) {\\n      // Empty strings are not parsed by HTML so there won't be a correct match here.\\n      return null;\\n    } // This has now been refined to a suspense node.\\n\\n\\n    return instance;\\n  }\\n  function isSuspenseInstancePending(instance) {\\n    return instance.data === SUSPENSE_PENDING_START_DATA;\\n  }\\n  function isSuspenseInstanceFallback(instance) {\\n    return instance.data === SUSPENSE_FALLBACK_START_DATA;\\n  }\\n  function getSuspenseInstanceFallbackErrorDetails(instance) {\\n    var dataset = instance.nextSibling && instance.nextSibling.dataset;\\n    var digest, message, stack;\\n\\n    if (dataset) {\\n      digest = dataset.dgst;\\n\\n      {\\n        message = dataset.msg;\\n        stack = dataset.stck;\\n      }\\n    }\\n\\n    {\\n      return {\\n        message: message,\\n        digest: digest,\\n        stack: stack\\n      };\\n    } // let value = {message: undefined, hash: undefined};\\n    // const nextSibling = instance.nextSibling;\\n    // if (nextSibling) {\\n    //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;\\n    //   value.message = dataset.msg;\\n    //   value.hash = dataset.hash;\\n    //   if (true) {\\n    //     value.stack = dataset.stack;\\n    //   }\\n    // }\\n    // return value;\\n\\n  }\\n  function registerSuspenseInstanceRetry(instance, callback) {\\n    instance._reactRetry = callback;\\n  }\\n\\n  function getNextHydratable(node) {\\n    // Skip non-hydratable nodes.\\n    for (; node != null; node = node.nextSibling) {\\n      var nodeType = node.nodeType;\\n\\n      if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {\\n        break;\\n      }\\n\\n      if (nodeType === COMMENT_NODE) {\\n        var nodeData = node.data;\\n\\n        if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {\\n          break;\\n        }\\n\\n        if (nodeData === SUSPENSE_END_DATA) {\\n          return null;\\n        }\\n      }\\n    }\\n\\n    return node;\\n  }\\n\\n  function getNextHydratableSibling(instance) {\\n    return getNextHydratable(instance.nextSibling);\\n  }\\n  function getFirstHydratableChild(parentInstance) {\\n    return getNextHydratable(parentInstance.firstChild);\\n  }\\n  function getFirstHydratableChildWithinContainer(parentContainer) {\\n    return getNextHydratable(parentContainer.firstChild);\\n  }\\n  function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {\\n    return getNextHydratable(parentInstance.nextSibling);\\n  }\\n  function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {\\n    precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events\\n    // get attached.\\n\\n    updateFiberProps(instance, props);\\n    var parentNamespace;\\n\\n    {\\n      var hostContextDev = hostContext;\\n      parentNamespace = hostContextDev.namespace;\\n    } // TODO: Temporary hack to check if we're in a concurrent root. We can delete\\n    // when the legacy root API is removed.\\n\\n\\n    var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;\\n    return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);\\n  }\\n  function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {\\n    precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete\\n    // when the legacy root API is removed.\\n\\n    var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;\\n    return diffHydratedText(textInstance, text);\\n  }\\n  function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {\\n    precacheFiberNode(internalInstanceHandle, suspenseInstance);\\n  }\\n  function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {\\n    var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.\\n    // There might be nested nodes so we need to keep track of how\\n    // deep we are and only break out when we're back on top.\\n\\n    var depth = 0;\\n\\n    while (node) {\\n      if (node.nodeType === COMMENT_NODE) {\\n        var data = node.data;\\n\\n        if (data === SUSPENSE_END_DATA) {\\n          if (depth === 0) {\\n            return getNextHydratableSibling(node);\\n          } else {\\n            depth--;\\n          }\\n        } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\\n          depth++;\\n        }\\n      }\\n\\n      node = node.nextSibling;\\n    } // TODO: Warn, we didn't find the end comment boundary.\\n\\n\\n    return null;\\n  } // Returns the SuspenseInstance if this node is a direct child of a\\n  // SuspenseInstance. I.e. if its previous sibling is a Comment with\\n  // SUSPENSE_x_START_DATA. Otherwise, null.\\n\\n  function getParentSuspenseInstance(targetInstance) {\\n    var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.\\n    // There might be nested nodes so we need to keep track of how\\n    // deep we are and only break out when we're back on top.\\n\\n    var depth = 0;\\n\\n    while (node) {\\n      if (node.nodeType === COMMENT_NODE) {\\n        var data = node.data;\\n\\n        if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {\\n          if (depth === 0) {\\n            return node;\\n          } else {\\n            depth--;\\n          }\\n        } else if (data === SUSPENSE_END_DATA) {\\n          depth++;\\n        }\\n      }\\n\\n      node = node.previousSibling;\\n    }\\n\\n    return null;\\n  }\\n  function commitHydratedContainer(container) {\\n    // Retry if any event replaying was blocked on this.\\n    retryIfBlockedOn(container);\\n  }\\n  function commitHydratedSuspenseInstance(suspenseInstance) {\\n    // Retry if any event replaying was blocked on this.\\n    retryIfBlockedOn(suspenseInstance);\\n  }\\n  function shouldDeleteUnhydratedTailInstances(parentType) {\\n    return parentType !== 'head' && parentType !== 'body';\\n  }\\n  function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {\\n    var shouldWarnDev = true;\\n    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);\\n  }\\n  function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {\\n    if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\\n      var shouldWarnDev = true;\\n      checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);\\n    }\\n  }\\n  function didNotHydrateInstanceWithinContainer(parentContainer, instance) {\\n    {\\n      if (instance.nodeType === ELEMENT_NODE) {\\n        warnForDeletedHydratableElement(parentContainer, instance);\\n      } else if (instance.nodeType === COMMENT_NODE) ; else {\\n        warnForDeletedHydratableText(parentContainer, instance);\\n      }\\n    }\\n  }\\n  function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {\\n    {\\n      // $FlowFixMe: Only Element or Document can be parent nodes.\\n      var parentNode = parentInstance.parentNode;\\n\\n      if (parentNode !== null) {\\n        if (instance.nodeType === ELEMENT_NODE) {\\n          warnForDeletedHydratableElement(parentNode, instance);\\n        } else if (instance.nodeType === COMMENT_NODE) ; else {\\n          warnForDeletedHydratableText(parentNode, instance);\\n        }\\n      }\\n    }\\n  }\\n  function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {\\n    {\\n      if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\\n        if (instance.nodeType === ELEMENT_NODE) {\\n          warnForDeletedHydratableElement(parentInstance, instance);\\n        } else if (instance.nodeType === COMMENT_NODE) ; else {\\n          warnForDeletedHydratableText(parentInstance, instance);\\n        }\\n      }\\n    }\\n  }\\n  function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {\\n    {\\n      warnForInsertedHydratedElement(parentContainer, type);\\n    }\\n  }\\n  function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {\\n    {\\n      warnForInsertedHydratedText(parentContainer, text);\\n    }\\n  }\\n  function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {\\n    {\\n      // $FlowFixMe: Only Element or Document can be parent nodes.\\n      var parentNode = parentInstance.parentNode;\\n      if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);\\n    }\\n  }\\n  function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {\\n    {\\n      // $FlowFixMe: Only Element or Document can be parent nodes.\\n      var parentNode = parentInstance.parentNode;\\n      if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);\\n    }\\n  }\\n  function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {\\n    {\\n      if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\\n        warnForInsertedHydratedElement(parentInstance, type);\\n      }\\n    }\\n  }\\n  function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {\\n    {\\n      if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {\\n        warnForInsertedHydratedText(parentInstance, text);\\n      }\\n    }\\n  }\\n  function errorHydratingContainer(parentContainer) {\\n    {\\n      // TODO: This gets logged by onRecoverableError, too, so we should be\\n      // able to remove it.\\n      error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());\\n    }\\n  }\\n  function preparePortalMount(portalInstance) {\\n    listenToAllSupportedEvents(portalInstance);\\n  }\\n\\n  var randomKey = Math.random().toString(36).slice(2);\\n  var internalInstanceKey = '__reactFiber$' + randomKey;\\n  var internalPropsKey = '__reactProps$' + randomKey;\\n  var internalContainerInstanceKey = '__reactContainer$' + randomKey;\\n  var internalEventHandlersKey = '__reactEvents$' + randomKey;\\n  var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;\\n  var internalEventHandlesSetKey = '__reactHandles$' + randomKey;\\n  function detachDeletedInstance(node) {\\n    // TODO: This function is only called on host components. I don't think all of\\n    // these fields are relevant.\\n    delete node[internalInstanceKey];\\n    delete node[internalPropsKey];\\n    delete node[internalEventHandlersKey];\\n    delete node[internalEventHandlerListenersKey];\\n    delete node[internalEventHandlesSetKey];\\n  }\\n  function precacheFiberNode(hostInst, node) {\\n    node[internalInstanceKey] = hostInst;\\n  }\\n  function markContainerAsRoot(hostRoot, node) {\\n    node[internalContainerInstanceKey] = hostRoot;\\n  }\\n  function unmarkContainerAsRoot(node) {\\n    node[internalContainerInstanceKey] = null;\\n  }\\n  function isContainerMarkedAsRoot(node) {\\n    return !!node[internalContainerInstanceKey];\\n  } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.\\n  // If the target node is part of a hydrated or not yet rendered subtree, then\\n  // this may also return a SuspenseComponent or HostRoot to indicate that.\\n  // Conceptually the HostRoot fiber is a child of the Container node. So if you\\n  // pass the Container node as the targetNode, you will not actually get the\\n  // HostRoot back. To get to the HostRoot, you need to pass a child of it.\\n  // The same thing applies to Suspense boundaries.\\n\\n  function getClosestInstanceFromNode(targetNode) {\\n    var targetInst = targetNode[internalInstanceKey];\\n\\n    if (targetInst) {\\n      // Don't return HostRoot or SuspenseComponent here.\\n      return targetInst;\\n    } // If the direct event target isn't a React owned DOM node, we need to look\\n    // to see if one of its parents is a React owned DOM node.\\n\\n\\n    var parentNode = targetNode.parentNode;\\n\\n    while (parentNode) {\\n      // We'll check if this is a container root that could include\\n      // React nodes in the future. We need to check this first because\\n      // if we're a child of a dehydrated container, we need to first\\n      // find that inner container before moving on to finding the parent\\n      // instance. Note that we don't check this field on  the targetNode\\n      // itself because the fibers are conceptually between the container\\n      // node and the first child. It isn't surrounding the container node.\\n      // If it's not a container, we check if it's an instance.\\n      targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];\\n\\n      if (targetInst) {\\n        // Since this wasn't the direct target of the event, we might have\\n        // stepped past dehydrated DOM nodes to get here. However they could\\n        // also have been non-React nodes. We need to answer which one.\\n        // If we the instance doesn't have any children, then there can't be\\n        // a nested suspense boundary within it. So we can use this as a fast\\n        // bailout. Most of the time, when people add non-React children to\\n        // the tree, it is using a ref to a child-less DOM node.\\n        // Normally we'd only need to check one of the fibers because if it\\n        // has ever gone from having children to deleting them or vice versa\\n        // it would have deleted the dehydrated boundary nested inside already.\\n        // However, since the HostRoot starts out with an alternate it might\\n        // have one on the alternate so we need to check in case this was a\\n        // root.\\n        var alternate = targetInst.alternate;\\n\\n        if (targetInst.child !== null || alternate !== null && alternate.child !== null) {\\n          // Next we need to figure out if the node that skipped past is\\n          // nested within a dehydrated boundary and if so, which one.\\n          var suspenseInstance = getParentSuspenseInstance(targetNode);\\n\\n          while (suspenseInstance !== null) {\\n            // We found a suspense instance. That means that we haven't\\n            // hydrated it yet. Even though we leave the comments in the\\n            // DOM after hydrating, and there are boundaries in the DOM\\n            // that could already be hydrated, we wouldn't have found them\\n            // through this pass since if the target is hydrated it would\\n            // have had an internalInstanceKey on it.\\n            // Let's get the fiber associated with the SuspenseComponent\\n            // as the deepest instance.\\n            var targetSuspenseInst = suspenseInstance[internalInstanceKey];\\n\\n            if (targetSuspenseInst) {\\n              return targetSuspenseInst;\\n            } // If we don't find a Fiber on the comment, it might be because\\n            // we haven't gotten to hydrate it yet. There might still be a\\n            // parent boundary that hasn't above this one so we need to find\\n            // the outer most that is known.\\n\\n\\n            suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent\\n            // host component also hasn't hydrated yet. We can return it\\n            // below since it will bail out on the isMounted check later.\\n          }\\n        }\\n\\n        return targetInst;\\n      }\\n\\n      targetNode = parentNode;\\n      parentNode = targetNode.parentNode;\\n    }\\n\\n    return null;\\n  }\\n  /**\\n   * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\\n   * instance, or null if the node was not rendered by this React.\\n   */\\n\\n  function getInstanceFromNode(node) {\\n    var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];\\n\\n    if (inst) {\\n      if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {\\n        return inst;\\n      } else {\\n        return null;\\n      }\\n    }\\n\\n    return null;\\n  }\\n  /**\\n   * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\\n   * DOM node.\\n   */\\n\\n  function getNodeFromInstance(inst) {\\n    if (inst.tag === HostComponent || inst.tag === HostText) {\\n      // In Fiber this, is just the state node right now. We assume it will be\\n      // a host component or host text.\\n      return inst.stateNode;\\n    } // Without this first invariant, passing a non-DOM-component triggers the next\\n    // invariant for a missing parent, which is super confusing.\\n\\n\\n    throw new Error('getNodeFromInstance: Invalid argument.');\\n  }\\n  function getFiberCurrentPropsFromNode(node) {\\n    return node[internalPropsKey] || null;\\n  }\\n  function updateFiberProps(node, props) {\\n    node[internalPropsKey] = props;\\n  }\\n  function getEventListenerSet(node) {\\n    var elementListenerSet = node[internalEventHandlersKey];\\n\\n    if (elementListenerSet === undefined) {\\n      elementListenerSet = node[internalEventHandlersKey] = new Set();\\n    }\\n\\n    return elementListenerSet;\\n  }\\n\\n  var loggedTypeFailures = {};\\n  var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\\n\\n  function setCurrentlyValidatingElement(element) {\\n    {\\n      if (element) {\\n        var owner = element._owner;\\n        var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\\n        ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\\n      } else {\\n        ReactDebugCurrentFrame$1.setExtraStackFrame(null);\\n      }\\n    }\\n  }\\n\\n  function checkPropTypes(typeSpecs, values, location, componentName, element) {\\n    {\\n      // $FlowFixMe This is okay but Flow doesn't know it.\\n      var has = Function.call.bind(hasOwnProperty);\\n\\n      for (var typeSpecName in typeSpecs) {\\n        if (has(typeSpecs, typeSpecName)) {\\n          var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\\n          // fail the render phase where it didn't fail before. So we log it.\\n          // After these have been cleaned up, we'll let them throw.\\n\\n          try {\\n            // This is intentionally an invariant that gets caught. It's the same\\n            // behavior as without this statement except with a better message.\\n            if (typeof typeSpecs[typeSpecName] !== 'function') {\\n              // eslint-disable-next-line react-internal/prod-error-codes\\n              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\\n              err.name = 'Invariant Violation';\\n              throw err;\\n            }\\n\\n            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\\n          } catch (ex) {\\n            error$1 = ex;\\n          }\\n\\n          if (error$1 && !(error$1 instanceof Error)) {\\n            setCurrentlyValidatingElement(element);\\n\\n            error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\\n\\n            setCurrentlyValidatingElement(null);\\n          }\\n\\n          if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\\n            // Only monitor this failure once because there tends to be a lot of the\\n            // same error.\\n            loggedTypeFailures[error$1.message] = true;\\n            setCurrentlyValidatingElement(element);\\n\\n            error('Failed %s type: %s', location, error$1.message);\\n\\n            setCurrentlyValidatingElement(null);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  var valueStack = [];\\n  var fiberStack;\\n\\n  {\\n    fiberStack = [];\\n  }\\n\\n  var index = -1;\\n\\n  function createCursor(defaultValue) {\\n    return {\\n      current: defaultValue\\n    };\\n  }\\n\\n  function pop(cursor, fiber) {\\n    if (index < 0) {\\n      {\\n        error('Unexpected pop.');\\n      }\\n\\n      return;\\n    }\\n\\n    {\\n      if (fiber !== fiberStack[index]) {\\n        error('Unexpected Fiber popped.');\\n      }\\n    }\\n\\n    cursor.current = valueStack[index];\\n    valueStack[index] = null;\\n\\n    {\\n      fiberStack[index] = null;\\n    }\\n\\n    index--;\\n  }\\n\\n  function push(cursor, value, fiber) {\\n    index++;\\n    valueStack[index] = cursor.current;\\n\\n    {\\n      fiberStack[index] = fiber;\\n    }\\n\\n    cursor.current = value;\\n  }\\n\\n  var warnedAboutMissingGetChildContext;\\n\\n  {\\n    warnedAboutMissingGetChildContext = {};\\n  }\\n\\n  var emptyContextObject = {};\\n\\n  {\\n    Object.freeze(emptyContextObject);\\n  } // A cursor to the current merged context object on the stack.\\n\\n\\n  var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\\n\\n  var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\\n  // We use this to get access to the parent context after we have already\\n  // pushed the next context provider, and now need to merge their contexts.\\n\\n  var previousContext = emptyContextObject;\\n\\n  function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\\n    {\\n      if (didPushOwnContextIfProvider && isContextProvider(Component)) {\\n        // If the fiber is a context provider itself, when we read its context\\n        // we may have already pushed its own child context on the stack. A context\\n        // provider should not \\\"see\\\" its own child context. Therefore we read the\\n        // previous (parent) context instead for a context provider.\\n        return previousContext;\\n      }\\n\\n      return contextStackCursor.current;\\n    }\\n  }\\n\\n  function cacheContext(workInProgress, unmaskedContext, maskedContext) {\\n    {\\n      var instance = workInProgress.stateNode;\\n      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\\n      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\\n    }\\n  }\\n\\n  function getMaskedContext(workInProgress, unmaskedContext) {\\n    {\\n      var type = workInProgress.type;\\n      var contextTypes = type.contextTypes;\\n\\n      if (!contextTypes) {\\n        return emptyContextObject;\\n      } // Avoid recreating masked context unless unmasked context has changed.\\n      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\\n      // This may trigger infinite loops if componentWillReceiveProps calls setState.\\n\\n\\n      var instance = workInProgress.stateNode;\\n\\n      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\\n        return instance.__reactInternalMemoizedMaskedChildContext;\\n      }\\n\\n      var context = {};\\n\\n      for (var key in contextTypes) {\\n        context[key] = unmaskedContext[key];\\n      }\\n\\n      {\\n        var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\\n        checkPropTypes(contextTypes, context, 'context', name);\\n      } // Cache unmasked context so we can avoid recreating masked context unless necessary.\\n      // Context is created before the class component is instantiated so check for instance.\\n\\n\\n      if (instance) {\\n        cacheContext(workInProgress, unmaskedContext, context);\\n      }\\n\\n      return context;\\n    }\\n  }\\n\\n  function hasContextChanged() {\\n    {\\n      return didPerformWorkStackCursor.current;\\n    }\\n  }\\n\\n  function isContextProvider(type) {\\n    {\\n      var childContextTypes = type.childContextTypes;\\n      return childContextTypes !== null && childContextTypes !== undefined;\\n    }\\n  }\\n\\n  function popContext(fiber) {\\n    {\\n      pop(didPerformWorkStackCursor, fiber);\\n      pop(contextStackCursor, fiber);\\n    }\\n  }\\n\\n  function popTopLevelContextObject(fiber) {\\n    {\\n      pop(didPerformWorkStackCursor, fiber);\\n      pop(contextStackCursor, fiber);\\n    }\\n  }\\n\\n  function pushTopLevelContextObject(fiber, context, didChange) {\\n    {\\n      if (contextStackCursor.current !== emptyContextObject) {\\n        throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n      }\\n\\n      push(contextStackCursor, context, fiber);\\n      push(didPerformWorkStackCursor, didChange, fiber);\\n    }\\n  }\\n\\n  function processChildContext(fiber, type, parentContext) {\\n    {\\n      var instance = fiber.stateNode;\\n      var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\\n      // It has only been added in Fiber to match the (unintentional) behavior in Stack.\\n\\n      if (typeof instance.getChildContext !== 'function') {\\n        {\\n          var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\\n\\n          if (!warnedAboutMissingGetChildContext[componentName]) {\\n            warnedAboutMissingGetChildContext[componentName] = true;\\n\\n            error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\\n          }\\n        }\\n\\n        return parentContext;\\n      }\\n\\n      var childContext = instance.getChildContext();\\n\\n      for (var contextKey in childContext) {\\n        if (!(contextKey in childContextTypes)) {\\n          throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \\\".getChildContext(): key \\\\\\\"\\\" + contextKey + \\\"\\\\\\\" is not defined in childContextTypes.\\\");\\n        }\\n      }\\n\\n      {\\n        var name = getComponentNameFromFiber(fiber) || 'Unknown';\\n        checkPropTypes(childContextTypes, childContext, 'child context', name);\\n      }\\n\\n      return assign({}, parentContext, childContext);\\n    }\\n  }\\n\\n  function pushContextProvider(workInProgress) {\\n    {\\n      var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\\n      // If the instance does not exist yet, we will push null at first,\\n      // and replace it on the stack later when invalidating the context.\\n\\n      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\\n      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\\n\\n      previousContext = contextStackCursor.current;\\n      push(contextStackCursor, memoizedMergedChildContext, workInProgress);\\n      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\\n      return true;\\n    }\\n  }\\n\\n  function invalidateContextProvider(workInProgress, type, didChange) {\\n    {\\n      var instance = workInProgress.stateNode;\\n\\n      if (!instance) {\\n        throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n      }\\n\\n      if (didChange) {\\n        // Merge parent and own context.\\n        // Skip this if we're not updating due to sCU.\\n        // This avoids unnecessarily recomputing memoized values.\\n        var mergedContext = processChildContext(workInProgress, type, previousContext);\\n        instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\\n        // It is important to unwind the context in the reverse order.\\n\\n        pop(didPerformWorkStackCursor, workInProgress);\\n        pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\\n\\n        push(contextStackCursor, mergedContext, workInProgress);\\n        push(didPerformWorkStackCursor, didChange, workInProgress);\\n      } else {\\n        pop(didPerformWorkStackCursor, workInProgress);\\n        push(didPerformWorkStackCursor, didChange, workInProgress);\\n      }\\n    }\\n  }\\n\\n  function findCurrentUnmaskedContext(fiber) {\\n    {\\n      // Currently this is only used with renderSubtreeIntoContainer; not sure if it\\n      // makes sense elsewhere\\n      if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\\n        throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n      }\\n\\n      var node = fiber;\\n\\n      do {\\n        switch (node.tag) {\\n          case HostRoot:\\n            return node.stateNode.context;\\n\\n          case ClassComponent:\\n            {\\n              var Component = node.type;\\n\\n              if (isContextProvider(Component)) {\\n                return node.stateNode.__reactInternalMemoizedMergedChildContext;\\n              }\\n\\n              break;\\n            }\\n        }\\n\\n        node = node.return;\\n      } while (node !== null);\\n\\n      throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n    }\\n  }\\n\\n  var LegacyRoot = 0;\\n  var ConcurrentRoot = 1;\\n\\n  var syncQueue = null;\\n  var includesLegacySyncCallbacks = false;\\n  var isFlushingSyncQueue = false;\\n  function scheduleSyncCallback(callback) {\\n    // Push this callback into an internal queue. We'll flush these either in\\n    // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\\n    if (syncQueue === null) {\\n      syncQueue = [callback];\\n    } else {\\n      // Push onto existing queue. Don't need to schedule a callback because\\n      // we already scheduled one when we created the queue.\\n      syncQueue.push(callback);\\n    }\\n  }\\n  function scheduleLegacySyncCallback(callback) {\\n    includesLegacySyncCallbacks = true;\\n    scheduleSyncCallback(callback);\\n  }\\n  function flushSyncCallbacksOnlyInLegacyMode() {\\n    // Only flushes the queue if there's a legacy sync callback scheduled.\\n    // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\\n    // it might make more sense for the queue to be a list of roots instead of a\\n    // list of generic callbacks. Then we can have two: one for legacy roots, one\\n    // for concurrent roots. And this method would only flush the legacy ones.\\n    if (includesLegacySyncCallbacks) {\\n      flushSyncCallbacks();\\n    }\\n  }\\n  function flushSyncCallbacks() {\\n    if (!isFlushingSyncQueue && syncQueue !== null) {\\n      // Prevent re-entrance.\\n      isFlushingSyncQueue = true;\\n      var i = 0;\\n      var previousUpdatePriority = getCurrentUpdatePriority();\\n\\n      try {\\n        var isSync = true;\\n        var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\\n        // queue is in the render or commit phases.\\n\\n        setCurrentUpdatePriority(DiscreteEventPriority);\\n\\n        for (; i < queue.length; i++) {\\n          var callback = queue[i];\\n\\n          do {\\n            callback = callback(isSync);\\n          } while (callback !== null);\\n        }\\n\\n        syncQueue = null;\\n        includesLegacySyncCallbacks = false;\\n      } catch (error) {\\n        // If something throws, leave the remaining callbacks on the queue.\\n        if (syncQueue !== null) {\\n          syncQueue = syncQueue.slice(i + 1);\\n        } // Resume flushing in the next tick\\n\\n\\n        scheduleCallback(ImmediatePriority, flushSyncCallbacks);\\n        throw error;\\n      } finally {\\n        setCurrentUpdatePriority(previousUpdatePriority);\\n        isFlushingSyncQueue = false;\\n      }\\n    }\\n\\n    return null;\\n  }\\n\\n  // TODO: Use the unified fiber stack module instead of this local one?\\n  // Intentionally not using it yet to derisk the initial implementation, because\\n  // the way we push/pop these values is a bit unusual. If there's a mistake, I'd\\n  // rather the ids be wrong than crash the whole reconciler.\\n  var forkStack = [];\\n  var forkStackIndex = 0;\\n  var treeForkProvider = null;\\n  var treeForkCount = 0;\\n  var idStack = [];\\n  var idStackIndex = 0;\\n  var treeContextProvider = null;\\n  var treeContextId = 1;\\n  var treeContextOverflow = '';\\n  function isForkedChild(workInProgress) {\\n    warnIfNotHydrating();\\n    return (workInProgress.flags & Forked) !== NoFlags;\\n  }\\n  function getForksAtLevel(workInProgress) {\\n    warnIfNotHydrating();\\n    return treeForkCount;\\n  }\\n  function getTreeId() {\\n    var overflow = treeContextOverflow;\\n    var idWithLeadingBit = treeContextId;\\n    var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\\n    return id.toString(32) + overflow;\\n  }\\n  function pushTreeFork(workInProgress, totalChildren) {\\n    // This is called right after we reconcile an array (or iterator) of child\\n    // fibers, because that's the only place where we know how many children in\\n    // the whole set without doing extra work later, or storing addtional\\n    // information on the fiber.\\n    //\\n    // That's why this function is separate from pushTreeId — it's called during\\n    // the render phase of the fork parent, not the child, which is where we push\\n    // the other context values.\\n    //\\n    // In the Fizz implementation this is much simpler because the child is\\n    // rendered in the same callstack as the parent.\\n    //\\n    // It might be better to just add a `forks` field to the Fiber type. It would\\n    // make this module simpler.\\n    warnIfNotHydrating();\\n    forkStack[forkStackIndex++] = treeForkCount;\\n    forkStack[forkStackIndex++] = treeForkProvider;\\n    treeForkProvider = workInProgress;\\n    treeForkCount = totalChildren;\\n  }\\n  function pushTreeId(workInProgress, totalChildren, index) {\\n    warnIfNotHydrating();\\n    idStack[idStackIndex++] = treeContextId;\\n    idStack[idStackIndex++] = treeContextOverflow;\\n    idStack[idStackIndex++] = treeContextProvider;\\n    treeContextProvider = workInProgress;\\n    var baseIdWithLeadingBit = treeContextId;\\n    var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\\n    // of the id; we use it to account for leading 0s.\\n\\n    var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\\n    var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\\n    var slot = index + 1;\\n    var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\\n    // consideration the leading 1 we use to mark the end of the sequence.\\n\\n    if (length > 30) {\\n      // We overflowed the bitwise-safe range. Fall back to slower algorithm.\\n      // This branch assumes the length of the base id is greater than 5; it won't\\n      // work for smaller ids, because you need 5 bits per character.\\n      //\\n      // We encode the id in multiple steps: first the base id, then the\\n      // remaining digits.\\n      //\\n      // Each 5 bit sequence corresponds to a single base 32 character. So for\\n      // example, if the current id is 23 bits long, we can convert 20 of those\\n      // bits into a string of 4 characters, with 3 bits left over.\\n      //\\n      // First calculate how many bits in the base id represent a complete\\n      // sequence of characters.\\n      var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\\n\\n      var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\\n\\n      var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\\n\\n      var restOfBaseId = baseId >> numberOfOverflowBits;\\n      var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\\n      // we made more room, this time it won't overflow.\\n\\n      var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\\n      var restOfNewBits = slot << restOfBaseLength;\\n      var id = restOfNewBits | restOfBaseId;\\n      var overflow = newOverflow + baseOverflow;\\n      treeContextId = 1 << restOfLength | id;\\n      treeContextOverflow = overflow;\\n    } else {\\n      // Normal path\\n      var newBits = slot << baseLength;\\n\\n      var _id = newBits | baseId;\\n\\n      var _overflow = baseOverflow;\\n      treeContextId = 1 << length | _id;\\n      treeContextOverflow = _overflow;\\n    }\\n  }\\n  function pushMaterializedTreeId(workInProgress) {\\n    warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\\n    // in its children.\\n\\n    var returnFiber = workInProgress.return;\\n\\n    if (returnFiber !== null) {\\n      var numberOfForks = 1;\\n      var slotIndex = 0;\\n      pushTreeFork(workInProgress, numberOfForks);\\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\\n    }\\n  }\\n\\n  function getBitLength(number) {\\n    return 32 - clz32(number);\\n  }\\n\\n  function getLeadingBit(id) {\\n    return 1 << getBitLength(id) - 1;\\n  }\\n\\n  function popTreeContext(workInProgress) {\\n    // Restore the previous values.\\n    // This is a bit more complicated than other context-like modules in Fiber\\n    // because the same Fiber may appear on the stack multiple times and for\\n    // different reasons. We have to keep popping until the work-in-progress is\\n    // no longer at the top of the stack.\\n    while (workInProgress === treeForkProvider) {\\n      treeForkProvider = forkStack[--forkStackIndex];\\n      forkStack[forkStackIndex] = null;\\n      treeForkCount = forkStack[--forkStackIndex];\\n      forkStack[forkStackIndex] = null;\\n    }\\n\\n    while (workInProgress === treeContextProvider) {\\n      treeContextProvider = idStack[--idStackIndex];\\n      idStack[idStackIndex] = null;\\n      treeContextOverflow = idStack[--idStackIndex];\\n      idStack[idStackIndex] = null;\\n      treeContextId = idStack[--idStackIndex];\\n      idStack[idStackIndex] = null;\\n    }\\n  }\\n  function getSuspendedTreeContext() {\\n    warnIfNotHydrating();\\n\\n    if (treeContextProvider !== null) {\\n      return {\\n        id: treeContextId,\\n        overflow: treeContextOverflow\\n      };\\n    } else {\\n      return null;\\n    }\\n  }\\n  function restoreSuspendedTreeContext(workInProgress, suspendedContext) {\\n    warnIfNotHydrating();\\n    idStack[idStackIndex++] = treeContextId;\\n    idStack[idStackIndex++] = treeContextOverflow;\\n    idStack[idStackIndex++] = treeContextProvider;\\n    treeContextId = suspendedContext.id;\\n    treeContextOverflow = suspendedContext.overflow;\\n    treeContextProvider = workInProgress;\\n  }\\n\\n  function warnIfNotHydrating() {\\n    {\\n      if (!getIsHydrating()) {\\n        error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\\n      }\\n    }\\n  }\\n\\n  // This may have been an insertion or a hydration.\\n\\n  var hydrationParentFiber = null;\\n  var nextHydratableInstance = null;\\n  var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\\n  // due to earlier mismatches or a suspended fiber.\\n\\n  var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\\n\\n  var hydrationErrors = null;\\n\\n  function warnIfHydrating() {\\n    {\\n      if (isHydrating) {\\n        error('We should not be hydrating here. This is a bug in React. Please file a bug.');\\n      }\\n    }\\n  }\\n\\n  function markDidThrowWhileHydratingDEV() {\\n    {\\n      didSuspendOrErrorDEV = true;\\n    }\\n  }\\n  function didSuspendOrErrorWhileHydratingDEV() {\\n    {\\n      return didSuspendOrErrorDEV;\\n    }\\n  }\\n\\n  function enterHydrationState(fiber) {\\n\\n    var parentInstance = fiber.stateNode.containerInfo;\\n    nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\\n    hydrationParentFiber = fiber;\\n    isHydrating = true;\\n    hydrationErrors = null;\\n    didSuspendOrErrorDEV = false;\\n    return true;\\n  }\\n\\n  function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\\n\\n    nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\\n    hydrationParentFiber = fiber;\\n    isHydrating = true;\\n    hydrationErrors = null;\\n    didSuspendOrErrorDEV = false;\\n\\n    if (treeContext !== null) {\\n      restoreSuspendedTreeContext(fiber, treeContext);\\n    }\\n\\n    return true;\\n  }\\n\\n  function warnUnhydratedInstance(returnFiber, instance) {\\n    {\\n      switch (returnFiber.tag) {\\n        case HostRoot:\\n          {\\n            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\\n            break;\\n          }\\n\\n        case HostComponent:\\n          {\\n            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\\n            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.\\n            isConcurrentMode);\\n            break;\\n          }\\n\\n        case SuspenseComponent:\\n          {\\n            var suspenseState = returnFiber.memoizedState;\\n            if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\\n            break;\\n          }\\n      }\\n    }\\n  }\\n\\n  function deleteHydratableInstance(returnFiber, instance) {\\n    warnUnhydratedInstance(returnFiber, instance);\\n    var childToDelete = createFiberFromHostInstanceForDeletion();\\n    childToDelete.stateNode = instance;\\n    childToDelete.return = returnFiber;\\n    var deletions = returnFiber.deletions;\\n\\n    if (deletions === null) {\\n      returnFiber.deletions = [childToDelete];\\n      returnFiber.flags |= ChildDeletion;\\n    } else {\\n      deletions.push(childToDelete);\\n    }\\n  }\\n\\n  function warnNonhydratedInstance(returnFiber, fiber) {\\n    {\\n      if (didSuspendOrErrorDEV) {\\n        // Inside a boundary that already suspended. We're currently rendering the\\n        // siblings of a suspended node. The mismatch may be due to the missing\\n        // data, so it's probably a false positive.\\n        return;\\n      }\\n\\n      switch (returnFiber.tag) {\\n        case HostRoot:\\n          {\\n            var parentContainer = returnFiber.stateNode.containerInfo;\\n\\n            switch (fiber.tag) {\\n              case HostComponent:\\n                var type = fiber.type;\\n                var props = fiber.pendingProps;\\n                didNotFindHydratableInstanceWithinContainer(parentContainer, type);\\n                break;\\n\\n              case HostText:\\n                var text = fiber.pendingProps;\\n                didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\\n                break;\\n            }\\n\\n            break;\\n          }\\n\\n        case HostComponent:\\n          {\\n            var parentType = returnFiber.type;\\n            var parentProps = returnFiber.memoizedProps;\\n            var parentInstance = returnFiber.stateNode;\\n\\n            switch (fiber.tag) {\\n              case HostComponent:\\n                {\\n                  var _type = fiber.type;\\n                  var _props = fiber.pendingProps;\\n                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\\n                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.\\n                  isConcurrentMode);\\n                  break;\\n                }\\n\\n              case HostText:\\n                {\\n                  var _text = fiber.pendingProps;\\n\\n                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\\n\\n                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.\\n                  _isConcurrentMode);\\n                  break;\\n                }\\n            }\\n\\n            break;\\n          }\\n\\n        case SuspenseComponent:\\n          {\\n            var suspenseState = returnFiber.memoizedState;\\n            var _parentInstance = suspenseState.dehydrated;\\n            if (_parentInstance !== null) switch (fiber.tag) {\\n              case HostComponent:\\n                var _type2 = fiber.type;\\n                var _props2 = fiber.pendingProps;\\n                didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);\\n                break;\\n\\n              case HostText:\\n                var _text2 = fiber.pendingProps;\\n                didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\\n                break;\\n            }\\n            break;\\n          }\\n\\n        default:\\n          return;\\n      }\\n    }\\n  }\\n\\n  function insertNonHydratedInstance(returnFiber, fiber) {\\n    fiber.flags = fiber.flags & ~Hydrating | Placement;\\n    warnNonhydratedInstance(returnFiber, fiber);\\n  }\\n\\n  function tryHydrate(fiber, nextInstance) {\\n    switch (fiber.tag) {\\n      case HostComponent:\\n        {\\n          var type = fiber.type;\\n          var props = fiber.pendingProps;\\n          var instance = canHydrateInstance(nextInstance, type);\\n\\n          if (instance !== null) {\\n            fiber.stateNode = instance;\\n            hydrationParentFiber = fiber;\\n            nextHydratableInstance = getFirstHydratableChild(instance);\\n            return true;\\n          }\\n\\n          return false;\\n        }\\n\\n      case HostText:\\n        {\\n          var text = fiber.pendingProps;\\n          var textInstance = canHydrateTextInstance(nextInstance, text);\\n\\n          if (textInstance !== null) {\\n            fiber.stateNode = textInstance;\\n            hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\\n\\n            nextHydratableInstance = null;\\n            return true;\\n          }\\n\\n          return false;\\n        }\\n\\n      case SuspenseComponent:\\n        {\\n          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\\n\\n          if (suspenseInstance !== null) {\\n            var suspenseState = {\\n              dehydrated: suspenseInstance,\\n              treeContext: getSuspendedTreeContext(),\\n              retryLane: OffscreenLane\\n            };\\n            fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\\n            // This simplifies the code for getHostSibling and deleting nodes,\\n            // since it doesn't have to consider all Suspense boundaries and\\n            // check if they're dehydrated ones or not.\\n\\n            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\\n            dehydratedFragment.return = fiber;\\n            fiber.child = dehydratedFragment;\\n            hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\\n            // it during the first pass. Instead, we'll reenter it later.\\n\\n            nextHydratableInstance = null;\\n            return true;\\n          }\\n\\n          return false;\\n        }\\n\\n      default:\\n        return false;\\n    }\\n  }\\n\\n  function shouldClientRenderOnMismatch(fiber) {\\n    return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\\n  }\\n\\n  function throwOnHydrationMismatch(fiber) {\\n    throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\\n  }\\n\\n  function tryToClaimNextHydratableInstance(fiber) {\\n    if (!isHydrating) {\\n      return;\\n    }\\n\\n    var nextInstance = nextHydratableInstance;\\n\\n    if (!nextInstance) {\\n      if (shouldClientRenderOnMismatch(fiber)) {\\n        warnNonhydratedInstance(hydrationParentFiber, fiber);\\n        throwOnHydrationMismatch();\\n      } // Nothing to hydrate. Make it an insertion.\\n\\n\\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\\n      isHydrating = false;\\n      hydrationParentFiber = fiber;\\n      return;\\n    }\\n\\n    var firstAttemptedInstance = nextInstance;\\n\\n    if (!tryHydrate(fiber, nextInstance)) {\\n      if (shouldClientRenderOnMismatch(fiber)) {\\n        warnNonhydratedInstance(hydrationParentFiber, fiber);\\n        throwOnHydrationMismatch();\\n      } // If we can't hydrate this instance let's try the next one.\\n      // We use this as a heuristic. It's based on intuition and not data so it\\n      // might be flawed or unnecessary.\\n\\n\\n      nextInstance = getNextHydratableSibling(firstAttemptedInstance);\\n      var prevHydrationParentFiber = hydrationParentFiber;\\n\\n      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\\n        // Nothing to hydrate. Make it an insertion.\\n        insertNonHydratedInstance(hydrationParentFiber, fiber);\\n        isHydrating = false;\\n        hydrationParentFiber = fiber;\\n        return;\\n      } // We matched the next one, we'll now assume that the first one was\\n      // superfluous and we'll delete it. Since we can't eagerly delete it\\n      // we'll have to schedule a deletion. To do that, this node needs a dummy\\n      // fiber associated with it.\\n\\n\\n      deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\\n    }\\n  }\\n\\n  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\\n\\n    var instance = fiber.stateNode;\\n    var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\\n    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\\n\\n    fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\\n    // is a new ref we mark this as an update.\\n\\n    if (updatePayload !== null) {\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n\\n  function prepareToHydrateHostTextInstance(fiber) {\\n\\n    var textInstance = fiber.stateNode;\\n    var textContent = fiber.memoizedProps;\\n    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\\n\\n    if (shouldUpdate) {\\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\\n      // hydration parent is the parent host component of this host text.\\n      var returnFiber = hydrationParentFiber;\\n\\n      if (returnFiber !== null) {\\n        switch (returnFiber.tag) {\\n          case HostRoot:\\n            {\\n              var parentContainer = returnFiber.stateNode.containerInfo;\\n              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\\n              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\\n              isConcurrentMode);\\n              break;\\n            }\\n\\n          case HostComponent:\\n            {\\n              var parentType = returnFiber.type;\\n              var parentProps = returnFiber.memoizedProps;\\n              var parentInstance = returnFiber.stateNode;\\n\\n              var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\\n\\n              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\\n              _isConcurrentMode2);\\n              break;\\n            }\\n        }\\n      }\\n    }\\n\\n    return shouldUpdate;\\n  }\\n\\n  function prepareToHydrateHostSuspenseInstance(fiber) {\\n\\n    var suspenseState = fiber.memoizedState;\\n    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\\n\\n    if (!suspenseInstance) {\\n      throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n    }\\n\\n    hydrateSuspenseInstance(suspenseInstance, fiber);\\n  }\\n\\n  function skipPastDehydratedSuspenseInstance(fiber) {\\n\\n    var suspenseState = fiber.memoizedState;\\n    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\\n\\n    if (!suspenseInstance) {\\n      throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n    }\\n\\n    return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\\n  }\\n\\n  function popToNextHostParent(fiber) {\\n    var parent = fiber.return;\\n\\n    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\\n      parent = parent.return;\\n    }\\n\\n    hydrationParentFiber = parent;\\n  }\\n\\n  function popHydrationState(fiber) {\\n\\n    if (fiber !== hydrationParentFiber) {\\n      // We're deeper than the current hydration context, inside an inserted\\n      // tree.\\n      return false;\\n    }\\n\\n    if (!isHydrating) {\\n      // If we're not currently hydrating but we're in a hydration context, then\\n      // we were an insertion and now need to pop up reenter hydration of our\\n      // siblings.\\n      popToNextHostParent(fiber);\\n      isHydrating = true;\\n      return false;\\n    } // If we have any remaining hydratable nodes, we need to delete them now.\\n    // We only do this deeper than head and body since they tend to have random\\n    // other nodes in them. We also ignore components with pure text content in\\n    // side of them. We also don't delete anything inside the root container.\\n\\n\\n    if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\\n      var nextInstance = nextHydratableInstance;\\n\\n      if (nextInstance) {\\n        if (shouldClientRenderOnMismatch(fiber)) {\\n          warnIfUnhydratedTailNodes(fiber);\\n          throwOnHydrationMismatch();\\n        } else {\\n          while (nextInstance) {\\n            deleteHydratableInstance(fiber, nextInstance);\\n            nextInstance = getNextHydratableSibling(nextInstance);\\n          }\\n        }\\n      }\\n    }\\n\\n    popToNextHostParent(fiber);\\n\\n    if (fiber.tag === SuspenseComponent) {\\n      nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\\n    } else {\\n      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\\n    }\\n\\n    return true;\\n  }\\n\\n  function hasUnhydratedTailNodes() {\\n    return isHydrating && nextHydratableInstance !== null;\\n  }\\n\\n  function warnIfUnhydratedTailNodes(fiber) {\\n    var nextInstance = nextHydratableInstance;\\n\\n    while (nextInstance) {\\n      warnUnhydratedInstance(fiber, nextInstance);\\n      nextInstance = getNextHydratableSibling(nextInstance);\\n    }\\n  }\\n\\n  function resetHydrationState() {\\n\\n    hydrationParentFiber = null;\\n    nextHydratableInstance = null;\\n    isHydrating = false;\\n    didSuspendOrErrorDEV = false;\\n  }\\n\\n  function upgradeHydrationErrorsToRecoverable() {\\n    if (hydrationErrors !== null) {\\n      // Successfully completed a forced client render. The errors that occurred\\n      // during the hydration attempt are now recovered. We will log them in\\n      // commit phase, once the entire tree has finished.\\n      queueRecoverableErrors(hydrationErrors);\\n      hydrationErrors = null;\\n    }\\n  }\\n\\n  function getIsHydrating() {\\n    return isHydrating;\\n  }\\n\\n  function queueHydrationError(error) {\\n    if (hydrationErrors === null) {\\n      hydrationErrors = [error];\\n    } else {\\n      hydrationErrors.push(error);\\n    }\\n  }\\n\\n  var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\\n  var NoTransition = null;\\n  function requestCurrentTransition() {\\n    return ReactCurrentBatchConfig$1.transition;\\n  }\\n\\n  var ReactStrictModeWarnings = {\\n    recordUnsafeLifecycleWarnings: function (fiber, instance) {},\\n    flushPendingUnsafeLifecycleWarnings: function () {},\\n    recordLegacyContextWarning: function (fiber, instance) {},\\n    flushLegacyContextWarning: function () {},\\n    discardPendingWarnings: function () {}\\n  };\\n\\n  {\\n    var findStrictRoot = function (fiber) {\\n      var maybeStrictRoot = null;\\n      var node = fiber;\\n\\n      while (node !== null) {\\n        if (node.mode & StrictLegacyMode) {\\n          maybeStrictRoot = node;\\n        }\\n\\n        node = node.return;\\n      }\\n\\n      return maybeStrictRoot;\\n    };\\n\\n    var setToSortedString = function (set) {\\n      var array = [];\\n      set.forEach(function (value) {\\n        array.push(value);\\n      });\\n      return array.sort().join(', ');\\n    };\\n\\n    var pendingComponentWillMountWarnings = [];\\n    var pendingUNSAFE_ComponentWillMountWarnings = [];\\n    var pendingComponentWillReceivePropsWarnings = [];\\n    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\\n    var pendingComponentWillUpdateWarnings = [];\\n    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\\n\\n    var didWarnAboutUnsafeLifecycles = new Set();\\n\\n    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\\n      // Dedupe strategy: Warn once per component.\\n      if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\\n        return;\\n      }\\n\\n      if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\\n      instance.componentWillMount.__suppressDeprecationWarning !== true) {\\n        pendingComponentWillMountWarnings.push(fiber);\\n      }\\n\\n      if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\\n        pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\\n      }\\n\\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\\n        pendingComponentWillReceivePropsWarnings.push(fiber);\\n      }\\n\\n      if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\\n        pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\\n      }\\n\\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\\n        pendingComponentWillUpdateWarnings.push(fiber);\\n      }\\n\\n      if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\\n        pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\\n      }\\n    };\\n\\n    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\\n      // We do an initial pass to gather component names\\n      var componentWillMountUniqueNames = new Set();\\n\\n      if (pendingComponentWillMountWarnings.length > 0) {\\n        pendingComponentWillMountWarnings.forEach(function (fiber) {\\n          componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\\n        });\\n        pendingComponentWillMountWarnings = [];\\n      }\\n\\n      var UNSAFE_componentWillMountUniqueNames = new Set();\\n\\n      if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\\n        pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\\n          UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\\n        });\\n        pendingUNSAFE_ComponentWillMountWarnings = [];\\n      }\\n\\n      var componentWillReceivePropsUniqueNames = new Set();\\n\\n      if (pendingComponentWillReceivePropsWarnings.length > 0) {\\n        pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\\n          componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\\n        });\\n        pendingComponentWillReceivePropsWarnings = [];\\n      }\\n\\n      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\\n\\n      if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\\n        pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\\n          UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\\n        });\\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\\n      }\\n\\n      var componentWillUpdateUniqueNames = new Set();\\n\\n      if (pendingComponentWillUpdateWarnings.length > 0) {\\n        pendingComponentWillUpdateWarnings.forEach(function (fiber) {\\n          componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\\n        });\\n        pendingComponentWillUpdateWarnings = [];\\n      }\\n\\n      var UNSAFE_componentWillUpdateUniqueNames = new Set();\\n\\n      if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\\n        pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\\n          UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\\n          didWarnAboutUnsafeLifecycles.add(fiber.type);\\n        });\\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\\n      } // Finally, we flush all the warnings\\n      // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\\n\\n\\n      if (UNSAFE_componentWillMountUniqueNames.size > 0) {\\n        var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\\n\\n        error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\\\n\\\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\\\n' + '\\\\nPlease update the following components: %s', sortedNames);\\n      }\\n\\n      if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\\n        var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\\n\\n        error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\\\n\\\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\\\n' + \\\"* If you're updating state whenever props change, \\\" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\\\n' + '\\\\nPlease update the following components: %s', _sortedNames);\\n      }\\n\\n      if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\\n        var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\\n\\n        error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\\\n\\\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\\\n' + '\\\\nPlease update the following components: %s', _sortedNames2);\\n      }\\n\\n      if (componentWillMountUniqueNames.size > 0) {\\n        var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\\n\\n        warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\\\n\\\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\\\n' + '\\\\nPlease update the following components: %s', _sortedNames3);\\n      }\\n\\n      if (componentWillReceivePropsUniqueNames.size > 0) {\\n        var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\\n\\n        warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\\\n\\\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\\\n' + \\\"* If you're updating state whenever props change, refactor your \\\" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\\\n' + '\\\\nPlease update the following components: %s', _sortedNames4);\\n      }\\n\\n      if (componentWillUpdateUniqueNames.size > 0) {\\n        var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\\n\\n        warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\\\n\\\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\\\n' + '\\\\nPlease update the following components: %s', _sortedNames5);\\n      }\\n    };\\n\\n    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\\n\\n    var didWarnAboutLegacyContext = new Set();\\n\\n    ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\\n      var strictRoot = findStrictRoot(fiber);\\n\\n      if (strictRoot === null) {\\n        error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n\\n        return;\\n      } // Dedup strategy: Warn once per component.\\n\\n\\n      if (didWarnAboutLegacyContext.has(fiber.type)) {\\n        return;\\n      }\\n\\n      var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\\n\\n      if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\\n        if (warningsForRoot === undefined) {\\n          warningsForRoot = [];\\n          pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\\n        }\\n\\n        warningsForRoot.push(fiber);\\n      }\\n    };\\n\\n    ReactStrictModeWarnings.flushLegacyContextWarning = function () {\\n      pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\\n        if (fiberArray.length === 0) {\\n          return;\\n        }\\n\\n        var firstFiber = fiberArray[0];\\n        var uniqueNames = new Set();\\n        fiberArray.forEach(function (fiber) {\\n          uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\\n          didWarnAboutLegacyContext.add(fiber.type);\\n        });\\n        var sortedNames = setToSortedString(uniqueNames);\\n\\n        try {\\n          setCurrentFiber(firstFiber);\\n\\n          error('Legacy context API has been detected within a strict-mode tree.' + '\\\\n\\\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\\\n\\\\nPlease update the following components: %s' + '\\\\n\\\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\\n        } finally {\\n          resetCurrentFiber();\\n        }\\n      });\\n    };\\n\\n    ReactStrictModeWarnings.discardPendingWarnings = function () {\\n      pendingComponentWillMountWarnings = [];\\n      pendingUNSAFE_ComponentWillMountWarnings = [];\\n      pendingComponentWillReceivePropsWarnings = [];\\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\\n      pendingComponentWillUpdateWarnings = [];\\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\\n      pendingLegacyContextWarning = new Map();\\n    };\\n  }\\n\\n  function resolveDefaultProps(Component, baseProps) {\\n    if (Component && Component.defaultProps) {\\n      // Resolve default props. Taken from ReactElement\\n      var props = assign({}, baseProps);\\n      var defaultProps = Component.defaultProps;\\n\\n      for (var propName in defaultProps) {\\n        if (props[propName] === undefined) {\\n          props[propName] = defaultProps[propName];\\n        }\\n      }\\n\\n      return props;\\n    }\\n\\n    return baseProps;\\n  }\\n\\n  var valueCursor = createCursor(null);\\n  var rendererSigil;\\n\\n  {\\n    // Use this to detect multiple renderers using the same context\\n    rendererSigil = {};\\n  }\\n\\n  var currentlyRenderingFiber = null;\\n  var lastContextDependency = null;\\n  var lastFullyObservedContext = null;\\n  var isDisallowedContextReadInDEV = false;\\n  function resetContextDependencies() {\\n    // This is called right before React yields execution, to ensure `readContext`\\n    // cannot be called outside the render phase.\\n    currentlyRenderingFiber = null;\\n    lastContextDependency = null;\\n    lastFullyObservedContext = null;\\n\\n    {\\n      isDisallowedContextReadInDEV = false;\\n    }\\n  }\\n  function enterDisallowedContextReadInDEV() {\\n    {\\n      isDisallowedContextReadInDEV = true;\\n    }\\n  }\\n  function exitDisallowedContextReadInDEV() {\\n    {\\n      isDisallowedContextReadInDEV = false;\\n    }\\n  }\\n  function pushProvider(providerFiber, context, nextValue) {\\n    {\\n      push(valueCursor, context._currentValue, providerFiber);\\n      context._currentValue = nextValue;\\n\\n      {\\n        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\\n          error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\\n        }\\n\\n        context._currentRenderer = rendererSigil;\\n      }\\n    }\\n  }\\n  function popProvider(context, providerFiber) {\\n    var currentValue = valueCursor.current;\\n    pop(valueCursor, providerFiber);\\n\\n    {\\n      {\\n        context._currentValue = currentValue;\\n      }\\n    }\\n  }\\n  function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\\n    // Update the child lanes of all the ancestors, including the alternates.\\n    var node = parent;\\n\\n    while (node !== null) {\\n      var alternate = node.alternate;\\n\\n      if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\\n        node.childLanes = mergeLanes(node.childLanes, renderLanes);\\n\\n        if (alternate !== null) {\\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\\n        }\\n      } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\\n      }\\n\\n      if (node === propagationRoot) {\\n        break;\\n      }\\n\\n      node = node.return;\\n    }\\n\\n    {\\n      if (node !== propagationRoot) {\\n        error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n      }\\n    }\\n  }\\n  function propagateContextChange(workInProgress, context, renderLanes) {\\n    {\\n      propagateContextChange_eager(workInProgress, context, renderLanes);\\n    }\\n  }\\n\\n  function propagateContextChange_eager(workInProgress, context, renderLanes) {\\n\\n    var fiber = workInProgress.child;\\n\\n    if (fiber !== null) {\\n      // Set the return pointer of the child to the work-in-progress fiber.\\n      fiber.return = workInProgress;\\n    }\\n\\n    while (fiber !== null) {\\n      var nextFiber = void 0; // Visit this fiber.\\n\\n      var list = fiber.dependencies;\\n\\n      if (list !== null) {\\n        nextFiber = fiber.child;\\n        var dependency = list.firstContext;\\n\\n        while (dependency !== null) {\\n          // Check if the context matches.\\n          if (dependency.context === context) {\\n            // Match! Schedule an update on this fiber.\\n            if (fiber.tag === ClassComponent) {\\n              // Schedule a force update on the work-in-progress.\\n              var lane = pickArbitraryLane(renderLanes);\\n              var update = createUpdate(NoTimestamp, lane);\\n              update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\\n              // update to the current fiber, too, which means it will persist even if\\n              // this render is thrown away. Since it's a race condition, not sure it's\\n              // worth fixing.\\n              // Inlined `enqueueUpdate` to remove interleaved update check\\n\\n              var updateQueue = fiber.updateQueue;\\n\\n              if (updateQueue === null) ; else {\\n                var sharedQueue = updateQueue.shared;\\n                var pending = sharedQueue.pending;\\n\\n                if (pending === null) {\\n                  // This is the first update. Create a circular list.\\n                  update.next = update;\\n                } else {\\n                  update.next = pending.next;\\n                  pending.next = update;\\n                }\\n\\n                sharedQueue.pending = update;\\n              }\\n            }\\n\\n            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\\n            var alternate = fiber.alternate;\\n\\n            if (alternate !== null) {\\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\\n            }\\n\\n            scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\\n\\n            list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\\n            // dependency list.\\n\\n            break;\\n          }\\n\\n          dependency = dependency.next;\\n        }\\n      } else if (fiber.tag === ContextProvider) {\\n        // Don't scan deeper if this is a matching provider\\n        nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\\n      } else if (fiber.tag === DehydratedFragment) {\\n        // If a dehydrated suspense boundary is in this subtree, we don't know\\n        // if it will have any context consumers in it. The best we can do is\\n        // mark it as having updates.\\n        var parentSuspense = fiber.return;\\n\\n        if (parentSuspense === null) {\\n          throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\\n        }\\n\\n        parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\\n        var _alternate = parentSuspense.alternate;\\n\\n        if (_alternate !== null) {\\n          _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\\n        } // This is intentionally passing this fiber as the parent\\n        // because we want to schedule this fiber as having work\\n        // on its children. We'll use the childLanes on\\n        // this fiber to indicate that a context has changed.\\n\\n\\n        scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\\n        nextFiber = fiber.sibling;\\n      } else {\\n        // Traverse down.\\n        nextFiber = fiber.child;\\n      }\\n\\n      if (nextFiber !== null) {\\n        // Set the return pointer of the child to the work-in-progress fiber.\\n        nextFiber.return = fiber;\\n      } else {\\n        // No child. Traverse to next sibling.\\n        nextFiber = fiber;\\n\\n        while (nextFiber !== null) {\\n          if (nextFiber === workInProgress) {\\n            // We're back to the root of this subtree. Exit.\\n            nextFiber = null;\\n            break;\\n          }\\n\\n          var sibling = nextFiber.sibling;\\n\\n          if (sibling !== null) {\\n            // Set the return pointer of the sibling to the work-in-progress fiber.\\n            sibling.return = nextFiber.return;\\n            nextFiber = sibling;\\n            break;\\n          } // No more siblings. Traverse up.\\n\\n\\n          nextFiber = nextFiber.return;\\n        }\\n      }\\n\\n      fiber = nextFiber;\\n    }\\n  }\\n  function prepareToReadContext(workInProgress, renderLanes) {\\n    currentlyRenderingFiber = workInProgress;\\n    lastContextDependency = null;\\n    lastFullyObservedContext = null;\\n    var dependencies = workInProgress.dependencies;\\n\\n    if (dependencies !== null) {\\n      {\\n        var firstContext = dependencies.firstContext;\\n\\n        if (firstContext !== null) {\\n          if (includesSomeLane(dependencies.lanes, renderLanes)) {\\n            // Context list has a pending update. Mark that this fiber performed work.\\n            markWorkInProgressReceivedUpdate();\\n          } // Reset the work-in-progress list\\n\\n\\n          dependencies.firstContext = null;\\n        }\\n      }\\n    }\\n  }\\n  function readContext(context) {\\n    {\\n      // This warning would fire if you read context inside a Hook like useMemo.\\n      // Unlike the class check below, it's not enforced in production for perf.\\n      if (isDisallowedContextReadInDEV) {\\n        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\\n      }\\n    }\\n\\n    var value =  context._currentValue ;\\n\\n    if (lastFullyObservedContext === context) ; else {\\n      var contextItem = {\\n        context: context,\\n        memoizedValue: value,\\n        next: null\\n      };\\n\\n      if (lastContextDependency === null) {\\n        if (currentlyRenderingFiber === null) {\\n          throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\\n        } // This is the first dependency for this component. Create a new list.\\n\\n\\n        lastContextDependency = contextItem;\\n        currentlyRenderingFiber.dependencies = {\\n          lanes: NoLanes,\\n          firstContext: contextItem\\n        };\\n      } else {\\n        // Append a new context item.\\n        lastContextDependency = lastContextDependency.next = contextItem;\\n      }\\n    }\\n\\n    return value;\\n  }\\n\\n  // render. When this render exits, either because it finishes or because it is\\n  // interrupted, the interleaved updates will be transferred onto the main part\\n  // of the queue.\\n\\n  var concurrentQueues = null;\\n  function pushConcurrentUpdateQueue(queue) {\\n    if (concurrentQueues === null) {\\n      concurrentQueues = [queue];\\n    } else {\\n      concurrentQueues.push(queue);\\n    }\\n  }\\n  function finishQueueingConcurrentUpdates() {\\n    // Transfer the interleaved updates onto the main queue. Each queue has a\\n    // `pending` field and an `interleaved` field. When they are not null, they\\n    // point to the last node in a circular linked list. We need to append the\\n    // interleaved list to the end of the pending list by joining them into a\\n    // single, circular list.\\n    if (concurrentQueues !== null) {\\n      for (var i = 0; i < concurrentQueues.length; i++) {\\n        var queue = concurrentQueues[i];\\n        var lastInterleavedUpdate = queue.interleaved;\\n\\n        if (lastInterleavedUpdate !== null) {\\n          queue.interleaved = null;\\n          var firstInterleavedUpdate = lastInterleavedUpdate.next;\\n          var lastPendingUpdate = queue.pending;\\n\\n          if (lastPendingUpdate !== null) {\\n            var firstPendingUpdate = lastPendingUpdate.next;\\n            lastPendingUpdate.next = firstInterleavedUpdate;\\n            lastInterleavedUpdate.next = firstPendingUpdate;\\n          }\\n\\n          queue.pending = lastInterleavedUpdate;\\n        }\\n      }\\n\\n      concurrentQueues = null;\\n    }\\n  }\\n  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\\n    var interleaved = queue.interleaved;\\n\\n    if (interleaved === null) {\\n      // This is the first update. Create a circular list.\\n      update.next = update; // At the end of the current render, this queue's interleaved updates will\\n      // be transferred to the pending queue.\\n\\n      pushConcurrentUpdateQueue(queue);\\n    } else {\\n      update.next = interleaved.next;\\n      interleaved.next = update;\\n    }\\n\\n    queue.interleaved = update;\\n    return markUpdateLaneFromFiberToRoot(fiber, lane);\\n  }\\n  function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\\n    var interleaved = queue.interleaved;\\n\\n    if (interleaved === null) {\\n      // This is the first update. Create a circular list.\\n      update.next = update; // At the end of the current render, this queue's interleaved updates will\\n      // be transferred to the pending queue.\\n\\n      pushConcurrentUpdateQueue(queue);\\n    } else {\\n      update.next = interleaved.next;\\n      interleaved.next = update;\\n    }\\n\\n    queue.interleaved = update;\\n  }\\n  function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\\n    var interleaved = queue.interleaved;\\n\\n    if (interleaved === null) {\\n      // This is the first update. Create a circular list.\\n      update.next = update; // At the end of the current render, this queue's interleaved updates will\\n      // be transferred to the pending queue.\\n\\n      pushConcurrentUpdateQueue(queue);\\n    } else {\\n      update.next = interleaved.next;\\n      interleaved.next = update;\\n    }\\n\\n    queue.interleaved = update;\\n    return markUpdateLaneFromFiberToRoot(fiber, lane);\\n  }\\n  function enqueueConcurrentRenderForLane(fiber, lane) {\\n    return markUpdateLaneFromFiberToRoot(fiber, lane);\\n  } // Calling this function outside this module should only be done for backwards\\n  // compatibility and should always be accompanied by a warning.\\n\\n  var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\\n\\n  function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\\n    // Update the source fiber's lanes\\n    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\\n    var alternate = sourceFiber.alternate;\\n\\n    if (alternate !== null) {\\n      alternate.lanes = mergeLanes(alternate.lanes, lane);\\n    }\\n\\n    {\\n      if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\\n        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\\n      }\\n    } // Walk the parent path to the root and update the child lanes.\\n\\n\\n    var node = sourceFiber;\\n    var parent = sourceFiber.return;\\n\\n    while (parent !== null) {\\n      parent.childLanes = mergeLanes(parent.childLanes, lane);\\n      alternate = parent.alternate;\\n\\n      if (alternate !== null) {\\n        alternate.childLanes = mergeLanes(alternate.childLanes, lane);\\n      } else {\\n        {\\n          if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\\n            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\\n          }\\n        }\\n      }\\n\\n      node = parent;\\n      parent = parent.return;\\n    }\\n\\n    if (node.tag === HostRoot) {\\n      var root = node.stateNode;\\n      return root;\\n    } else {\\n      return null;\\n    }\\n  }\\n\\n  var UpdateState = 0;\\n  var ReplaceState = 1;\\n  var ForceUpdate = 2;\\n  var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\\n  // It should only be read right after calling `processUpdateQueue`, via\\n  // `checkHasForceUpdateAfterProcessing`.\\n\\n  var hasForceUpdate = false;\\n  var didWarnUpdateInsideUpdate;\\n  var currentlyProcessingQueue;\\n\\n  {\\n    didWarnUpdateInsideUpdate = false;\\n    currentlyProcessingQueue = null;\\n  }\\n\\n  function initializeUpdateQueue(fiber) {\\n    var queue = {\\n      baseState: fiber.memoizedState,\\n      firstBaseUpdate: null,\\n      lastBaseUpdate: null,\\n      shared: {\\n        pending: null,\\n        interleaved: null,\\n        lanes: NoLanes\\n      },\\n      effects: null\\n    };\\n    fiber.updateQueue = queue;\\n  }\\n  function cloneUpdateQueue(current, workInProgress) {\\n    // Clone the update queue from current. Unless it's already a clone.\\n    var queue = workInProgress.updateQueue;\\n    var currentQueue = current.updateQueue;\\n\\n    if (queue === currentQueue) {\\n      var clone = {\\n        baseState: currentQueue.baseState,\\n        firstBaseUpdate: currentQueue.firstBaseUpdate,\\n        lastBaseUpdate: currentQueue.lastBaseUpdate,\\n        shared: currentQueue.shared,\\n        effects: currentQueue.effects\\n      };\\n      workInProgress.updateQueue = clone;\\n    }\\n  }\\n  function createUpdate(eventTime, lane) {\\n    var update = {\\n      eventTime: eventTime,\\n      lane: lane,\\n      tag: UpdateState,\\n      payload: null,\\n      callback: null,\\n      next: null\\n    };\\n    return update;\\n  }\\n  function enqueueUpdate(fiber, update, lane) {\\n    var updateQueue = fiber.updateQueue;\\n\\n    if (updateQueue === null) {\\n      // Only occurs if the fiber has been unmounted.\\n      return null;\\n    }\\n\\n    var sharedQueue = updateQueue.shared;\\n\\n    {\\n      if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\\n        error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\\n\\n        didWarnUpdateInsideUpdate = true;\\n      }\\n    }\\n\\n    if (isUnsafeClassRenderPhaseUpdate()) {\\n      // This is an unsafe render phase update. Add directly to the update\\n      // queue so we can process it immediately during the current render.\\n      var pending = sharedQueue.pending;\\n\\n      if (pending === null) {\\n        // This is the first update. Create a circular list.\\n        update.next = update;\\n      } else {\\n        update.next = pending.next;\\n        pending.next = update;\\n      }\\n\\n      sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\\n      // this fiber. This is for backwards compatibility in the case where you\\n      // update a different component during render phase than the one that is\\n      // currently renderings (a pattern that is accompanied by a warning).\\n\\n      return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\\n    } else {\\n      return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\\n    }\\n  }\\n  function entangleTransitions(root, fiber, lane) {\\n    var updateQueue = fiber.updateQueue;\\n\\n    if (updateQueue === null) {\\n      // Only occurs if the fiber has been unmounted.\\n      return;\\n    }\\n\\n    var sharedQueue = updateQueue.shared;\\n\\n    if (isTransitionLane(lane)) {\\n      var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\\n      // have finished. We can remove them from the shared queue, which represents\\n      // a superset of the actually pending lanes. In some cases we may entangle\\n      // more than we need to, but that's OK. In fact it's worse if we *don't*\\n      // entangle when we should.\\n\\n      queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\\n\\n      var newQueueLanes = mergeLanes(queueLanes, lane);\\n      sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\\n      // the lane finished since the last time we entangled it. So we need to\\n      // entangle it again, just to be sure.\\n\\n      markRootEntangled(root, newQueueLanes);\\n    }\\n  }\\n  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\\n    // Captured updates are updates that are thrown by a child during the render\\n    // phase. They should be discarded if the render is aborted. Therefore,\\n    // we should only put them on the work-in-progress queue, not the current one.\\n    var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\\n\\n    var current = workInProgress.alternate;\\n\\n    if (current !== null) {\\n      var currentQueue = current.updateQueue;\\n\\n      if (queue === currentQueue) {\\n        // The work-in-progress queue is the same as current. This happens when\\n        // we bail out on a parent fiber that then captures an error thrown by\\n        // a child. Since we want to append the update only to the work-in\\n        // -progress queue, we need to clone the updates. We usually clone during\\n        // processUpdateQueue, but that didn't happen in this case because we\\n        // skipped over the parent when we bailed out.\\n        var newFirst = null;\\n        var newLast = null;\\n        var firstBaseUpdate = queue.firstBaseUpdate;\\n\\n        if (firstBaseUpdate !== null) {\\n          // Loop through the updates and clone them.\\n          var update = firstBaseUpdate;\\n\\n          do {\\n            var clone = {\\n              eventTime: update.eventTime,\\n              lane: update.lane,\\n              tag: update.tag,\\n              payload: update.payload,\\n              callback: update.callback,\\n              next: null\\n            };\\n\\n            if (newLast === null) {\\n              newFirst = newLast = clone;\\n            } else {\\n              newLast.next = clone;\\n              newLast = clone;\\n            }\\n\\n            update = update.next;\\n          } while (update !== null); // Append the captured update the end of the cloned list.\\n\\n\\n          if (newLast === null) {\\n            newFirst = newLast = capturedUpdate;\\n          } else {\\n            newLast.next = capturedUpdate;\\n            newLast = capturedUpdate;\\n          }\\n        } else {\\n          // There are no base updates.\\n          newFirst = newLast = capturedUpdate;\\n        }\\n\\n        queue = {\\n          baseState: currentQueue.baseState,\\n          firstBaseUpdate: newFirst,\\n          lastBaseUpdate: newLast,\\n          shared: currentQueue.shared,\\n          effects: currentQueue.effects\\n        };\\n        workInProgress.updateQueue = queue;\\n        return;\\n      }\\n    } // Append the update to the end of the list.\\n\\n\\n    var lastBaseUpdate = queue.lastBaseUpdate;\\n\\n    if (lastBaseUpdate === null) {\\n      queue.firstBaseUpdate = capturedUpdate;\\n    } else {\\n      lastBaseUpdate.next = capturedUpdate;\\n    }\\n\\n    queue.lastBaseUpdate = capturedUpdate;\\n  }\\n\\n  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\\n    switch (update.tag) {\\n      case ReplaceState:\\n        {\\n          var payload = update.payload;\\n\\n          if (typeof payload === 'function') {\\n            // Updater function\\n            {\\n              enterDisallowedContextReadInDEV();\\n            }\\n\\n            var nextState = payload.call(instance, prevState, nextProps);\\n\\n            {\\n              if ( workInProgress.mode & StrictLegacyMode) {\\n                setIsStrictModeForDevtools(true);\\n\\n                try {\\n                  payload.call(instance, prevState, nextProps);\\n                } finally {\\n                  setIsStrictModeForDevtools(false);\\n                }\\n              }\\n\\n              exitDisallowedContextReadInDEV();\\n            }\\n\\n            return nextState;\\n          } // State object\\n\\n\\n          return payload;\\n        }\\n\\n      case CaptureUpdate:\\n        {\\n          workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\\n        }\\n      // Intentional fallthrough\\n\\n      case UpdateState:\\n        {\\n          var _payload = update.payload;\\n          var partialState;\\n\\n          if (typeof _payload === 'function') {\\n            // Updater function\\n            {\\n              enterDisallowedContextReadInDEV();\\n            }\\n\\n            partialState = _payload.call(instance, prevState, nextProps);\\n\\n            {\\n              if ( workInProgress.mode & StrictLegacyMode) {\\n                setIsStrictModeForDevtools(true);\\n\\n                try {\\n                  _payload.call(instance, prevState, nextProps);\\n                } finally {\\n                  setIsStrictModeForDevtools(false);\\n                }\\n              }\\n\\n              exitDisallowedContextReadInDEV();\\n            }\\n          } else {\\n            // Partial state object\\n            partialState = _payload;\\n          }\\n\\n          if (partialState === null || partialState === undefined) {\\n            // Null and undefined are treated as no-ops.\\n            return prevState;\\n          } // Merge the partial state and the previous state.\\n\\n\\n          return assign({}, prevState, partialState);\\n        }\\n\\n      case ForceUpdate:\\n        {\\n          hasForceUpdate = true;\\n          return prevState;\\n        }\\n    }\\n\\n    return prevState;\\n  }\\n\\n  function processUpdateQueue(workInProgress, props, instance, renderLanes) {\\n    // This is always non-null on a ClassComponent or HostRoot\\n    var queue = workInProgress.updateQueue;\\n    hasForceUpdate = false;\\n\\n    {\\n      currentlyProcessingQueue = queue.shared;\\n    }\\n\\n    var firstBaseUpdate = queue.firstBaseUpdate;\\n    var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\\n\\n    var pendingQueue = queue.shared.pending;\\n\\n    if (pendingQueue !== null) {\\n      queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\\n      // and last so that it's non-circular.\\n\\n      var lastPendingUpdate = pendingQueue;\\n      var firstPendingUpdate = lastPendingUpdate.next;\\n      lastPendingUpdate.next = null; // Append pending updates to base queue\\n\\n      if (lastBaseUpdate === null) {\\n        firstBaseUpdate = firstPendingUpdate;\\n      } else {\\n        lastBaseUpdate.next = firstPendingUpdate;\\n      }\\n\\n      lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\\n      // we need to transfer the updates to that queue, too. Because the base\\n      // queue is a singly-linked list with no cycles, we can append to both\\n      // lists and take advantage of structural sharing.\\n      // TODO: Pass `current` as argument\\n\\n      var current = workInProgress.alternate;\\n\\n      if (current !== null) {\\n        // This is always non-null on a ClassComponent or HostRoot\\n        var currentQueue = current.updateQueue;\\n        var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\\n\\n        if (currentLastBaseUpdate !== lastBaseUpdate) {\\n          if (currentLastBaseUpdate === null) {\\n            currentQueue.firstBaseUpdate = firstPendingUpdate;\\n          } else {\\n            currentLastBaseUpdate.next = firstPendingUpdate;\\n          }\\n\\n          currentQueue.lastBaseUpdate = lastPendingUpdate;\\n        }\\n      }\\n    } // These values may change as we process the queue.\\n\\n\\n    if (firstBaseUpdate !== null) {\\n      // Iterate through the list of updates to compute the result.\\n      var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\\n      // from the original lanes.\\n\\n      var newLanes = NoLanes;\\n      var newBaseState = null;\\n      var newFirstBaseUpdate = null;\\n      var newLastBaseUpdate = null;\\n      var update = firstBaseUpdate;\\n\\n      do {\\n        var updateLane = update.lane;\\n        var updateEventTime = update.eventTime;\\n\\n        if (!isSubsetOfLanes(renderLanes, updateLane)) {\\n          // Priority is insufficient. Skip this update. If this is the first\\n          // skipped update, the previous update/state is the new base\\n          // update/state.\\n          var clone = {\\n            eventTime: updateEventTime,\\n            lane: updateLane,\\n            tag: update.tag,\\n            payload: update.payload,\\n            callback: update.callback,\\n            next: null\\n          };\\n\\n          if (newLastBaseUpdate === null) {\\n            newFirstBaseUpdate = newLastBaseUpdate = clone;\\n            newBaseState = newState;\\n          } else {\\n            newLastBaseUpdate = newLastBaseUpdate.next = clone;\\n          } // Update the remaining priority in the queue.\\n\\n\\n          newLanes = mergeLanes(newLanes, updateLane);\\n        } else {\\n          // This update does have sufficient priority.\\n          if (newLastBaseUpdate !== null) {\\n            var _clone = {\\n              eventTime: updateEventTime,\\n              // This update is going to be committed so we never want uncommit\\n              // it. Using NoLane works because 0 is a subset of all bitmasks, so\\n              // this will never be skipped by the check above.\\n              lane: NoLane,\\n              tag: update.tag,\\n              payload: update.payload,\\n              callback: update.callback,\\n              next: null\\n            };\\n            newLastBaseUpdate = newLastBaseUpdate.next = _clone;\\n          } // Process this update.\\n\\n\\n          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\\n          var callback = update.callback;\\n\\n          if (callback !== null && // If the update was already committed, we should not queue its\\n          // callback again.\\n          update.lane !== NoLane) {\\n            workInProgress.flags |= Callback;\\n            var effects = queue.effects;\\n\\n            if (effects === null) {\\n              queue.effects = [update];\\n            } else {\\n              effects.push(update);\\n            }\\n          }\\n        }\\n\\n        update = update.next;\\n\\n        if (update === null) {\\n          pendingQueue = queue.shared.pending;\\n\\n          if (pendingQueue === null) {\\n            break;\\n          } else {\\n            // An update was scheduled from inside a reducer. Add the new\\n            // pending updates to the end of the list and keep processing.\\n            var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\\n            // unravel them when transferring them to the base queue.\\n\\n            var _firstPendingUpdate = _lastPendingUpdate.next;\\n            _lastPendingUpdate.next = null;\\n            update = _firstPendingUpdate;\\n            queue.lastBaseUpdate = _lastPendingUpdate;\\n            queue.shared.pending = null;\\n          }\\n        }\\n      } while (true);\\n\\n      if (newLastBaseUpdate === null) {\\n        newBaseState = newState;\\n      }\\n\\n      queue.baseState = newBaseState;\\n      queue.firstBaseUpdate = newFirstBaseUpdate;\\n      queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\\n      // process them during this render, but we do need to track which lanes\\n      // are remaining.\\n\\n      var lastInterleaved = queue.shared.interleaved;\\n\\n      if (lastInterleaved !== null) {\\n        var interleaved = lastInterleaved;\\n\\n        do {\\n          newLanes = mergeLanes(newLanes, interleaved.lane);\\n          interleaved = interleaved.next;\\n        } while (interleaved !== lastInterleaved);\\n      } else if (firstBaseUpdate === null) {\\n        // `queue.lanes` is used for entangling transitions. We can set it back to\\n        // zero once the queue is empty.\\n        queue.shared.lanes = NoLanes;\\n      } // Set the remaining expiration time to be whatever is remaining in the queue.\\n      // This should be fine because the only two other things that contribute to\\n      // expiration time are props and context. We're already in the middle of the\\n      // begin phase by the time we start processing the queue, so we've already\\n      // dealt with the props. Context in components that specify\\n      // shouldComponentUpdate is tricky; but we'll have to account for\\n      // that regardless.\\n\\n\\n      markSkippedUpdateLanes(newLanes);\\n      workInProgress.lanes = newLanes;\\n      workInProgress.memoizedState = newState;\\n    }\\n\\n    {\\n      currentlyProcessingQueue = null;\\n    }\\n  }\\n\\n  function callCallback(callback, context) {\\n    if (typeof callback !== 'function') {\\n      throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\\\"received: \\\" + callback));\\n    }\\n\\n    callback.call(context);\\n  }\\n\\n  function resetHasForceUpdateBeforeProcessing() {\\n    hasForceUpdate = false;\\n  }\\n  function checkHasForceUpdateAfterProcessing() {\\n    return hasForceUpdate;\\n  }\\n  function commitUpdateQueue(finishedWork, finishedQueue, instance) {\\n    // Commit the effects\\n    var effects = finishedQueue.effects;\\n    finishedQueue.effects = null;\\n\\n    if (effects !== null) {\\n      for (var i = 0; i < effects.length; i++) {\\n        var effect = effects[i];\\n        var callback = effect.callback;\\n\\n        if (callback !== null) {\\n          effect.callback = null;\\n          callCallback(callback, instance);\\n        }\\n      }\\n    }\\n  }\\n\\n  var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\\n  // We'll use it to determine whether we need to initialize legacy refs.\\n\\n  var emptyRefsObject = new React.Component().refs;\\n  var didWarnAboutStateAssignmentForComponent;\\n  var didWarnAboutUninitializedState;\\n  var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\\n  var didWarnAboutLegacyLifecyclesAndDerivedState;\\n  var didWarnAboutUndefinedDerivedState;\\n  var warnOnUndefinedDerivedState;\\n  var warnOnInvalidCallback;\\n  var didWarnAboutDirectlyAssigningPropsToState;\\n  var didWarnAboutContextTypeAndContextTypes;\\n  var didWarnAboutInvalidateContextType;\\n\\n  {\\n    didWarnAboutStateAssignmentForComponent = new Set();\\n    didWarnAboutUninitializedState = new Set();\\n    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\\n    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\\n    didWarnAboutDirectlyAssigningPropsToState = new Set();\\n    didWarnAboutUndefinedDerivedState = new Set();\\n    didWarnAboutContextTypeAndContextTypes = new Set();\\n    didWarnAboutInvalidateContextType = new Set();\\n    var didWarnOnInvalidCallback = new Set();\\n\\n    warnOnInvalidCallback = function (callback, callerName) {\\n      if (callback === null || typeof callback === 'function') {\\n        return;\\n      }\\n\\n      var key = callerName + '_' + callback;\\n\\n      if (!didWarnOnInvalidCallback.has(key)) {\\n        didWarnOnInvalidCallback.add(key);\\n\\n        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\\n      }\\n    };\\n\\n    warnOnUndefinedDerivedState = function (type, partialState) {\\n      if (partialState === undefined) {\\n        var componentName = getComponentNameFromType(type) || 'Component';\\n\\n        if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\\n          didWarnAboutUndefinedDerivedState.add(componentName);\\n\\n          error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\\n        }\\n      }\\n    }; // This is so gross but it's at least non-critical and can be removed if\\n    // it causes problems. This is meant to give a nicer error message for\\n    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\\n    // ...)) which otherwise throws a \\\"_processChildContext is not a function\\\"\\n    // exception.\\n\\n\\n    Object.defineProperty(fakeInternalInstance, '_processChildContext', {\\n      enumerable: false,\\n      value: function () {\\n        throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \\\"unstable_renderSubtreeIntoContainer, which isn't supported. Try \\\" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\\n      }\\n    });\\n    Object.freeze(fakeInternalInstance);\\n  }\\n\\n  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\\n    var prevState = workInProgress.memoizedState;\\n    var partialState = getDerivedStateFromProps(nextProps, prevState);\\n\\n    {\\n      if ( workInProgress.mode & StrictLegacyMode) {\\n        setIsStrictModeForDevtools(true);\\n\\n        try {\\n          // Invoke the function an extra time to help detect side-effects.\\n          partialState = getDerivedStateFromProps(nextProps, prevState);\\n        } finally {\\n          setIsStrictModeForDevtools(false);\\n        }\\n      }\\n\\n      warnOnUndefinedDerivedState(ctor, partialState);\\n    } // Merge the partial state and the previous state.\\n\\n\\n    var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\\n    workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\\n    // base state.\\n\\n    if (workInProgress.lanes === NoLanes) {\\n      // Queue is always non-null for classes\\n      var updateQueue = workInProgress.updateQueue;\\n      updateQueue.baseState = memoizedState;\\n    }\\n  }\\n\\n  var classComponentUpdater = {\\n    isMounted: isMounted,\\n    enqueueSetState: function (inst, payload, callback) {\\n      var fiber = get(inst);\\n      var eventTime = requestEventTime();\\n      var lane = requestUpdateLane(fiber);\\n      var update = createUpdate(eventTime, lane);\\n      update.payload = payload;\\n\\n      if (callback !== undefined && callback !== null) {\\n        {\\n          warnOnInvalidCallback(callback, 'setState');\\n        }\\n\\n        update.callback = callback;\\n      }\\n\\n      var root = enqueueUpdate(fiber, update, lane);\\n\\n      if (root !== null) {\\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\\n        entangleTransitions(root, fiber, lane);\\n      }\\n\\n      {\\n        markStateUpdateScheduled(fiber, lane);\\n      }\\n    },\\n    enqueueReplaceState: function (inst, payload, callback) {\\n      var fiber = get(inst);\\n      var eventTime = requestEventTime();\\n      var lane = requestUpdateLane(fiber);\\n      var update = createUpdate(eventTime, lane);\\n      update.tag = ReplaceState;\\n      update.payload = payload;\\n\\n      if (callback !== undefined && callback !== null) {\\n        {\\n          warnOnInvalidCallback(callback, 'replaceState');\\n        }\\n\\n        update.callback = callback;\\n      }\\n\\n      var root = enqueueUpdate(fiber, update, lane);\\n\\n      if (root !== null) {\\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\\n        entangleTransitions(root, fiber, lane);\\n      }\\n\\n      {\\n        markStateUpdateScheduled(fiber, lane);\\n      }\\n    },\\n    enqueueForceUpdate: function (inst, callback) {\\n      var fiber = get(inst);\\n      var eventTime = requestEventTime();\\n      var lane = requestUpdateLane(fiber);\\n      var update = createUpdate(eventTime, lane);\\n      update.tag = ForceUpdate;\\n\\n      if (callback !== undefined && callback !== null) {\\n        {\\n          warnOnInvalidCallback(callback, 'forceUpdate');\\n        }\\n\\n        update.callback = callback;\\n      }\\n\\n      var root = enqueueUpdate(fiber, update, lane);\\n\\n      if (root !== null) {\\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\\n        entangleTransitions(root, fiber, lane);\\n      }\\n\\n      {\\n        markForceUpdateScheduled(fiber, lane);\\n      }\\n    }\\n  };\\n\\n  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\\n    var instance = workInProgress.stateNode;\\n\\n    if (typeof instance.shouldComponentUpdate === 'function') {\\n      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\\n\\n      {\\n        if ( workInProgress.mode & StrictLegacyMode) {\\n          setIsStrictModeForDevtools(true);\\n\\n          try {\\n            // Invoke the function an extra time to help detect side-effects.\\n            shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\\n          } finally {\\n            setIsStrictModeForDevtools(false);\\n          }\\n        }\\n\\n        if (shouldUpdate === undefined) {\\n          error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\\n        }\\n      }\\n\\n      return shouldUpdate;\\n    }\\n\\n    if (ctor.prototype && ctor.prototype.isPureReactComponent) {\\n      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\\n    }\\n\\n    return true;\\n  }\\n\\n  function checkClassInstance(workInProgress, ctor, newProps) {\\n    var instance = workInProgress.stateNode;\\n\\n    {\\n      var name = getComponentNameFromType(ctor) || 'Component';\\n      var renderPresent = instance.render;\\n\\n      if (!renderPresent) {\\n        if (ctor.prototype && typeof ctor.prototype.render === 'function') {\\n          error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\\n        } else {\\n          error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\\n        }\\n      }\\n\\n      if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\\n        error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\\n      }\\n\\n      if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\\n        error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\\n      }\\n\\n      if (instance.propTypes) {\\n        error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\\n      }\\n\\n      if (instance.contextType) {\\n        error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\\n      }\\n\\n      {\\n        if (instance.contextTypes) {\\n          error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\\n        }\\n\\n        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\\n          didWarnAboutContextTypeAndContextTypes.add(ctor);\\n\\n          error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\\n        }\\n      }\\n\\n      if (typeof instance.componentShouldUpdate === 'function') {\\n        error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\\n      }\\n\\n      if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\\n        error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\\n      }\\n\\n      if (typeof instance.componentDidUnmount === 'function') {\\n        error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\\n      }\\n\\n      if (typeof instance.componentDidReceiveProps === 'function') {\\n        error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\\n      }\\n\\n      if (typeof instance.componentWillRecieveProps === 'function') {\\n        error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\\n      }\\n\\n      if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\\n        error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\\n      }\\n\\n      var hasMutatedProps = instance.props !== newProps;\\n\\n      if (instance.props !== undefined && hasMutatedProps) {\\n        error('%s(...): When calling super() in `%s`, make sure to pass ' + \\\"up the same props that your component's constructor was passed.\\\", name, name);\\n      }\\n\\n      if (instance.defaultProps) {\\n        error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\\n      }\\n\\n      if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\\n        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\\n\\n        error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\\n      }\\n\\n      if (typeof instance.getDerivedStateFromProps === 'function') {\\n        error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\\n      }\\n\\n      if (typeof instance.getDerivedStateFromError === 'function') {\\n        error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\\n      }\\n\\n      if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\\n        error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\\n      }\\n\\n      var _state = instance.state;\\n\\n      if (_state && (typeof _state !== 'object' || isArray(_state))) {\\n        error('%s.state: must be set to an object or null', name);\\n      }\\n\\n      if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\\n        error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\\n      }\\n    }\\n  }\\n\\n  function adoptClassInstance(workInProgress, instance) {\\n    instance.updater = classComponentUpdater;\\n    workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\\n\\n    set(instance, workInProgress);\\n\\n    {\\n      instance._reactInternalInstance = fakeInternalInstance;\\n    }\\n  }\\n\\n  function constructClassInstance(workInProgress, ctor, props) {\\n    var isLegacyContextConsumer = false;\\n    var unmaskedContext = emptyContextObject;\\n    var context = emptyContextObject;\\n    var contextType = ctor.contextType;\\n\\n    {\\n      if ('contextType' in ctor) {\\n        var isValid = // Allow null for conditional declaration\\n        contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\\n\\n        if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\\n          didWarnAboutInvalidateContextType.add(ctor);\\n          var addendum = '';\\n\\n          if (contextType === undefined) {\\n            addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\\n          } else if (typeof contextType !== 'object') {\\n            addendum = ' However, it is set to a ' + typeof contextType + '.';\\n          } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\\n            addendum = ' Did you accidentally pass the Context.Provider instead?';\\n          } else if (contextType._context !== undefined) {\\n            // <Context.Consumer>\\n            addendum = ' Did you accidentally pass the Context.Consumer instead?';\\n          } else {\\n            addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\\n          }\\n\\n          error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\\n        }\\n      }\\n    }\\n\\n    if (typeof contextType === 'object' && contextType !== null) {\\n      context = readContext(contextType);\\n    } else {\\n      unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\\n      var contextTypes = ctor.contextTypes;\\n      isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\\n      context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\\n    }\\n\\n    var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\\n\\n    {\\n      if ( workInProgress.mode & StrictLegacyMode) {\\n        setIsStrictModeForDevtools(true);\\n\\n        try {\\n          instance = new ctor(props, context); // eslint-disable-line no-new\\n        } finally {\\n          setIsStrictModeForDevtools(false);\\n        }\\n      }\\n    }\\n\\n    var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\\n    adoptClassInstance(workInProgress, instance);\\n\\n    {\\n      if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\\n        var componentName = getComponentNameFromType(ctor) || 'Component';\\n\\n        if (!didWarnAboutUninitializedState.has(componentName)) {\\n          didWarnAboutUninitializedState.add(componentName);\\n\\n          error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\\n        }\\n      } // If new component APIs are defined, \\\"unsafe\\\" lifecycles won't be called.\\n      // Warn about these lifecycles if they are present.\\n      // Don't warn about react-lifecycles-compat polyfilled methods though.\\n\\n\\n      if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\\n        var foundWillMountName = null;\\n        var foundWillReceivePropsName = null;\\n        var foundWillUpdateName = null;\\n\\n        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\\n          foundWillMountName = 'componentWillMount';\\n        } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\\n          foundWillMountName = 'UNSAFE_componentWillMount';\\n        }\\n\\n        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\\n          foundWillReceivePropsName = 'componentWillReceiveProps';\\n        } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\\n          foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\\n        }\\n\\n        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\\n          foundWillUpdateName = 'componentWillUpdate';\\n        } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\\n          foundWillUpdateName = 'UNSAFE_componentWillUpdate';\\n        }\\n\\n        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\\n          var _componentName = getComponentNameFromType(ctor) || 'Component';\\n\\n          var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\\n\\n          if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\\n            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\\n\\n            error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\\\n\\\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\\\n\\\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \\\"\\\\n  \\\" + foundWillMountName : '', foundWillReceivePropsName !== null ? \\\"\\\\n  \\\" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \\\"\\\\n  \\\" + foundWillUpdateName : '');\\n          }\\n        }\\n      }\\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\\n    // ReactFiberContext usually updates this cache but can't for newly-created instances.\\n\\n\\n    if (isLegacyContextConsumer) {\\n      cacheContext(workInProgress, unmaskedContext, context);\\n    }\\n\\n    return instance;\\n  }\\n\\n  function callComponentWillMount(workInProgress, instance) {\\n    var oldState = instance.state;\\n\\n    if (typeof instance.componentWillMount === 'function') {\\n      instance.componentWillMount();\\n    }\\n\\n    if (typeof instance.UNSAFE_componentWillMount === 'function') {\\n      instance.UNSAFE_componentWillMount();\\n    }\\n\\n    if (oldState !== instance.state) {\\n      {\\n        error('%s.componentWillMount(): Assigning directly to this.state is ' + \\\"deprecated (except inside a component's \\\" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\\n      }\\n\\n      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\\n    }\\n  }\\n\\n  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\\n    var oldState = instance.state;\\n\\n    if (typeof instance.componentWillReceiveProps === 'function') {\\n      instance.componentWillReceiveProps(newProps, nextContext);\\n    }\\n\\n    if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\\n      instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\\n    }\\n\\n    if (instance.state !== oldState) {\\n      {\\n        var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\\n\\n        if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\\n          didWarnAboutStateAssignmentForComponent.add(componentName);\\n\\n          error('%s.componentWillReceiveProps(): Assigning directly to ' + \\\"this.state is deprecated (except inside a component's \\\" + 'constructor). Use setState instead.', componentName);\\n        }\\n      }\\n\\n      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\\n    }\\n  } // Invokes the mount life-cycles on a previously never rendered instance.\\n\\n\\n  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\\n    {\\n      checkClassInstance(workInProgress, ctor, newProps);\\n    }\\n\\n    var instance = workInProgress.stateNode;\\n    instance.props = newProps;\\n    instance.state = workInProgress.memoizedState;\\n    instance.refs = emptyRefsObject;\\n    initializeUpdateQueue(workInProgress);\\n    var contextType = ctor.contextType;\\n\\n    if (typeof contextType === 'object' && contextType !== null) {\\n      instance.context = readContext(contextType);\\n    } else {\\n      var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\\n      instance.context = getMaskedContext(workInProgress, unmaskedContext);\\n    }\\n\\n    {\\n      if (instance.state === newProps) {\\n        var componentName = getComponentNameFromType(ctor) || 'Component';\\n\\n        if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\\n          didWarnAboutDirectlyAssigningPropsToState.add(componentName);\\n\\n          error('%s: It is not recommended to assign props directly to state ' + \\\"because updates to props won't be reflected in state. \\\" + 'In most cases, it is better to use props directly.', componentName);\\n        }\\n      }\\n\\n      if (workInProgress.mode & StrictLegacyMode) {\\n        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\\n      }\\n\\n      {\\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\\n      }\\n    }\\n\\n    instance.state = workInProgress.memoizedState;\\n    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\\n\\n    if (typeof getDerivedStateFromProps === 'function') {\\n      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\\n      instance.state = workInProgress.memoizedState;\\n    } // In order to support react-lifecycles-compat polyfilled components,\\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\\n\\n\\n    if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\\n      callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\\n      // process them now.\\n\\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\\n      instance.state = workInProgress.memoizedState;\\n    }\\n\\n    if (typeof instance.componentDidMount === 'function') {\\n      var fiberFlags = Update;\\n\\n      {\\n        fiberFlags |= LayoutStatic;\\n      }\\n\\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\\n        fiberFlags |= MountLayoutDev;\\n      }\\n\\n      workInProgress.flags |= fiberFlags;\\n    }\\n  }\\n\\n  function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\\n    var instance = workInProgress.stateNode;\\n    var oldProps = workInProgress.memoizedProps;\\n    instance.props = oldProps;\\n    var oldContext = instance.context;\\n    var contextType = ctor.contextType;\\n    var nextContext = emptyContextObject;\\n\\n    if (typeof contextType === 'object' && contextType !== null) {\\n      nextContext = readContext(contextType);\\n    } else {\\n      var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\\n      nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\\n    }\\n\\n    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\\n    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\\n    // ever the previously attempted to render - not the \\\"current\\\". However,\\n    // during componentDidUpdate we pass the \\\"current\\\" props.\\n    // In order to support react-lifecycles-compat polyfilled components,\\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\\n\\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\\n      if (oldProps !== newProps || oldContext !== nextContext) {\\n        callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\\n      }\\n    }\\n\\n    resetHasForceUpdateBeforeProcessing();\\n    var oldState = workInProgress.memoizedState;\\n    var newState = instance.state = oldState;\\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\\n    newState = workInProgress.memoizedState;\\n\\n    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\\n      // If an update was already in progress, we should schedule an Update\\n      // effect even though we're bailing out, so that cWU/cDU are called.\\n      if (typeof instance.componentDidMount === 'function') {\\n        var fiberFlags = Update;\\n\\n        {\\n          fiberFlags |= LayoutStatic;\\n        }\\n\\n        if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\\n          fiberFlags |= MountLayoutDev;\\n        }\\n\\n        workInProgress.flags |= fiberFlags;\\n      }\\n\\n      return false;\\n    }\\n\\n    if (typeof getDerivedStateFromProps === 'function') {\\n      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\\n      newState = workInProgress.memoizedState;\\n    }\\n\\n    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\\n\\n    if (shouldUpdate) {\\n      // In order to support react-lifecycles-compat polyfilled components,\\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\\n        if (typeof instance.componentWillMount === 'function') {\\n          instance.componentWillMount();\\n        }\\n\\n        if (typeof instance.UNSAFE_componentWillMount === 'function') {\\n          instance.UNSAFE_componentWillMount();\\n        }\\n      }\\n\\n      if (typeof instance.componentDidMount === 'function') {\\n        var _fiberFlags = Update;\\n\\n        {\\n          _fiberFlags |= LayoutStatic;\\n        }\\n\\n        if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\\n          _fiberFlags |= MountLayoutDev;\\n        }\\n\\n        workInProgress.flags |= _fiberFlags;\\n      }\\n    } else {\\n      // If an update was already in progress, we should schedule an Update\\n      // effect even though we're bailing out, so that cWU/cDU are called.\\n      if (typeof instance.componentDidMount === 'function') {\\n        var _fiberFlags2 = Update;\\n\\n        {\\n          _fiberFlags2 |= LayoutStatic;\\n        }\\n\\n        if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\\n          _fiberFlags2 |= MountLayoutDev;\\n        }\\n\\n        workInProgress.flags |= _fiberFlags2;\\n      } // If shouldComponentUpdate returned false, we should still update the\\n      // memoized state to indicate that this work can be reused.\\n\\n\\n      workInProgress.memoizedProps = newProps;\\n      workInProgress.memoizedState = newState;\\n    } // Update the existing instance's state, props, and context pointers even\\n    // if shouldComponentUpdate returns false.\\n\\n\\n    instance.props = newProps;\\n    instance.state = newState;\\n    instance.context = nextContext;\\n    return shouldUpdate;\\n  } // Invokes the update life-cycles and returns false if it shouldn't rerender.\\n\\n\\n  function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\\n    var instance = workInProgress.stateNode;\\n    cloneUpdateQueue(current, workInProgress);\\n    var unresolvedOldProps = workInProgress.memoizedProps;\\n    var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\\n    instance.props = oldProps;\\n    var unresolvedNewProps = workInProgress.pendingProps;\\n    var oldContext = instance.context;\\n    var contextType = ctor.contextType;\\n    var nextContext = emptyContextObject;\\n\\n    if (typeof contextType === 'object' && contextType !== null) {\\n      nextContext = readContext(contextType);\\n    } else {\\n      var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\\n      nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\\n    }\\n\\n    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\\n    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\\n    // ever the previously attempted to render - not the \\\"current\\\". However,\\n    // during componentDidUpdate we pass the \\\"current\\\" props.\\n    // In order to support react-lifecycles-compat polyfilled components,\\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\\n\\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\\n      if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\\n        callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\\n      }\\n    }\\n\\n    resetHasForceUpdateBeforeProcessing();\\n    var oldState = workInProgress.memoizedState;\\n    var newState = instance.state = oldState;\\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\\n    newState = workInProgress.memoizedState;\\n\\n    if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\\n      // If an update was already in progress, we should schedule an Update\\n      // effect even though we're bailing out, so that cWU/cDU are called.\\n      if (typeof instance.componentDidUpdate === 'function') {\\n        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\\n          workInProgress.flags |= Update;\\n        }\\n      }\\n\\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\\n        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\\n          workInProgress.flags |= Snapshot;\\n        }\\n      }\\n\\n      return false;\\n    }\\n\\n    if (typeof getDerivedStateFromProps === 'function') {\\n      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\\n      newState = workInProgress.memoizedState;\\n    }\\n\\n    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\\n    // but I'm loath to refactor this function. This only happens for memoized\\n    // components so it's not that common.\\n    enableLazyContextPropagation   ;\\n\\n    if (shouldUpdate) {\\n      // In order to support react-lifecycles-compat polyfilled components,\\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\\n        if (typeof instance.componentWillUpdate === 'function') {\\n          instance.componentWillUpdate(newProps, newState, nextContext);\\n        }\\n\\n        if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\\n          instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\\n        }\\n      }\\n\\n      if (typeof instance.componentDidUpdate === 'function') {\\n        workInProgress.flags |= Update;\\n      }\\n\\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\\n        workInProgress.flags |= Snapshot;\\n      }\\n    } else {\\n      // If an update was already in progress, we should schedule an Update\\n      // effect even though we're bailing out, so that cWU/cDU are called.\\n      if (typeof instance.componentDidUpdate === 'function') {\\n        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\\n          workInProgress.flags |= Update;\\n        }\\n      }\\n\\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\\n        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\\n          workInProgress.flags |= Snapshot;\\n        }\\n      } // If shouldComponentUpdate returned false, we should still update the\\n      // memoized props/state to indicate that this work can be reused.\\n\\n\\n      workInProgress.memoizedProps = newProps;\\n      workInProgress.memoizedState = newState;\\n    } // Update the existing instance's state, props, and context pointers even\\n    // if shouldComponentUpdate returns false.\\n\\n\\n    instance.props = newProps;\\n    instance.state = newState;\\n    instance.context = nextContext;\\n    return shouldUpdate;\\n  }\\n\\n  var didWarnAboutMaps;\\n  var didWarnAboutGenerators;\\n  var didWarnAboutStringRefs;\\n  var ownerHasKeyUseWarning;\\n  var ownerHasFunctionTypeWarning;\\n\\n  var warnForMissingKey = function (child, returnFiber) {};\\n\\n  {\\n    didWarnAboutMaps = false;\\n    didWarnAboutGenerators = false;\\n    didWarnAboutStringRefs = {};\\n    /**\\n     * Warn if there's no key explicitly set on dynamic arrays of children or\\n     * object keys are not valid. This allows us to keep track of children between\\n     * updates.\\n     */\\n\\n    ownerHasKeyUseWarning = {};\\n    ownerHasFunctionTypeWarning = {};\\n\\n    warnForMissingKey = function (child, returnFiber) {\\n      if (child === null || typeof child !== 'object') {\\n        return;\\n      }\\n\\n      if (!child._store || child._store.validated || child.key != null) {\\n        return;\\n      }\\n\\n      if (typeof child._store !== 'object') {\\n        throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\\n      }\\n\\n      child._store.validated = true;\\n      var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\\n\\n      if (ownerHasKeyUseWarning[componentName]) {\\n        return;\\n      }\\n\\n      ownerHasKeyUseWarning[componentName] = true;\\n\\n      error('Each child in a list should have a unique ' + '\\\"key\\\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\\n    };\\n  }\\n\\n  function coerceRef(returnFiber, current, element) {\\n    var mixedRef = element.ref;\\n\\n    if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\\n      {\\n        // TODO: Clean this up once we turn on the string ref warning for\\n        // everyone, because the strict mode case will no longer be relevant\\n        if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\\n        // because these cannot be automatically converted to an arrow function\\n        // using a codemod. Therefore, we don't have to warn about string refs again.\\n        !(element._owner && element._self && element._owner.stateNode !== element._self)) {\\n          var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\\n\\n          if (!didWarnAboutStringRefs[componentName]) {\\n            {\\n              error('A string ref, \\\"%s\\\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\\n            }\\n\\n            didWarnAboutStringRefs[componentName] = true;\\n          }\\n        }\\n      }\\n\\n      if (element._owner) {\\n        var owner = element._owner;\\n        var inst;\\n\\n        if (owner) {\\n          var ownerFiber = owner;\\n\\n          if (ownerFiber.tag !== ClassComponent) {\\n            throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\\n          }\\n\\n          inst = ownerFiber.stateNode;\\n        }\\n\\n        if (!inst) {\\n          throw new Error(\\\"Missing owner for string ref \\\" + mixedRef + \\\". This error is likely caused by a \\\" + 'bug in React. Please file an issue.');\\n        } // Assigning this to a const so Flow knows it won't change in the closure\\n\\n\\n        var resolvedInst = inst;\\n\\n        {\\n          checkPropStringCoercion(mixedRef, 'ref');\\n        }\\n\\n        var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\\n\\n        if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\\n          return current.ref;\\n        }\\n\\n        var ref = function (value) {\\n          var refs = resolvedInst.refs;\\n\\n          if (refs === emptyRefsObject) {\\n            // This is a lazy pooled frozen object, so we need to initialize.\\n            refs = resolvedInst.refs = {};\\n          }\\n\\n          if (value === null) {\\n            delete refs[stringRef];\\n          } else {\\n            refs[stringRef] = value;\\n          }\\n        };\\n\\n        ref._stringRef = stringRef;\\n        return ref;\\n      } else {\\n        if (typeof mixedRef !== 'string') {\\n          throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\\n        }\\n\\n        if (!element._owner) {\\n          throw new Error(\\\"Element ref was specified as a string (\\\" + mixedRef + \\\") but no owner was set. This could happen for one of\\\" + ' the following reasons:\\\\n' + '1. You may be adding a ref to a function component\\\\n' + \\\"2. You may be adding a ref to a component that was not created inside a component's render method\\\\n\\\" + '3. You have multiple copies of React loaded\\\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\\n        }\\n      }\\n    }\\n\\n    return mixedRef;\\n  }\\n\\n  function throwOnInvalidObjectType(returnFiber, newChild) {\\n    var childString = Object.prototype.toString.call(newChild);\\n    throw new Error(\\\"Objects are not valid as a React child (found: \\\" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \\\"). \\\" + 'If you meant to render a collection of children, use an array ' + 'instead.');\\n  }\\n\\n  function warnOnFunctionType(returnFiber) {\\n    {\\n      var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\\n\\n      if (ownerHasFunctionTypeWarning[componentName]) {\\n        return;\\n      }\\n\\n      ownerHasFunctionTypeWarning[componentName] = true;\\n\\n      error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\\n    }\\n  }\\n\\n  function resolveLazy(lazyType) {\\n    var payload = lazyType._payload;\\n    var init = lazyType._init;\\n    return init(payload);\\n  } // This wrapper function exists because I expect to clone the code in each path\\n  // to be able to optimize each path individually by branching early. This needs\\n  // a compiler or we can do it manually. Helpers that don't need this branching\\n  // live outside of this function.\\n\\n\\n  function ChildReconciler(shouldTrackSideEffects) {\\n    function deleteChild(returnFiber, childToDelete) {\\n      if (!shouldTrackSideEffects) {\\n        // Noop.\\n        return;\\n      }\\n\\n      var deletions = returnFiber.deletions;\\n\\n      if (deletions === null) {\\n        returnFiber.deletions = [childToDelete];\\n        returnFiber.flags |= ChildDeletion;\\n      } else {\\n        deletions.push(childToDelete);\\n      }\\n    }\\n\\n    function deleteRemainingChildren(returnFiber, currentFirstChild) {\\n      if (!shouldTrackSideEffects) {\\n        // Noop.\\n        return null;\\n      } // TODO: For the shouldClone case, this could be micro-optimized a bit by\\n      // assuming that after the first child we've already added everything.\\n\\n\\n      var childToDelete = currentFirstChild;\\n\\n      while (childToDelete !== null) {\\n        deleteChild(returnFiber, childToDelete);\\n        childToDelete = childToDelete.sibling;\\n      }\\n\\n      return null;\\n    }\\n\\n    function mapRemainingChildren(returnFiber, currentFirstChild) {\\n      // Add the remaining children to a temporary map so that we can find them by\\n      // keys quickly. Implicit (null) keys get added to this set with their index\\n      // instead.\\n      var existingChildren = new Map();\\n      var existingChild = currentFirstChild;\\n\\n      while (existingChild !== null) {\\n        if (existingChild.key !== null) {\\n          existingChildren.set(existingChild.key, existingChild);\\n        } else {\\n          existingChildren.set(existingChild.index, existingChild);\\n        }\\n\\n        existingChild = existingChild.sibling;\\n      }\\n\\n      return existingChildren;\\n    }\\n\\n    function useFiber(fiber, pendingProps) {\\n      // We currently set sibling to null and index to 0 here because it is easy\\n      // to forget to do before returning it. E.g. for the single child case.\\n      var clone = createWorkInProgress(fiber, pendingProps);\\n      clone.index = 0;\\n      clone.sibling = null;\\n      return clone;\\n    }\\n\\n    function placeChild(newFiber, lastPlacedIndex, newIndex) {\\n      newFiber.index = newIndex;\\n\\n      if (!shouldTrackSideEffects) {\\n        // During hydration, the useId algorithm needs to know which fibers are\\n        // part of a list of children (arrays, iterators).\\n        newFiber.flags |= Forked;\\n        return lastPlacedIndex;\\n      }\\n\\n      var current = newFiber.alternate;\\n\\n      if (current !== null) {\\n        var oldIndex = current.index;\\n\\n        if (oldIndex < lastPlacedIndex) {\\n          // This is a move.\\n          newFiber.flags |= Placement;\\n          return lastPlacedIndex;\\n        } else {\\n          // This item can stay in place.\\n          return oldIndex;\\n        }\\n      } else {\\n        // This is an insertion.\\n        newFiber.flags |= Placement;\\n        return lastPlacedIndex;\\n      }\\n    }\\n\\n    function placeSingleChild(newFiber) {\\n      // This is simpler for the single child case. We only need to do a\\n      // placement for inserting new children.\\n      if (shouldTrackSideEffects && newFiber.alternate === null) {\\n        newFiber.flags |= Placement;\\n      }\\n\\n      return newFiber;\\n    }\\n\\n    function updateTextNode(returnFiber, current, textContent, lanes) {\\n      if (current === null || current.tag !== HostText) {\\n        // Insert\\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\\n        created.return = returnFiber;\\n        return created;\\n      } else {\\n        // Update\\n        var existing = useFiber(current, textContent);\\n        existing.return = returnFiber;\\n        return existing;\\n      }\\n    }\\n\\n    function updateElement(returnFiber, current, element, lanes) {\\n      var elementType = element.type;\\n\\n      if (elementType === REACT_FRAGMENT_TYPE) {\\n        return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\\n      }\\n\\n      if (current !== null) {\\n        if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\\n         isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\\n        // We need to do this after the Hot Reloading check above,\\n        // because hot reloading has different semantics than prod because\\n        // it doesn't resuspend. So we can't let the call below suspend.\\n        typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\\n          // Move based on index\\n          var existing = useFiber(current, element.props);\\n          existing.ref = coerceRef(returnFiber, current, element);\\n          existing.return = returnFiber;\\n\\n          {\\n            existing._debugSource = element._source;\\n            existing._debugOwner = element._owner;\\n          }\\n\\n          return existing;\\n        }\\n      } // Insert\\n\\n\\n      var created = createFiberFromElement(element, returnFiber.mode, lanes);\\n      created.ref = coerceRef(returnFiber, current, element);\\n      created.return = returnFiber;\\n      return created;\\n    }\\n\\n    function updatePortal(returnFiber, current, portal, lanes) {\\n      if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\\n        // Insert\\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\\n        created.return = returnFiber;\\n        return created;\\n      } else {\\n        // Update\\n        var existing = useFiber(current, portal.children || []);\\n        existing.return = returnFiber;\\n        return existing;\\n      }\\n    }\\n\\n    function updateFragment(returnFiber, current, fragment, lanes, key) {\\n      if (current === null || current.tag !== Fragment) {\\n        // Insert\\n        var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\\n        created.return = returnFiber;\\n        return created;\\n      } else {\\n        // Update\\n        var existing = useFiber(current, fragment);\\n        existing.return = returnFiber;\\n        return existing;\\n      }\\n    }\\n\\n    function createChild(returnFiber, newChild, lanes) {\\n      if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\\n        // Text nodes don't have keys. If the previous node is implicitly keyed\\n        // we can continue to replace it without aborting even if it is not a text\\n        // node.\\n        var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\\n        created.return = returnFiber;\\n        return created;\\n      }\\n\\n      if (typeof newChild === 'object' && newChild !== null) {\\n        switch (newChild.$$typeof) {\\n          case REACT_ELEMENT_TYPE:\\n            {\\n              var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\\n\\n              _created.ref = coerceRef(returnFiber, null, newChild);\\n              _created.return = returnFiber;\\n              return _created;\\n            }\\n\\n          case REACT_PORTAL_TYPE:\\n            {\\n              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\\n\\n              _created2.return = returnFiber;\\n              return _created2;\\n            }\\n\\n          case REACT_LAZY_TYPE:\\n            {\\n              var payload = newChild._payload;\\n              var init = newChild._init;\\n              return createChild(returnFiber, init(payload), lanes);\\n            }\\n        }\\n\\n        if (isArray(newChild) || getIteratorFn(newChild)) {\\n          var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\\n\\n          _created3.return = returnFiber;\\n          return _created3;\\n        }\\n\\n        throwOnInvalidObjectType(returnFiber, newChild);\\n      }\\n\\n      {\\n        if (typeof newChild === 'function') {\\n          warnOnFunctionType(returnFiber);\\n        }\\n      }\\n\\n      return null;\\n    }\\n\\n    function updateSlot(returnFiber, oldFiber, newChild, lanes) {\\n      // Update the fiber if the keys match, otherwise return null.\\n      var key = oldFiber !== null ? oldFiber.key : null;\\n\\n      if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\\n        // Text nodes don't have keys. If the previous node is implicitly keyed\\n        // we can continue to replace it without aborting even if it is not a text\\n        // node.\\n        if (key !== null) {\\n          return null;\\n        }\\n\\n        return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\\n      }\\n\\n      if (typeof newChild === 'object' && newChild !== null) {\\n        switch (newChild.$$typeof) {\\n          case REACT_ELEMENT_TYPE:\\n            {\\n              if (newChild.key === key) {\\n                return updateElement(returnFiber, oldFiber, newChild, lanes);\\n              } else {\\n                return null;\\n              }\\n            }\\n\\n          case REACT_PORTAL_TYPE:\\n            {\\n              if (newChild.key === key) {\\n                return updatePortal(returnFiber, oldFiber, newChild, lanes);\\n              } else {\\n                return null;\\n              }\\n            }\\n\\n          case REACT_LAZY_TYPE:\\n            {\\n              var payload = newChild._payload;\\n              var init = newChild._init;\\n              return updateSlot(returnFiber, oldFiber, init(payload), lanes);\\n            }\\n        }\\n\\n        if (isArray(newChild) || getIteratorFn(newChild)) {\\n          if (key !== null) {\\n            return null;\\n          }\\n\\n          return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\\n        }\\n\\n        throwOnInvalidObjectType(returnFiber, newChild);\\n      }\\n\\n      {\\n        if (typeof newChild === 'function') {\\n          warnOnFunctionType(returnFiber);\\n        }\\n      }\\n\\n      return null;\\n    }\\n\\n    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\\n      if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\\n        // Text nodes don't have keys, so we neither have to check the old nor\\n        // new node for the key. If both are text nodes, they match.\\n        var matchedFiber = existingChildren.get(newIdx) || null;\\n        return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\\n      }\\n\\n      if (typeof newChild === 'object' && newChild !== null) {\\n        switch (newChild.$$typeof) {\\n          case REACT_ELEMENT_TYPE:\\n            {\\n              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\\n\\n              return updateElement(returnFiber, _matchedFiber, newChild, lanes);\\n            }\\n\\n          case REACT_PORTAL_TYPE:\\n            {\\n              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\\n\\n              return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\\n            }\\n\\n          case REACT_LAZY_TYPE:\\n            var payload = newChild._payload;\\n            var init = newChild._init;\\n            return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\\n        }\\n\\n        if (isArray(newChild) || getIteratorFn(newChild)) {\\n          var _matchedFiber3 = existingChildren.get(newIdx) || null;\\n\\n          return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\\n        }\\n\\n        throwOnInvalidObjectType(returnFiber, newChild);\\n      }\\n\\n      {\\n        if (typeof newChild === 'function') {\\n          warnOnFunctionType(returnFiber);\\n        }\\n      }\\n\\n      return null;\\n    }\\n    /**\\n     * Warns if there is a duplicate or missing key\\n     */\\n\\n\\n    function warnOnInvalidKey(child, knownKeys, returnFiber) {\\n      {\\n        if (typeof child !== 'object' || child === null) {\\n          return knownKeys;\\n        }\\n\\n        switch (child.$$typeof) {\\n          case REACT_ELEMENT_TYPE:\\n          case REACT_PORTAL_TYPE:\\n            warnForMissingKey(child, returnFiber);\\n            var key = child.key;\\n\\n            if (typeof key !== 'string') {\\n              break;\\n            }\\n\\n            if (knownKeys === null) {\\n              knownKeys = new Set();\\n              knownKeys.add(key);\\n              break;\\n            }\\n\\n            if (!knownKeys.has(key)) {\\n              knownKeys.add(key);\\n              break;\\n            }\\n\\n            error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\\n\\n            break;\\n\\n          case REACT_LAZY_TYPE:\\n            var payload = child._payload;\\n            var init = child._init;\\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\\n            break;\\n        }\\n      }\\n\\n      return knownKeys;\\n    }\\n\\n    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\\n      // This algorithm can't optimize by searching from both ends since we\\n      // don't have backpointers on fibers. I'm trying to see how far we can get\\n      // with that model. If it ends up not being worth the tradeoffs, we can\\n      // add it later.\\n      // Even with a two ended optimization, we'd want to optimize for the case\\n      // where there are few changes and brute force the comparison instead of\\n      // going for the Map. It'd like to explore hitting that path first in\\n      // forward-only mode and only go for the Map once we notice that we need\\n      // lots of look ahead. This doesn't handle reversal as well as two ended\\n      // search but that's unusual. Besides, for the two ended optimization to\\n      // work on Iterables, we'd need to copy the whole set.\\n      // In this first iteration, we'll just live with hitting the bad case\\n      // (adding everything to a Map) in for every insert/move.\\n      // If you change this code, also update reconcileChildrenIterator() which\\n      // uses the same algorithm.\\n      {\\n        // First, validate keys.\\n        var knownKeys = null;\\n\\n        for (var i = 0; i < newChildren.length; i++) {\\n          var child = newChildren[i];\\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\\n        }\\n      }\\n\\n      var resultingFirstChild = null;\\n      var previousNewFiber = null;\\n      var oldFiber = currentFirstChild;\\n      var lastPlacedIndex = 0;\\n      var newIdx = 0;\\n      var nextOldFiber = null;\\n\\n      for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\\n        if (oldFiber.index > newIdx) {\\n          nextOldFiber = oldFiber;\\n          oldFiber = null;\\n        } else {\\n          nextOldFiber = oldFiber.sibling;\\n        }\\n\\n        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\\n\\n        if (newFiber === null) {\\n          // TODO: This breaks on empty slots like null children. That's\\n          // unfortunate because it triggers the slow path all the time. We need\\n          // a better way to communicate whether this was a miss or null,\\n          // boolean, undefined, etc.\\n          if (oldFiber === null) {\\n            oldFiber = nextOldFiber;\\n          }\\n\\n          break;\\n        }\\n\\n        if (shouldTrackSideEffects) {\\n          if (oldFiber && newFiber.alternate === null) {\\n            // We matched the slot, but we didn't reuse the existing fiber, so we\\n            // need to delete the existing child.\\n            deleteChild(returnFiber, oldFiber);\\n          }\\n        }\\n\\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\\n\\n        if (previousNewFiber === null) {\\n          // TODO: Move out of the loop. This only happens for the first run.\\n          resultingFirstChild = newFiber;\\n        } else {\\n          // TODO: Defer siblings if we're not at the right index for this slot.\\n          // I.e. if we had null values before, then we want to defer this\\n          // for each null value. However, we also don't want to call updateSlot\\n          // with the previous one.\\n          previousNewFiber.sibling = newFiber;\\n        }\\n\\n        previousNewFiber = newFiber;\\n        oldFiber = nextOldFiber;\\n      }\\n\\n      if (newIdx === newChildren.length) {\\n        // We've reached the end of the new children. We can delete the rest.\\n        deleteRemainingChildren(returnFiber, oldFiber);\\n\\n        if (getIsHydrating()) {\\n          var numberOfForks = newIdx;\\n          pushTreeFork(returnFiber, numberOfForks);\\n        }\\n\\n        return resultingFirstChild;\\n      }\\n\\n      if (oldFiber === null) {\\n        // If we don't have any more existing children we can choose a fast path\\n        // since the rest will all be insertions.\\n        for (; newIdx < newChildren.length; newIdx++) {\\n          var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\\n\\n          if (_newFiber === null) {\\n            continue;\\n          }\\n\\n          lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\\n\\n          if (previousNewFiber === null) {\\n            // TODO: Move out of the loop. This only happens for the first run.\\n            resultingFirstChild = _newFiber;\\n          } else {\\n            previousNewFiber.sibling = _newFiber;\\n          }\\n\\n          previousNewFiber = _newFiber;\\n        }\\n\\n        if (getIsHydrating()) {\\n          var _numberOfForks = newIdx;\\n          pushTreeFork(returnFiber, _numberOfForks);\\n        }\\n\\n        return resultingFirstChild;\\n      } // Add all children to a key map for quick lookups.\\n\\n\\n      var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\\n\\n      for (; newIdx < newChildren.length; newIdx++) {\\n        var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\\n\\n        if (_newFiber2 !== null) {\\n          if (shouldTrackSideEffects) {\\n            if (_newFiber2.alternate !== null) {\\n              // The new fiber is a work in progress, but if there exists a\\n              // current, that means that we reused the fiber. We need to delete\\n              // it from the child list so that we don't add it to the deletion\\n              // list.\\n              existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\\n            }\\n          }\\n\\n          lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\\n\\n          if (previousNewFiber === null) {\\n            resultingFirstChild = _newFiber2;\\n          } else {\\n            previousNewFiber.sibling = _newFiber2;\\n          }\\n\\n          previousNewFiber = _newFiber2;\\n        }\\n      }\\n\\n      if (shouldTrackSideEffects) {\\n        // Any existing children that weren't consumed above were deleted. We need\\n        // to add them to the deletion list.\\n        existingChildren.forEach(function (child) {\\n          return deleteChild(returnFiber, child);\\n        });\\n      }\\n\\n      if (getIsHydrating()) {\\n        var _numberOfForks2 = newIdx;\\n        pushTreeFork(returnFiber, _numberOfForks2);\\n      }\\n\\n      return resultingFirstChild;\\n    }\\n\\n    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\\n      // This is the same implementation as reconcileChildrenArray(),\\n      // but using the iterator instead.\\n      var iteratorFn = getIteratorFn(newChildrenIterable);\\n\\n      if (typeof iteratorFn !== 'function') {\\n        throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\\n      }\\n\\n      {\\n        // We don't support rendering Generators because it's a mutation.\\n        // See https://github.com/facebook/react/issues/12995\\n        if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\\n        newChildrenIterable[Symbol.toStringTag] === 'Generator') {\\n          if (!didWarnAboutGenerators) {\\n            error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\\n          }\\n\\n          didWarnAboutGenerators = true;\\n        } // Warn about using Maps as children\\n\\n\\n        if (newChildrenIterable.entries === iteratorFn) {\\n          if (!didWarnAboutMaps) {\\n            error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\\n          }\\n\\n          didWarnAboutMaps = true;\\n        } // First, validate keys.\\n        // We'll get a different iterator later for the main pass.\\n\\n\\n        var _newChildren = iteratorFn.call(newChildrenIterable);\\n\\n        if (_newChildren) {\\n          var knownKeys = null;\\n\\n          var _step = _newChildren.next();\\n\\n          for (; !_step.done; _step = _newChildren.next()) {\\n            var child = _step.value;\\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\\n          }\\n        }\\n      }\\n\\n      var newChildren = iteratorFn.call(newChildrenIterable);\\n\\n      if (newChildren == null) {\\n        throw new Error('An iterable object provided no iterator.');\\n      }\\n\\n      var resultingFirstChild = null;\\n      var previousNewFiber = null;\\n      var oldFiber = currentFirstChild;\\n      var lastPlacedIndex = 0;\\n      var newIdx = 0;\\n      var nextOldFiber = null;\\n      var step = newChildren.next();\\n\\n      for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\\n        if (oldFiber.index > newIdx) {\\n          nextOldFiber = oldFiber;\\n          oldFiber = null;\\n        } else {\\n          nextOldFiber = oldFiber.sibling;\\n        }\\n\\n        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\\n\\n        if (newFiber === null) {\\n          // TODO: This breaks on empty slots like null children. That's\\n          // unfortunate because it triggers the slow path all the time. We need\\n          // a better way to communicate whether this was a miss or null,\\n          // boolean, undefined, etc.\\n          if (oldFiber === null) {\\n            oldFiber = nextOldFiber;\\n          }\\n\\n          break;\\n        }\\n\\n        if (shouldTrackSideEffects) {\\n          if (oldFiber && newFiber.alternate === null) {\\n            // We matched the slot, but we didn't reuse the existing fiber, so we\\n            // need to delete the existing child.\\n            deleteChild(returnFiber, oldFiber);\\n          }\\n        }\\n\\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\\n\\n        if (previousNewFiber === null) {\\n          // TODO: Move out of the loop. This only happens for the first run.\\n          resultingFirstChild = newFiber;\\n        } else {\\n          // TODO: Defer siblings if we're not at the right index for this slot.\\n          // I.e. if we had null values before, then we want to defer this\\n          // for each null value. However, we also don't want to call updateSlot\\n          // with the previous one.\\n          previousNewFiber.sibling = newFiber;\\n        }\\n\\n        previousNewFiber = newFiber;\\n        oldFiber = nextOldFiber;\\n      }\\n\\n      if (step.done) {\\n        // We've reached the end of the new children. We can delete the rest.\\n        deleteRemainingChildren(returnFiber, oldFiber);\\n\\n        if (getIsHydrating()) {\\n          var numberOfForks = newIdx;\\n          pushTreeFork(returnFiber, numberOfForks);\\n        }\\n\\n        return resultingFirstChild;\\n      }\\n\\n      if (oldFiber === null) {\\n        // If we don't have any more existing children we can choose a fast path\\n        // since the rest will all be insertions.\\n        for (; !step.done; newIdx++, step = newChildren.next()) {\\n          var _newFiber3 = createChild(returnFiber, step.value, lanes);\\n\\n          if (_newFiber3 === null) {\\n            continue;\\n          }\\n\\n          lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\\n\\n          if (previousNewFiber === null) {\\n            // TODO: Move out of the loop. This only happens for the first run.\\n            resultingFirstChild = _newFiber3;\\n          } else {\\n            previousNewFiber.sibling = _newFiber3;\\n          }\\n\\n          previousNewFiber = _newFiber3;\\n        }\\n\\n        if (getIsHydrating()) {\\n          var _numberOfForks3 = newIdx;\\n          pushTreeFork(returnFiber, _numberOfForks3);\\n        }\\n\\n        return resultingFirstChild;\\n      } // Add all children to a key map for quick lookups.\\n\\n\\n      var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\\n\\n      for (; !step.done; newIdx++, step = newChildren.next()) {\\n        var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\\n\\n        if (_newFiber4 !== null) {\\n          if (shouldTrackSideEffects) {\\n            if (_newFiber4.alternate !== null) {\\n              // The new fiber is a work in progress, but if there exists a\\n              // current, that means that we reused the fiber. We need to delete\\n              // it from the child list so that we don't add it to the deletion\\n              // list.\\n              existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\\n            }\\n          }\\n\\n          lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\\n\\n          if (previousNewFiber === null) {\\n            resultingFirstChild = _newFiber4;\\n          } else {\\n            previousNewFiber.sibling = _newFiber4;\\n          }\\n\\n          previousNewFiber = _newFiber4;\\n        }\\n      }\\n\\n      if (shouldTrackSideEffects) {\\n        // Any existing children that weren't consumed above were deleted. We need\\n        // to add them to the deletion list.\\n        existingChildren.forEach(function (child) {\\n          return deleteChild(returnFiber, child);\\n        });\\n      }\\n\\n      if (getIsHydrating()) {\\n        var _numberOfForks4 = newIdx;\\n        pushTreeFork(returnFiber, _numberOfForks4);\\n      }\\n\\n      return resultingFirstChild;\\n    }\\n\\n    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\\n      // There's no need to check for keys on text nodes since we don't have a\\n      // way to define them.\\n      if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\\n        // We already have an existing node so let's just update it and delete\\n        // the rest.\\n        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\\n        var existing = useFiber(currentFirstChild, textContent);\\n        existing.return = returnFiber;\\n        return existing;\\n      } // The existing first child is not a text node so we need to create one\\n      // and delete the existing ones.\\n\\n\\n      deleteRemainingChildren(returnFiber, currentFirstChild);\\n      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\\n      created.return = returnFiber;\\n      return created;\\n    }\\n\\n    function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\\n      var key = element.key;\\n      var child = currentFirstChild;\\n\\n      while (child !== null) {\\n        // TODO: If key === null and child.key === null, then this only applies to\\n        // the first item in the list.\\n        if (child.key === key) {\\n          var elementType = element.type;\\n\\n          if (elementType === REACT_FRAGMENT_TYPE) {\\n            if (child.tag === Fragment) {\\n              deleteRemainingChildren(returnFiber, child.sibling);\\n              var existing = useFiber(child, element.props.children);\\n              existing.return = returnFiber;\\n\\n              {\\n                existing._debugSource = element._source;\\n                existing._debugOwner = element._owner;\\n              }\\n\\n              return existing;\\n            }\\n          } else {\\n            if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\\n             isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\\n            // We need to do this after the Hot Reloading check above,\\n            // because hot reloading has different semantics than prod because\\n            // it doesn't resuspend. So we can't let the call below suspend.\\n            typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\\n              deleteRemainingChildren(returnFiber, child.sibling);\\n\\n              var _existing = useFiber(child, element.props);\\n\\n              _existing.ref = coerceRef(returnFiber, child, element);\\n              _existing.return = returnFiber;\\n\\n              {\\n                _existing._debugSource = element._source;\\n                _existing._debugOwner = element._owner;\\n              }\\n\\n              return _existing;\\n            }\\n          } // Didn't match.\\n\\n\\n          deleteRemainingChildren(returnFiber, child);\\n          break;\\n        } else {\\n          deleteChild(returnFiber, child);\\n        }\\n\\n        child = child.sibling;\\n      }\\n\\n      if (element.type === REACT_FRAGMENT_TYPE) {\\n        var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\\n        created.return = returnFiber;\\n        return created;\\n      } else {\\n        var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\\n\\n        _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\\n        _created4.return = returnFiber;\\n        return _created4;\\n      }\\n    }\\n\\n    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\\n      var key = portal.key;\\n      var child = currentFirstChild;\\n\\n      while (child !== null) {\\n        // TODO: If key === null and child.key === null, then this only applies to\\n        // the first item in the list.\\n        if (child.key === key) {\\n          if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\\n            deleteRemainingChildren(returnFiber, child.sibling);\\n            var existing = useFiber(child, portal.children || []);\\n            existing.return = returnFiber;\\n            return existing;\\n          } else {\\n            deleteRemainingChildren(returnFiber, child);\\n            break;\\n          }\\n        } else {\\n          deleteChild(returnFiber, child);\\n        }\\n\\n        child = child.sibling;\\n      }\\n\\n      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\\n      created.return = returnFiber;\\n      return created;\\n    } // This API will tag the children with the side-effect of the reconciliation\\n    // itself. They will be added to the side-effect list as we pass through the\\n    // children and the parent.\\n\\n\\n    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\\n      // This function is not recursive.\\n      // If the top level item is an array, we treat it as a set of children,\\n      // not as a fragment. Nested arrays on the other hand will be treated as\\n      // fragment nodes. Recursion happens at the normal flow.\\n      // Handle top level unkeyed fragments as if they were arrays.\\n      // This leads to an ambiguity between <>{[...]}</> and <>...</>.\\n      // We treat the ambiguous cases above the same.\\n      var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\\n\\n      if (isUnkeyedTopLevelFragment) {\\n        newChild = newChild.props.children;\\n      } // Handle object types\\n\\n\\n      if (typeof newChild === 'object' && newChild !== null) {\\n        switch (newChild.$$typeof) {\\n          case REACT_ELEMENT_TYPE:\\n            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\\n\\n          case REACT_PORTAL_TYPE:\\n            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\\n\\n          case REACT_LAZY_TYPE:\\n            var payload = newChild._payload;\\n            var init = newChild._init; // TODO: This function is supposed to be non-recursive.\\n\\n            return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\\n        }\\n\\n        if (isArray(newChild)) {\\n          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\\n        }\\n\\n        if (getIteratorFn(newChild)) {\\n          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\\n        }\\n\\n        throwOnInvalidObjectType(returnFiber, newChild);\\n      }\\n\\n      if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\\n        return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\\n      }\\n\\n      {\\n        if (typeof newChild === 'function') {\\n          warnOnFunctionType(returnFiber);\\n        }\\n      } // Remaining cases are all treated as empty.\\n\\n\\n      return deleteRemainingChildren(returnFiber, currentFirstChild);\\n    }\\n\\n    return reconcileChildFibers;\\n  }\\n\\n  var reconcileChildFibers = ChildReconciler(true);\\n  var mountChildFibers = ChildReconciler(false);\\n  function cloneChildFibers(current, workInProgress) {\\n    if (current !== null && workInProgress.child !== current.child) {\\n      throw new Error('Resuming work not yet implemented.');\\n    }\\n\\n    if (workInProgress.child === null) {\\n      return;\\n    }\\n\\n    var currentChild = workInProgress.child;\\n    var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\\n    workInProgress.child = newChild;\\n    newChild.return = workInProgress;\\n\\n    while (currentChild.sibling !== null) {\\n      currentChild = currentChild.sibling;\\n      newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\\n      newChild.return = workInProgress;\\n    }\\n\\n    newChild.sibling = null;\\n  } // Reset a workInProgress child set to prepare it for a second pass.\\n\\n  function resetChildFibers(workInProgress, lanes) {\\n    var child = workInProgress.child;\\n\\n    while (child !== null) {\\n      resetWorkInProgress(child, lanes);\\n      child = child.sibling;\\n    }\\n  }\\n\\n  var NO_CONTEXT = {};\\n  var contextStackCursor$1 = createCursor(NO_CONTEXT);\\n  var contextFiberStackCursor = createCursor(NO_CONTEXT);\\n  var rootInstanceStackCursor = createCursor(NO_CONTEXT);\\n\\n  function requiredContext(c) {\\n    if (c === NO_CONTEXT) {\\n      throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\\n    }\\n\\n    return c;\\n  }\\n\\n  function getRootHostContainer() {\\n    var rootInstance = requiredContext(rootInstanceStackCursor.current);\\n    return rootInstance;\\n  }\\n\\n  function pushHostContainer(fiber, nextRootInstance) {\\n    // Push current root instance onto the stack;\\n    // This allows us to reset root when portals are popped.\\n    push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\\n    // This enables us to pop only Fibers that provide unique contexts.\\n\\n    push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\\n    // However, we can't just call getRootHostContext() and push it because\\n    // we'd have a different number of entries on the stack depending on\\n    // whether getRootHostContext() throws somewhere in renderer code or not.\\n    // So we push an empty value first. This lets us safely unwind on errors.\\n\\n    push(contextStackCursor$1, NO_CONTEXT, fiber);\\n    var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\\n\\n    pop(contextStackCursor$1, fiber);\\n    push(contextStackCursor$1, nextRootContext, fiber);\\n  }\\n\\n  function popHostContainer(fiber) {\\n    pop(contextStackCursor$1, fiber);\\n    pop(contextFiberStackCursor, fiber);\\n    pop(rootInstanceStackCursor, fiber);\\n  }\\n\\n  function getHostContext() {\\n    var context = requiredContext(contextStackCursor$1.current);\\n    return context;\\n  }\\n\\n  function pushHostContext(fiber) {\\n    var rootInstance = requiredContext(rootInstanceStackCursor.current);\\n    var context = requiredContext(contextStackCursor$1.current);\\n    var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\\n\\n    if (context === nextContext) {\\n      return;\\n    } // Track the context and the Fiber that provided it.\\n    // This enables us to pop only Fibers that provide unique contexts.\\n\\n\\n    push(contextFiberStackCursor, fiber, fiber);\\n    push(contextStackCursor$1, nextContext, fiber);\\n  }\\n\\n  function popHostContext(fiber) {\\n    // Do not pop unless this Fiber provided the current context.\\n    // pushHostContext() only pushes Fibers that provide unique contexts.\\n    if (contextFiberStackCursor.current !== fiber) {\\n      return;\\n    }\\n\\n    pop(contextStackCursor$1, fiber);\\n    pop(contextFiberStackCursor, fiber);\\n  }\\n\\n  var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\\n  // inherited deeply down the subtree. The upper bits only affect\\n  // this immediate suspense boundary and gets reset each new\\n  // boundary or suspense list.\\n\\n  var SubtreeSuspenseContextMask = 1; // Subtree Flags:\\n  // InvisibleParentSuspenseContext indicates that one of our parent Suspense\\n  // boundaries is not currently showing visible main content.\\n  // Either because it is already showing a fallback or is not mounted at all.\\n  // We can use this to determine if it is desirable to trigger a fallback at\\n  // the parent. If not, then we might need to trigger undesirable boundaries\\n  // and/or suspend the commit to avoid hiding the parent content.\\n\\n  var InvisibleParentSuspenseContext = 1; // Shallow Flags:\\n  // ForceSuspenseFallback can be used by SuspenseList to force newly added\\n  // items into their fallback state during one of the render passes.\\n\\n  var ForceSuspenseFallback = 2;\\n  var suspenseStackCursor = createCursor(DefaultSuspenseContext);\\n  function hasSuspenseContext(parentContext, flag) {\\n    return (parentContext & flag) !== 0;\\n  }\\n  function setDefaultShallowSuspenseContext(parentContext) {\\n    return parentContext & SubtreeSuspenseContextMask;\\n  }\\n  function setShallowSuspenseContext(parentContext, shallowContext) {\\n    return parentContext & SubtreeSuspenseContextMask | shallowContext;\\n  }\\n  function addSubtreeSuspenseContext(parentContext, subtreeContext) {\\n    return parentContext | subtreeContext;\\n  }\\n  function pushSuspenseContext(fiber, newContext) {\\n    push(suspenseStackCursor, newContext, fiber);\\n  }\\n  function popSuspenseContext(fiber) {\\n    pop(suspenseStackCursor, fiber);\\n  }\\n\\n  function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\\n    // If it was the primary children that just suspended, capture and render the\\n    // fallback. Otherwise, don't capture and bubble to the next boundary.\\n    var nextState = workInProgress.memoizedState;\\n\\n    if (nextState !== null) {\\n      if (nextState.dehydrated !== null) {\\n        // A dehydrated boundary always captures.\\n        return true;\\n      }\\n\\n      return false;\\n    }\\n\\n    var props = workInProgress.memoizedProps; // Regular boundaries always capture.\\n\\n    {\\n      return true;\\n    } // If it's a boundary we should avoid, then we prefer to bubble up to the\\n  }\\n  function findFirstSuspended(row) {\\n    var node = row;\\n\\n    while (node !== null) {\\n      if (node.tag === SuspenseComponent) {\\n        var state = node.memoizedState;\\n\\n        if (state !== null) {\\n          var dehydrated = state.dehydrated;\\n\\n          if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\\n            return node;\\n          }\\n        }\\n      } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\\n      // keep track of whether it suspended or not.\\n      node.memoizedProps.revealOrder !== undefined) {\\n        var didSuspend = (node.flags & DidCapture) !== NoFlags;\\n\\n        if (didSuspend) {\\n          return node;\\n        }\\n      } else if (node.child !== null) {\\n        node.child.return = node;\\n        node = node.child;\\n        continue;\\n      }\\n\\n      if (node === row) {\\n        return null;\\n      }\\n\\n      while (node.sibling === null) {\\n        if (node.return === null || node.return === row) {\\n          return null;\\n        }\\n\\n        node = node.return;\\n      }\\n\\n      node.sibling.return = node.return;\\n      node = node.sibling;\\n    }\\n\\n    return null;\\n  }\\n\\n  var NoFlags$1 =\\n  /*   */\\n  0; // Represents whether effect should fire.\\n\\n  var HasEffect =\\n  /* */\\n  1; // Represents the phase in which the effect (not the clean-up) fires.\\n\\n  var Insertion =\\n  /*  */\\n  2;\\n  var Layout =\\n  /*    */\\n  4;\\n  var Passive$1 =\\n  /*   */\\n  8;\\n\\n  // and should be reset before starting a new render.\\n  // This tracks which mutable sources need to be reset after a render.\\n\\n  var workInProgressSources = [];\\n  function resetWorkInProgressVersions() {\\n    for (var i = 0; i < workInProgressSources.length; i++) {\\n      var mutableSource = workInProgressSources[i];\\n\\n      {\\n        mutableSource._workInProgressVersionPrimary = null;\\n      }\\n    }\\n\\n    workInProgressSources.length = 0;\\n  }\\n  // This ensures that the version used for server rendering matches the one\\n  // that is eventually read during hydration.\\n  // If they don't match there's a potential tear and a full deopt render is required.\\n\\n  function registerMutableSourceForHydration(root, mutableSource) {\\n    var getVersion = mutableSource._getVersion;\\n    var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\\n    // Retaining it forever may interfere with GC.\\n\\n    if (root.mutableSourceEagerHydrationData == null) {\\n      root.mutableSourceEagerHydrationData = [mutableSource, version];\\n    } else {\\n      root.mutableSourceEagerHydrationData.push(mutableSource, version);\\n    }\\n  }\\n\\n  var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\\n      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;\\n  var didWarnAboutMismatchedHooksForComponent;\\n  var didWarnUncachedGetSnapshot;\\n\\n  {\\n    didWarnAboutMismatchedHooksForComponent = new Set();\\n  }\\n\\n  // These are set right before calling the component.\\n  var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\\n  // the work-in-progress hook.\\n\\n  var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\\n  // current hook list is the list that belongs to the current fiber. The\\n  // work-in-progress hook list is a new list that will be added to the\\n  // work-in-progress fiber.\\n\\n  var currentHook = null;\\n  var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\\n  // does not get reset if we do another render pass; only when we're completely\\n  // finished evaluating this component. This is an optimization so we know\\n  // whether we need to clear render phase updates after a throw.\\n\\n  var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\\n  // gets reset after each attempt.\\n  // TODO: Maybe there's some way to consolidate this with\\n  // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\\n\\n  var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\\n\\n  var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\\n  // hydration). This counter is global, so client ids are not stable across\\n  // render attempts.\\n\\n  var globalClientIdCounter = 0;\\n  var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\\n\\n  var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\\n  // The list stores the order of hooks used during the initial render (mount).\\n  // Subsequent renders (updates) reference this list.\\n\\n  var hookTypesDev = null;\\n  var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\\n  // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\\n  // When true, such Hooks will always be \\\"remounted\\\". Only used during hot reload.\\n\\n  var ignorePreviousDependencies = false;\\n\\n  function mountHookTypesDev() {\\n    {\\n      var hookName = currentHookNameInDev;\\n\\n      if (hookTypesDev === null) {\\n        hookTypesDev = [hookName];\\n      } else {\\n        hookTypesDev.push(hookName);\\n      }\\n    }\\n  }\\n\\n  function updateHookTypesDev() {\\n    {\\n      var hookName = currentHookNameInDev;\\n\\n      if (hookTypesDev !== null) {\\n        hookTypesUpdateIndexDev++;\\n\\n        if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\\n          warnOnHookMismatchInDev(hookName);\\n        }\\n      }\\n    }\\n  }\\n\\n  function checkDepsAreArrayDev(deps) {\\n    {\\n      if (deps !== undefined && deps !== null && !isArray(deps)) {\\n        // Verify deps, but only on mount to avoid extra checks.\\n        // It's unlikely their type would change as usually you define them inline.\\n        error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\\n      }\\n    }\\n  }\\n\\n  function warnOnHookMismatchInDev(currentHookName) {\\n    {\\n      var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\\n\\n      if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\\n        didWarnAboutMismatchedHooksForComponent.add(componentName);\\n\\n        if (hookTypesDev !== null) {\\n          var table = '';\\n          var secondColumnStart = 30;\\n\\n          for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\\n            var oldHookName = hookTypesDev[i];\\n            var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\\n            var row = i + 1 + \\\". \\\" + oldHookName; // Extra space so second column lines up\\n            // lol @ IE not supporting String#repeat\\n\\n            while (row.length < secondColumnStart) {\\n              row += ' ';\\n            }\\n\\n            row += newHookName + '\\\\n';\\n            table += row;\\n          }\\n\\n          error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\\\n\\\\n' + '   Previous render            Next render\\\\n' + '   ------------------------------------------------------\\\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n', componentName, table);\\n        }\\n      }\\n    }\\n  }\\n\\n  function throwInvalidHookError() {\\n    throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\\\n' + '2. You might be breaking the Rules of Hooks\\\\n' + '3. You might have more than one copy of React in the same app\\\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\\n  }\\n\\n  function areHookInputsEqual(nextDeps, prevDeps) {\\n    {\\n      if (ignorePreviousDependencies) {\\n        // Only true when this component is being hot reloaded.\\n        return false;\\n      }\\n    }\\n\\n    if (prevDeps === null) {\\n      {\\n        error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\\n      }\\n\\n      return false;\\n    }\\n\\n    {\\n      // Don't bother comparing lengths in prod because these arrays should be\\n      // passed inline.\\n      if (nextDeps.length !== prevDeps.length) {\\n        error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\\\n\\\\n' + 'Previous: %s\\\\n' + 'Incoming: %s', currentHookNameInDev, \\\"[\\\" + prevDeps.join(', ') + \\\"]\\\", \\\"[\\\" + nextDeps.join(', ') + \\\"]\\\");\\n      }\\n    }\\n\\n    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\\n      if (objectIs(nextDeps[i], prevDeps[i])) {\\n        continue;\\n      }\\n\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\\n    renderLanes = nextRenderLanes;\\n    currentlyRenderingFiber$1 = workInProgress;\\n\\n    {\\n      hookTypesDev = current !== null ? current._debugHookTypes : null;\\n      hookTypesUpdateIndexDev = -1; // Used for hot reloading:\\n\\n      ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\\n    }\\n\\n    workInProgress.memoizedState = null;\\n    workInProgress.updateQueue = null;\\n    workInProgress.lanes = NoLanes; // The following should have already been reset\\n    // currentHook = null;\\n    // workInProgressHook = null;\\n    // didScheduleRenderPhaseUpdate = false;\\n    // localIdCounter = 0;\\n    // TODO Warn if no hooks are used at all during mount, then some are used during update.\\n    // Currently we will identify the update render as a mount because memoizedState === null.\\n    // This is tricky because it's valid for certain types of components (e.g. React.lazy)\\n    // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\\n    // Non-stateful hooks (e.g. context) don't get added to memoizedState,\\n    // so memoizedState would be null during updates and mounts.\\n\\n    {\\n      if (current !== null && current.memoizedState !== null) {\\n        ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\\n      } else if (hookTypesDev !== null) {\\n        // This dispatcher handles an edge case where a component is updating,\\n        // but no stateful hooks have been used.\\n        // We want to match the production code behavior (which will use HooksDispatcherOnMount),\\n        // but with the extra DEV validation to ensure hooks ordering hasn't changed.\\n        // This dispatcher does that.\\n        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\\n      } else {\\n        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\\n      }\\n    }\\n\\n    var children = Component(props, secondArg); // Check if there was a render phase update\\n\\n    if (didScheduleRenderPhaseUpdateDuringThisPass) {\\n      // Keep rendering in a loop for as long as render phase updates continue to\\n      // be scheduled. Use a counter to prevent infinite loops.\\n      var numberOfReRenders = 0;\\n\\n      do {\\n        didScheduleRenderPhaseUpdateDuringThisPass = false;\\n        localIdCounter = 0;\\n\\n        if (numberOfReRenders >= RE_RENDER_LIMIT) {\\n          throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\\n        }\\n\\n        numberOfReRenders += 1;\\n\\n        {\\n          // Even when hot reloading, allow dependencies to stabilize\\n          // after first render to prevent infinite render phase updates.\\n          ignorePreviousDependencies = false;\\n        } // Start over from the beginning of the list\\n\\n\\n        currentHook = null;\\n        workInProgressHook = null;\\n        workInProgress.updateQueue = null;\\n\\n        {\\n          // Also validate hook order for cascading updates.\\n          hookTypesUpdateIndexDev = -1;\\n        }\\n\\n        ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\\n        children = Component(props, secondArg);\\n      } while (didScheduleRenderPhaseUpdateDuringThisPass);\\n    } // We can assume the previous dispatcher is always this one, since we set it\\n    // at the beginning of the render phase and there's no re-entrance.\\n\\n\\n    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\\n\\n    {\\n      workInProgress._debugHookTypes = hookTypesDev;\\n    } // This check uses currentHook so that it works the same in DEV and prod bundles.\\n    // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\\n\\n\\n    var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\\n    renderLanes = NoLanes;\\n    currentlyRenderingFiber$1 = null;\\n    currentHook = null;\\n    workInProgressHook = null;\\n\\n    {\\n      currentHookNameInDev = null;\\n      hookTypesDev = null;\\n      hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\\n      // render. If this fires, it suggests that we incorrectly reset the static\\n      // flags in some other part of the codebase. This has happened before, for\\n      // example, in the SuspenseList implementation.\\n\\n      if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\\n      // and creates false positives. To make this work in legacy mode, we'd\\n      // need to mark fibers that commit in an incomplete state, somehow. For\\n      // now I'll disable the warning that most of the bugs that would trigger\\n      // it are either exclusive to concurrent mode or exist in both.\\n      (current.mode & ConcurrentMode) !== NoMode) {\\n        error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\\n      }\\n    }\\n\\n    didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\\n    // localIdCounter = 0;\\n\\n    if (didRenderTooFewHooks) {\\n      throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\\n    }\\n\\n    return children;\\n  }\\n  function checkDidRenderIdHook() {\\n    // This should be called immediately after every renderWithHooks call.\\n    // Conceptually, it's part of the return value of renderWithHooks; it's only a\\n    // separate function to avoid using an array tuple.\\n    var didRenderIdHook = localIdCounter !== 0;\\n    localIdCounter = 0;\\n    return didRenderIdHook;\\n  }\\n  function bailoutHooks(current, workInProgress, lanes) {\\n    workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\\n    // complete phase (bubbleProperties).\\n\\n    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\\n      workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\\n    } else {\\n      workInProgress.flags &= ~(Passive | Update);\\n    }\\n\\n    current.lanes = removeLanes(current.lanes, lanes);\\n  }\\n  function resetHooksAfterThrow() {\\n    // We can assume the previous dispatcher is always this one, since we set it\\n    // at the beginning of the render phase and there's no re-entrance.\\n    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\\n\\n    if (didScheduleRenderPhaseUpdate) {\\n      // There were render phase updates. These are only valid for this render\\n      // phase, which we are now aborting. Remove the updates from the queues so\\n      // they do not persist to the next render. Do not remove updates from hooks\\n      // that weren't processed.\\n      //\\n      // Only reset the updates from the queue if it has a clone. If it does\\n      // not have a clone, that means it wasn't processed, and the updates were\\n      // scheduled before we entered the render phase.\\n      var hook = currentlyRenderingFiber$1.memoizedState;\\n\\n      while (hook !== null) {\\n        var queue = hook.queue;\\n\\n        if (queue !== null) {\\n          queue.pending = null;\\n        }\\n\\n        hook = hook.next;\\n      }\\n\\n      didScheduleRenderPhaseUpdate = false;\\n    }\\n\\n    renderLanes = NoLanes;\\n    currentlyRenderingFiber$1 = null;\\n    currentHook = null;\\n    workInProgressHook = null;\\n\\n    {\\n      hookTypesDev = null;\\n      hookTypesUpdateIndexDev = -1;\\n      currentHookNameInDev = null;\\n      isUpdatingOpaqueValueInRenderPhase = false;\\n    }\\n\\n    didScheduleRenderPhaseUpdateDuringThisPass = false;\\n    localIdCounter = 0;\\n  }\\n\\n  function mountWorkInProgressHook() {\\n    var hook = {\\n      memoizedState: null,\\n      baseState: null,\\n      baseQueue: null,\\n      queue: null,\\n      next: null\\n    };\\n\\n    if (workInProgressHook === null) {\\n      // This is the first hook in the list\\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\\n    } else {\\n      // Append to the end of the list\\n      workInProgressHook = workInProgressHook.next = hook;\\n    }\\n\\n    return workInProgressHook;\\n  }\\n\\n  function updateWorkInProgressHook() {\\n    // This function is used both for updates and for re-renders triggered by a\\n    // render phase update. It assumes there is either a current hook we can\\n    // clone, or a work-in-progress hook from a previous render pass that we can\\n    // use as a base. When we reach the end of the base list, we must switch to\\n    // the dispatcher used for mounts.\\n    var nextCurrentHook;\\n\\n    if (currentHook === null) {\\n      var current = currentlyRenderingFiber$1.alternate;\\n\\n      if (current !== null) {\\n        nextCurrentHook = current.memoizedState;\\n      } else {\\n        nextCurrentHook = null;\\n      }\\n    } else {\\n      nextCurrentHook = currentHook.next;\\n    }\\n\\n    var nextWorkInProgressHook;\\n\\n    if (workInProgressHook === null) {\\n      nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\\n    } else {\\n      nextWorkInProgressHook = workInProgressHook.next;\\n    }\\n\\n    if (nextWorkInProgressHook !== null) {\\n      // There's already a work-in-progress. Reuse it.\\n      workInProgressHook = nextWorkInProgressHook;\\n      nextWorkInProgressHook = workInProgressHook.next;\\n      currentHook = nextCurrentHook;\\n    } else {\\n      // Clone from the current hook.\\n      if (nextCurrentHook === null) {\\n        throw new Error('Rendered more hooks than during the previous render.');\\n      }\\n\\n      currentHook = nextCurrentHook;\\n      var newHook = {\\n        memoizedState: currentHook.memoizedState,\\n        baseState: currentHook.baseState,\\n        baseQueue: currentHook.baseQueue,\\n        queue: currentHook.queue,\\n        next: null\\n      };\\n\\n      if (workInProgressHook === null) {\\n        // This is the first hook in the list.\\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\\n      } else {\\n        // Append to the end of the list.\\n        workInProgressHook = workInProgressHook.next = newHook;\\n      }\\n    }\\n\\n    return workInProgressHook;\\n  }\\n\\n  function createFunctionComponentUpdateQueue() {\\n    return {\\n      lastEffect: null,\\n      stores: null\\n    };\\n  }\\n\\n  function basicStateReducer(state, action) {\\n    // $FlowFixMe: Flow doesn't like mixed types\\n    return typeof action === 'function' ? action(state) : action;\\n  }\\n\\n  function mountReducer(reducer, initialArg, init) {\\n    var hook = mountWorkInProgressHook();\\n    var initialState;\\n\\n    if (init !== undefined) {\\n      initialState = init(initialArg);\\n    } else {\\n      initialState = initialArg;\\n    }\\n\\n    hook.memoizedState = hook.baseState = initialState;\\n    var queue = {\\n      pending: null,\\n      interleaved: null,\\n      lanes: NoLanes,\\n      dispatch: null,\\n      lastRenderedReducer: reducer,\\n      lastRenderedState: initialState\\n    };\\n    hook.queue = queue;\\n    var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\\n    return [hook.memoizedState, dispatch];\\n  }\\n\\n  function updateReducer(reducer, initialArg, init) {\\n    var hook = updateWorkInProgressHook();\\n    var queue = hook.queue;\\n\\n    if (queue === null) {\\n      throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\\n    }\\n\\n    queue.lastRenderedReducer = reducer;\\n    var current = currentHook; // The last rebase update that is NOT part of the base state.\\n\\n    var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\\n\\n    var pendingQueue = queue.pending;\\n\\n    if (pendingQueue !== null) {\\n      // We have new updates that haven't been processed yet.\\n      // We'll add them to the base queue.\\n      if (baseQueue !== null) {\\n        // Merge the pending queue and the base queue.\\n        var baseFirst = baseQueue.next;\\n        var pendingFirst = pendingQueue.next;\\n        baseQueue.next = pendingFirst;\\n        pendingQueue.next = baseFirst;\\n      }\\n\\n      {\\n        if (current.baseQueue !== baseQueue) {\\n          // Internal invariant that should never happen, but feasibly could in\\n          // the future if we implement resuming, or some form of that.\\n          error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\\n        }\\n      }\\n\\n      current.baseQueue = baseQueue = pendingQueue;\\n      queue.pending = null;\\n    }\\n\\n    if (baseQueue !== null) {\\n      // We have a queue to process.\\n      var first = baseQueue.next;\\n      var newState = current.baseState;\\n      var newBaseState = null;\\n      var newBaseQueueFirst = null;\\n      var newBaseQueueLast = null;\\n      var update = first;\\n\\n      do {\\n        var updateLane = update.lane;\\n\\n        if (!isSubsetOfLanes(renderLanes, updateLane)) {\\n          // Priority is insufficient. Skip this update. If this is the first\\n          // skipped update, the previous update/state is the new base\\n          // update/state.\\n          var clone = {\\n            lane: updateLane,\\n            action: update.action,\\n            hasEagerState: update.hasEagerState,\\n            eagerState: update.eagerState,\\n            next: null\\n          };\\n\\n          if (newBaseQueueLast === null) {\\n            newBaseQueueFirst = newBaseQueueLast = clone;\\n            newBaseState = newState;\\n          } else {\\n            newBaseQueueLast = newBaseQueueLast.next = clone;\\n          } // Update the remaining priority in the queue.\\n          // TODO: Don't need to accumulate this. Instead, we can remove\\n          // renderLanes from the original lanes.\\n\\n\\n          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\\n          markSkippedUpdateLanes(updateLane);\\n        } else {\\n          // This update does have sufficient priority.\\n          if (newBaseQueueLast !== null) {\\n            var _clone = {\\n              // This update is going to be committed so we never want uncommit\\n              // it. Using NoLane works because 0 is a subset of all bitmasks, so\\n              // this will never be skipped by the check above.\\n              lane: NoLane,\\n              action: update.action,\\n              hasEagerState: update.hasEagerState,\\n              eagerState: update.eagerState,\\n              next: null\\n            };\\n            newBaseQueueLast = newBaseQueueLast.next = _clone;\\n          } // Process this update.\\n\\n\\n          if (update.hasEagerState) {\\n            // If this update is a state update (not a reducer) and was processed eagerly,\\n            // we can use the eagerly computed state\\n            newState = update.eagerState;\\n          } else {\\n            var action = update.action;\\n            newState = reducer(newState, action);\\n          }\\n        }\\n\\n        update = update.next;\\n      } while (update !== null && update !== first);\\n\\n      if (newBaseQueueLast === null) {\\n        newBaseState = newState;\\n      } else {\\n        newBaseQueueLast.next = newBaseQueueFirst;\\n      } // Mark that the fiber performed work, but only if the new state is\\n      // different from the current state.\\n\\n\\n      if (!objectIs(newState, hook.memoizedState)) {\\n        markWorkInProgressReceivedUpdate();\\n      }\\n\\n      hook.memoizedState = newState;\\n      hook.baseState = newBaseState;\\n      hook.baseQueue = newBaseQueueLast;\\n      queue.lastRenderedState = newState;\\n    } // Interleaved updates are stored on a separate queue. We aren't going to\\n    // process them during this render, but we do need to track which lanes\\n    // are remaining.\\n\\n\\n    var lastInterleaved = queue.interleaved;\\n\\n    if (lastInterleaved !== null) {\\n      var interleaved = lastInterleaved;\\n\\n      do {\\n        var interleavedLane = interleaved.lane;\\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\\n        markSkippedUpdateLanes(interleavedLane);\\n        interleaved = interleaved.next;\\n      } while (interleaved !== lastInterleaved);\\n    } else if (baseQueue === null) {\\n      // `queue.lanes` is used for entangling transitions. We can set it back to\\n      // zero once the queue is empty.\\n      queue.lanes = NoLanes;\\n    }\\n\\n    var dispatch = queue.dispatch;\\n    return [hook.memoizedState, dispatch];\\n  }\\n\\n  function rerenderReducer(reducer, initialArg, init) {\\n    var hook = updateWorkInProgressHook();\\n    var queue = hook.queue;\\n\\n    if (queue === null) {\\n      throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\\n    }\\n\\n    queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\\n    // work-in-progress hook.\\n\\n    var dispatch = queue.dispatch;\\n    var lastRenderPhaseUpdate = queue.pending;\\n    var newState = hook.memoizedState;\\n\\n    if (lastRenderPhaseUpdate !== null) {\\n      // The queue doesn't persist past this render pass.\\n      queue.pending = null;\\n      var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\\n      var update = firstRenderPhaseUpdate;\\n\\n      do {\\n        // Process this render phase update. We don't have to check the\\n        // priority because it will always be the same as the current\\n        // render's.\\n        var action = update.action;\\n        newState = reducer(newState, action);\\n        update = update.next;\\n      } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\\n      // different from the current state.\\n\\n\\n      if (!objectIs(newState, hook.memoizedState)) {\\n        markWorkInProgressReceivedUpdate();\\n      }\\n\\n      hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\\n      // the base state unless the queue is empty.\\n      // TODO: Not sure if this is the desired semantics, but it's what we\\n      // do for gDSFP. I can't remember why.\\n\\n      if (hook.baseQueue === null) {\\n        hook.baseState = newState;\\n      }\\n\\n      queue.lastRenderedState = newState;\\n    }\\n\\n    return [newState, dispatch];\\n  }\\n\\n  function mountMutableSource(source, getSnapshot, subscribe) {\\n    {\\n      return undefined;\\n    }\\n  }\\n\\n  function updateMutableSource(source, getSnapshot, subscribe) {\\n    {\\n      return undefined;\\n    }\\n  }\\n\\n  function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\\n    var fiber = currentlyRenderingFiber$1;\\n    var hook = mountWorkInProgressHook();\\n    var nextSnapshot;\\n    var isHydrating = getIsHydrating();\\n\\n    if (isHydrating) {\\n      if (getServerSnapshot === undefined) {\\n        throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\\n      }\\n\\n      nextSnapshot = getServerSnapshot();\\n\\n      {\\n        if (!didWarnUncachedGetSnapshot) {\\n          if (nextSnapshot !== getServerSnapshot()) {\\n            error('The result of getServerSnapshot should be cached to avoid an infinite loop');\\n\\n            didWarnUncachedGetSnapshot = true;\\n          }\\n        }\\n      }\\n    } else {\\n      nextSnapshot = getSnapshot();\\n\\n      {\\n        if (!didWarnUncachedGetSnapshot) {\\n          var cachedSnapshot = getSnapshot();\\n\\n          if (!objectIs(nextSnapshot, cachedSnapshot)) {\\n            error('The result of getSnapshot should be cached to avoid an infinite loop');\\n\\n            didWarnUncachedGetSnapshot = true;\\n          }\\n        }\\n      } // Unless we're rendering a blocking lane, schedule a consistency check.\\n      // Right before committing, we will walk the tree and check if any of the\\n      // stores were mutated.\\n      //\\n      // We won't do this if we're hydrating server-rendered content, because if\\n      // the content is stale, it's already visible anyway. Instead we'll patch\\n      // it up in a passive effect.\\n\\n\\n      var root = getWorkInProgressRoot();\\n\\n      if (root === null) {\\n        throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\\n      }\\n\\n      if (!includesBlockingLane(root, renderLanes)) {\\n        pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\\n      }\\n    } // Read the current snapshot from the store on every render. This breaks the\\n    // normal rules of React, and only works because store updates are\\n    // always synchronous.\\n\\n\\n    hook.memoizedState = nextSnapshot;\\n    var inst = {\\n      value: nextSnapshot,\\n      getSnapshot: getSnapshot\\n    };\\n    hook.queue = inst; // Schedule an effect to subscribe to the store.\\n\\n    mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\\n    // this whenever subscribe, getSnapshot, or value changes. Because there's no\\n    // clean-up function, and we track the deps correctly, we can call pushEffect\\n    // directly, without storing any additional state. For the same reason, we\\n    // don't need to set a static flag, either.\\n    // TODO: We can move this to the passive phase once we add a pre-commit\\n    // consistency check. See the next comment.\\n\\n    fiber.flags |= Passive;\\n    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\\n    return nextSnapshot;\\n  }\\n\\n  function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\\n    var fiber = currentlyRenderingFiber$1;\\n    var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\\n    // normal rules of React, and only works because store updates are\\n    // always synchronous.\\n\\n    var nextSnapshot = getSnapshot();\\n\\n    {\\n      if (!didWarnUncachedGetSnapshot) {\\n        var cachedSnapshot = getSnapshot();\\n\\n        if (!objectIs(nextSnapshot, cachedSnapshot)) {\\n          error('The result of getSnapshot should be cached to avoid an infinite loop');\\n\\n          didWarnUncachedGetSnapshot = true;\\n        }\\n      }\\n    }\\n\\n    var prevSnapshot = hook.memoizedState;\\n    var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\\n\\n    if (snapshotChanged) {\\n      hook.memoizedState = nextSnapshot;\\n      markWorkInProgressReceivedUpdate();\\n    }\\n\\n    var inst = hook.queue;\\n    updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\\n    // commit phase if there was an interleaved mutation. In concurrent mode\\n    // this can happen all the time, but even in synchronous mode, an earlier\\n    // effect may have mutated the store.\\n\\n    if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\\n    // checking whether we scheduled a subscription effect above.\\n    workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\\n      fiber.flags |= Passive;\\n      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\\n      // Right before committing, we will walk the tree and check if any of the\\n      // stores were mutated.\\n\\n      var root = getWorkInProgressRoot();\\n\\n      if (root === null) {\\n        throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\\n      }\\n\\n      if (!includesBlockingLane(root, renderLanes)) {\\n        pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\\n      }\\n    }\\n\\n    return nextSnapshot;\\n  }\\n\\n  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\\n    fiber.flags |= StoreConsistency;\\n    var check = {\\n      getSnapshot: getSnapshot,\\n      value: renderedSnapshot\\n    };\\n    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\\n\\n    if (componentUpdateQueue === null) {\\n      componentUpdateQueue = createFunctionComponentUpdateQueue();\\n      currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\\n      componentUpdateQueue.stores = [check];\\n    } else {\\n      var stores = componentUpdateQueue.stores;\\n\\n      if (stores === null) {\\n        componentUpdateQueue.stores = [check];\\n      } else {\\n        stores.push(check);\\n      }\\n    }\\n  }\\n\\n  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\\n    // These are updated in the passive phase\\n    inst.value = nextSnapshot;\\n    inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\\n    // have been in an event that fired before the passive effects, or it could\\n    // have been in a layout effect. In that case, we would have used the old\\n    // snapsho and getSnapshot values to bail out. We need to check one more time.\\n\\n    if (checkIfSnapshotChanged(inst)) {\\n      // Force a re-render.\\n      forceStoreRerender(fiber);\\n    }\\n  }\\n\\n  function subscribeToStore(fiber, inst, subscribe) {\\n    var handleStoreChange = function () {\\n      // The store changed. Check if the snapshot changed since the last time we\\n      // read from the store.\\n      if (checkIfSnapshotChanged(inst)) {\\n        // Force a re-render.\\n        forceStoreRerender(fiber);\\n      }\\n    }; // Subscribe to the store and return a clean-up function.\\n\\n\\n    return subscribe(handleStoreChange);\\n  }\\n\\n  function checkIfSnapshotChanged(inst) {\\n    var latestGetSnapshot = inst.getSnapshot;\\n    var prevValue = inst.value;\\n\\n    try {\\n      var nextValue = latestGetSnapshot();\\n      return !objectIs(prevValue, nextValue);\\n    } catch (error) {\\n      return true;\\n    }\\n  }\\n\\n  function forceStoreRerender(fiber) {\\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n    if (root !== null) {\\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n    }\\n  }\\n\\n  function mountState(initialState) {\\n    var hook = mountWorkInProgressHook();\\n\\n    if (typeof initialState === 'function') {\\n      // $FlowFixMe: Flow doesn't like mixed types\\n      initialState = initialState();\\n    }\\n\\n    hook.memoizedState = hook.baseState = initialState;\\n    var queue = {\\n      pending: null,\\n      interleaved: null,\\n      lanes: NoLanes,\\n      dispatch: null,\\n      lastRenderedReducer: basicStateReducer,\\n      lastRenderedState: initialState\\n    };\\n    hook.queue = queue;\\n    var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\\n    return [hook.memoizedState, dispatch];\\n  }\\n\\n  function updateState(initialState) {\\n    return updateReducer(basicStateReducer);\\n  }\\n\\n  function rerenderState(initialState) {\\n    return rerenderReducer(basicStateReducer);\\n  }\\n\\n  function pushEffect(tag, create, destroy, deps) {\\n    var effect = {\\n      tag: tag,\\n      create: create,\\n      destroy: destroy,\\n      deps: deps,\\n      // Circular\\n      next: null\\n    };\\n    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\\n\\n    if (componentUpdateQueue === null) {\\n      componentUpdateQueue = createFunctionComponentUpdateQueue();\\n      currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\\n      componentUpdateQueue.lastEffect = effect.next = effect;\\n    } else {\\n      var lastEffect = componentUpdateQueue.lastEffect;\\n\\n      if (lastEffect === null) {\\n        componentUpdateQueue.lastEffect = effect.next = effect;\\n      } else {\\n        var firstEffect = lastEffect.next;\\n        lastEffect.next = effect;\\n        effect.next = firstEffect;\\n        componentUpdateQueue.lastEffect = effect;\\n      }\\n    }\\n\\n    return effect;\\n  }\\n\\n  function mountRef(initialValue) {\\n    var hook = mountWorkInProgressHook();\\n\\n    {\\n      var _ref2 = {\\n        current: initialValue\\n      };\\n      hook.memoizedState = _ref2;\\n      return _ref2;\\n    }\\n  }\\n\\n  function updateRef(initialValue) {\\n    var hook = updateWorkInProgressHook();\\n    return hook.memoizedState;\\n  }\\n\\n  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\\n    var hook = mountWorkInProgressHook();\\n    var nextDeps = deps === undefined ? null : deps;\\n    currentlyRenderingFiber$1.flags |= fiberFlags;\\n    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\\n  }\\n\\n  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\\n    var hook = updateWorkInProgressHook();\\n    var nextDeps = deps === undefined ? null : deps;\\n    var destroy = undefined;\\n\\n    if (currentHook !== null) {\\n      var prevEffect = currentHook.memoizedState;\\n      destroy = prevEffect.destroy;\\n\\n      if (nextDeps !== null) {\\n        var prevDeps = prevEffect.deps;\\n\\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\\n          hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\\n          return;\\n        }\\n      }\\n    }\\n\\n    currentlyRenderingFiber$1.flags |= fiberFlags;\\n    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\\n  }\\n\\n  function mountEffect(create, deps) {\\n    if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\\n      return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\\n    } else {\\n      return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\\n    }\\n  }\\n\\n  function updateEffect(create, deps) {\\n    return updateEffectImpl(Passive, Passive$1, create, deps);\\n  }\\n\\n  function mountInsertionEffect(create, deps) {\\n    return mountEffectImpl(Update, Insertion, create, deps);\\n  }\\n\\n  function updateInsertionEffect(create, deps) {\\n    return updateEffectImpl(Update, Insertion, create, deps);\\n  }\\n\\n  function mountLayoutEffect(create, deps) {\\n    var fiberFlags = Update;\\n\\n    {\\n      fiberFlags |= LayoutStatic;\\n    }\\n\\n    if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\\n      fiberFlags |= MountLayoutDev;\\n    }\\n\\n    return mountEffectImpl(fiberFlags, Layout, create, deps);\\n  }\\n\\n  function updateLayoutEffect(create, deps) {\\n    return updateEffectImpl(Update, Layout, create, deps);\\n  }\\n\\n  function imperativeHandleEffect(create, ref) {\\n    if (typeof ref === 'function') {\\n      var refCallback = ref;\\n\\n      var _inst = create();\\n\\n      refCallback(_inst);\\n      return function () {\\n        refCallback(null);\\n      };\\n    } else if (ref !== null && ref !== undefined) {\\n      var refObject = ref;\\n\\n      {\\n        if (!refObject.hasOwnProperty('current')) {\\n          error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\\n        }\\n      }\\n\\n      var _inst2 = create();\\n\\n      refObject.current = _inst2;\\n      return function () {\\n        refObject.current = null;\\n      };\\n    }\\n  }\\n\\n  function mountImperativeHandle(ref, create, deps) {\\n    {\\n      if (typeof create !== 'function') {\\n        error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\\n      }\\n    } // TODO: If deps are provided, should we skip comparing the ref itself?\\n\\n\\n    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\\n    var fiberFlags = Update;\\n\\n    {\\n      fiberFlags |= LayoutStatic;\\n    }\\n\\n    if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\\n      fiberFlags |= MountLayoutDev;\\n    }\\n\\n    return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\\n  }\\n\\n  function updateImperativeHandle(ref, create, deps) {\\n    {\\n      if (typeof create !== 'function') {\\n        error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\\n      }\\n    } // TODO: If deps are provided, should we skip comparing the ref itself?\\n\\n\\n    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\\n    return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\\n  }\\n\\n  function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\\n    // The react-debug-hooks package injects its own implementation\\n    // so that e.g. DevTools can display custom hook values.\\n  }\\n\\n  var updateDebugValue = mountDebugValue;\\n\\n  function mountCallback(callback, deps) {\\n    var hook = mountWorkInProgressHook();\\n    var nextDeps = deps === undefined ? null : deps;\\n    hook.memoizedState = [callback, nextDeps];\\n    return callback;\\n  }\\n\\n  function updateCallback(callback, deps) {\\n    var hook = updateWorkInProgressHook();\\n    var nextDeps = deps === undefined ? null : deps;\\n    var prevState = hook.memoizedState;\\n\\n    if (prevState !== null) {\\n      if (nextDeps !== null) {\\n        var prevDeps = prevState[1];\\n\\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\\n          return prevState[0];\\n        }\\n      }\\n    }\\n\\n    hook.memoizedState = [callback, nextDeps];\\n    return callback;\\n  }\\n\\n  function mountMemo(nextCreate, deps) {\\n    var hook = mountWorkInProgressHook();\\n    var nextDeps = deps === undefined ? null : deps;\\n    var nextValue = nextCreate();\\n    hook.memoizedState = [nextValue, nextDeps];\\n    return nextValue;\\n  }\\n\\n  function updateMemo(nextCreate, deps) {\\n    var hook = updateWorkInProgressHook();\\n    var nextDeps = deps === undefined ? null : deps;\\n    var prevState = hook.memoizedState;\\n\\n    if (prevState !== null) {\\n      // Assume these are defined. If they're not, areHookInputsEqual will warn.\\n      if (nextDeps !== null) {\\n        var prevDeps = prevState[1];\\n\\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\\n          return prevState[0];\\n        }\\n      }\\n    }\\n\\n    var nextValue = nextCreate();\\n    hook.memoizedState = [nextValue, nextDeps];\\n    return nextValue;\\n  }\\n\\n  function mountDeferredValue(value) {\\n    var hook = mountWorkInProgressHook();\\n    hook.memoizedState = value;\\n    return value;\\n  }\\n\\n  function updateDeferredValue(value) {\\n    var hook = updateWorkInProgressHook();\\n    var resolvedCurrentHook = currentHook;\\n    var prevValue = resolvedCurrentHook.memoizedState;\\n    return updateDeferredValueImpl(hook, prevValue, value);\\n  }\\n\\n  function rerenderDeferredValue(value) {\\n    var hook = updateWorkInProgressHook();\\n\\n    if (currentHook === null) {\\n      // This is a rerender during a mount.\\n      hook.memoizedState = value;\\n      return value;\\n    } else {\\n      // This is a rerender during an update.\\n      var prevValue = currentHook.memoizedState;\\n      return updateDeferredValueImpl(hook, prevValue, value);\\n    }\\n  }\\n\\n  function updateDeferredValueImpl(hook, prevValue, value) {\\n    var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\\n\\n    if (shouldDeferValue) {\\n      // This is an urgent update. If the value has changed, keep using the\\n      // previous value and spawn a deferred render to update it later.\\n      if (!objectIs(value, prevValue)) {\\n        // Schedule a deferred render\\n        var deferredLane = claimNextTransitionLane();\\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\\n        markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\\n        // from the latest value. The name \\\"baseState\\\" doesn't really match how we\\n        // use it because we're reusing a state hook field instead of creating a\\n        // new one.\\n\\n        hook.baseState = true;\\n      } // Reuse the previous value\\n\\n\\n      return prevValue;\\n    } else {\\n      // This is not an urgent update, so we can use the latest value regardless\\n      // of what it is. No need to defer it.\\n      // However, if we're currently inside a spawned render, then we need to mark\\n      // this as an update to prevent the fiber from bailing out.\\n      //\\n      // `baseState` is true when the current value is different from the rendered\\n      // value. The name doesn't really match how we use it because we're reusing\\n      // a state hook field instead of creating a new one.\\n      if (hook.baseState) {\\n        // Flip this back to false.\\n        hook.baseState = false;\\n        markWorkInProgressReceivedUpdate();\\n      }\\n\\n      hook.memoizedState = value;\\n      return value;\\n    }\\n  }\\n\\n  function startTransition(setPending, callback, options) {\\n    var previousPriority = getCurrentUpdatePriority();\\n    setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\\n    setPending(true);\\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\\n    ReactCurrentBatchConfig$2.transition = {};\\n    var currentTransition = ReactCurrentBatchConfig$2.transition;\\n\\n    {\\n      ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();\\n    }\\n\\n    try {\\n      setPending(false);\\n      callback();\\n    } finally {\\n      setCurrentUpdatePriority(previousPriority);\\n      ReactCurrentBatchConfig$2.transition = prevTransition;\\n\\n      {\\n        if (prevTransition === null && currentTransition._updatedFibers) {\\n          var updatedFibersCount = currentTransition._updatedFibers.size;\\n\\n          if (updatedFibersCount > 10) {\\n            warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\\n          }\\n\\n          currentTransition._updatedFibers.clear();\\n        }\\n      }\\n    }\\n  }\\n\\n  function mountTransition() {\\n    var _mountState = mountState(false),\\n        isPending = _mountState[0],\\n        setPending = _mountState[1]; // The `start` method never changes.\\n\\n\\n    var start = startTransition.bind(null, setPending);\\n    var hook = mountWorkInProgressHook();\\n    hook.memoizedState = start;\\n    return [isPending, start];\\n  }\\n\\n  function updateTransition() {\\n    var _updateState = updateState(),\\n        isPending = _updateState[0];\\n\\n    var hook = updateWorkInProgressHook();\\n    var start = hook.memoizedState;\\n    return [isPending, start];\\n  }\\n\\n  function rerenderTransition() {\\n    var _rerenderState = rerenderState(),\\n        isPending = _rerenderState[0];\\n\\n    var hook = updateWorkInProgressHook();\\n    var start = hook.memoizedState;\\n    return [isPending, start];\\n  }\\n\\n  var isUpdatingOpaqueValueInRenderPhase = false;\\n  function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\\n    {\\n      return isUpdatingOpaqueValueInRenderPhase;\\n    }\\n  }\\n\\n  function mountId() {\\n    var hook = mountWorkInProgressHook();\\n    var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\\n    // should do this in Fiber, too? Deferring this decision for now because\\n    // there's no other place to store the prefix except for an internal field on\\n    // the public createRoot object, which the fiber tree does not currently have\\n    // a reference to.\\n\\n    var identifierPrefix = root.identifierPrefix;\\n    var id;\\n\\n    if (getIsHydrating()) {\\n      var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\\n\\n      id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\\n      // that represents the position of this useId hook among all the useId\\n      // hooks for this fiber.\\n\\n      var localId = localIdCounter++;\\n\\n      if (localId > 0) {\\n        id += 'H' + localId.toString(32);\\n      }\\n\\n      id += ':';\\n    } else {\\n      // Use a lowercase r prefix for client-generated ids.\\n      var globalClientId = globalClientIdCounter++;\\n      id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\\n    }\\n\\n    hook.memoizedState = id;\\n    return id;\\n  }\\n\\n  function updateId() {\\n    var hook = updateWorkInProgressHook();\\n    var id = hook.memoizedState;\\n    return id;\\n  }\\n\\n  function dispatchReducerAction(fiber, queue, action) {\\n    {\\n      if (typeof arguments[3] === 'function') {\\n        error(\\\"State updates from the useState() and useReducer() Hooks don't support the \\\" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\\n      }\\n    }\\n\\n    var lane = requestUpdateLane(fiber);\\n    var update = {\\n      lane: lane,\\n      action: action,\\n      hasEagerState: false,\\n      eagerState: null,\\n      next: null\\n    };\\n\\n    if (isRenderPhaseUpdate(fiber)) {\\n      enqueueRenderPhaseUpdate(queue, update);\\n    } else {\\n      var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\\n\\n      if (root !== null) {\\n        var eventTime = requestEventTime();\\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\\n        entangleTransitionUpdate(root, queue, lane);\\n      }\\n    }\\n\\n    markUpdateInDevTools(fiber, lane);\\n  }\\n\\n  function dispatchSetState(fiber, queue, action) {\\n    {\\n      if (typeof arguments[3] === 'function') {\\n        error(\\\"State updates from the useState() and useReducer() Hooks don't support the \\\" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\\n      }\\n    }\\n\\n    var lane = requestUpdateLane(fiber);\\n    var update = {\\n      lane: lane,\\n      action: action,\\n      hasEagerState: false,\\n      eagerState: null,\\n      next: null\\n    };\\n\\n    if (isRenderPhaseUpdate(fiber)) {\\n      enqueueRenderPhaseUpdate(queue, update);\\n    } else {\\n      var alternate = fiber.alternate;\\n\\n      if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\\n        // The queue is currently empty, which means we can eagerly compute the\\n        // next state before entering the render phase. If the new state is the\\n        // same as the current state, we may be able to bail out entirely.\\n        var lastRenderedReducer = queue.lastRenderedReducer;\\n\\n        if (lastRenderedReducer !== null) {\\n          var prevDispatcher;\\n\\n          {\\n            prevDispatcher = ReactCurrentDispatcher$1.current;\\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n          }\\n\\n          try {\\n            var currentState = queue.lastRenderedState;\\n            var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\\n            // it, on the update object. If the reducer hasn't changed by the\\n            // time we enter the render phase, then the eager state can be used\\n            // without calling the reducer again.\\n\\n            update.hasEagerState = true;\\n            update.eagerState = eagerState;\\n\\n            if (objectIs(eagerState, currentState)) {\\n              // Fast path. We can bail out without scheduling React to re-render.\\n              // It's still possible that we'll need to rebase this update later,\\n              // if the component re-renders for a different reason and by that\\n              // time the reducer has changed.\\n              // TODO: Do we still need to entangle transitions in this case?\\n              enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\\n              return;\\n            }\\n          } catch (error) {// Suppress the error. It will throw again in the render phase.\\n          } finally {\\n            {\\n              ReactCurrentDispatcher$1.current = prevDispatcher;\\n            }\\n          }\\n        }\\n      }\\n\\n      var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\\n\\n      if (root !== null) {\\n        var eventTime = requestEventTime();\\n        scheduleUpdateOnFiber(root, fiber, lane, eventTime);\\n        entangleTransitionUpdate(root, queue, lane);\\n      }\\n    }\\n\\n    markUpdateInDevTools(fiber, lane);\\n  }\\n\\n  function isRenderPhaseUpdate(fiber) {\\n    var alternate = fiber.alternate;\\n    return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\\n  }\\n\\n  function enqueueRenderPhaseUpdate(queue, update) {\\n    // This is a render phase update. Stash it in a lazily-created map of\\n    // queue -> linked list of updates. After this render pass, we'll restart\\n    // and apply the stashed updates on top of the work-in-progress hook.\\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\\n    var pending = queue.pending;\\n\\n    if (pending === null) {\\n      // This is the first update. Create a circular list.\\n      update.next = update;\\n    } else {\\n      update.next = pending.next;\\n      pending.next = update;\\n    }\\n\\n    queue.pending = update;\\n  } // TODO: Move to ReactFiberConcurrentUpdates?\\n\\n\\n  function entangleTransitionUpdate(root, queue, lane) {\\n    if (isTransitionLane(lane)) {\\n      var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\\n      // must have finished. We can remove them from the shared queue, which\\n      // represents a superset of the actually pending lanes. In some cases we\\n      // may entangle more than we need to, but that's OK. In fact it's worse if\\n      // we *don't* entangle when we should.\\n\\n      queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\\n\\n      var newQueueLanes = mergeLanes(queueLanes, lane);\\n      queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\\n      // the lane finished since the last time we entangled it. So we need to\\n      // entangle it again, just to be sure.\\n\\n      markRootEntangled(root, newQueueLanes);\\n    }\\n  }\\n\\n  function markUpdateInDevTools(fiber, lane, action) {\\n\\n    {\\n      markStateUpdateScheduled(fiber, lane);\\n    }\\n  }\\n\\n  var ContextOnlyDispatcher = {\\n    readContext: readContext,\\n    useCallback: throwInvalidHookError,\\n    useContext: throwInvalidHookError,\\n    useEffect: throwInvalidHookError,\\n    useImperativeHandle: throwInvalidHookError,\\n    useInsertionEffect: throwInvalidHookError,\\n    useLayoutEffect: throwInvalidHookError,\\n    useMemo: throwInvalidHookError,\\n    useReducer: throwInvalidHookError,\\n    useRef: throwInvalidHookError,\\n    useState: throwInvalidHookError,\\n    useDebugValue: throwInvalidHookError,\\n    useDeferredValue: throwInvalidHookError,\\n    useTransition: throwInvalidHookError,\\n    useMutableSource: throwInvalidHookError,\\n    useSyncExternalStore: throwInvalidHookError,\\n    useId: throwInvalidHookError,\\n    unstable_isNewReconciler: enableNewReconciler\\n  };\\n\\n  var HooksDispatcherOnMountInDEV = null;\\n  var HooksDispatcherOnMountWithHookTypesInDEV = null;\\n  var HooksDispatcherOnUpdateInDEV = null;\\n  var HooksDispatcherOnRerenderInDEV = null;\\n  var InvalidNestedHooksDispatcherOnMountInDEV = null;\\n  var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\\n  var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\\n\\n  {\\n    var warnInvalidContextAccess = function () {\\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\\n    };\\n\\n    var warnInvalidHookAccess = function () {\\n      error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\\n    };\\n\\n    HooksDispatcherOnMountInDEV = {\\n      readContext: function (context) {\\n        return readContext(context);\\n      },\\n      useCallback: function (callback, deps) {\\n        currentHookNameInDev = 'useCallback';\\n        mountHookTypesDev();\\n        checkDepsAreArrayDev(deps);\\n        return mountCallback(callback, deps);\\n      },\\n      useContext: function (context) {\\n        currentHookNameInDev = 'useContext';\\n        mountHookTypesDev();\\n        return readContext(context);\\n      },\\n      useEffect: function (create, deps) {\\n        currentHookNameInDev = 'useEffect';\\n        mountHookTypesDev();\\n        checkDepsAreArrayDev(deps);\\n        return mountEffect(create, deps);\\n      },\\n      useImperativeHandle: function (ref, create, deps) {\\n        currentHookNameInDev = 'useImperativeHandle';\\n        mountHookTypesDev();\\n        checkDepsAreArrayDev(deps);\\n        return mountImperativeHandle(ref, create, deps);\\n      },\\n      useInsertionEffect: function (create, deps) {\\n        currentHookNameInDev = 'useInsertionEffect';\\n        mountHookTypesDev();\\n        checkDepsAreArrayDev(deps);\\n        return mountInsertionEffect(create, deps);\\n      },\\n      useLayoutEffect: function (create, deps) {\\n        currentHookNameInDev = 'useLayoutEffect';\\n        mountHookTypesDev();\\n        checkDepsAreArrayDev(deps);\\n        return mountLayoutEffect(create, deps);\\n      },\\n      useMemo: function (create, deps) {\\n        currentHookNameInDev = 'useMemo';\\n        mountHookTypesDev();\\n        checkDepsAreArrayDev(deps);\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountMemo(create, deps);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useReducer: function (reducer, initialArg, init) {\\n        currentHookNameInDev = 'useReducer';\\n        mountHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountReducer(reducer, initialArg, init);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useRef: function (initialValue) {\\n        currentHookNameInDev = 'useRef';\\n        mountHookTypesDev();\\n        return mountRef(initialValue);\\n      },\\n      useState: function (initialState) {\\n        currentHookNameInDev = 'useState';\\n        mountHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountState(initialState);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useDebugValue: function (value, formatterFn) {\\n        currentHookNameInDev = 'useDebugValue';\\n        mountHookTypesDev();\\n        return mountDebugValue();\\n      },\\n      useDeferredValue: function (value) {\\n        currentHookNameInDev = 'useDeferredValue';\\n        mountHookTypesDev();\\n        return mountDeferredValue(value);\\n      },\\n      useTransition: function () {\\n        currentHookNameInDev = 'useTransition';\\n        mountHookTypesDev();\\n        return mountTransition();\\n      },\\n      useMutableSource: function (source, getSnapshot, subscribe) {\\n        currentHookNameInDev = 'useMutableSource';\\n        mountHookTypesDev();\\n        return mountMutableSource();\\n      },\\n      useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\\n        currentHookNameInDev = 'useSyncExternalStore';\\n        mountHookTypesDev();\\n        return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\\n      },\\n      useId: function () {\\n        currentHookNameInDev = 'useId';\\n        mountHookTypesDev();\\n        return mountId();\\n      },\\n      unstable_isNewReconciler: enableNewReconciler\\n    };\\n\\n    HooksDispatcherOnMountWithHookTypesInDEV = {\\n      readContext: function (context) {\\n        return readContext(context);\\n      },\\n      useCallback: function (callback, deps) {\\n        currentHookNameInDev = 'useCallback';\\n        updateHookTypesDev();\\n        return mountCallback(callback, deps);\\n      },\\n      useContext: function (context) {\\n        currentHookNameInDev = 'useContext';\\n        updateHookTypesDev();\\n        return readContext(context);\\n      },\\n      useEffect: function (create, deps) {\\n        currentHookNameInDev = 'useEffect';\\n        updateHookTypesDev();\\n        return mountEffect(create, deps);\\n      },\\n      useImperativeHandle: function (ref, create, deps) {\\n        currentHookNameInDev = 'useImperativeHandle';\\n        updateHookTypesDev();\\n        return mountImperativeHandle(ref, create, deps);\\n      },\\n      useInsertionEffect: function (create, deps) {\\n        currentHookNameInDev = 'useInsertionEffect';\\n        updateHookTypesDev();\\n        return mountInsertionEffect(create, deps);\\n      },\\n      useLayoutEffect: function (create, deps) {\\n        currentHookNameInDev = 'useLayoutEffect';\\n        updateHookTypesDev();\\n        return mountLayoutEffect(create, deps);\\n      },\\n      useMemo: function (create, deps) {\\n        currentHookNameInDev = 'useMemo';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountMemo(create, deps);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useReducer: function (reducer, initialArg, init) {\\n        currentHookNameInDev = 'useReducer';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountReducer(reducer, initialArg, init);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useRef: function (initialValue) {\\n        currentHookNameInDev = 'useRef';\\n        updateHookTypesDev();\\n        return mountRef(initialValue);\\n      },\\n      useState: function (initialState) {\\n        currentHookNameInDev = 'useState';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountState(initialState);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useDebugValue: function (value, formatterFn) {\\n        currentHookNameInDev = 'useDebugValue';\\n        updateHookTypesDev();\\n        return mountDebugValue();\\n      },\\n      useDeferredValue: function (value) {\\n        currentHookNameInDev = 'useDeferredValue';\\n        updateHookTypesDev();\\n        return mountDeferredValue(value);\\n      },\\n      useTransition: function () {\\n        currentHookNameInDev = 'useTransition';\\n        updateHookTypesDev();\\n        return mountTransition();\\n      },\\n      useMutableSource: function (source, getSnapshot, subscribe) {\\n        currentHookNameInDev = 'useMutableSource';\\n        updateHookTypesDev();\\n        return mountMutableSource();\\n      },\\n      useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\\n        currentHookNameInDev = 'useSyncExternalStore';\\n        updateHookTypesDev();\\n        return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\\n      },\\n      useId: function () {\\n        currentHookNameInDev = 'useId';\\n        updateHookTypesDev();\\n        return mountId();\\n      },\\n      unstable_isNewReconciler: enableNewReconciler\\n    };\\n\\n    HooksDispatcherOnUpdateInDEV = {\\n      readContext: function (context) {\\n        return readContext(context);\\n      },\\n      useCallback: function (callback, deps) {\\n        currentHookNameInDev = 'useCallback';\\n        updateHookTypesDev();\\n        return updateCallback(callback, deps);\\n      },\\n      useContext: function (context) {\\n        currentHookNameInDev = 'useContext';\\n        updateHookTypesDev();\\n        return readContext(context);\\n      },\\n      useEffect: function (create, deps) {\\n        currentHookNameInDev = 'useEffect';\\n        updateHookTypesDev();\\n        return updateEffect(create, deps);\\n      },\\n      useImperativeHandle: function (ref, create, deps) {\\n        currentHookNameInDev = 'useImperativeHandle';\\n        updateHookTypesDev();\\n        return updateImperativeHandle(ref, create, deps);\\n      },\\n      useInsertionEffect: function (create, deps) {\\n        currentHookNameInDev = 'useInsertionEffect';\\n        updateHookTypesDev();\\n        return updateInsertionEffect(create, deps);\\n      },\\n      useLayoutEffect: function (create, deps) {\\n        currentHookNameInDev = 'useLayoutEffect';\\n        updateHookTypesDev();\\n        return updateLayoutEffect(create, deps);\\n      },\\n      useMemo: function (create, deps) {\\n        currentHookNameInDev = 'useMemo';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return updateMemo(create, deps);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useReducer: function (reducer, initialArg, init) {\\n        currentHookNameInDev = 'useReducer';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return updateReducer(reducer, initialArg, init);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useRef: function (initialValue) {\\n        currentHookNameInDev = 'useRef';\\n        updateHookTypesDev();\\n        return updateRef();\\n      },\\n      useState: function (initialState) {\\n        currentHookNameInDev = 'useState';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return updateState(initialState);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useDebugValue: function (value, formatterFn) {\\n        currentHookNameInDev = 'useDebugValue';\\n        updateHookTypesDev();\\n        return updateDebugValue();\\n      },\\n      useDeferredValue: function (value) {\\n        currentHookNameInDev = 'useDeferredValue';\\n        updateHookTypesDev();\\n        return updateDeferredValue(value);\\n      },\\n      useTransition: function () {\\n        currentHookNameInDev = 'useTransition';\\n        updateHookTypesDev();\\n        return updateTransition();\\n      },\\n      useMutableSource: function (source, getSnapshot, subscribe) {\\n        currentHookNameInDev = 'useMutableSource';\\n        updateHookTypesDev();\\n        return updateMutableSource();\\n      },\\n      useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\\n        currentHookNameInDev = 'useSyncExternalStore';\\n        updateHookTypesDev();\\n        return updateSyncExternalStore(subscribe, getSnapshot);\\n      },\\n      useId: function () {\\n        currentHookNameInDev = 'useId';\\n        updateHookTypesDev();\\n        return updateId();\\n      },\\n      unstable_isNewReconciler: enableNewReconciler\\n    };\\n\\n    HooksDispatcherOnRerenderInDEV = {\\n      readContext: function (context) {\\n        return readContext(context);\\n      },\\n      useCallback: function (callback, deps) {\\n        currentHookNameInDev = 'useCallback';\\n        updateHookTypesDev();\\n        return updateCallback(callback, deps);\\n      },\\n      useContext: function (context) {\\n        currentHookNameInDev = 'useContext';\\n        updateHookTypesDev();\\n        return readContext(context);\\n      },\\n      useEffect: function (create, deps) {\\n        currentHookNameInDev = 'useEffect';\\n        updateHookTypesDev();\\n        return updateEffect(create, deps);\\n      },\\n      useImperativeHandle: function (ref, create, deps) {\\n        currentHookNameInDev = 'useImperativeHandle';\\n        updateHookTypesDev();\\n        return updateImperativeHandle(ref, create, deps);\\n      },\\n      useInsertionEffect: function (create, deps) {\\n        currentHookNameInDev = 'useInsertionEffect';\\n        updateHookTypesDev();\\n        return updateInsertionEffect(create, deps);\\n      },\\n      useLayoutEffect: function (create, deps) {\\n        currentHookNameInDev = 'useLayoutEffect';\\n        updateHookTypesDev();\\n        return updateLayoutEffect(create, deps);\\n      },\\n      useMemo: function (create, deps) {\\n        currentHookNameInDev = 'useMemo';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\\n\\n        try {\\n          return updateMemo(create, deps);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useReducer: function (reducer, initialArg, init) {\\n        currentHookNameInDev = 'useReducer';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\\n\\n        try {\\n          return rerenderReducer(reducer, initialArg, init);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useRef: function (initialValue) {\\n        currentHookNameInDev = 'useRef';\\n        updateHookTypesDev();\\n        return updateRef();\\n      },\\n      useState: function (initialState) {\\n        currentHookNameInDev = 'useState';\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\\n\\n        try {\\n          return rerenderState(initialState);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useDebugValue: function (value, formatterFn) {\\n        currentHookNameInDev = 'useDebugValue';\\n        updateHookTypesDev();\\n        return updateDebugValue();\\n      },\\n      useDeferredValue: function (value) {\\n        currentHookNameInDev = 'useDeferredValue';\\n        updateHookTypesDev();\\n        return rerenderDeferredValue(value);\\n      },\\n      useTransition: function () {\\n        currentHookNameInDev = 'useTransition';\\n        updateHookTypesDev();\\n        return rerenderTransition();\\n      },\\n      useMutableSource: function (source, getSnapshot, subscribe) {\\n        currentHookNameInDev = 'useMutableSource';\\n        updateHookTypesDev();\\n        return updateMutableSource();\\n      },\\n      useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\\n        currentHookNameInDev = 'useSyncExternalStore';\\n        updateHookTypesDev();\\n        return updateSyncExternalStore(subscribe, getSnapshot);\\n      },\\n      useId: function () {\\n        currentHookNameInDev = 'useId';\\n        updateHookTypesDev();\\n        return updateId();\\n      },\\n      unstable_isNewReconciler: enableNewReconciler\\n    };\\n\\n    InvalidNestedHooksDispatcherOnMountInDEV = {\\n      readContext: function (context) {\\n        warnInvalidContextAccess();\\n        return readContext(context);\\n      },\\n      useCallback: function (callback, deps) {\\n        currentHookNameInDev = 'useCallback';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountCallback(callback, deps);\\n      },\\n      useContext: function (context) {\\n        currentHookNameInDev = 'useContext';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return readContext(context);\\n      },\\n      useEffect: function (create, deps) {\\n        currentHookNameInDev = 'useEffect';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountEffect(create, deps);\\n      },\\n      useImperativeHandle: function (ref, create, deps) {\\n        currentHookNameInDev = 'useImperativeHandle';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountImperativeHandle(ref, create, deps);\\n      },\\n      useInsertionEffect: function (create, deps) {\\n        currentHookNameInDev = 'useInsertionEffect';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountInsertionEffect(create, deps);\\n      },\\n      useLayoutEffect: function (create, deps) {\\n        currentHookNameInDev = 'useLayoutEffect';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountLayoutEffect(create, deps);\\n      },\\n      useMemo: function (create, deps) {\\n        currentHookNameInDev = 'useMemo';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountMemo(create, deps);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useReducer: function (reducer, initialArg, init) {\\n        currentHookNameInDev = 'useReducer';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountReducer(reducer, initialArg, init);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useRef: function (initialValue) {\\n        currentHookNameInDev = 'useRef';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountRef(initialValue);\\n      },\\n      useState: function (initialState) {\\n        currentHookNameInDev = 'useState';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\\n\\n        try {\\n          return mountState(initialState);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useDebugValue: function (value, formatterFn) {\\n        currentHookNameInDev = 'useDebugValue';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountDebugValue();\\n      },\\n      useDeferredValue: function (value) {\\n        currentHookNameInDev = 'useDeferredValue';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountDeferredValue(value);\\n      },\\n      useTransition: function () {\\n        currentHookNameInDev = 'useTransition';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountTransition();\\n      },\\n      useMutableSource: function (source, getSnapshot, subscribe) {\\n        currentHookNameInDev = 'useMutableSource';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountMutableSource();\\n      },\\n      useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\\n        currentHookNameInDev = 'useSyncExternalStore';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\\n      },\\n      useId: function () {\\n        currentHookNameInDev = 'useId';\\n        warnInvalidHookAccess();\\n        mountHookTypesDev();\\n        return mountId();\\n      },\\n      unstable_isNewReconciler: enableNewReconciler\\n    };\\n\\n    InvalidNestedHooksDispatcherOnUpdateInDEV = {\\n      readContext: function (context) {\\n        warnInvalidContextAccess();\\n        return readContext(context);\\n      },\\n      useCallback: function (callback, deps) {\\n        currentHookNameInDev = 'useCallback';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateCallback(callback, deps);\\n      },\\n      useContext: function (context) {\\n        currentHookNameInDev = 'useContext';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return readContext(context);\\n      },\\n      useEffect: function (create, deps) {\\n        currentHookNameInDev = 'useEffect';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateEffect(create, deps);\\n      },\\n      useImperativeHandle: function (ref, create, deps) {\\n        currentHookNameInDev = 'useImperativeHandle';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateImperativeHandle(ref, create, deps);\\n      },\\n      useInsertionEffect: function (create, deps) {\\n        currentHookNameInDev = 'useInsertionEffect';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateInsertionEffect(create, deps);\\n      },\\n      useLayoutEffect: function (create, deps) {\\n        currentHookNameInDev = 'useLayoutEffect';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateLayoutEffect(create, deps);\\n      },\\n      useMemo: function (create, deps) {\\n        currentHookNameInDev = 'useMemo';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return updateMemo(create, deps);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useReducer: function (reducer, initialArg, init) {\\n        currentHookNameInDev = 'useReducer';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return updateReducer(reducer, initialArg, init);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useRef: function (initialValue) {\\n        currentHookNameInDev = 'useRef';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateRef();\\n      },\\n      useState: function (initialState) {\\n        currentHookNameInDev = 'useState';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return updateState(initialState);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useDebugValue: function (value, formatterFn) {\\n        currentHookNameInDev = 'useDebugValue';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateDebugValue();\\n      },\\n      useDeferredValue: function (value) {\\n        currentHookNameInDev = 'useDeferredValue';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateDeferredValue(value);\\n      },\\n      useTransition: function () {\\n        currentHookNameInDev = 'useTransition';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateTransition();\\n      },\\n      useMutableSource: function (source, getSnapshot, subscribe) {\\n        currentHookNameInDev = 'useMutableSource';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateMutableSource();\\n      },\\n      useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\\n        currentHookNameInDev = 'useSyncExternalStore';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateSyncExternalStore(subscribe, getSnapshot);\\n      },\\n      useId: function () {\\n        currentHookNameInDev = 'useId';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateId();\\n      },\\n      unstable_isNewReconciler: enableNewReconciler\\n    };\\n\\n    InvalidNestedHooksDispatcherOnRerenderInDEV = {\\n      readContext: function (context) {\\n        warnInvalidContextAccess();\\n        return readContext(context);\\n      },\\n      useCallback: function (callback, deps) {\\n        currentHookNameInDev = 'useCallback';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateCallback(callback, deps);\\n      },\\n      useContext: function (context) {\\n        currentHookNameInDev = 'useContext';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return readContext(context);\\n      },\\n      useEffect: function (create, deps) {\\n        currentHookNameInDev = 'useEffect';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateEffect(create, deps);\\n      },\\n      useImperativeHandle: function (ref, create, deps) {\\n        currentHookNameInDev = 'useImperativeHandle';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateImperativeHandle(ref, create, deps);\\n      },\\n      useInsertionEffect: function (create, deps) {\\n        currentHookNameInDev = 'useInsertionEffect';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateInsertionEffect(create, deps);\\n      },\\n      useLayoutEffect: function (create, deps) {\\n        currentHookNameInDev = 'useLayoutEffect';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateLayoutEffect(create, deps);\\n      },\\n      useMemo: function (create, deps) {\\n        currentHookNameInDev = 'useMemo';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return updateMemo(create, deps);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useReducer: function (reducer, initialArg, init) {\\n        currentHookNameInDev = 'useReducer';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return rerenderReducer(reducer, initialArg, init);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useRef: function (initialValue) {\\n        currentHookNameInDev = 'useRef';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateRef();\\n      },\\n      useState: function (initialState) {\\n        currentHookNameInDev = 'useState';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        var prevDispatcher = ReactCurrentDispatcher$1.current;\\n        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\\n\\n        try {\\n          return rerenderState(initialState);\\n        } finally {\\n          ReactCurrentDispatcher$1.current = prevDispatcher;\\n        }\\n      },\\n      useDebugValue: function (value, formatterFn) {\\n        currentHookNameInDev = 'useDebugValue';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateDebugValue();\\n      },\\n      useDeferredValue: function (value) {\\n        currentHookNameInDev = 'useDeferredValue';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return rerenderDeferredValue(value);\\n      },\\n      useTransition: function () {\\n        currentHookNameInDev = 'useTransition';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return rerenderTransition();\\n      },\\n      useMutableSource: function (source, getSnapshot, subscribe) {\\n        currentHookNameInDev = 'useMutableSource';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateMutableSource();\\n      },\\n      useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\\n        currentHookNameInDev = 'useSyncExternalStore';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateSyncExternalStore(subscribe, getSnapshot);\\n      },\\n      useId: function () {\\n        currentHookNameInDev = 'useId';\\n        warnInvalidHookAccess();\\n        updateHookTypesDev();\\n        return updateId();\\n      },\\n      unstable_isNewReconciler: enableNewReconciler\\n    };\\n  }\\n\\n  var now$1 = unstable_now;\\n  var commitTime = 0;\\n  var layoutEffectStartTime = -1;\\n  var profilerStartTime = -1;\\n  var passiveEffectStartTime = -1;\\n  /**\\n   * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\\n   *\\n   * The overall sequence is:\\n   *   1. render\\n   *   2. commit (and call `onRender`, `onCommit`)\\n   *   3. check for nested updates\\n   *   4. flush passive effects (and call `onPostCommit`)\\n   *\\n   * Nested updates are identified in step 3 above,\\n   * but step 4 still applies to the work that was just committed.\\n   * We use two flags to track nested updates then:\\n   * one tracks whether the upcoming update is a nested update,\\n   * and the other tracks whether the current update was a nested update.\\n   * The first value gets synced to the second at the start of the render phase.\\n   */\\n\\n  var currentUpdateIsNested = false;\\n  var nestedUpdateScheduled = false;\\n\\n  function isCurrentUpdateNested() {\\n    return currentUpdateIsNested;\\n  }\\n\\n  function markNestedUpdateScheduled() {\\n    {\\n      nestedUpdateScheduled = true;\\n    }\\n  }\\n\\n  function resetNestedUpdateFlag() {\\n    {\\n      currentUpdateIsNested = false;\\n      nestedUpdateScheduled = false;\\n    }\\n  }\\n\\n  function syncNestedUpdateFlag() {\\n    {\\n      currentUpdateIsNested = nestedUpdateScheduled;\\n      nestedUpdateScheduled = false;\\n    }\\n  }\\n\\n  function getCommitTime() {\\n    return commitTime;\\n  }\\n\\n  function recordCommitTime() {\\n\\n    commitTime = now$1();\\n  }\\n\\n  function startProfilerTimer(fiber) {\\n\\n    profilerStartTime = now$1();\\n\\n    if (fiber.actualStartTime < 0) {\\n      fiber.actualStartTime = now$1();\\n    }\\n  }\\n\\n  function stopProfilerTimerIfRunning(fiber) {\\n\\n    profilerStartTime = -1;\\n  }\\n\\n  function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\\n\\n    if (profilerStartTime >= 0) {\\n      var elapsedTime = now$1() - profilerStartTime;\\n      fiber.actualDuration += elapsedTime;\\n\\n      if (overrideBaseTime) {\\n        fiber.selfBaseDuration = elapsedTime;\\n      }\\n\\n      profilerStartTime = -1;\\n    }\\n  }\\n\\n  function recordLayoutEffectDuration(fiber) {\\n\\n    if (layoutEffectStartTime >= 0) {\\n      var elapsedTime = now$1() - layoutEffectStartTime;\\n      layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\\n      // Or the root (for the DevTools Profiler to read)\\n\\n      var parentFiber = fiber.return;\\n\\n      while (parentFiber !== null) {\\n        switch (parentFiber.tag) {\\n          case HostRoot:\\n            var root = parentFiber.stateNode;\\n            root.effectDuration += elapsedTime;\\n            return;\\n\\n          case Profiler:\\n            var parentStateNode = parentFiber.stateNode;\\n            parentStateNode.effectDuration += elapsedTime;\\n            return;\\n        }\\n\\n        parentFiber = parentFiber.return;\\n      }\\n    }\\n  }\\n\\n  function recordPassiveEffectDuration(fiber) {\\n\\n    if (passiveEffectStartTime >= 0) {\\n      var elapsedTime = now$1() - passiveEffectStartTime;\\n      passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\\n      // Or the root (for the DevTools Profiler to read)\\n\\n      var parentFiber = fiber.return;\\n\\n      while (parentFiber !== null) {\\n        switch (parentFiber.tag) {\\n          case HostRoot:\\n            var root = parentFiber.stateNode;\\n\\n            if (root !== null) {\\n              root.passiveEffectDuration += elapsedTime;\\n            }\\n\\n            return;\\n\\n          case Profiler:\\n            var parentStateNode = parentFiber.stateNode;\\n\\n            if (parentStateNode !== null) {\\n              // Detached fibers have their state node cleared out.\\n              // In this case, the return pointer is also cleared out,\\n              // so we won't be able to report the time spent in this Profiler's subtree.\\n              parentStateNode.passiveEffectDuration += elapsedTime;\\n            }\\n\\n            return;\\n        }\\n\\n        parentFiber = parentFiber.return;\\n      }\\n    }\\n  }\\n\\n  function startLayoutEffectTimer() {\\n\\n    layoutEffectStartTime = now$1();\\n  }\\n\\n  function startPassiveEffectTimer() {\\n\\n    passiveEffectStartTime = now$1();\\n  }\\n\\n  function transferActualDuration(fiber) {\\n    // Transfer time spent rendering these children so we don't lose it\\n    // after we rerender. This is used as a helper in special cases\\n    // where we should count the work of multiple passes.\\n    var child = fiber.child;\\n\\n    while (child) {\\n      fiber.actualDuration += child.actualDuration;\\n      child = child.sibling;\\n    }\\n  }\\n\\n  function createCapturedValueAtFiber(value, source) {\\n    // If the value is an error, call this function immediately after it is thrown\\n    // so the stack is accurate.\\n    return {\\n      value: value,\\n      source: source,\\n      stack: getStackByFiberInDevAndProd(source),\\n      digest: null\\n    };\\n  }\\n  function createCapturedValue(value, digest, stack) {\\n    return {\\n      value: value,\\n      source: null,\\n      stack: stack != null ? stack : null,\\n      digest: digest != null ? digest : null\\n    };\\n  }\\n\\n  // This module is forked in different environments.\\n  // By default, return `true` to log errors to the console.\\n  // Forks can return `false` if this isn't desirable.\\n  function showErrorDialog(boundary, errorInfo) {\\n    return true;\\n  }\\n\\n  function logCapturedError(boundary, errorInfo) {\\n    try {\\n      var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\\n      // This enables renderers like ReactNative to better manage redbox behavior.\\n\\n      if (logError === false) {\\n        return;\\n      }\\n\\n      var error = errorInfo.value;\\n\\n      if (true) {\\n        var source = errorInfo.source;\\n        var stack = errorInfo.stack;\\n        var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\\n        // `preventDefault()` in window `error` handler.\\n        // We record this information as an expando on the error.\\n\\n        if (error != null && error._suppressLogging) {\\n          if (boundary.tag === ClassComponent) {\\n            // The error is recoverable and was silenced.\\n            // Ignore it and don't print the stack addendum.\\n            // This is handy for testing error boundaries without noise.\\n            return;\\n          } // The error is fatal. Since the silencing might have\\n          // been accidental, we'll surface it anyway.\\n          // However, the browser would have silenced the original error\\n          // so we'll print it first, and then print the stack addendum.\\n\\n\\n          console['error'](error); // Don't transform to our wrapper\\n          // For a more detailed description of this block, see:\\n          // https://github.com/facebook/react/pull/13384\\n        }\\n\\n        var componentName = source ? getComponentNameFromFiber(source) : null;\\n        var componentNameMessage = componentName ? \\\"The above error occurred in the <\\\" + componentName + \\\"> component:\\\" : 'The above error occurred in one of your React components:';\\n        var errorBoundaryMessage;\\n\\n        if (boundary.tag === HostRoot) {\\n          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\\n        } else {\\n          var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\\n          errorBoundaryMessage = \\\"React will try to recreate this component tree from scratch \\\" + (\\\"using the error boundary you provided, \\\" + errorBoundaryName + \\\".\\\");\\n        }\\n\\n        var combinedMessage = componentNameMessage + \\\"\\\\n\\\" + componentStack + \\\"\\\\n\\\\n\\\" + (\\\"\\\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\\n        // We don't include the original error message and JS stack because the browser\\n        // has already printed it. Even if the application swallows the error, it is still\\n        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\\n\\n        console['error'](combinedMessage); // Don't transform to our wrapper\\n      } else {\\n        // In production, we print the error directly.\\n        // This will include the message, the JS stack, and anything the browser wants to show.\\n        // We pass the error object instead of custom message so that the browser displays the error natively.\\n        console['error'](error); // Don't transform to our wrapper\\n      }\\n    } catch (e) {\\n      // This method must not throw, or React internal state will get messed up.\\n      // If console.error is overridden, or logCapturedError() shows a dialog that throws,\\n      // we want to report this error outside of the normal stack as a last resort.\\n      // https://github.com/facebook/react/issues/13188\\n      setTimeout(function () {\\n        throw e;\\n      });\\n    }\\n  }\\n\\n  var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\\n\\n  function createRootErrorUpdate(fiber, errorInfo, lane) {\\n    var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\\n\\n    update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\\n    // being called \\\"element\\\".\\n\\n    update.payload = {\\n      element: null\\n    };\\n    var error = errorInfo.value;\\n\\n    update.callback = function () {\\n      onUncaughtError(error);\\n      logCapturedError(fiber, errorInfo);\\n    };\\n\\n    return update;\\n  }\\n\\n  function createClassErrorUpdate(fiber, errorInfo, lane) {\\n    var update = createUpdate(NoTimestamp, lane);\\n    update.tag = CaptureUpdate;\\n    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\\n\\n    if (typeof getDerivedStateFromError === 'function') {\\n      var error$1 = errorInfo.value;\\n\\n      update.payload = function () {\\n        return getDerivedStateFromError(error$1);\\n      };\\n\\n      update.callback = function () {\\n        {\\n          markFailedErrorBoundaryForHotReloading(fiber);\\n        }\\n\\n        logCapturedError(fiber, errorInfo);\\n      };\\n    }\\n\\n    var inst = fiber.stateNode;\\n\\n    if (inst !== null && typeof inst.componentDidCatch === 'function') {\\n      update.callback = function callback() {\\n        {\\n          markFailedErrorBoundaryForHotReloading(fiber);\\n        }\\n\\n        logCapturedError(fiber, errorInfo);\\n\\n        if (typeof getDerivedStateFromError !== 'function') {\\n          // To preserve the preexisting retry behavior of error boundaries,\\n          // we keep track of which ones already failed during this batch.\\n          // This gets reset before we yield back to the browser.\\n          // TODO: Warn in strict mode if getDerivedStateFromError is\\n          // not defined.\\n          markLegacyErrorBoundaryAsFailed(this);\\n        }\\n\\n        var error$1 = errorInfo.value;\\n        var stack = errorInfo.stack;\\n        this.componentDidCatch(error$1, {\\n          componentStack: stack !== null ? stack : ''\\n        });\\n\\n        {\\n          if (typeof getDerivedStateFromError !== 'function') {\\n            // If componentDidCatch is the only error boundary method defined,\\n            // then it needs to call setState to recover from errors.\\n            // If no state update is scheduled then the boundary will swallow the error.\\n            if (!includesSomeLane(fiber.lanes, SyncLane)) {\\n              error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\\n            }\\n          }\\n        }\\n      };\\n    }\\n\\n    return update;\\n  }\\n\\n  function attachPingListener(root, wakeable, lanes) {\\n    // Attach a ping listener\\n    //\\n    // The data might resolve before we have a chance to commit the fallback. Or,\\n    // in the case of a refresh, we'll never commit a fallback. So we need to\\n    // attach a listener now. When it resolves (\\\"pings\\\"), we can decide whether to\\n    // try rendering the tree again.\\n    //\\n    // Only attach a listener if one does not already exist for the lanes\\n    // we're currently rendering (which acts like a \\\"thread ID\\\" here).\\n    //\\n    // We only need to do this in concurrent mode. Legacy Suspense always\\n    // commits fallbacks synchronously, so there are no pings.\\n    var pingCache = root.pingCache;\\n    var threadIDs;\\n\\n    if (pingCache === null) {\\n      pingCache = root.pingCache = new PossiblyWeakMap$1();\\n      threadIDs = new Set();\\n      pingCache.set(wakeable, threadIDs);\\n    } else {\\n      threadIDs = pingCache.get(wakeable);\\n\\n      if (threadIDs === undefined) {\\n        threadIDs = new Set();\\n        pingCache.set(wakeable, threadIDs);\\n      }\\n    }\\n\\n    if (!threadIDs.has(lanes)) {\\n      // Memoize using the thread ID to prevent redundant listeners.\\n      threadIDs.add(lanes);\\n      var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\\n\\n      {\\n        if (isDevToolsPresent) {\\n          // If we have pending work still, restore the original updaters\\n          restorePendingUpdaters(root, lanes);\\n        }\\n      }\\n\\n      wakeable.then(ping, ping);\\n    }\\n  }\\n\\n  function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\\n    // Retry listener\\n    //\\n    // If the fallback does commit, we need to attach a different type of\\n    // listener. This one schedules an update on the Suspense boundary to turn\\n    // the fallback state off.\\n    //\\n    // Stash the wakeable on the boundary fiber so we can access it in the\\n    // commit phase.\\n    //\\n    // When the wakeable resolves, we'll attempt to render the boundary\\n    // again (\\\"retry\\\").\\n    var wakeables = suspenseBoundary.updateQueue;\\n\\n    if (wakeables === null) {\\n      var updateQueue = new Set();\\n      updateQueue.add(wakeable);\\n      suspenseBoundary.updateQueue = updateQueue;\\n    } else {\\n      wakeables.add(wakeable);\\n    }\\n  }\\n\\n  function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\\n    // A legacy mode Suspense quirk, only relevant to hook components.\\n\\n\\n    var tag = sourceFiber.tag;\\n\\n    if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\\n      var currentSource = sourceFiber.alternate;\\n\\n      if (currentSource) {\\n        sourceFiber.updateQueue = currentSource.updateQueue;\\n        sourceFiber.memoizedState = currentSource.memoizedState;\\n        sourceFiber.lanes = currentSource.lanes;\\n      } else {\\n        sourceFiber.updateQueue = null;\\n        sourceFiber.memoizedState = null;\\n      }\\n    }\\n  }\\n\\n  function getNearestSuspenseBoundaryToCapture(returnFiber) {\\n    var node = returnFiber;\\n\\n    do {\\n      if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\\n        return node;\\n      } // This boundary already captured during this render. Continue to the next\\n      // boundary.\\n\\n\\n      node = node.return;\\n    } while (node !== null);\\n\\n    return null;\\n  }\\n\\n  function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\\n    // This marks a Suspense boundary so that when we're unwinding the stack,\\n    // it captures the suspended \\\"exception\\\" and does a second (fallback) pass.\\n    if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\\n      // Legacy Mode Suspense\\n      //\\n      // If the boundary is in legacy mode, we should *not*\\n      // suspend the commit. Pretend as if the suspended component rendered\\n      // null and keep rendering. When the Suspense boundary completes,\\n      // we'll do a second pass to render the fallback.\\n      if (suspenseBoundary === returnFiber) {\\n        // Special case where we suspended while reconciling the children of\\n        // a Suspense boundary's inner Offscreen wrapper fiber. This happens\\n        // when a React.lazy component is a direct child of a\\n        // Suspense boundary.\\n        //\\n        // Suspense boundaries are implemented as multiple fibers, but they\\n        // are a single conceptual unit. The legacy mode behavior where we\\n        // pretend the suspended fiber committed as `null` won't work,\\n        // because in this case the \\\"suspended\\\" fiber is the inner\\n        // Offscreen wrapper.\\n        //\\n        // Because the contents of the boundary haven't started rendering\\n        // yet (i.e. nothing in the tree has partially rendered) we can\\n        // switch to the regular, concurrent mode behavior: mark the\\n        // boundary with ShouldCapture and enter the unwind phase.\\n        suspenseBoundary.flags |= ShouldCapture;\\n      } else {\\n        suspenseBoundary.flags |= DidCapture;\\n        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\\n        // But we shouldn't call any lifecycle methods or callbacks. Remove\\n        // all lifecycle effect tags.\\n\\n        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\\n\\n        if (sourceFiber.tag === ClassComponent) {\\n          var currentSourceFiber = sourceFiber.alternate;\\n\\n          if (currentSourceFiber === null) {\\n            // This is a new mount. Change the tag so it's not mistaken for a\\n            // completed class component. For example, we should not call\\n            // componentWillUnmount if it is deleted.\\n            sourceFiber.tag = IncompleteClassComponent;\\n          } else {\\n            // When we try rendering again, we should not reuse the current fiber,\\n            // since it's known to be in an inconsistent state. Use a force update to\\n            // prevent a bail out.\\n            var update = createUpdate(NoTimestamp, SyncLane);\\n            update.tag = ForceUpdate;\\n            enqueueUpdate(sourceFiber, update, SyncLane);\\n          }\\n        } // The source fiber did not complete. Mark it with Sync priority to\\n        // indicate that it still has pending work.\\n\\n\\n        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\\n      }\\n\\n      return suspenseBoundary;\\n    } // Confirmed that the boundary is in a concurrent mode tree. Continue\\n    // with the normal suspend path.\\n    //\\n    // After this we'll use a set of heuristics to determine whether this\\n    // render pass will run to completion or restart or \\\"suspend\\\" the commit.\\n    // The actual logic for this is spread out in different places.\\n    //\\n    // This first principle is that if we're going to suspend when we complete\\n    // a root, then we should also restart if we get an update or ping that\\n    // might unsuspend it, and vice versa. The only reason to suspend is\\n    // because you think you might want to restart before committing. However,\\n    // it doesn't make sense to restart only while in the period we're suspended.\\n    //\\n    // Restarting too aggressively is also not good because it starves out any\\n    // intermediate loading state. So we use heuristics to determine when.\\n    // Suspense Heuristics\\n    //\\n    // If nothing threw a Promise or all the same fallbacks are already showing,\\n    // then don't suspend/restart.\\n    //\\n    // If this is an initial render of a new tree of Suspense boundaries and\\n    // those trigger a fallback, then don't suspend/restart. We want to ensure\\n    // that we can show the initial loading state as quickly as possible.\\n    //\\n    // If we hit a \\\"Delayed\\\" case, such as when we'd switch from content back into\\n    // a fallback, then we should always suspend/restart. Transitions apply\\n    // to this case. If none is defined, JND is used instead.\\n    //\\n    // If we're already showing a fallback and it gets \\\"retried\\\", allowing us to show\\n    // another level, but there's still an inner boundary that would show a fallback,\\n    // then we suspend/restart for 500ms since the last time we showed a fallback\\n    // anywhere in the tree. This effectively throttles progressive loading into a\\n    // consistent train of commits. This also gives us an opportunity to restart to\\n    // get to the completed state slightly earlier.\\n    //\\n    // If there's ambiguity due to batching it's resolved in preference of:\\n    // 1) \\\"delayed\\\", 2) \\\"initial render\\\", 3) \\\"retry\\\".\\n    //\\n    // We want to ensure that a \\\"busy\\\" state doesn't get force committed. We want to\\n    // ensure that new initial loading states can commit as soon as possible.\\n\\n\\n    suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\\n    // the begin phase to prevent an early bailout.\\n\\n    suspenseBoundary.lanes = rootRenderLanes;\\n    return suspenseBoundary;\\n  }\\n\\n  function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\\n    // The source fiber did not complete.\\n    sourceFiber.flags |= Incomplete;\\n\\n    {\\n      if (isDevToolsPresent) {\\n        // If we have pending work still, restore the original updaters\\n        restorePendingUpdaters(root, rootRenderLanes);\\n      }\\n    }\\n\\n    if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\\n      // This is a wakeable. The component suspended.\\n      var wakeable = value;\\n      resetSuspendedComponent(sourceFiber);\\n\\n      {\\n        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\\n          markDidThrowWhileHydratingDEV();\\n        }\\n      }\\n\\n\\n      var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\\n\\n      if (suspenseBoundary !== null) {\\n        suspenseBoundary.flags &= ~ForceClientRender;\\n        markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\\n        // commits fallbacks synchronously, so there are no pings.\\n\\n        if (suspenseBoundary.mode & ConcurrentMode) {\\n          attachPingListener(root, wakeable, rootRenderLanes);\\n        }\\n\\n        attachRetryListener(suspenseBoundary, root, wakeable);\\n        return;\\n      } else {\\n        // No boundary was found. Unless this is a sync update, this is OK.\\n        // We can suspend and wait for more data to arrive.\\n        if (!includesSyncLane(rootRenderLanes)) {\\n          // This is not a sync update. Suspend. Since we're not activating a\\n          // Suspense boundary, this will unwind all the way to the root without\\n          // performing a second pass to render a fallback. (This is arguably how\\n          // refresh transitions should work, too, since we're not going to commit\\n          // the fallbacks anyway.)\\n          //\\n          // This case also applies to initial hydration.\\n          attachPingListener(root, wakeable, rootRenderLanes);\\n          renderDidSuspendDelayIfPossible();\\n          return;\\n        } // This is a sync/discrete update. We treat this case like an error\\n        // because discrete renders are expected to produce a complete tree\\n        // synchronously to maintain consistency with external state.\\n\\n\\n        var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\\n        // The error will be caught by the nearest suspense boundary.\\n\\n        value = uncaughtSuspenseError;\\n      }\\n    } else {\\n      // This is a regular error, not a Suspense wakeable.\\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\\n        markDidThrowWhileHydratingDEV();\\n\\n        var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\\n        // discarding the dehydrated content and switching to a client render.\\n        // Instead of surfacing the error, find the nearest Suspense boundary\\n        // and render it again without hydration.\\n\\n\\n        if (_suspenseBoundary !== null) {\\n          if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\\n            // Set a flag to indicate that we should try rendering the normal\\n            // children again, not the fallback.\\n            _suspenseBoundary.flags |= ForceClientRender;\\n          }\\n\\n          markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\\n          // still log it so it can be fixed.\\n\\n          queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\\n          return;\\n        }\\n      }\\n    }\\n\\n    value = createCapturedValueAtFiber(value, sourceFiber);\\n    renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\\n    // over and traverse parent path again, this time treating the exception\\n    // as an error.\\n\\n    var workInProgress = returnFiber;\\n\\n    do {\\n      switch (workInProgress.tag) {\\n        case HostRoot:\\n          {\\n            var _errorInfo = value;\\n            workInProgress.flags |= ShouldCapture;\\n            var lane = pickArbitraryLane(rootRenderLanes);\\n            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\\n            var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\\n            enqueueCapturedUpdate(workInProgress, update);\\n            return;\\n          }\\n\\n        case ClassComponent:\\n          // Capture and retry\\n          var errorInfo = value;\\n          var ctor = workInProgress.type;\\n          var instance = workInProgress.stateNode;\\n\\n          if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\\n            workInProgress.flags |= ShouldCapture;\\n\\n            var _lane = pickArbitraryLane(rootRenderLanes);\\n\\n            workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\\n\\n            var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\\n\\n            enqueueCapturedUpdate(workInProgress, _update);\\n            return;\\n          }\\n\\n          break;\\n      }\\n\\n      workInProgress = workInProgress.return;\\n    } while (workInProgress !== null);\\n  }\\n\\n  function getSuspendedCache() {\\n    {\\n      return null;\\n    } // This function is called when a Suspense boundary suspends. It returns the\\n  }\\n\\n  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\\n  var didReceiveUpdate = false;\\n  var didWarnAboutBadClass;\\n  var didWarnAboutModulePatternComponent;\\n  var didWarnAboutContextTypeOnFunctionComponent;\\n  var didWarnAboutGetDerivedStateOnFunctionComponent;\\n  var didWarnAboutFunctionRefs;\\n  var didWarnAboutReassigningProps;\\n  var didWarnAboutRevealOrder;\\n  var didWarnAboutTailOptions;\\n\\n  {\\n    didWarnAboutBadClass = {};\\n    didWarnAboutModulePatternComponent = {};\\n    didWarnAboutContextTypeOnFunctionComponent = {};\\n    didWarnAboutGetDerivedStateOnFunctionComponent = {};\\n    didWarnAboutFunctionRefs = {};\\n    didWarnAboutReassigningProps = false;\\n    didWarnAboutRevealOrder = {};\\n    didWarnAboutTailOptions = {};\\n  }\\n\\n  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\\n    if (current === null) {\\n      // If this is a fresh new component that hasn't been rendered yet, we\\n      // won't update its child set by applying minimal side-effects. Instead,\\n      // we will add them all to the child before it gets rendered. That means\\n      // we can optimize this reconciliation pass by not tracking side-effects.\\n      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\\n    } else {\\n      // If the current child is the same as the work in progress, it means that\\n      // we haven't yet started any work on these children. Therefore, we use\\n      // the clone algorithm to create a copy of all the current children.\\n      // If we had any progressed work already, that is invalid at this point so\\n      // let's throw it out.\\n      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\\n    }\\n  }\\n\\n  function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\\n    // This function is fork of reconcileChildren. It's used in cases where we\\n    // want to reconcile without matching against the existing set. This has the\\n    // effect of all current children being unmounted; even if the type and key\\n    // are the same, the old child is unmounted and a new child is created.\\n    //\\n    // To do this, we're going to go through the reconcile algorithm twice. In\\n    // the first pass, we schedule a deletion for all the current children by\\n    // passing null.\\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\\n    // pass null in place of where we usually pass the current child set. This has\\n    // the effect of remounting all children regardless of whether their\\n    // identities match.\\n\\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\\n  }\\n\\n  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\\n    // TODO: current can be non-null here even if the component\\n    // hasn't yet mounted. This happens after the first render suspends.\\n    // We'll need to figure out if this is fine or can cause issues.\\n    {\\n      if (workInProgress.type !== workInProgress.elementType) {\\n        // Lazy component props can't be validated in createElement\\n        // because they're only guaranteed to be resolved here.\\n        var innerPropTypes = Component.propTypes;\\n\\n        if (innerPropTypes) {\\n          checkPropTypes(innerPropTypes, nextProps, // Resolved props\\n          'prop', getComponentNameFromType(Component));\\n        }\\n      }\\n    }\\n\\n    var render = Component.render;\\n    var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\\n\\n    var nextChildren;\\n    var hasId;\\n    prepareToReadContext(workInProgress, renderLanes);\\n\\n    {\\n      markComponentRenderStarted(workInProgress);\\n    }\\n\\n    {\\n      ReactCurrentOwner$1.current = workInProgress;\\n      setIsRendering(true);\\n      nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\\n      hasId = checkDidRenderIdHook();\\n\\n      if ( workInProgress.mode & StrictLegacyMode) {\\n        setIsStrictModeForDevtools(true);\\n\\n        try {\\n          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\\n          hasId = checkDidRenderIdHook();\\n        } finally {\\n          setIsStrictModeForDevtools(false);\\n        }\\n      }\\n\\n      setIsRendering(false);\\n    }\\n\\n    {\\n      markComponentRenderStopped();\\n    }\\n\\n    if (current !== null && !didReceiveUpdate) {\\n      bailoutHooks(current, workInProgress, renderLanes);\\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n    }\\n\\n    if (getIsHydrating() && hasId) {\\n      pushMaterializedTreeId(workInProgress);\\n    } // React DevTools reads this flag.\\n\\n\\n    workInProgress.flags |= PerformedWork;\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\\n    if (current === null) {\\n      var type = Component.type;\\n\\n      if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\\n      Component.defaultProps === undefined) {\\n        var resolvedType = type;\\n\\n        {\\n          resolvedType = resolveFunctionForHotReloading(type);\\n        } // If this is a plain function component without default props,\\n        // and with only the default shallow comparison, we upgrade it\\n        // to a SimpleMemoComponent to allow fast path updates.\\n\\n\\n        workInProgress.tag = SimpleMemoComponent;\\n        workInProgress.type = resolvedType;\\n\\n        {\\n          validateFunctionComponentInDev(workInProgress, type);\\n        }\\n\\n        return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\\n      }\\n\\n      {\\n        var innerPropTypes = type.propTypes;\\n\\n        if (innerPropTypes) {\\n          // Inner memo component props aren't currently validated in createElement.\\n          // We could move it there, but we'd still need this for lazy code path.\\n          checkPropTypes(innerPropTypes, nextProps, // Resolved props\\n          'prop', getComponentNameFromType(type));\\n        }\\n      }\\n\\n      var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\\n      child.ref = workInProgress.ref;\\n      child.return = workInProgress;\\n      workInProgress.child = child;\\n      return child;\\n    }\\n\\n    {\\n      var _type = Component.type;\\n      var _innerPropTypes = _type.propTypes;\\n\\n      if (_innerPropTypes) {\\n        // Inner memo component props aren't currently validated in createElement.\\n        // We could move it there, but we'd still need this for lazy code path.\\n        checkPropTypes(_innerPropTypes, nextProps, // Resolved props\\n        'prop', getComponentNameFromType(_type));\\n      }\\n    }\\n\\n    var currentChild = current.child; // This is always exactly one child\\n\\n    var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\\n\\n    if (!hasScheduledUpdateOrContext) {\\n      // This will be the props with resolved defaultProps,\\n      // unlike current.memoizedProps which will be the unresolved ones.\\n      var prevProps = currentChild.memoizedProps; // Default to shallow comparison\\n\\n      var compare = Component.compare;\\n      compare = compare !== null ? compare : shallowEqual;\\n\\n      if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n      }\\n    } // React DevTools reads this flag.\\n\\n\\n    workInProgress.flags |= PerformedWork;\\n    var newChild = createWorkInProgress(currentChild, nextProps);\\n    newChild.ref = workInProgress.ref;\\n    newChild.return = workInProgress;\\n    workInProgress.child = newChild;\\n    return newChild;\\n  }\\n\\n  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\\n    // TODO: current can be non-null here even if the component\\n    // hasn't yet mounted. This happens when the inner render suspends.\\n    // We'll need to figure out if this is fine or can cause issues.\\n    {\\n      if (workInProgress.type !== workInProgress.elementType) {\\n        // Lazy component props can't be validated in createElement\\n        // because they're only guaranteed to be resolved here.\\n        var outerMemoType = workInProgress.elementType;\\n\\n        if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\\n          // We warn when you define propTypes on lazy()\\n          // so let's just skip over it to find memo() outer wrapper.\\n          // Inner props for memo are validated later.\\n          var lazyComponent = outerMemoType;\\n          var payload = lazyComponent._payload;\\n          var init = lazyComponent._init;\\n\\n          try {\\n            outerMemoType = init(payload);\\n          } catch (x) {\\n            outerMemoType = null;\\n          } // Inner propTypes will be validated in the function component path.\\n\\n\\n          var outerPropTypes = outerMemoType && outerMemoType.propTypes;\\n\\n          if (outerPropTypes) {\\n            checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\\n            'prop', getComponentNameFromType(outerMemoType));\\n          }\\n        }\\n      }\\n    }\\n\\n    if (current !== null) {\\n      var prevProps = current.memoizedProps;\\n\\n      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\\n       workInProgress.type === current.type )) {\\n        didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\\n        // would during a normal fiber bailout.\\n        //\\n        // We don't have strong guarantees that the props object is referentially\\n        // equal during updates where we can't bail out anyway — like if the props\\n        // are shallowly equal, but there's a local state or context update in the\\n        // same batch.\\n        //\\n        // However, as a principle, we should aim to make the behavior consistent\\n        // across different ways of memoizing a component. For example, React.memo\\n        // has a different internal Fiber layout if you pass a normal function\\n        // component (SimpleMemoComponent) versus if you pass a different type\\n        // like forwardRef (MemoComponent). But this is an implementation detail.\\n        // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\\n        // affect whether the props object is reused during a bailout.\\n\\n        workInProgress.pendingProps = nextProps = prevProps;\\n\\n        if (!checkScheduledUpdateOrContext(current, renderLanes)) {\\n          // The pending lanes were cleared at the beginning of beginWork. We're\\n          // about to bail out, but there might be other lanes that weren't\\n          // included in the current render. Usually, the priority level of the\\n          // remaining updates is accumulated during the evaluation of the\\n          // component (i.e. when processing the update queue). But since since\\n          // we're bailing out early *without* evaluating the component, we need\\n          // to account for it here, too. Reset to the value of the current fiber.\\n          // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\\n          // because a MemoComponent fiber does not have hooks or an update queue;\\n          // rather, it wraps around an inner component, which may or may not\\n          // contains hooks.\\n          // TODO: Move the reset at in beginWork out of the common path so that\\n          // this is no longer necessary.\\n          workInProgress.lanes = current.lanes;\\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n        } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\\n          // This is a special case that only exists for legacy mode.\\n          // See https://github.com/facebook/react/pull/19216.\\n          didReceiveUpdate = true;\\n        }\\n      }\\n    }\\n\\n    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\\n  }\\n\\n  function updateOffscreenComponent(current, workInProgress, renderLanes) {\\n    var nextProps = workInProgress.pendingProps;\\n    var nextChildren = nextProps.children;\\n    var prevState = current !== null ? current.memoizedState : null;\\n\\n    if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\\n      // Rendering a hidden tree.\\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\\n        // In legacy sync mode, don't defer the subtree. Render it now.\\n        // TODO: Consider how Offscreen should work with transitions in the future\\n        var nextState = {\\n          baseLanes: NoLanes,\\n          cachePool: null,\\n          transitions: null\\n        };\\n        workInProgress.memoizedState = nextState;\\n\\n        pushRenderLanes(workInProgress, renderLanes);\\n      } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\\n        var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\\n        // and resume this tree later.\\n\\n        var nextBaseLanes;\\n\\n        if (prevState !== null) {\\n          var prevBaseLanes = prevState.baseLanes;\\n          nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\\n        } else {\\n          nextBaseLanes = renderLanes;\\n        } // Schedule this fiber to re-render at offscreen priority. Then bailout.\\n\\n\\n        workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\\n        var _nextState = {\\n          baseLanes: nextBaseLanes,\\n          cachePool: spawnedCachePool,\\n          transitions: null\\n        };\\n        workInProgress.memoizedState = _nextState;\\n        workInProgress.updateQueue = null;\\n        // to avoid a push/pop misalignment.\\n\\n\\n        pushRenderLanes(workInProgress, nextBaseLanes);\\n\\n        return null;\\n      } else {\\n        // This is the second render. The surrounding visible content has already\\n        // committed. Now we resume rendering the hidden tree.\\n        // Rendering at offscreen, so we can clear the base lanes.\\n        var _nextState2 = {\\n          baseLanes: NoLanes,\\n          cachePool: null,\\n          transitions: null\\n        };\\n        workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\\n\\n        var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\\n\\n        pushRenderLanes(workInProgress, subtreeRenderLanes);\\n      }\\n    } else {\\n      // Rendering a visible tree.\\n      var _subtreeRenderLanes;\\n\\n      if (prevState !== null) {\\n        // We're going from hidden -> visible.\\n        _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\\n\\n        workInProgress.memoizedState = null;\\n      } else {\\n        // We weren't previously hidden, and we still aren't, so there's nothing\\n        // special to do. Need to push to the stack regardless, though, to avoid\\n        // a push/pop misalignment.\\n        _subtreeRenderLanes = renderLanes;\\n      }\\n\\n      pushRenderLanes(workInProgress, _subtreeRenderLanes);\\n    }\\n\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  } // Note: These happen to have identical begin phases, for now. We shouldn't hold\\n\\n  function updateFragment(current, workInProgress, renderLanes) {\\n    var nextChildren = workInProgress.pendingProps;\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function updateMode(current, workInProgress, renderLanes) {\\n    var nextChildren = workInProgress.pendingProps.children;\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function updateProfiler(current, workInProgress, renderLanes) {\\n    {\\n      workInProgress.flags |= Update;\\n\\n      {\\n        // Reset effect durations for the next eventual effect phase.\\n        // These are reset during render to allow the DevTools commit hook a chance to read them,\\n        var stateNode = workInProgress.stateNode;\\n        stateNode.effectDuration = 0;\\n        stateNode.passiveEffectDuration = 0;\\n      }\\n    }\\n\\n    var nextProps = workInProgress.pendingProps;\\n    var nextChildren = nextProps.children;\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function markRef(current, workInProgress) {\\n    var ref = workInProgress.ref;\\n\\n    if (current === null && ref !== null || current !== null && current.ref !== ref) {\\n      // Schedule a Ref effect\\n      workInProgress.flags |= Ref;\\n\\n      {\\n        workInProgress.flags |= RefStatic;\\n      }\\n    }\\n  }\\n\\n  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\\n    {\\n      if (workInProgress.type !== workInProgress.elementType) {\\n        // Lazy component props can't be validated in createElement\\n        // because they're only guaranteed to be resolved here.\\n        var innerPropTypes = Component.propTypes;\\n\\n        if (innerPropTypes) {\\n          checkPropTypes(innerPropTypes, nextProps, // Resolved props\\n          'prop', getComponentNameFromType(Component));\\n        }\\n      }\\n    }\\n\\n    var context;\\n\\n    {\\n      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\\n      context = getMaskedContext(workInProgress, unmaskedContext);\\n    }\\n\\n    var nextChildren;\\n    var hasId;\\n    prepareToReadContext(workInProgress, renderLanes);\\n\\n    {\\n      markComponentRenderStarted(workInProgress);\\n    }\\n\\n    {\\n      ReactCurrentOwner$1.current = workInProgress;\\n      setIsRendering(true);\\n      nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\\n      hasId = checkDidRenderIdHook();\\n\\n      if ( workInProgress.mode & StrictLegacyMode) {\\n        setIsStrictModeForDevtools(true);\\n\\n        try {\\n          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\\n          hasId = checkDidRenderIdHook();\\n        } finally {\\n          setIsStrictModeForDevtools(false);\\n        }\\n      }\\n\\n      setIsRendering(false);\\n    }\\n\\n    {\\n      markComponentRenderStopped();\\n    }\\n\\n    if (current !== null && !didReceiveUpdate) {\\n      bailoutHooks(current, workInProgress, renderLanes);\\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n    }\\n\\n    if (getIsHydrating() && hasId) {\\n      pushMaterializedTreeId(workInProgress);\\n    } // React DevTools reads this flag.\\n\\n\\n    workInProgress.flags |= PerformedWork;\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\\n    {\\n      // This is used by DevTools to force a boundary to error.\\n      switch (shouldError(workInProgress)) {\\n        case false:\\n          {\\n            var _instance = workInProgress.stateNode;\\n            var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\\n            // Is there a better way to do this?\\n\\n            var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\\n            var state = tempInstance.state;\\n\\n            _instance.updater.enqueueSetState(_instance, state, null);\\n\\n            break;\\n          }\\n\\n        case true:\\n          {\\n            workInProgress.flags |= DidCapture;\\n            workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\\n\\n            var error$1 = new Error('Simulated error coming from DevTools');\\n            var lane = pickArbitraryLane(renderLanes);\\n            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\\n\\n            var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\\n            enqueueCapturedUpdate(workInProgress, update);\\n            break;\\n          }\\n      }\\n\\n      if (workInProgress.type !== workInProgress.elementType) {\\n        // Lazy component props can't be validated in createElement\\n        // because they're only guaranteed to be resolved here.\\n        var innerPropTypes = Component.propTypes;\\n\\n        if (innerPropTypes) {\\n          checkPropTypes(innerPropTypes, nextProps, // Resolved props\\n          'prop', getComponentNameFromType(Component));\\n        }\\n      }\\n    } // Push context providers early to prevent context stack mismatches.\\n    // During mounting we don't know the child context yet as the instance doesn't exist.\\n    // We will invalidate the child context in finishClassComponent() right after rendering.\\n\\n\\n    var hasContext;\\n\\n    if (isContextProvider(Component)) {\\n      hasContext = true;\\n      pushContextProvider(workInProgress);\\n    } else {\\n      hasContext = false;\\n    }\\n\\n    prepareToReadContext(workInProgress, renderLanes);\\n    var instance = workInProgress.stateNode;\\n    var shouldUpdate;\\n\\n    if (instance === null) {\\n      resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\\n\\n      constructClassInstance(workInProgress, Component, nextProps);\\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\\n      shouldUpdate = true;\\n    } else if (current === null) {\\n      // In a resume, we'll already have an instance we can reuse.\\n      shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\\n    } else {\\n      shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\\n    }\\n\\n    var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\\n\\n    {\\n      var inst = workInProgress.stateNode;\\n\\n      if (shouldUpdate && inst.props !== nextProps) {\\n        if (!didWarnAboutReassigningProps) {\\n          error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\\n        }\\n\\n        didWarnAboutReassigningProps = true;\\n      }\\n    }\\n\\n    return nextUnitOfWork;\\n  }\\n\\n  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\\n    // Refs should update even if shouldComponentUpdate returns false\\n    markRef(current, workInProgress);\\n    var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\\n\\n    if (!shouldUpdate && !didCaptureError) {\\n      // Context providers should defer to sCU for rendering\\n      if (hasContext) {\\n        invalidateContextProvider(workInProgress, Component, false);\\n      }\\n\\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n    }\\n\\n    var instance = workInProgress.stateNode; // Rerender\\n\\n    ReactCurrentOwner$1.current = workInProgress;\\n    var nextChildren;\\n\\n    if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\\n      // If we captured an error, but getDerivedStateFromError is not defined,\\n      // unmount all the children. componentDidCatch will schedule an update to\\n      // re-render a fallback. This is temporary until we migrate everyone to\\n      // the new API.\\n      // TODO: Warn in a future release.\\n      nextChildren = null;\\n\\n      {\\n        stopProfilerTimerIfRunning();\\n      }\\n    } else {\\n      {\\n        markComponentRenderStarted(workInProgress);\\n      }\\n\\n      {\\n        setIsRendering(true);\\n        nextChildren = instance.render();\\n\\n        if ( workInProgress.mode & StrictLegacyMode) {\\n          setIsStrictModeForDevtools(true);\\n\\n          try {\\n            instance.render();\\n          } finally {\\n            setIsStrictModeForDevtools(false);\\n          }\\n        }\\n\\n        setIsRendering(false);\\n      }\\n\\n      {\\n        markComponentRenderStopped();\\n      }\\n    } // React DevTools reads this flag.\\n\\n\\n    workInProgress.flags |= PerformedWork;\\n\\n    if (current !== null && didCaptureError) {\\n      // If we're recovering from an error, reconcile without reusing any of\\n      // the existing children. Conceptually, the normal children and the children\\n      // that are shown on error are two different sets, so we shouldn't reuse\\n      // normal children even if their identities match.\\n      forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\\n    } else {\\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    } // Memoize state using the values we just used to render.\\n    // TODO: Restructure so we never read values from the instance.\\n\\n\\n    workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\\n\\n    if (hasContext) {\\n      invalidateContextProvider(workInProgress, Component, true);\\n    }\\n\\n    return workInProgress.child;\\n  }\\n\\n  function pushHostRootContext(workInProgress) {\\n    var root = workInProgress.stateNode;\\n\\n    if (root.pendingContext) {\\n      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\\n    } else if (root.context) {\\n      // Should always be set\\n      pushTopLevelContextObject(workInProgress, root.context, false);\\n    }\\n\\n    pushHostContainer(workInProgress, root.containerInfo);\\n  }\\n\\n  function updateHostRoot(current, workInProgress, renderLanes) {\\n    pushHostRootContext(workInProgress);\\n\\n    if (current === null) {\\n      throw new Error('Should have a current fiber. This is a bug in React.');\\n    }\\n\\n    var nextProps = workInProgress.pendingProps;\\n    var prevState = workInProgress.memoizedState;\\n    var prevChildren = prevState.element;\\n    cloneUpdateQueue(current, workInProgress);\\n    processUpdateQueue(workInProgress, nextProps, null, renderLanes);\\n    var nextState = workInProgress.memoizedState;\\n    var root = workInProgress.stateNode;\\n    // being called \\\"element\\\".\\n\\n\\n    var nextChildren = nextState.element;\\n\\n    if ( prevState.isDehydrated) {\\n      // This is a hydration root whose shell has not yet hydrated. We should\\n      // attempt to hydrate.\\n      // Flip isDehydrated to false to indicate that when this render\\n      // finishes, the root will no longer be dehydrated.\\n      var overrideState = {\\n        element: nextChildren,\\n        isDehydrated: false,\\n        cache: nextState.cache,\\n        pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\\n        transitions: nextState.transitions\\n      };\\n      var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\\n      // have reducer functions so it doesn't need rebasing.\\n\\n      updateQueue.baseState = overrideState;\\n      workInProgress.memoizedState = overrideState;\\n\\n      if (workInProgress.flags & ForceClientRender) {\\n        // Something errored during a previous attempt to hydrate the shell, so we\\n        // forced a client render.\\n        var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\\n        return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\\n      } else if (nextChildren !== prevChildren) {\\n        var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\\n\\n        return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\\n      } else {\\n        // The outermost shell has not hydrated yet. Start hydrating.\\n        enterHydrationState(workInProgress);\\n\\n        var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\\n        workInProgress.child = child;\\n        var node = child;\\n\\n        while (node) {\\n          // Mark each child as hydrating. This is a fast path to know whether this\\n          // tree is part of a hydrating tree. This is used to determine if a child\\n          // node has fully mounted yet, and for scheduling event replaying.\\n          // Conceptually this is similar to Placement in that a new subtree is\\n          // inserted into the React tree here. It just happens to not need DOM\\n          // mutations because it already exists.\\n          node.flags = node.flags & ~Placement | Hydrating;\\n          node = node.sibling;\\n        }\\n      }\\n    } else {\\n      // Root is not dehydrated. Either this is a client-only root, or it\\n      // already hydrated.\\n      resetHydrationState();\\n\\n      if (nextChildren === prevChildren) {\\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n      }\\n\\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    }\\n\\n    return workInProgress.child;\\n  }\\n\\n  function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\\n    // Revert to client rendering.\\n    resetHydrationState();\\n    queueHydrationError(recoverableError);\\n    workInProgress.flags |= ForceClientRender;\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function updateHostComponent(current, workInProgress, renderLanes) {\\n    pushHostContext(workInProgress);\\n\\n    if (current === null) {\\n      tryToClaimNextHydratableInstance(workInProgress);\\n    }\\n\\n    var type = workInProgress.type;\\n    var nextProps = workInProgress.pendingProps;\\n    var prevProps = current !== null ? current.memoizedProps : null;\\n    var nextChildren = nextProps.children;\\n    var isDirectTextChild = shouldSetTextContent(type, nextProps);\\n\\n    if (isDirectTextChild) {\\n      // We special case a direct text child of a host node. This is a common\\n      // case. We won't handle it as a reified child. We will instead handle\\n      // this in the host environment that also has access to this prop. That\\n      // avoids allocating another HostText fiber and traversing it.\\n      nextChildren = null;\\n    } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\\n      // If we're switching from a direct text child to a normal child, or to\\n      // empty, we need to schedule the text content to be reset.\\n      workInProgress.flags |= ContentReset;\\n    }\\n\\n    markRef(current, workInProgress);\\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function updateHostText(current, workInProgress) {\\n    if (current === null) {\\n      tryToClaimNextHydratableInstance(workInProgress);\\n    } // Nothing to do here. This is terminal. We'll do the completion step\\n    // immediately after.\\n\\n\\n    return null;\\n  }\\n\\n  function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\\n    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\\n    var props = workInProgress.pendingProps;\\n    var lazyComponent = elementType;\\n    var payload = lazyComponent._payload;\\n    var init = lazyComponent._init;\\n    var Component = init(payload); // Store the unwrapped component in the type.\\n\\n    workInProgress.type = Component;\\n    var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\\n    var resolvedProps = resolveDefaultProps(Component, props);\\n    var child;\\n\\n    switch (resolvedTag) {\\n      case FunctionComponent:\\n        {\\n          {\\n            validateFunctionComponentInDev(workInProgress, Component);\\n            workInProgress.type = Component = resolveFunctionForHotReloading(Component);\\n          }\\n\\n          child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\\n          return child;\\n        }\\n\\n      case ClassComponent:\\n        {\\n          {\\n            workInProgress.type = Component = resolveClassForHotReloading(Component);\\n          }\\n\\n          child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\\n          return child;\\n        }\\n\\n      case ForwardRef:\\n        {\\n          {\\n            workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\\n          }\\n\\n          child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\\n          return child;\\n        }\\n\\n      case MemoComponent:\\n        {\\n          {\\n            if (workInProgress.type !== workInProgress.elementType) {\\n              var outerPropTypes = Component.propTypes;\\n\\n              if (outerPropTypes) {\\n                checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\\n                'prop', getComponentNameFromType(Component));\\n              }\\n            }\\n          }\\n\\n          child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\\n          renderLanes);\\n          return child;\\n        }\\n    }\\n\\n    var hint = '';\\n\\n    {\\n      if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\\n        hint = ' Did you wrap a component in React.lazy() more than once?';\\n      }\\n    } // This message intentionally doesn't mention ForwardRef or MemoComponent\\n    // because the fact that it's a separate type of work is an\\n    // implementation detail.\\n\\n\\n    throw new Error(\\\"Element type is invalid. Received a promise that resolves to: \\\" + Component + \\\". \\\" + (\\\"Lazy element type must resolve to a class or function.\\\" + hint));\\n  }\\n\\n  function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\\n    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\\n\\n    workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\\n    // Push context providers early to prevent context stack mismatches.\\n    // During mounting we don't know the child context yet as the instance doesn't exist.\\n    // We will invalidate the child context in finishClassComponent() right after rendering.\\n\\n    var hasContext;\\n\\n    if (isContextProvider(Component)) {\\n      hasContext = true;\\n      pushContextProvider(workInProgress);\\n    } else {\\n      hasContext = false;\\n    }\\n\\n    prepareToReadContext(workInProgress, renderLanes);\\n    constructClassInstance(workInProgress, Component, nextProps);\\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\\n    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\\n  }\\n\\n  function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\\n    resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\\n    var props = workInProgress.pendingProps;\\n    var context;\\n\\n    {\\n      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\\n      context = getMaskedContext(workInProgress, unmaskedContext);\\n    }\\n\\n    prepareToReadContext(workInProgress, renderLanes);\\n    var value;\\n    var hasId;\\n\\n    {\\n      markComponentRenderStarted(workInProgress);\\n    }\\n\\n    {\\n      if (Component.prototype && typeof Component.prototype.render === 'function') {\\n        var componentName = getComponentNameFromType(Component) || 'Unknown';\\n\\n        if (!didWarnAboutBadClass[componentName]) {\\n          error(\\\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \\\" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\\n\\n          didWarnAboutBadClass[componentName] = true;\\n        }\\n      }\\n\\n      if (workInProgress.mode & StrictLegacyMode) {\\n        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\\n      }\\n\\n      setIsRendering(true);\\n      ReactCurrentOwner$1.current = workInProgress;\\n      value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\\n      hasId = checkDidRenderIdHook();\\n      setIsRendering(false);\\n    }\\n\\n    {\\n      markComponentRenderStopped();\\n    } // React DevTools reads this flag.\\n\\n\\n    workInProgress.flags |= PerformedWork;\\n\\n    {\\n      // Support for module components is deprecated and is removed behind a flag.\\n      // Whether or not it would crash later, we want to show a good message in DEV first.\\n      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\\n        var _componentName = getComponentNameFromType(Component) || 'Unknown';\\n\\n        if (!didWarnAboutModulePatternComponent[_componentName]) {\\n          error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \\\"If you can't use a class try assigning the prototype on the function as a workaround. \\\" + \\\"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \\\" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\\n\\n          didWarnAboutModulePatternComponent[_componentName] = true;\\n        }\\n      }\\n    }\\n\\n    if ( // Run these checks in production only if the flag is off.\\n    // Eventually we'll delete this branch altogether.\\n     typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\\n      {\\n        var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\\n\\n        if (!didWarnAboutModulePatternComponent[_componentName2]) {\\n          error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \\\"If you can't use a class try assigning the prototype on the function as a workaround. \\\" + \\\"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \\\" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\\n\\n          didWarnAboutModulePatternComponent[_componentName2] = true;\\n        }\\n      } // Proceed under the assumption that this is a class instance\\n\\n\\n      workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\\n\\n      workInProgress.memoizedState = null;\\n      workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\\n      // During mounting we don't know the child context yet as the instance doesn't exist.\\n      // We will invalidate the child context in finishClassComponent() right after rendering.\\n\\n      var hasContext = false;\\n\\n      if (isContextProvider(Component)) {\\n        hasContext = true;\\n        pushContextProvider(workInProgress);\\n      } else {\\n        hasContext = false;\\n      }\\n\\n      workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\\n      initializeUpdateQueue(workInProgress);\\n      adoptClassInstance(workInProgress, value);\\n      mountClassInstance(workInProgress, Component, props, renderLanes);\\n      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\\n    } else {\\n      // Proceed under the assumption that this is a function component\\n      workInProgress.tag = FunctionComponent;\\n\\n      {\\n\\n        if ( workInProgress.mode & StrictLegacyMode) {\\n          setIsStrictModeForDevtools(true);\\n\\n          try {\\n            value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\\n            hasId = checkDidRenderIdHook();\\n          } finally {\\n            setIsStrictModeForDevtools(false);\\n          }\\n        }\\n      }\\n\\n      if (getIsHydrating() && hasId) {\\n        pushMaterializedTreeId(workInProgress);\\n      }\\n\\n      reconcileChildren(null, workInProgress, value, renderLanes);\\n\\n      {\\n        validateFunctionComponentInDev(workInProgress, Component);\\n      }\\n\\n      return workInProgress.child;\\n    }\\n  }\\n\\n  function validateFunctionComponentInDev(workInProgress, Component) {\\n    {\\n      if (Component) {\\n        if (Component.childContextTypes) {\\n          error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\\n        }\\n      }\\n\\n      if (workInProgress.ref !== null) {\\n        var info = '';\\n        var ownerName = getCurrentFiberOwnerNameInDevOrNull();\\n\\n        if (ownerName) {\\n          info += '\\\\n\\\\nCheck the render method of `' + ownerName + '`.';\\n        }\\n\\n        var warningKey = ownerName || '';\\n        var debugSource = workInProgress._debugSource;\\n\\n        if (debugSource) {\\n          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\\n        }\\n\\n        if (!didWarnAboutFunctionRefs[warningKey]) {\\n          didWarnAboutFunctionRefs[warningKey] = true;\\n\\n          error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\\n        }\\n      }\\n\\n      if (typeof Component.getDerivedStateFromProps === 'function') {\\n        var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\\n\\n        if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\\n          error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\\n\\n          didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\\n        }\\n      }\\n\\n      if (typeof Component.contextType === 'object' && Component.contextType !== null) {\\n        var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\\n\\n        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\\n          error('%s: Function components do not support contextType.', _componentName4);\\n\\n          didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\\n        }\\n      }\\n    }\\n  }\\n\\n  var SUSPENDED_MARKER = {\\n    dehydrated: null,\\n    treeContext: null,\\n    retryLane: NoLane\\n  };\\n\\n  function mountSuspenseOffscreenState(renderLanes) {\\n    return {\\n      baseLanes: renderLanes,\\n      cachePool: getSuspendedCache(),\\n      transitions: null\\n    };\\n  }\\n\\n  function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\\n    var cachePool = null;\\n\\n    return {\\n      baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\\n      cachePool: cachePool,\\n      transitions: prevOffscreenState.transitions\\n    };\\n  } // TODO: Probably should inline this back\\n\\n\\n  function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\\n    // If we're already showing a fallback, there are cases where we need to\\n    // remain on that fallback regardless of whether the content has resolved.\\n    // For example, SuspenseList coordinates when nested content appears.\\n    if (current !== null) {\\n      var suspenseState = current.memoizedState;\\n\\n      if (suspenseState === null) {\\n        // Currently showing content. Don't hide it, even if ForceSuspenseFallback\\n        // is true. More precise name might be \\\"ForceRemainSuspenseFallback\\\".\\n        // Note: This is a factoring smell. Can't remain on a fallback if there's\\n        // no fallback to remain on.\\n        return false;\\n      }\\n    } // Not currently showing content. Consult the Suspense context.\\n\\n\\n    return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\\n  }\\n\\n  function getRemainingWorkInPrimaryTree(current, renderLanes) {\\n    // TODO: Should not remove render lanes that were pinged during this render\\n    return removeLanes(current.childLanes, renderLanes);\\n  }\\n\\n  function updateSuspenseComponent(current, workInProgress, renderLanes) {\\n    var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\\n\\n    {\\n      if (shouldSuspend(workInProgress)) {\\n        workInProgress.flags |= DidCapture;\\n      }\\n    }\\n\\n    var suspenseContext = suspenseStackCursor.current;\\n    var showFallback = false;\\n    var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\\n\\n    if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\\n      // Something in this boundary's subtree already suspended. Switch to\\n      // rendering the fallback children.\\n      showFallback = true;\\n      workInProgress.flags &= ~DidCapture;\\n    } else {\\n      // Attempting the main content\\n      if (current === null || current.memoizedState !== null) {\\n        // This is a new mount or this boundary is already showing a fallback state.\\n        // Mark this subtree context as having at least one invisible parent that could\\n        // handle the fallback state.\\n        // Avoided boundaries are not considered since they cannot handle preferred fallback states.\\n        {\\n          suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\\n        }\\n      }\\n    }\\n\\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\\n    pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\\n    // boundary's children. This involves some custom reconciliation logic. Two\\n    // main reasons this is so complicated.\\n    //\\n    // First, Legacy Mode has different semantics for backwards compatibility. The\\n    // primary tree will commit in an inconsistent state, so when we do the\\n    // second pass to render the fallback, we do some exceedingly, uh, clever\\n    // hacks to make that not totally break. Like transferring effects and\\n    // deletions from hidden tree. In Concurrent Mode, it's much simpler,\\n    // because we bailout on the primary tree completely and leave it in its old\\n    // state, no effects. Same as what we do for Offscreen (except that\\n    // Offscreen doesn't have the first render pass).\\n    //\\n    // Second is hydration. During hydration, the Suspense fiber has a slightly\\n    // different layout, where the child points to a dehydrated fragment, which\\n    // contains the DOM rendered by the server.\\n    //\\n    // Third, even if you set all that aside, Suspense is like error boundaries in\\n    // that we first we try to render one tree, and if that fails, we render again\\n    // and switch to a different tree. Like a try/catch block. So we have to track\\n    // which branch we're currently rendering. Ideally we would model this using\\n    // a stack.\\n\\n    if (current === null) {\\n      // Initial mount\\n      // Special path for hydration\\n      // If we're currently hydrating, try to hydrate this boundary.\\n      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\\n\\n      var suspenseState = workInProgress.memoizedState;\\n\\n      if (suspenseState !== null) {\\n        var dehydrated = suspenseState.dehydrated;\\n\\n        if (dehydrated !== null) {\\n          return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\\n        }\\n      }\\n\\n      var nextPrimaryChildren = nextProps.children;\\n      var nextFallbackChildren = nextProps.fallback;\\n\\n      if (showFallback) {\\n        var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\\n        var primaryChildFragment = workInProgress.child;\\n        primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\\n        workInProgress.memoizedState = SUSPENDED_MARKER;\\n\\n        return fallbackFragment;\\n      } else {\\n        return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\\n      }\\n    } else {\\n      // This is an update.\\n      // Special path for hydration\\n      var prevState = current.memoizedState;\\n\\n      if (prevState !== null) {\\n        var _dehydrated = prevState.dehydrated;\\n\\n        if (_dehydrated !== null) {\\n          return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\\n        }\\n      }\\n\\n      if (showFallback) {\\n        var _nextFallbackChildren = nextProps.fallback;\\n        var _nextPrimaryChildren = nextProps.children;\\n        var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\\n        var _primaryChildFragment2 = workInProgress.child;\\n        var prevOffscreenState = current.child.memoizedState;\\n        _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\\n\\n        _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\\n        workInProgress.memoizedState = SUSPENDED_MARKER;\\n        return fallbackChildFragment;\\n      } else {\\n        var _nextPrimaryChildren2 = nextProps.children;\\n\\n        var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\\n\\n        workInProgress.memoizedState = null;\\n        return _primaryChildFragment3;\\n      }\\n    }\\n  }\\n\\n  function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\\n    var mode = workInProgress.mode;\\n    var primaryChildProps = {\\n      mode: 'visible',\\n      children: primaryChildren\\n    };\\n    var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\\n    primaryChildFragment.return = workInProgress;\\n    workInProgress.child = primaryChildFragment;\\n    return primaryChildFragment;\\n  }\\n\\n  function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\\n    var mode = workInProgress.mode;\\n    var progressedPrimaryFragment = workInProgress.child;\\n    var primaryChildProps = {\\n      mode: 'hidden',\\n      children: primaryChildren\\n    };\\n    var primaryChildFragment;\\n    var fallbackChildFragment;\\n\\n    if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\\n      // In legacy mode, we commit the primary tree as if it successfully\\n      // completed, even though it's in an inconsistent state.\\n      primaryChildFragment = progressedPrimaryFragment;\\n      primaryChildFragment.childLanes = NoLanes;\\n      primaryChildFragment.pendingProps = primaryChildProps;\\n\\n      if ( workInProgress.mode & ProfileMode) {\\n        // Reset the durations from the first pass so they aren't included in the\\n        // final amounts. This seems counterintuitive, since we're intentionally\\n        // not measuring part of the render phase, but this makes it match what we\\n        // do in Concurrent Mode.\\n        primaryChildFragment.actualDuration = 0;\\n        primaryChildFragment.actualStartTime = -1;\\n        primaryChildFragment.selfBaseDuration = 0;\\n        primaryChildFragment.treeBaseDuration = 0;\\n      }\\n\\n      fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\\n    } else {\\n      primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\\n      fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\\n    }\\n\\n    primaryChildFragment.return = workInProgress;\\n    fallbackChildFragment.return = workInProgress;\\n    primaryChildFragment.sibling = fallbackChildFragment;\\n    workInProgress.child = primaryChildFragment;\\n    return fallbackChildFragment;\\n  }\\n\\n  function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\\n    // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\\n    // this wrapper function to constrain it.\\n    return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\\n  }\\n\\n  function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\\n    // The props argument to `createWorkInProgress` is `any` typed, so we use this\\n    // wrapper function to constrain it.\\n    return createWorkInProgress(current, offscreenProps);\\n  }\\n\\n  function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\\n    var currentPrimaryChildFragment = current.child;\\n    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\\n    var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\\n      mode: 'visible',\\n      children: primaryChildren\\n    });\\n\\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\\n      primaryChildFragment.lanes = renderLanes;\\n    }\\n\\n    primaryChildFragment.return = workInProgress;\\n    primaryChildFragment.sibling = null;\\n\\n    if (currentFallbackChildFragment !== null) {\\n      // Delete the fallback child fragment\\n      var deletions = workInProgress.deletions;\\n\\n      if (deletions === null) {\\n        workInProgress.deletions = [currentFallbackChildFragment];\\n        workInProgress.flags |= ChildDeletion;\\n      } else {\\n        deletions.push(currentFallbackChildFragment);\\n      }\\n    }\\n\\n    workInProgress.child = primaryChildFragment;\\n    return primaryChildFragment;\\n  }\\n\\n  function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\\n    var mode = workInProgress.mode;\\n    var currentPrimaryChildFragment = current.child;\\n    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\\n    var primaryChildProps = {\\n      mode: 'hidden',\\n      children: primaryChildren\\n    };\\n    var primaryChildFragment;\\n\\n    if ( // In legacy mode, we commit the primary tree as if it successfully\\n    // completed, even though it's in an inconsistent state.\\n    (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\\n    // already cloned. In legacy mode, the only case where this isn't true is\\n    // when DevTools forces us to display a fallback; we skip the first render\\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\\n    // only codepath.)\\n    workInProgress.child !== currentPrimaryChildFragment) {\\n      var progressedPrimaryFragment = workInProgress.child;\\n      primaryChildFragment = progressedPrimaryFragment;\\n      primaryChildFragment.childLanes = NoLanes;\\n      primaryChildFragment.pendingProps = primaryChildProps;\\n\\n      if ( workInProgress.mode & ProfileMode) {\\n        // Reset the durations from the first pass so they aren't included in the\\n        // final amounts. This seems counterintuitive, since we're intentionally\\n        // not measuring part of the render phase, but this makes it match what we\\n        // do in Concurrent Mode.\\n        primaryChildFragment.actualDuration = 0;\\n        primaryChildFragment.actualStartTime = -1;\\n        primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\\n        primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\\n      } // The fallback fiber was added as a deletion during the first pass.\\n      // However, since we're going to remain on the fallback, we no longer want\\n      // to delete it.\\n\\n\\n      workInProgress.deletions = null;\\n    } else {\\n      primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\\n      // (We don't do this in legacy mode, because in legacy mode we don't re-use\\n      // the current tree; see previous branch.)\\n\\n      primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\\n    }\\n\\n    var fallbackChildFragment;\\n\\n    if (currentFallbackChildFragment !== null) {\\n      fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\\n    } else {\\n      fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\\n      // mounted but this is a new fiber.\\n\\n      fallbackChildFragment.flags |= Placement;\\n    }\\n\\n    fallbackChildFragment.return = workInProgress;\\n    primaryChildFragment.return = workInProgress;\\n    primaryChildFragment.sibling = fallbackChildFragment;\\n    workInProgress.child = primaryChildFragment;\\n    return fallbackChildFragment;\\n  }\\n\\n  function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\\n    // Falling back to client rendering. Because this has performance\\n    // implications, it's considered a recoverable error, even though the user\\n    // likely won't observe anything wrong with the UI.\\n    //\\n    // The error is passed in as an argument to enforce that every caller provide\\n    // a custom message, or explicitly opt out (currently the only path that opts\\n    // out is legacy mode; every concurrent path provides an error).\\n    if (recoverableError !== null) {\\n      queueHydrationError(recoverableError);\\n    } // This will add the old fiber to the deletion list\\n\\n\\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\\n\\n    var nextProps = workInProgress.pendingProps;\\n    var primaryChildren = nextProps.children;\\n    var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\\n    // mounted but this is a new fiber.\\n\\n    primaryChildFragment.flags |= Placement;\\n    workInProgress.memoizedState = null;\\n    return primaryChildFragment;\\n  }\\n\\n  function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\\n    var fiberMode = workInProgress.mode;\\n    var primaryChildProps = {\\n      mode: 'visible',\\n      children: primaryChildren\\n    };\\n    var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\\n    var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\\n    // boundary) already mounted but this is a new fiber.\\n\\n    fallbackChildFragment.flags |= Placement;\\n    primaryChildFragment.return = workInProgress;\\n    fallbackChildFragment.return = workInProgress;\\n    primaryChildFragment.sibling = fallbackChildFragment;\\n    workInProgress.child = primaryChildFragment;\\n\\n    if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\\n      // We will have dropped the effect list which contains the\\n      // deletion. We need to reconcile to delete the current child.\\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes);\\n    }\\n\\n    return fallbackChildFragment;\\n  }\\n\\n  function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\\n    // During the first pass, we'll bail out and not drill into the children.\\n    // Instead, we'll leave the content in place and try to hydrate it later.\\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\\n      {\\n        error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\\n      }\\n\\n      workInProgress.lanes = laneToLanes(SyncLane);\\n    } else if (isSuspenseInstanceFallback(suspenseInstance)) {\\n      // This is a client-only boundary. Since we won't get any content from the server\\n      // for this, we need to schedule that at a higher priority based on when it would\\n      // have timed out. In theory we could render it in this pass but it would have the\\n      // wrong priority associated with it and will prevent hydration of parent path.\\n      // Instead, we'll leave work left on it to render it in a separate commit.\\n      // TODO This time should be the time at which the server rendered response that is\\n      // a parent to this boundary was displayed. However, since we currently don't have\\n      // a protocol to transfer that time, we'll just estimate it by using the current\\n      // time. This will mean that Suspense timeouts are slightly shifted to later than\\n      // they should be.\\n      // Schedule a normal pri update to render this content.\\n      workInProgress.lanes = laneToLanes(DefaultHydrationLane);\\n    } else {\\n      // We'll continue hydrating the rest at offscreen priority since we'll already\\n      // be showing the right content coming from the server, it is no rush.\\n      workInProgress.lanes = laneToLanes(OffscreenLane);\\n    }\\n\\n    return null;\\n  }\\n\\n  function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\\n    if (!didSuspend) {\\n      // This is the first render pass. Attempt to hydrate.\\n      // We should never be hydrating at this point because it is the first pass,\\n      // but after we've already committed once.\\n      warnIfHydrating();\\n\\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\\n        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\\n        // required — every concurrent mode path that causes hydration to\\n        // de-opt to client rendering should have an error message.\\n        null);\\n      }\\n\\n      if (isSuspenseInstanceFallback(suspenseInstance)) {\\n        // This boundary is in a permanent fallback state. In this case, we'll never\\n        // get an update and we'll never be able to hydrate the final content. Let's just try the\\n        // client side render instead.\\n        var digest, message, stack;\\n\\n        {\\n          var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\\n\\n          digest = _getSuspenseInstanceF.digest;\\n          message = _getSuspenseInstanceF.message;\\n          stack = _getSuspenseInstanceF.stack;\\n        }\\n\\n        var error;\\n\\n        if (message) {\\n          // eslint-disable-next-line react-internal/prod-error-codes\\n          error = new Error(message);\\n        } else {\\n          error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\\n        }\\n\\n        var capturedValue = createCapturedValue(error, digest, stack);\\n        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\\n      }\\n      // any context has changed, we need to treat is as if the input might have changed.\\n\\n\\n      var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\\n\\n      if (didReceiveUpdate || hasContextChanged) {\\n        // This boundary has changed since the first render. This means that we are now unable to\\n        // hydrate it. We might still be able to hydrate it using a higher priority lane.\\n        var root = getWorkInProgressRoot();\\n\\n        if (root !== null) {\\n          var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\\n\\n          if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\\n            // Intentionally mutating since this render will get interrupted. This\\n            // is one of the very rare times where we mutate the current tree\\n            // during the render phase.\\n            suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\\n\\n            var eventTime = NoTimestamp;\\n            enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\\n            scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\\n          }\\n        } // If we have scheduled higher pri work above, this will probably just abort the render\\n        // since we now have higher priority work, but in case it doesn't, we need to prepare to\\n        // render something, if we time out. Even if that requires us to delete everything and\\n        // skip hydration.\\n        // Delay having to do this as long as the suspense timeout allows us.\\n\\n\\n        renderDidSuspendDelayIfPossible();\\n\\n        var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\\n\\n        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\\n      } else if (isSuspenseInstancePending(suspenseInstance)) {\\n        // This component is still pending more data from the server, so we can't hydrate its\\n        // content. We treat it as if this component suspended itself. It might seem as if\\n        // we could just try to render it client-side instead. However, this will perform a\\n        // lot of unnecessary work and is unlikely to complete since it often will suspend\\n        // on missing data anyway. Additionally, the server might be able to render more\\n        // than we can on the client yet. In that case we'd end up with more fallback states\\n        // on the client than if we just leave it alone. If the server times out or errors\\n        // these should update this boundary to the permanent Fallback state instead.\\n        // Mark it as having captured (i.e. suspended).\\n        workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\\n\\n        workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\\n\\n        var retry = retryDehydratedSuspenseBoundary.bind(null, current);\\n        registerSuspenseInstanceRetry(suspenseInstance, retry);\\n        return null;\\n      } else {\\n        // This is the first attempt.\\n        reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\\n        var primaryChildren = nextProps.children;\\n        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\\n        // tree is part of a hydrating tree. This is used to determine if a child\\n        // node has fully mounted yet, and for scheduling event replaying.\\n        // Conceptually this is similar to Placement in that a new subtree is\\n        // inserted into the React tree here. It just happens to not need DOM\\n        // mutations because it already exists.\\n\\n        primaryChildFragment.flags |= Hydrating;\\n        return primaryChildFragment;\\n      }\\n    } else {\\n      // This is the second render pass. We already attempted to hydrated, but\\n      // something either suspended or errored.\\n      if (workInProgress.flags & ForceClientRender) {\\n        // Something errored during hydration. Try again without hydrating.\\n        workInProgress.flags &= ~ForceClientRender;\\n\\n        var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\\n\\n        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\\n      } else if (workInProgress.memoizedState !== null) {\\n        // Something suspended and we should still be in dehydrated mode.\\n        // Leave the existing child in place.\\n        workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\\n        // but the normal suspense pass doesn't.\\n\\n        workInProgress.flags |= DidCapture;\\n        return null;\\n      } else {\\n        // Suspended but we should no longer be in dehydrated mode.\\n        // Therefore we now have to render the fallback.\\n        var nextPrimaryChildren = nextProps.children;\\n        var nextFallbackChildren = nextProps.fallback;\\n        var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\\n        var _primaryChildFragment4 = workInProgress.child;\\n        _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\\n        workInProgress.memoizedState = SUSPENDED_MARKER;\\n        return fallbackChildFragment;\\n      }\\n    }\\n  }\\n\\n  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\\n    fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\\n    var alternate = fiber.alternate;\\n\\n    if (alternate !== null) {\\n      alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\\n    }\\n\\n    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\\n  }\\n\\n  function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\\n    // Mark any Suspense boundaries with fallbacks as having work to do.\\n    // If they were previously forced into fallbacks, they may now be able\\n    // to unblock.\\n    var node = firstChild;\\n\\n    while (node !== null) {\\n      if (node.tag === SuspenseComponent) {\\n        var state = node.memoizedState;\\n\\n        if (state !== null) {\\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\\n        }\\n      } else if (node.tag === SuspenseListComponent) {\\n        // If the tail is hidden there might not be an Suspense boundaries\\n        // to schedule work on. In this case we have to schedule it on the\\n        // list itself.\\n        // We don't have to traverse to the children of the list since\\n        // the list will propagate the change when it rerenders.\\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\\n      } else if (node.child !== null) {\\n        node.child.return = node;\\n        node = node.child;\\n        continue;\\n      }\\n\\n      if (node === workInProgress) {\\n        return;\\n      }\\n\\n      while (node.sibling === null) {\\n        if (node.return === null || node.return === workInProgress) {\\n          return;\\n        }\\n\\n        node = node.return;\\n      }\\n\\n      node.sibling.return = node.return;\\n      node = node.sibling;\\n    }\\n  }\\n\\n  function findLastContentRow(firstChild) {\\n    // This is going to find the last row among these children that is already\\n    // showing content on the screen, as opposed to being in fallback state or\\n    // new. If a row has multiple Suspense boundaries, any of them being in the\\n    // fallback state, counts as the whole row being in a fallback state.\\n    // Note that the \\\"rows\\\" will be workInProgress, but any nested children\\n    // will still be current since we haven't rendered them yet. The mounted\\n    // order may not be the same as the new order. We use the new order.\\n    var row = firstChild;\\n    var lastContentRow = null;\\n\\n    while (row !== null) {\\n      var currentRow = row.alternate; // New rows can't be content rows.\\n\\n      if (currentRow !== null && findFirstSuspended(currentRow) === null) {\\n        lastContentRow = row;\\n      }\\n\\n      row = row.sibling;\\n    }\\n\\n    return lastContentRow;\\n  }\\n\\n  function validateRevealOrder(revealOrder) {\\n    {\\n      if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\\n        didWarnAboutRevealOrder[revealOrder] = true;\\n\\n        if (typeof revealOrder === 'string') {\\n          switch (revealOrder.toLowerCase()) {\\n            case 'together':\\n            case 'forwards':\\n            case 'backwards':\\n              {\\n                error('\\\"%s\\\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \\\"%s\\\" instead.', revealOrder, revealOrder.toLowerCase());\\n\\n                break;\\n              }\\n\\n            case 'forward':\\n            case 'backward':\\n              {\\n                error('\\\"%s\\\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \\\"%ss\\\" instead.', revealOrder, revealOrder.toLowerCase());\\n\\n                break;\\n              }\\n\\n            default:\\n              error('\\\"%s\\\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \\\"together\\\", \\\"forwards\\\" or \\\"backwards\\\"?', revealOrder);\\n\\n              break;\\n          }\\n        } else {\\n          error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \\\"together\\\", \\\"forwards\\\" or \\\"backwards\\\"?', revealOrder);\\n        }\\n      }\\n    }\\n  }\\n\\n  function validateTailOptions(tailMode, revealOrder) {\\n    {\\n      if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\\n        if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\\n          didWarnAboutTailOptions[tailMode] = true;\\n\\n          error('\\\"%s\\\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \\\"collapsed\\\" or \\\"hidden\\\"?', tailMode);\\n        } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\\n          didWarnAboutTailOptions[tailMode] = true;\\n\\n          error('<SuspenseList tail=\\\"%s\\\" /> is only valid if revealOrder is ' + '\\\"forwards\\\" or \\\"backwards\\\". ' + 'Did you mean to specify revealOrder=\\\"forwards\\\"?', tailMode);\\n        }\\n      }\\n    }\\n  }\\n\\n  function validateSuspenseListNestedChild(childSlot, index) {\\n    {\\n      var isAnArray = isArray(childSlot);\\n      var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\\n\\n      if (isAnArray || isIterable) {\\n        var type = isAnArray ? 'array' : 'iterable';\\n\\n        error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\\n\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  function validateSuspenseListChildren(children, revealOrder) {\\n    {\\n      if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\\n        if (isArray(children)) {\\n          for (var i = 0; i < children.length; i++) {\\n            if (!validateSuspenseListNestedChild(children[i], i)) {\\n              return;\\n            }\\n          }\\n        } else {\\n          var iteratorFn = getIteratorFn(children);\\n\\n          if (typeof iteratorFn === 'function') {\\n            var childrenIterator = iteratorFn.call(children);\\n\\n            if (childrenIterator) {\\n              var step = childrenIterator.next();\\n              var _i = 0;\\n\\n              for (; !step.done; step = childrenIterator.next()) {\\n                if (!validateSuspenseListNestedChild(step.value, _i)) {\\n                  return;\\n                }\\n\\n                _i++;\\n              }\\n            }\\n          } else {\\n            error('A single row was passed to a <SuspenseList revealOrder=\\\"%s\\\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\\n    var renderState = workInProgress.memoizedState;\\n\\n    if (renderState === null) {\\n      workInProgress.memoizedState = {\\n        isBackwards: isBackwards,\\n        rendering: null,\\n        renderingStartTime: 0,\\n        last: lastContentRow,\\n        tail: tail,\\n        tailMode: tailMode\\n      };\\n    } else {\\n      // We can reuse the existing object from previous renders.\\n      renderState.isBackwards = isBackwards;\\n      renderState.rendering = null;\\n      renderState.renderingStartTime = 0;\\n      renderState.last = lastContentRow;\\n      renderState.tail = tail;\\n      renderState.tailMode = tailMode;\\n    }\\n  } // This can end up rendering this component multiple passes.\\n  // The first pass splits the children fibers into two sets. A head and tail.\\n  // We first render the head. If anything is in fallback state, we do another\\n  // pass through beginWork to rerender all children (including the tail) with\\n  // the force suspend context. If the first render didn't have anything in\\n  // in fallback state. Then we render each row in the tail one-by-one.\\n  // That happens in the completeWork phase without going back to beginWork.\\n\\n\\n  function updateSuspenseListComponent(current, workInProgress, renderLanes) {\\n    var nextProps = workInProgress.pendingProps;\\n    var revealOrder = nextProps.revealOrder;\\n    var tailMode = nextProps.tail;\\n    var newChildren = nextProps.children;\\n    validateRevealOrder(revealOrder);\\n    validateTailOptions(tailMode, revealOrder);\\n    validateSuspenseListChildren(newChildren, revealOrder);\\n    reconcileChildren(current, workInProgress, newChildren, renderLanes);\\n    var suspenseContext = suspenseStackCursor.current;\\n    var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\\n\\n    if (shouldForceFallback) {\\n      suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\\n      workInProgress.flags |= DidCapture;\\n    } else {\\n      var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\\n\\n      if (didSuspendBefore) {\\n        // If we previously forced a fallback, we need to schedule work\\n        // on any nested boundaries to let them know to try to render\\n        // again. This is the same as context updating.\\n        propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\\n      }\\n\\n      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\\n    }\\n\\n    pushSuspenseContext(workInProgress, suspenseContext);\\n\\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\\n      // In legacy mode, SuspenseList doesn't work so we just\\n      // use make it a noop by treating it as the default revealOrder.\\n      workInProgress.memoizedState = null;\\n    } else {\\n      switch (revealOrder) {\\n        case 'forwards':\\n          {\\n            var lastContentRow = findLastContentRow(workInProgress.child);\\n            var tail;\\n\\n            if (lastContentRow === null) {\\n              // The whole list is part of the tail.\\n              // TODO: We could fast path by just rendering the tail now.\\n              tail = workInProgress.child;\\n              workInProgress.child = null;\\n            } else {\\n              // Disconnect the tail rows after the content row.\\n              // We're going to render them separately later.\\n              tail = lastContentRow.sibling;\\n              lastContentRow.sibling = null;\\n            }\\n\\n            initSuspenseListRenderState(workInProgress, false, // isBackwards\\n            tail, lastContentRow, tailMode);\\n            break;\\n          }\\n\\n        case 'backwards':\\n          {\\n            // We're going to find the first row that has existing content.\\n            // At the same time we're going to reverse the list of everything\\n            // we pass in the meantime. That's going to be our tail in reverse\\n            // order.\\n            var _tail = null;\\n            var row = workInProgress.child;\\n            workInProgress.child = null;\\n\\n            while (row !== null) {\\n              var currentRow = row.alternate; // New rows can't be content rows.\\n\\n              if (currentRow !== null && findFirstSuspended(currentRow) === null) {\\n                // This is the beginning of the main content.\\n                workInProgress.child = row;\\n                break;\\n              }\\n\\n              var nextRow = row.sibling;\\n              row.sibling = _tail;\\n              _tail = row;\\n              row = nextRow;\\n            } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\\n\\n\\n            initSuspenseListRenderState(workInProgress, true, // isBackwards\\n            _tail, null, // last\\n            tailMode);\\n            break;\\n          }\\n\\n        case 'together':\\n          {\\n            initSuspenseListRenderState(workInProgress, false, // isBackwards\\n            null, // tail\\n            null, // last\\n            undefined);\\n            break;\\n          }\\n\\n        default:\\n          {\\n            // The default reveal order is the same as not having\\n            // a boundary.\\n            workInProgress.memoizedState = null;\\n          }\\n      }\\n    }\\n\\n    return workInProgress.child;\\n  }\\n\\n  function updatePortalComponent(current, workInProgress, renderLanes) {\\n    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\\n    var nextChildren = workInProgress.pendingProps;\\n\\n    if (current === null) {\\n      // Portals are special because we don't append the children during mount\\n      // but at commit. Therefore we need to track insertions which the normal\\n      // flow doesn't do during mount. This doesn't happen at the root because\\n      // the root always starts with a \\\"current\\\" with a null child.\\n      // TODO: Consider unifying this with how the root works.\\n      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\\n    } else {\\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\\n    }\\n\\n    return workInProgress.child;\\n  }\\n\\n  var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\\n\\n  function updateContextProvider(current, workInProgress, renderLanes) {\\n    var providerType = workInProgress.type;\\n    var context = providerType._context;\\n    var newProps = workInProgress.pendingProps;\\n    var oldProps = workInProgress.memoizedProps;\\n    var newValue = newProps.value;\\n\\n    {\\n      if (!('value' in newProps)) {\\n        if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\\n          hasWarnedAboutUsingNoValuePropOnContextProvider = true;\\n\\n          error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\\n        }\\n      }\\n\\n      var providerPropTypes = workInProgress.type.propTypes;\\n\\n      if (providerPropTypes) {\\n        checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\\n      }\\n    }\\n\\n    pushProvider(workInProgress, context, newValue);\\n\\n    {\\n      if (oldProps !== null) {\\n        var oldValue = oldProps.value;\\n\\n        if (objectIs(oldValue, newValue)) {\\n          // No change. Bailout early if children are the same.\\n          if (oldProps.children === newProps.children && !hasContextChanged()) {\\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n          }\\n        } else {\\n          // The context value changed. Search for matching consumers and schedule\\n          // them to update.\\n          propagateContextChange(workInProgress, context, renderLanes);\\n        }\\n      }\\n    }\\n\\n    var newChildren = newProps.children;\\n    reconcileChildren(current, workInProgress, newChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  var hasWarnedAboutUsingContextAsConsumer = false;\\n\\n  function updateContextConsumer(current, workInProgress, renderLanes) {\\n    var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\\n    // DEV mode, we create a separate object for Context.Consumer that acts\\n    // like a proxy to Context. This proxy object adds unnecessary code in PROD\\n    // so we use the old behaviour (Context.Consumer references Context) to\\n    // reduce size and overhead. The separate object references context via\\n    // a property called \\\"_context\\\", which also gives us the ability to check\\n    // in DEV mode if this property exists or not and warn if it does not.\\n\\n    {\\n      if (context._context === undefined) {\\n        // This may be because it's a Context (rather than a Consumer).\\n        // Or it may be because it's older React where they're the same thing.\\n        // We only want to warn if we're sure it's a new React.\\n        if (context !== context.Consumer) {\\n          if (!hasWarnedAboutUsingContextAsConsumer) {\\n            hasWarnedAboutUsingContextAsConsumer = true;\\n\\n            error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\\n          }\\n        }\\n      } else {\\n        context = context._context;\\n      }\\n    }\\n\\n    var newProps = workInProgress.pendingProps;\\n    var render = newProps.children;\\n\\n    {\\n      if (typeof render !== 'function') {\\n        error('A context consumer was rendered with multiple children, or a child ' + \\\"that isn't a function. A context consumer expects a single child \\\" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\\n      }\\n    }\\n\\n    prepareToReadContext(workInProgress, renderLanes);\\n    var newValue = readContext(context);\\n\\n    {\\n      markComponentRenderStarted(workInProgress);\\n    }\\n\\n    var newChildren;\\n\\n    {\\n      ReactCurrentOwner$1.current = workInProgress;\\n      setIsRendering(true);\\n      newChildren = render(newValue);\\n      setIsRendering(false);\\n    }\\n\\n    {\\n      markComponentRenderStopped();\\n    } // React DevTools reads this flag.\\n\\n\\n    workInProgress.flags |= PerformedWork;\\n    reconcileChildren(current, workInProgress, newChildren, renderLanes);\\n    return workInProgress.child;\\n  }\\n\\n  function markWorkInProgressReceivedUpdate() {\\n    didReceiveUpdate = true;\\n  }\\n\\n  function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\\n      if (current !== null) {\\n        // A lazy component only mounts if it suspended inside a non-\\n        // concurrent tree, in an inconsistent state. We want to treat it like\\n        // a new mount, even though an empty version of it already committed.\\n        // Disconnect the alternate pointers.\\n        current.alternate = null;\\n        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\\n\\n        workInProgress.flags |= Placement;\\n      }\\n    }\\n  }\\n\\n  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\\n    if (current !== null) {\\n      // Reuse previous dependencies\\n      workInProgress.dependencies = current.dependencies;\\n    }\\n\\n    {\\n      // Don't update \\\"base\\\" render times for bailouts.\\n      stopProfilerTimerIfRunning();\\n    }\\n\\n    markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\\n\\n    if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\\n      // The children don't have any work either. We can skip them.\\n      // TODO: Once we add back resuming, we should check if the children are\\n      // a work-in-progress set. If so, we need to transfer their effects.\\n      {\\n        return null;\\n      }\\n    } // This fiber doesn't have work, but its subtree does. Clone the child\\n    // fibers and continue.\\n\\n\\n    cloneChildFibers(current, workInProgress);\\n    return workInProgress.child;\\n  }\\n\\n  function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\\n    {\\n      var returnFiber = oldWorkInProgress.return;\\n\\n      if (returnFiber === null) {\\n        // eslint-disable-next-line react-internal/prod-error-codes\\n        throw new Error('Cannot swap the root fiber.');\\n      } // Disconnect from the old current.\\n      // It will get deleted.\\n\\n\\n      current.alternate = null;\\n      oldWorkInProgress.alternate = null; // Connect to the new tree.\\n\\n      newWorkInProgress.index = oldWorkInProgress.index;\\n      newWorkInProgress.sibling = oldWorkInProgress.sibling;\\n      newWorkInProgress.return = oldWorkInProgress.return;\\n      newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\\n\\n      if (oldWorkInProgress === returnFiber.child) {\\n        returnFiber.child = newWorkInProgress;\\n      } else {\\n        var prevSibling = returnFiber.child;\\n\\n        if (prevSibling === null) {\\n          // eslint-disable-next-line react-internal/prod-error-codes\\n          throw new Error('Expected parent to have a child.');\\n        }\\n\\n        while (prevSibling.sibling !== oldWorkInProgress) {\\n          prevSibling = prevSibling.sibling;\\n\\n          if (prevSibling === null) {\\n            // eslint-disable-next-line react-internal/prod-error-codes\\n            throw new Error('Expected to find the previous sibling.');\\n          }\\n        }\\n\\n        prevSibling.sibling = newWorkInProgress;\\n      } // Delete the old fiber and place the new one.\\n      // Since the old fiber is disconnected, we have to schedule it manually.\\n\\n\\n      var deletions = returnFiber.deletions;\\n\\n      if (deletions === null) {\\n        returnFiber.deletions = [current];\\n        returnFiber.flags |= ChildDeletion;\\n      } else {\\n        deletions.push(current);\\n      }\\n\\n      newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\\n\\n      return newWorkInProgress;\\n    }\\n  }\\n\\n  function checkScheduledUpdateOrContext(current, renderLanes) {\\n    // Before performing an early bailout, we must check if there are pending\\n    // updates or context.\\n    var updateLanes = current.lanes;\\n\\n    if (includesSomeLane(updateLanes, renderLanes)) {\\n      return true;\\n    } // No pending update, but because context is propagated lazily, we need\\n\\n    return false;\\n  }\\n\\n  function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\\n    // This fiber does not have any pending work. Bailout without entering\\n    // the begin phase. There's still some bookkeeping we that needs to be done\\n    // in this optimized path, mostly pushing stuff onto the stack.\\n    switch (workInProgress.tag) {\\n      case HostRoot:\\n        pushHostRootContext(workInProgress);\\n        var root = workInProgress.stateNode;\\n\\n        resetHydrationState();\\n        break;\\n\\n      case HostComponent:\\n        pushHostContext(workInProgress);\\n        break;\\n\\n      case ClassComponent:\\n        {\\n          var Component = workInProgress.type;\\n\\n          if (isContextProvider(Component)) {\\n            pushContextProvider(workInProgress);\\n          }\\n\\n          break;\\n        }\\n\\n      case HostPortal:\\n        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\\n        break;\\n\\n      case ContextProvider:\\n        {\\n          var newValue = workInProgress.memoizedProps.value;\\n          var context = workInProgress.type._context;\\n          pushProvider(workInProgress, context, newValue);\\n          break;\\n        }\\n\\n      case Profiler:\\n        {\\n          // Profiler should only call onRender when one of its descendants actually rendered.\\n          var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\\n\\n          if (hasChildWork) {\\n            workInProgress.flags |= Update;\\n          }\\n\\n          {\\n            // Reset effect durations for the next eventual effect phase.\\n            // These are reset during render to allow the DevTools commit hook a chance to read them,\\n            var stateNode = workInProgress.stateNode;\\n            stateNode.effectDuration = 0;\\n            stateNode.passiveEffectDuration = 0;\\n          }\\n        }\\n\\n        break;\\n\\n      case SuspenseComponent:\\n        {\\n          var state = workInProgress.memoizedState;\\n\\n          if (state !== null) {\\n            if (state.dehydrated !== null) {\\n              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\\n              // been unsuspended it has committed as a resolved Suspense component.\\n              // If it needs to be retried, it should have work scheduled on it.\\n\\n              workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\\n              // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\\n\\n              return null;\\n            } // If this boundary is currently timed out, we need to decide\\n            // whether to retry the primary children, or to skip over it and\\n            // go straight to the fallback. Check the priority of the primary\\n            // child fragment.\\n\\n\\n            var primaryChildFragment = workInProgress.child;\\n            var primaryChildLanes = primaryChildFragment.childLanes;\\n\\n            if (includesSomeLane(renderLanes, primaryChildLanes)) {\\n              // The primary children have pending work. Use the normal path\\n              // to attempt to render the primary children again.\\n              return updateSuspenseComponent(current, workInProgress, renderLanes);\\n            } else {\\n              // The primary child fragment does not have pending work marked\\n              // on it\\n              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\\n              // priority. Bailout.\\n\\n              var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n\\n              if (child !== null) {\\n                // The fallback children have pending work. Skip over the\\n                // primary children and work on the fallback.\\n                return child.sibling;\\n              } else {\\n                // Note: We can return `null` here because we already checked\\n                // whether there were nested context consumers, via the call to\\n                // `bailoutOnAlreadyFinishedWork` above.\\n                return null;\\n              }\\n            }\\n          } else {\\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\\n          }\\n\\n          break;\\n        }\\n\\n      case SuspenseListComponent:\\n        {\\n          var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\\n\\n          var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\\n\\n          if (didSuspendBefore) {\\n            if (_hasChildWork) {\\n              // If something was in fallback state last time, and we have all the\\n              // same children then we're still in progressive loading state.\\n              // Something might get unblocked by state updates or retries in the\\n              // tree which will affect the tail. So we need to use the normal\\n              // path to compute the correct tail.\\n              return updateSuspenseListComponent(current, workInProgress, renderLanes);\\n            } // If none of the children had any work, that means that none of\\n            // them got retried so they'll still be blocked in the same way\\n            // as before. We can fast bail out.\\n\\n\\n            workInProgress.flags |= DidCapture;\\n          } // If nothing suspended before and we're rendering the same children,\\n          // then the tail doesn't matter. Anything new that suspends will work\\n          // in the \\\"together\\\" mode, so we can continue from the state we had.\\n\\n\\n          var renderState = workInProgress.memoizedState;\\n\\n          if (renderState !== null) {\\n            // Reset to the \\\"together\\\" mode in case we've started a different\\n            // update in the past but didn't complete it.\\n            renderState.rendering = null;\\n            renderState.tail = null;\\n            renderState.lastEffect = null;\\n          }\\n\\n          pushSuspenseContext(workInProgress, suspenseStackCursor.current);\\n\\n          if (_hasChildWork) {\\n            break;\\n          } else {\\n            // If none of the children had any work, that means that none of\\n            // them got retried so they'll still be blocked in the same way\\n            // as before. We can fast bail out.\\n            return null;\\n          }\\n        }\\n\\n      case OffscreenComponent:\\n      case LegacyHiddenComponent:\\n        {\\n          // Need to check if the tree still needs to be deferred. This is\\n          // almost identical to the logic used in the normal update path,\\n          // so we'll just enter that. The only difference is we'll bail out\\n          // at the next level instead of this one, because the child props\\n          // have not changed. Which is fine.\\n          // TODO: Probably should refactor `beginWork` to split the bailout\\n          // path from the normal path. I'm tempted to do a labeled break here\\n          // but I won't :)\\n          workInProgress.lanes = NoLanes;\\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\\n        }\\n    }\\n\\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\\n  }\\n\\n  function beginWork(current, workInProgress, renderLanes) {\\n    {\\n      if (workInProgress._debugNeedsRemount && current !== null) {\\n        // This will restart the begin phase with a new fiber.\\n        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\\n      }\\n    }\\n\\n    if (current !== null) {\\n      var oldProps = current.memoizedProps;\\n      var newProps = workInProgress.pendingProps;\\n\\n      if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\\n       workInProgress.type !== current.type )) {\\n        // If props or context changed, mark the fiber as having performed work.\\n        // This may be unset if the props are determined to be equal later (memo).\\n        didReceiveUpdate = true;\\n      } else {\\n        // Neither props nor legacy context changes. Check if there's a pending\\n        // update or context change.\\n        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\\n\\n        if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\\n        // may not be work scheduled on `current`, so we check for this flag.\\n        (workInProgress.flags & DidCapture) === NoFlags) {\\n          // No pending updates or context. Bail out now.\\n          didReceiveUpdate = false;\\n          return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\\n        }\\n\\n        if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\\n          // This is a special case that only exists for legacy mode.\\n          // See https://github.com/facebook/react/pull/19216.\\n          didReceiveUpdate = true;\\n        } else {\\n          // An update was scheduled on this fiber, but there are no new props\\n          // nor legacy context. Set this to false. If an update queue or context\\n          // consumer produces a changed value, it will set this to true. Otherwise,\\n          // the component will assume the children have not changed and bail out.\\n          didReceiveUpdate = false;\\n        }\\n      }\\n    } else {\\n      didReceiveUpdate = false;\\n\\n      if (getIsHydrating() && isForkedChild(workInProgress)) {\\n        // Check if this child belongs to a list of muliple children in\\n        // its parent.\\n        //\\n        // In a true multi-threaded implementation, we would render children on\\n        // parallel threads. This would represent the beginning of a new render\\n        // thread for this subtree.\\n        //\\n        // We only use this for id generation during hydration, which is why the\\n        // logic is located in this special branch.\\n        var slotIndex = workInProgress.index;\\n        var numberOfForks = getForksAtLevel();\\n        pushTreeId(workInProgress, numberOfForks, slotIndex);\\n      }\\n    } // Before entering the begin phase, clear pending update priority.\\n    // TODO: This assumes that we're about to evaluate the component and process\\n    // the update queue. However, there's an exception: SimpleMemoComponent\\n    // sometimes bails out later in the begin phase. This indicates that we should\\n    // move this assignment out of the common path and into each branch.\\n\\n\\n    workInProgress.lanes = NoLanes;\\n\\n    switch (workInProgress.tag) {\\n      case IndeterminateComponent:\\n        {\\n          return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\\n        }\\n\\n      case LazyComponent:\\n        {\\n          var elementType = workInProgress.elementType;\\n          return mountLazyComponent(current, workInProgress, elementType, renderLanes);\\n        }\\n\\n      case FunctionComponent:\\n        {\\n          var Component = workInProgress.type;\\n          var unresolvedProps = workInProgress.pendingProps;\\n          var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\\n          return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\\n        }\\n\\n      case ClassComponent:\\n        {\\n          var _Component = workInProgress.type;\\n          var _unresolvedProps = workInProgress.pendingProps;\\n\\n          var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\\n\\n          return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\\n        }\\n\\n      case HostRoot:\\n        return updateHostRoot(current, workInProgress, renderLanes);\\n\\n      case HostComponent:\\n        return updateHostComponent(current, workInProgress, renderLanes);\\n\\n      case HostText:\\n        return updateHostText(current, workInProgress);\\n\\n      case SuspenseComponent:\\n        return updateSuspenseComponent(current, workInProgress, renderLanes);\\n\\n      case HostPortal:\\n        return updatePortalComponent(current, workInProgress, renderLanes);\\n\\n      case ForwardRef:\\n        {\\n          var type = workInProgress.type;\\n          var _unresolvedProps2 = workInProgress.pendingProps;\\n\\n          var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\\n\\n          return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\\n        }\\n\\n      case Fragment:\\n        return updateFragment(current, workInProgress, renderLanes);\\n\\n      case Mode:\\n        return updateMode(current, workInProgress, renderLanes);\\n\\n      case Profiler:\\n        return updateProfiler(current, workInProgress, renderLanes);\\n\\n      case ContextProvider:\\n        return updateContextProvider(current, workInProgress, renderLanes);\\n\\n      case ContextConsumer:\\n        return updateContextConsumer(current, workInProgress, renderLanes);\\n\\n      case MemoComponent:\\n        {\\n          var _type2 = workInProgress.type;\\n          var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\\n\\n          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\\n\\n          {\\n            if (workInProgress.type !== workInProgress.elementType) {\\n              var outerPropTypes = _type2.propTypes;\\n\\n              if (outerPropTypes) {\\n                checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\\n                'prop', getComponentNameFromType(_type2));\\n              }\\n            }\\n          }\\n\\n          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\\n          return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\\n        }\\n\\n      case SimpleMemoComponent:\\n        {\\n          return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\\n        }\\n\\n      case IncompleteClassComponent:\\n        {\\n          var _Component2 = workInProgress.type;\\n          var _unresolvedProps4 = workInProgress.pendingProps;\\n\\n          var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\\n\\n          return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\\n        }\\n\\n      case SuspenseListComponent:\\n        {\\n          return updateSuspenseListComponent(current, workInProgress, renderLanes);\\n        }\\n\\n      case ScopeComponent:\\n        {\\n\\n          break;\\n        }\\n\\n      case OffscreenComponent:\\n        {\\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\\n        }\\n    }\\n\\n    throw new Error(\\\"Unknown unit of work tag (\\\" + workInProgress.tag + \\\"). This error is likely caused by a bug in \\\" + 'React. Please file an issue.');\\n  }\\n\\n  function markUpdate(workInProgress) {\\n    // Tag the fiber with an update effect. This turns a Placement into\\n    // a PlacementAndUpdate.\\n    workInProgress.flags |= Update;\\n  }\\n\\n  function markRef$1(workInProgress) {\\n    workInProgress.flags |= Ref;\\n\\n    {\\n      workInProgress.flags |= RefStatic;\\n    }\\n  }\\n\\n  var appendAllChildren;\\n  var updateHostContainer;\\n  var updateHostComponent$1;\\n  var updateHostText$1;\\n\\n  {\\n    // Mutation mode\\n    appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\\n      // We only have the top Fiber that was created but we need recurse down its\\n      // children to find all the terminal nodes.\\n      var node = workInProgress.child;\\n\\n      while (node !== null) {\\n        if (node.tag === HostComponent || node.tag === HostText) {\\n          appendInitialChild(parent, node.stateNode);\\n        } else if (node.tag === HostPortal) ; else if (node.child !== null) {\\n          node.child.return = node;\\n          node = node.child;\\n          continue;\\n        }\\n\\n        if (node === workInProgress) {\\n          return;\\n        }\\n\\n        while (node.sibling === null) {\\n          if (node.return === null || node.return === workInProgress) {\\n            return;\\n          }\\n\\n          node = node.return;\\n        }\\n\\n        node.sibling.return = node.return;\\n        node = node.sibling;\\n      }\\n    };\\n\\n    updateHostContainer = function (current, workInProgress) {// Noop\\n    };\\n\\n    updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\\n      // If we have an alternate, that means this is an update and we need to\\n      // schedule a side-effect to do the updates.\\n      var oldProps = current.memoizedProps;\\n\\n      if (oldProps === newProps) {\\n        // In mutation mode, this is sufficient for a bailout because\\n        // we won't touch this node even if children changed.\\n        return;\\n      } // If we get updated because one of our children updated, we don't\\n      // have newProps so we'll have to reuse them.\\n      // TODO: Split the update API as separate for the props vs. children.\\n      // Even better would be if children weren't special cased at all tho.\\n\\n\\n      var instance = workInProgress.stateNode;\\n      var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\\n      // component is hitting the resume path. Figure out why. Possibly\\n      // related to `hidden`.\\n\\n      var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\\n\\n      workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\\n      // is a new ref we mark this as an update. All the work is done in commitWork.\\n\\n      if (updatePayload) {\\n        markUpdate(workInProgress);\\n      }\\n    };\\n\\n    updateHostText$1 = function (current, workInProgress, oldText, newText) {\\n      // If the text differs, mark it as an update. All the work in done in commitWork.\\n      if (oldText !== newText) {\\n        markUpdate(workInProgress);\\n      }\\n    };\\n  }\\n\\n  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\\n    if (getIsHydrating()) {\\n      // If we're hydrating, we should consume as many items as we can\\n      // so we don't leave any behind.\\n      return;\\n    }\\n\\n    switch (renderState.tailMode) {\\n      case 'hidden':\\n        {\\n          // Any insertions at the end of the tail list after this point\\n          // should be invisible. If there are already mounted boundaries\\n          // anything before them are not considered for collapsing.\\n          // Therefore we need to go through the whole tail to find if\\n          // there are any.\\n          var tailNode = renderState.tail;\\n          var lastTailNode = null;\\n\\n          while (tailNode !== null) {\\n            if (tailNode.alternate !== null) {\\n              lastTailNode = tailNode;\\n            }\\n\\n            tailNode = tailNode.sibling;\\n          } // Next we're simply going to delete all insertions after the\\n          // last rendered item.\\n\\n\\n          if (lastTailNode === null) {\\n            // All remaining items in the tail are insertions.\\n            renderState.tail = null;\\n          } else {\\n            // Detach the insertion after the last node that was already\\n            // inserted.\\n            lastTailNode.sibling = null;\\n          }\\n\\n          break;\\n        }\\n\\n      case 'collapsed':\\n        {\\n          // Any insertions at the end of the tail list after this point\\n          // should be invisible. If there are already mounted boundaries\\n          // anything before them are not considered for collapsing.\\n          // Therefore we need to go through the whole tail to find if\\n          // there are any.\\n          var _tailNode = renderState.tail;\\n          var _lastTailNode = null;\\n\\n          while (_tailNode !== null) {\\n            if (_tailNode.alternate !== null) {\\n              _lastTailNode = _tailNode;\\n            }\\n\\n            _tailNode = _tailNode.sibling;\\n          } // Next we're simply going to delete all insertions after the\\n          // last rendered item.\\n\\n\\n          if (_lastTailNode === null) {\\n            // All remaining items in the tail are insertions.\\n            if (!hasRenderedATailFallback && renderState.tail !== null) {\\n              // We suspended during the head. We want to show at least one\\n              // row at the tail. So we'll keep on and cut off the rest.\\n              renderState.tail.sibling = null;\\n            } else {\\n              renderState.tail = null;\\n            }\\n          } else {\\n            // Detach the insertion after the last node that was already\\n            // inserted.\\n            _lastTailNode.sibling = null;\\n          }\\n\\n          break;\\n        }\\n    }\\n  }\\n\\n  function bubbleProperties(completedWork) {\\n    var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\\n    var newChildLanes = NoLanes;\\n    var subtreeFlags = NoFlags;\\n\\n    if (!didBailout) {\\n      // Bubble up the earliest expiration time.\\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\\n        // In profiling mode, resetChildExpirationTime is also used to reset\\n        // profiler durations.\\n        var actualDuration = completedWork.actualDuration;\\n        var treeBaseDuration = completedWork.selfBaseDuration;\\n        var child = completedWork.child;\\n\\n        while (child !== null) {\\n          newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\\n          subtreeFlags |= child.subtreeFlags;\\n          subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\\n          // only be updated if work is done on the fiber (i.e. it doesn't bailout).\\n          // When work is done, it should bubble to the parent's actualDuration. If\\n          // the fiber has not been cloned though, (meaning no work was done), then\\n          // this value will reflect the amount of time spent working on a previous\\n          // render. In that case it should not bubble. We determine whether it was\\n          // cloned by comparing the child pointer.\\n\\n          actualDuration += child.actualDuration;\\n          treeBaseDuration += child.treeBaseDuration;\\n          child = child.sibling;\\n        }\\n\\n        completedWork.actualDuration = actualDuration;\\n        completedWork.treeBaseDuration = treeBaseDuration;\\n      } else {\\n        var _child = completedWork.child;\\n\\n        while (_child !== null) {\\n          newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\\n          subtreeFlags |= _child.subtreeFlags;\\n          subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\\n          // smell because it assumes the commit phase is never concurrent with\\n          // the render phase. Will address during refactor to alternate model.\\n\\n          _child.return = completedWork;\\n          _child = _child.sibling;\\n        }\\n      }\\n\\n      completedWork.subtreeFlags |= subtreeFlags;\\n    } else {\\n      // Bubble up the earliest expiration time.\\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\\n        // In profiling mode, resetChildExpirationTime is also used to reset\\n        // profiler durations.\\n        var _treeBaseDuration = completedWork.selfBaseDuration;\\n        var _child2 = completedWork.child;\\n\\n        while (_child2 !== null) {\\n          newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \\\"Static\\\" flags share the lifetime of the fiber/hook they belong to,\\n          // so we should bubble those up even during a bailout. All the other\\n          // flags have a lifetime only of a single render + commit, so we should\\n          // ignore them.\\n\\n          subtreeFlags |= _child2.subtreeFlags & StaticMask;\\n          subtreeFlags |= _child2.flags & StaticMask;\\n          _treeBaseDuration += _child2.treeBaseDuration;\\n          _child2 = _child2.sibling;\\n        }\\n\\n        completedWork.treeBaseDuration = _treeBaseDuration;\\n      } else {\\n        var _child3 = completedWork.child;\\n\\n        while (_child3 !== null) {\\n          newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \\\"Static\\\" flags share the lifetime of the fiber/hook they belong to,\\n          // so we should bubble those up even during a bailout. All the other\\n          // flags have a lifetime only of a single render + commit, so we should\\n          // ignore them.\\n\\n          subtreeFlags |= _child3.subtreeFlags & StaticMask;\\n          subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\\n          // smell because it assumes the commit phase is never concurrent with\\n          // the render phase. Will address during refactor to alternate model.\\n\\n          _child3.return = completedWork;\\n          _child3 = _child3.sibling;\\n        }\\n      }\\n\\n      completedWork.subtreeFlags |= subtreeFlags;\\n    }\\n\\n    completedWork.childLanes = newChildLanes;\\n    return didBailout;\\n  }\\n\\n  function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\\n    if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\\n      warnIfUnhydratedTailNodes(workInProgress);\\n      resetHydrationState();\\n      workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\\n      return false;\\n    }\\n\\n    var wasHydrated = popHydrationState(workInProgress);\\n\\n    if (nextState !== null && nextState.dehydrated !== null) {\\n      // We might be inside a hydration state the first time we're picking up this\\n      // Suspense boundary, and also after we've reentered it for further hydration.\\n      if (current === null) {\\n        if (!wasHydrated) {\\n          throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\\n        }\\n\\n        prepareToHydrateHostSuspenseInstance(workInProgress);\\n        bubbleProperties(workInProgress);\\n\\n        {\\n          if ((workInProgress.mode & ProfileMode) !== NoMode) {\\n            var isTimedOutSuspense = nextState !== null;\\n\\n            if (isTimedOutSuspense) {\\n              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\\n              var primaryChildFragment = workInProgress.child;\\n\\n              if (primaryChildFragment !== null) {\\n                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\\n                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\\n              }\\n            }\\n          }\\n        }\\n\\n        return false;\\n      } else {\\n        // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\\n        // state since we're now exiting out of it. popHydrationState doesn't do that for us.\\n        resetHydrationState();\\n\\n        if ((workInProgress.flags & DidCapture) === NoFlags) {\\n          // This boundary did not suspend so it's now hydrated and unsuspended.\\n          workInProgress.memoizedState = null;\\n        } // If nothing suspended, we need to schedule an effect to mark this boundary\\n        // as having hydrated so events know that they're free to be invoked.\\n        // It's also a signal to replay events and the suspense callback.\\n        // If something suspended, schedule an effect to attach retry listeners.\\n        // So we might as well always mark this.\\n\\n\\n        workInProgress.flags |= Update;\\n        bubbleProperties(workInProgress);\\n\\n        {\\n          if ((workInProgress.mode & ProfileMode) !== NoMode) {\\n            var _isTimedOutSuspense = nextState !== null;\\n\\n            if (_isTimedOutSuspense) {\\n              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\\n              var _primaryChildFragment = workInProgress.child;\\n\\n              if (_primaryChildFragment !== null) {\\n                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\\n                workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\\n              }\\n            }\\n          }\\n        }\\n\\n        return false;\\n      }\\n    } else {\\n      // Successfully completed this tree. If this was a forced client render,\\n      // there may have been recoverable errors during first hydration\\n      // attempt. If so, add them to a queue so we can log them in the\\n      // commit phase.\\n      upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\\n\\n      return true;\\n    }\\n  }\\n\\n  function completeWork(current, workInProgress, renderLanes) {\\n    var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\\n    // to the current tree provider fiber is just as fast and less error-prone.\\n    // Ideally we would have a special version of the work loop only\\n    // for hydration.\\n\\n    popTreeContext(workInProgress);\\n\\n    switch (workInProgress.tag) {\\n      case IndeterminateComponent:\\n      case LazyComponent:\\n      case SimpleMemoComponent:\\n      case FunctionComponent:\\n      case ForwardRef:\\n      case Fragment:\\n      case Mode:\\n      case Profiler:\\n      case ContextConsumer:\\n      case MemoComponent:\\n        bubbleProperties(workInProgress);\\n        return null;\\n\\n      case ClassComponent:\\n        {\\n          var Component = workInProgress.type;\\n\\n          if (isContextProvider(Component)) {\\n            popContext(workInProgress);\\n          }\\n\\n          bubbleProperties(workInProgress);\\n          return null;\\n        }\\n\\n      case HostRoot:\\n        {\\n          var fiberRoot = workInProgress.stateNode;\\n          popHostContainer(workInProgress);\\n          popTopLevelContextObject(workInProgress);\\n          resetWorkInProgressVersions();\\n\\n          if (fiberRoot.pendingContext) {\\n            fiberRoot.context = fiberRoot.pendingContext;\\n            fiberRoot.pendingContext = null;\\n          }\\n\\n          if (current === null || current.child === null) {\\n            // If we hydrated, pop so that we can delete any remaining children\\n            // that weren't hydrated.\\n            var wasHydrated = popHydrationState(workInProgress);\\n\\n            if (wasHydrated) {\\n              // If we hydrated, then we'll need to schedule an update for\\n              // the commit side-effects on the root.\\n              markUpdate(workInProgress);\\n            } else {\\n              if (current !== null) {\\n                var prevState = current.memoizedState;\\n\\n                if ( // Check if this is a client root\\n                !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\\n                (workInProgress.flags & ForceClientRender) !== NoFlags) {\\n                  // Schedule an effect to clear this container at the start of the\\n                  // next commit. This handles the case of React rendering into a\\n                  // container with previous children. It's also safe to do for\\n                  // updates too, because current.child would only be null if the\\n                  // previous render was null (so the container would already\\n                  // be empty).\\n                  workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\\n                  // recoverable errors during first hydration attempt. If so, add\\n                  // them to a queue so we can log them in the commit phase.\\n\\n                  upgradeHydrationErrorsToRecoverable();\\n                }\\n              }\\n            }\\n          }\\n\\n          updateHostContainer(current, workInProgress);\\n          bubbleProperties(workInProgress);\\n\\n          return null;\\n        }\\n\\n      case HostComponent:\\n        {\\n          popHostContext(workInProgress);\\n          var rootContainerInstance = getRootHostContainer();\\n          var type = workInProgress.type;\\n\\n          if (current !== null && workInProgress.stateNode != null) {\\n            updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\\n\\n            if (current.ref !== workInProgress.ref) {\\n              markRef$1(workInProgress);\\n            }\\n          } else {\\n            if (!newProps) {\\n              if (workInProgress.stateNode === null) {\\n                throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\\n              } // This can happen when we abort work.\\n\\n\\n              bubbleProperties(workInProgress);\\n              return null;\\n            }\\n\\n            var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\\n            // \\\"stack\\\" as the parent. Then append children as we go in beginWork\\n            // or completeWork depending on whether we want to add them top->down or\\n            // bottom->up. Top->down is faster in IE11.\\n\\n            var _wasHydrated = popHydrationState(workInProgress);\\n\\n            if (_wasHydrated) {\\n              // TODO: Move this and createInstance step into the beginPhase\\n              // to consolidate.\\n              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\\n                // If changes to the hydrated node need to be applied at the\\n                // commit-phase we mark this as such.\\n                markUpdate(workInProgress);\\n              }\\n            } else {\\n              var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\\n              appendAllChildren(instance, workInProgress, false, false);\\n              workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\\n              // (eg DOM renderer supports auto-focus for certain elements).\\n              // Make sure such renderers get scheduled for later work.\\n\\n              if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {\\n                markUpdate(workInProgress);\\n              }\\n            }\\n\\n            if (workInProgress.ref !== null) {\\n              // If there is a ref on a host node we need to schedule a callback\\n              markRef$1(workInProgress);\\n            }\\n          }\\n\\n          bubbleProperties(workInProgress);\\n          return null;\\n        }\\n\\n      case HostText:\\n        {\\n          var newText = newProps;\\n\\n          if (current && workInProgress.stateNode != null) {\\n            var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\\n            // to schedule a side-effect to do the updates.\\n\\n            updateHostText$1(current, workInProgress, oldText, newText);\\n          } else {\\n            if (typeof newText !== 'string') {\\n              if (workInProgress.stateNode === null) {\\n                throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\\n              } // This can happen when we abort work.\\n\\n            }\\n\\n            var _rootContainerInstance = getRootHostContainer();\\n\\n            var _currentHostContext = getHostContext();\\n\\n            var _wasHydrated2 = popHydrationState(workInProgress);\\n\\n            if (_wasHydrated2) {\\n              if (prepareToHydrateHostTextInstance(workInProgress)) {\\n                markUpdate(workInProgress);\\n              }\\n            } else {\\n              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\\n            }\\n          }\\n\\n          bubbleProperties(workInProgress);\\n          return null;\\n        }\\n\\n      case SuspenseComponent:\\n        {\\n          popSuspenseContext(workInProgress);\\n          var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\\n          // to its own fiber type so that we can add other kinds of hydration\\n          // boundaries that aren't associated with a Suspense tree. In anticipation\\n          // of such a refactor, all the hydration logic is contained in\\n          // this branch.\\n\\n          if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\\n            var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\\n\\n            if (!fallthroughToNormalSuspensePath) {\\n              if (workInProgress.flags & ShouldCapture) {\\n                // Special case. There were remaining unhydrated nodes. We treat\\n                // this as a mismatch. Revert to client rendering.\\n                return workInProgress;\\n              } else {\\n                // Did not finish hydrating, either because this is the initial\\n                // render or because something suspended.\\n                return null;\\n              }\\n            } // Continue with the normal Suspense path.\\n\\n          }\\n\\n          if ((workInProgress.flags & DidCapture) !== NoFlags) {\\n            // Something suspended. Re-render with the fallback children.\\n            workInProgress.lanes = renderLanes; // Do not reset the effect list.\\n\\n            if ( (workInProgress.mode & ProfileMode) !== NoMode) {\\n              transferActualDuration(workInProgress);\\n            } // Don't bubble properties in this case.\\n\\n\\n            return workInProgress;\\n          }\\n\\n          var nextDidTimeout = nextState !== null;\\n          var prevDidTimeout = current !== null && current.memoizedState !== null;\\n          // a passive effect, which is when we process the transitions\\n\\n\\n          if (nextDidTimeout !== prevDidTimeout) {\\n            // an effect to toggle the subtree's visibility. When we switch from\\n            // fallback -> primary, the inner Offscreen fiber schedules this effect\\n            // as part of its normal complete phase. But when we switch from\\n            // primary -> fallback, the inner Offscreen fiber does not have a complete\\n            // phase. So we need to schedule its effect here.\\n            //\\n            // We also use this flag to connect/disconnect the effects, but the same\\n            // logic applies: when re-connecting, the Offscreen fiber's complete\\n            // phase will handle scheduling the effect. It's only when the fallback\\n            // is active that we have to do anything special.\\n\\n\\n            if (nextDidTimeout) {\\n              var _offscreenFiber2 = workInProgress.child;\\n              _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\\n              // in the concurrent tree already suspended during this render.\\n              // This is a known bug.\\n\\n              if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\\n                // TODO: Move this back to throwException because this is too late\\n                // if this is a large tree which is common for initial loads. We\\n                // don't know if we should restart a render or not until we get\\n                // this marker, and this is too late.\\n                // If this render already had a ping or lower pri updates,\\n                // and this is the first time we know we're going to suspend we\\n                // should be able to immediately restart from within throwException.\\n                var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\\n\\n                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\\n                  // If this was in an invisible tree or a new render, then showing\\n                  // this boundary is ok.\\n                  renderDidSuspend();\\n                } else {\\n                  // Otherwise, we're going to have to hide content so we should\\n                  // suspend for longer if possible.\\n                  renderDidSuspendDelayIfPossible();\\n                }\\n              }\\n            }\\n          }\\n\\n          var wakeables = workInProgress.updateQueue;\\n\\n          if (wakeables !== null) {\\n            // Schedule an effect to attach a retry listener to the promise.\\n            // TODO: Move to passive phase\\n            workInProgress.flags |= Update;\\n          }\\n\\n          bubbleProperties(workInProgress);\\n\\n          {\\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\\n              if (nextDidTimeout) {\\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\\n                var primaryChildFragment = workInProgress.child;\\n\\n                if (primaryChildFragment !== null) {\\n                  // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\\n                  workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\\n                }\\n              }\\n            }\\n          }\\n\\n          return null;\\n        }\\n\\n      case HostPortal:\\n        popHostContainer(workInProgress);\\n        updateHostContainer(current, workInProgress);\\n\\n        if (current === null) {\\n          preparePortalMount(workInProgress.stateNode.containerInfo);\\n        }\\n\\n        bubbleProperties(workInProgress);\\n        return null;\\n\\n      case ContextProvider:\\n        // Pop provider fiber\\n        var context = workInProgress.type._context;\\n        popProvider(context, workInProgress);\\n        bubbleProperties(workInProgress);\\n        return null;\\n\\n      case IncompleteClassComponent:\\n        {\\n          // Same as class component case. I put it down here so that the tags are\\n          // sequential to ensure this switch is compiled to a jump table.\\n          var _Component = workInProgress.type;\\n\\n          if (isContextProvider(_Component)) {\\n            popContext(workInProgress);\\n          }\\n\\n          bubbleProperties(workInProgress);\\n          return null;\\n        }\\n\\n      case SuspenseListComponent:\\n        {\\n          popSuspenseContext(workInProgress);\\n          var renderState = workInProgress.memoizedState;\\n\\n          if (renderState === null) {\\n            // We're running in the default, \\\"independent\\\" mode.\\n            // We don't do anything in this mode.\\n            bubbleProperties(workInProgress);\\n            return null;\\n          }\\n\\n          var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\\n          var renderedTail = renderState.rendering;\\n\\n          if (renderedTail === null) {\\n            // We just rendered the head.\\n            if (!didSuspendAlready) {\\n              // This is the first pass. We need to figure out if anything is still\\n              // suspended in the rendered set.\\n              // If new content unsuspended, but there's still some content that\\n              // didn't. Then we need to do a second pass that forces everything\\n              // to keep showing their fallbacks.\\n              // We might be suspended if something in this render pass suspended, or\\n              // something in the previous committed pass suspended. Otherwise,\\n              // there's no chance so we can skip the expensive call to\\n              // findFirstSuspended.\\n              var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\\n\\n              if (!cannotBeSuspended) {\\n                var row = workInProgress.child;\\n\\n                while (row !== null) {\\n                  var suspended = findFirstSuspended(row);\\n\\n                  if (suspended !== null) {\\n                    didSuspendAlready = true;\\n                    workInProgress.flags |= DidCapture;\\n                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\\n                    // part of the second pass. In that case nothing will subscribe to\\n                    // its thenables. Instead, we'll transfer its thenables to the\\n                    // SuspenseList so that it can retry if they resolve.\\n                    // There might be multiple of these in the list but since we're\\n                    // going to wait for all of them anyway, it doesn't really matter\\n                    // which ones gets to ping. In theory we could get clever and keep\\n                    // track of how many dependencies remain but it gets tricky because\\n                    // in the meantime, we can add/remove/change items and dependencies.\\n                    // We might bail out of the loop before finding any but that\\n                    // doesn't matter since that means that the other boundaries that\\n                    // we did find already has their listeners attached.\\n\\n                    var newThenables = suspended.updateQueue;\\n\\n                    if (newThenables !== null) {\\n                      workInProgress.updateQueue = newThenables;\\n                      workInProgress.flags |= Update;\\n                    } // Rerender the whole list, but this time, we'll force fallbacks\\n                    // to stay in place.\\n                    // Reset the effect flags before doing the second pass since that's now invalid.\\n                    // Reset the child fibers to their original state.\\n\\n\\n                    workInProgress.subtreeFlags = NoFlags;\\n                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\\n                    // rerender the children.\\n\\n                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\\n\\n                    return workInProgress.child;\\n                  }\\n\\n                  row = row.sibling;\\n                }\\n              }\\n\\n              if (renderState.tail !== null && now() > getRenderTargetTime()) {\\n                // We have already passed our CPU deadline but we still have rows\\n                // left in the tail. We'll just give up further attempts to render\\n                // the main content and only render fallbacks.\\n                workInProgress.flags |= DidCapture;\\n                didSuspendAlready = true;\\n                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\\n                // to get it started back up to attempt the next item. While in terms\\n                // of priority this work has the same priority as this current render,\\n                // it's not part of the same transition once the transition has\\n                // committed. If it's sync, we still want to yield so that it can be\\n                // painted. Conceptually, this is really the same as pinging.\\n                // We can use any RetryLane even if it's the one currently rendering\\n                // since we're leaving it behind on this node.\\n\\n                workInProgress.lanes = SomeRetryLane;\\n              }\\n            } else {\\n              cutOffTailIfNeeded(renderState, false);\\n            } // Next we're going to render the tail.\\n\\n          } else {\\n            // Append the rendered row to the child list.\\n            if (!didSuspendAlready) {\\n              var _suspended = findFirstSuspended(renderedTail);\\n\\n              if (_suspended !== null) {\\n                workInProgress.flags |= DidCapture;\\n                didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\\n                // get lost if this row ends up dropped during a second pass.\\n\\n                var _newThenables = _suspended.updateQueue;\\n\\n                if (_newThenables !== null) {\\n                  workInProgress.updateQueue = _newThenables;\\n                  workInProgress.flags |= Update;\\n                }\\n\\n                cutOffTailIfNeeded(renderState, true); // This might have been modified.\\n\\n                if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\\n                ) {\\n                    // We're done.\\n                    bubbleProperties(workInProgress);\\n                    return null;\\n                  }\\n              } else if ( // The time it took to render last row is greater than the remaining\\n              // time we have to render. So rendering one more row would likely\\n              // exceed it.\\n              now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\\n                // We have now passed our CPU deadline and we'll just give up further\\n                // attempts to render the main content and only render fallbacks.\\n                // The assumption is that this is usually faster.\\n                workInProgress.flags |= DidCapture;\\n                didSuspendAlready = true;\\n                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\\n                // to get it started back up to attempt the next item. While in terms\\n                // of priority this work has the same priority as this current render,\\n                // it's not part of the same transition once the transition has\\n                // committed. If it's sync, we still want to yield so that it can be\\n                // painted. Conceptually, this is really the same as pinging.\\n                // We can use any RetryLane even if it's the one currently rendering\\n                // since we're leaving it behind on this node.\\n\\n                workInProgress.lanes = SomeRetryLane;\\n              }\\n            }\\n\\n            if (renderState.isBackwards) {\\n              // The effect list of the backwards tail will have been added\\n              // to the end. This breaks the guarantee that life-cycles fire in\\n              // sibling order but that isn't a strong guarantee promised by React.\\n              // Especially since these might also just pop in during future commits.\\n              // Append to the beginning of the list.\\n              renderedTail.sibling = workInProgress.child;\\n              workInProgress.child = renderedTail;\\n            } else {\\n              var previousSibling = renderState.last;\\n\\n              if (previousSibling !== null) {\\n                previousSibling.sibling = renderedTail;\\n              } else {\\n                workInProgress.child = renderedTail;\\n              }\\n\\n              renderState.last = renderedTail;\\n            }\\n          }\\n\\n          if (renderState.tail !== null) {\\n            // We still have tail rows to render.\\n            // Pop a row.\\n            var next = renderState.tail;\\n            renderState.rendering = next;\\n            renderState.tail = next.sibling;\\n            renderState.renderingStartTime = now();\\n            next.sibling = null; // Restore the context.\\n            // TODO: We can probably just avoid popping it instead and only\\n            // setting it the first time we go from not suspended to suspended.\\n\\n            var suspenseContext = suspenseStackCursor.current;\\n\\n            if (didSuspendAlready) {\\n              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\\n            } else {\\n              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\\n            }\\n\\n            pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\\n            // Don't bubble properties in this case.\\n\\n            return next;\\n          }\\n\\n          bubbleProperties(workInProgress);\\n          return null;\\n        }\\n\\n      case ScopeComponent:\\n        {\\n\\n          break;\\n        }\\n\\n      case OffscreenComponent:\\n      case LegacyHiddenComponent:\\n        {\\n          popRenderLanes(workInProgress);\\n          var _nextState = workInProgress.memoizedState;\\n          var nextIsHidden = _nextState !== null;\\n\\n          if (current !== null) {\\n            var _prevState = current.memoizedState;\\n            var prevIsHidden = _prevState !== null;\\n\\n            if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\\n            !enableLegacyHidden )) {\\n              workInProgress.flags |= Visibility;\\n            }\\n          }\\n\\n          if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\\n            bubbleProperties(workInProgress);\\n          } else {\\n            // Don't bubble properties for hidden children unless we're rendering\\n            // at offscreen priority.\\n            if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\\n              bubbleProperties(workInProgress);\\n\\n              {\\n                // Check if there was an insertion or update in the hidden subtree.\\n                // If so, we need to hide those nodes in the commit phase, so\\n                // schedule a visibility effect.\\n                if ( workInProgress.subtreeFlags & (Placement | Update)) {\\n                  workInProgress.flags |= Visibility;\\n                }\\n              }\\n            }\\n          }\\n          return null;\\n        }\\n\\n      case CacheComponent:\\n        {\\n\\n          return null;\\n        }\\n\\n      case TracingMarkerComponent:\\n        {\\n\\n          return null;\\n        }\\n    }\\n\\n    throw new Error(\\\"Unknown unit of work tag (\\\" + workInProgress.tag + \\\"). This error is likely caused by a bug in \\\" + 'React. Please file an issue.');\\n  }\\n\\n  function unwindWork(current, workInProgress, renderLanes) {\\n    // Note: This intentionally doesn't check if we're hydrating because comparing\\n    // to the current tree provider fiber is just as fast and less error-prone.\\n    // Ideally we would have a special version of the work loop only\\n    // for hydration.\\n    popTreeContext(workInProgress);\\n\\n    switch (workInProgress.tag) {\\n      case ClassComponent:\\n        {\\n          var Component = workInProgress.type;\\n\\n          if (isContextProvider(Component)) {\\n            popContext(workInProgress);\\n          }\\n\\n          var flags = workInProgress.flags;\\n\\n          if (flags & ShouldCapture) {\\n            workInProgress.flags = flags & ~ShouldCapture | DidCapture;\\n\\n            if ( (workInProgress.mode & ProfileMode) !== NoMode) {\\n              transferActualDuration(workInProgress);\\n            }\\n\\n            return workInProgress;\\n          }\\n\\n          return null;\\n        }\\n\\n      case HostRoot:\\n        {\\n          var root = workInProgress.stateNode;\\n          popHostContainer(workInProgress);\\n          popTopLevelContextObject(workInProgress);\\n          resetWorkInProgressVersions();\\n          var _flags = workInProgress.flags;\\n\\n          if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\\n            // There was an error during render that wasn't captured by a suspense\\n            // boundary. Do a second pass on the root to unmount the children.\\n            workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\\n            return workInProgress;\\n          } // We unwound to the root without completing it. Exit.\\n\\n\\n          return null;\\n        }\\n\\n      case HostComponent:\\n        {\\n          // TODO: popHydrationState\\n          popHostContext(workInProgress);\\n          return null;\\n        }\\n\\n      case SuspenseComponent:\\n        {\\n          popSuspenseContext(workInProgress);\\n          var suspenseState = workInProgress.memoizedState;\\n\\n          if (suspenseState !== null && suspenseState.dehydrated !== null) {\\n            if (workInProgress.alternate === null) {\\n              throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\\n            }\\n\\n            resetHydrationState();\\n          }\\n\\n          var _flags2 = workInProgress.flags;\\n\\n          if (_flags2 & ShouldCapture) {\\n            workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\\n\\n            if ( (workInProgress.mode & ProfileMode) !== NoMode) {\\n              transferActualDuration(workInProgress);\\n            }\\n\\n            return workInProgress;\\n          }\\n\\n          return null;\\n        }\\n\\n      case SuspenseListComponent:\\n        {\\n          popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\\n          // caught by a nested boundary. If not, it should bubble through.\\n\\n          return null;\\n        }\\n\\n      case HostPortal:\\n        popHostContainer(workInProgress);\\n        return null;\\n\\n      case ContextProvider:\\n        var context = workInProgress.type._context;\\n        popProvider(context, workInProgress);\\n        return null;\\n\\n      case OffscreenComponent:\\n      case LegacyHiddenComponent:\\n        popRenderLanes(workInProgress);\\n        return null;\\n\\n      case CacheComponent:\\n\\n        return null;\\n\\n      default:\\n        return null;\\n    }\\n  }\\n\\n  function unwindInterruptedWork(current, interruptedWork, renderLanes) {\\n    // Note: This intentionally doesn't check if we're hydrating because comparing\\n    // to the current tree provider fiber is just as fast and less error-prone.\\n    // Ideally we would have a special version of the work loop only\\n    // for hydration.\\n    popTreeContext(interruptedWork);\\n\\n    switch (interruptedWork.tag) {\\n      case ClassComponent:\\n        {\\n          var childContextTypes = interruptedWork.type.childContextTypes;\\n\\n          if (childContextTypes !== null && childContextTypes !== undefined) {\\n            popContext(interruptedWork);\\n          }\\n\\n          break;\\n        }\\n\\n      case HostRoot:\\n        {\\n          var root = interruptedWork.stateNode;\\n          popHostContainer(interruptedWork);\\n          popTopLevelContextObject(interruptedWork);\\n          resetWorkInProgressVersions();\\n          break;\\n        }\\n\\n      case HostComponent:\\n        {\\n          popHostContext(interruptedWork);\\n          break;\\n        }\\n\\n      case HostPortal:\\n        popHostContainer(interruptedWork);\\n        break;\\n\\n      case SuspenseComponent:\\n        popSuspenseContext(interruptedWork);\\n        break;\\n\\n      case SuspenseListComponent:\\n        popSuspenseContext(interruptedWork);\\n        break;\\n\\n      case ContextProvider:\\n        var context = interruptedWork.type._context;\\n        popProvider(context, interruptedWork);\\n        break;\\n\\n      case OffscreenComponent:\\n      case LegacyHiddenComponent:\\n        popRenderLanes(interruptedWork);\\n        break;\\n    }\\n  }\\n\\n  var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\\n\\n  {\\n    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\\n  } // Used during the commit phase to track the state of the Offscreen component stack.\\n  // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\\n  // Only used when enableSuspenseLayoutEffectSemantics is enabled.\\n\\n\\n  var offscreenSubtreeIsHidden = false;\\n  var offscreenSubtreeWasHidden = false;\\n  var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\\n  var nextEffect = null; // Used for Profiling builds to track updaters.\\n\\n  var inProgressLanes = null;\\n  var inProgressRoot = null;\\n  function reportUncaughtErrorInDEV(error) {\\n    // Wrapping each small part of the commit phase into a guarded\\n    // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\\n    // But we rely on it to surface errors to DEV tools like overlays\\n    // (https://github.com/facebook/react/issues/21712).\\n    // As a compromise, rethrow only caught errors in a guard.\\n    {\\n      invokeGuardedCallback(null, function () {\\n        throw error;\\n      });\\n      clearCaughtError();\\n    }\\n  }\\n\\n  var callComponentWillUnmountWithTimer = function (current, instance) {\\n    instance.props = current.memoizedProps;\\n    instance.state = current.memoizedState;\\n\\n    if ( current.mode & ProfileMode) {\\n      try {\\n        startLayoutEffectTimer();\\n        instance.componentWillUnmount();\\n      } finally {\\n        recordLayoutEffectDuration(current);\\n      }\\n    } else {\\n      instance.componentWillUnmount();\\n    }\\n  }; // Capture errors so they don't interrupt mounting.\\n\\n\\n  function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\\n    try {\\n      commitHookEffectListMount(Layout, current);\\n    } catch (error) {\\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\\n    }\\n  } // Capture errors so they don't interrupt unmounting.\\n\\n\\n  function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\\n    try {\\n      callComponentWillUnmountWithTimer(current, instance);\\n    } catch (error) {\\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\\n    }\\n  } // Capture errors so they don't interrupt mounting.\\n\\n\\n  function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\\n    try {\\n      instance.componentDidMount();\\n    } catch (error) {\\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\\n    }\\n  } // Capture errors so they don't interrupt mounting.\\n\\n\\n  function safelyAttachRef(current, nearestMountedAncestor) {\\n    try {\\n      commitAttachRef(current);\\n    } catch (error) {\\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\\n    }\\n  }\\n\\n  function safelyDetachRef(current, nearestMountedAncestor) {\\n    var ref = current.ref;\\n\\n    if (ref !== null) {\\n      if (typeof ref === 'function') {\\n        var retVal;\\n\\n        try {\\n          if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\\n            try {\\n              startLayoutEffectTimer();\\n              retVal = ref(null);\\n            } finally {\\n              recordLayoutEffectDuration(current);\\n            }\\n          } else {\\n            retVal = ref(null);\\n          }\\n        } catch (error) {\\n          captureCommitPhaseError(current, nearestMountedAncestor, error);\\n        }\\n\\n        {\\n          if (typeof retVal === 'function') {\\n            error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\\n          }\\n        }\\n      } else {\\n        ref.current = null;\\n      }\\n    }\\n  }\\n\\n  function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\\n    try {\\n      destroy();\\n    } catch (error) {\\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\\n    }\\n  }\\n\\n  var focusedInstanceHandle = null;\\n  var shouldFireAfterActiveInstanceBlur = false;\\n  function commitBeforeMutationEffects(root, firstChild) {\\n    focusedInstanceHandle = prepareForCommit(root.containerInfo);\\n    nextEffect = firstChild;\\n    commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\\n\\n    var shouldFire = shouldFireAfterActiveInstanceBlur;\\n    shouldFireAfterActiveInstanceBlur = false;\\n    focusedInstanceHandle = null;\\n    return shouldFire;\\n  }\\n\\n  function commitBeforeMutationEffects_begin() {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\\n\\n      var child = fiber.child;\\n\\n      if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\\n        child.return = fiber;\\n        nextEffect = child;\\n      } else {\\n        commitBeforeMutationEffects_complete();\\n      }\\n    }\\n  }\\n\\n  function commitBeforeMutationEffects_complete() {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n      setCurrentFiber(fiber);\\n\\n      try {\\n        commitBeforeMutationEffectsOnFiber(fiber);\\n      } catch (error) {\\n        captureCommitPhaseError(fiber, fiber.return, error);\\n      }\\n\\n      resetCurrentFiber();\\n      var sibling = fiber.sibling;\\n\\n      if (sibling !== null) {\\n        sibling.return = fiber.return;\\n        nextEffect = sibling;\\n        return;\\n      }\\n\\n      nextEffect = fiber.return;\\n    }\\n  }\\n\\n  function commitBeforeMutationEffectsOnFiber(finishedWork) {\\n    var current = finishedWork.alternate;\\n    var flags = finishedWork.flags;\\n\\n    if ((flags & Snapshot) !== NoFlags) {\\n      setCurrentFiber(finishedWork);\\n\\n      switch (finishedWork.tag) {\\n        case FunctionComponent:\\n        case ForwardRef:\\n        case SimpleMemoComponent:\\n          {\\n            break;\\n          }\\n\\n        case ClassComponent:\\n          {\\n            if (current !== null) {\\n              var prevProps = current.memoizedProps;\\n              var prevState = current.memoizedState;\\n              var instance = finishedWork.stateNode; // We could update instance props and state here,\\n              // but instead we rely on them being set during last render.\\n              // TODO: revisit this when we implement resuming.\\n\\n              {\\n                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\\n                  if (instance.props !== finishedWork.memoizedProps) {\\n                    error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                  }\\n\\n                  if (instance.state !== finishedWork.memoizedState) {\\n                    error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                  }\\n                }\\n              }\\n\\n              var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\\n\\n              {\\n                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\\n\\n                if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\\n                  didWarnSet.add(finishedWork.type);\\n\\n                  error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\\n                }\\n              }\\n\\n              instance.__reactInternalSnapshotBeforeUpdate = snapshot;\\n            }\\n\\n            break;\\n          }\\n\\n        case HostRoot:\\n          {\\n            {\\n              var root = finishedWork.stateNode;\\n              clearContainer(root.containerInfo);\\n            }\\n\\n            break;\\n          }\\n\\n        case HostComponent:\\n        case HostText:\\n        case HostPortal:\\n        case IncompleteClassComponent:\\n          // Nothing to do for these component types\\n          break;\\n\\n        default:\\n          {\\n            throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\\n          }\\n      }\\n\\n      resetCurrentFiber();\\n    }\\n  }\\n\\n  function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\\n    var updateQueue = finishedWork.updateQueue;\\n    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\\n\\n    if (lastEffect !== null) {\\n      var firstEffect = lastEffect.next;\\n      var effect = firstEffect;\\n\\n      do {\\n        if ((effect.tag & flags) === flags) {\\n          // Unmount\\n          var destroy = effect.destroy;\\n          effect.destroy = undefined;\\n\\n          if (destroy !== undefined) {\\n            {\\n              if ((flags & Passive$1) !== NoFlags$1) {\\n                markComponentPassiveEffectUnmountStarted(finishedWork);\\n              } else if ((flags & Layout) !== NoFlags$1) {\\n                markComponentLayoutEffectUnmountStarted(finishedWork);\\n              }\\n            }\\n\\n            {\\n              if ((flags & Insertion) !== NoFlags$1) {\\n                setIsRunningInsertionEffect(true);\\n              }\\n            }\\n\\n            safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\\n\\n            {\\n              if ((flags & Insertion) !== NoFlags$1) {\\n                setIsRunningInsertionEffect(false);\\n              }\\n            }\\n\\n            {\\n              if ((flags & Passive$1) !== NoFlags$1) {\\n                markComponentPassiveEffectUnmountStopped();\\n              } else if ((flags & Layout) !== NoFlags$1) {\\n                markComponentLayoutEffectUnmountStopped();\\n              }\\n            }\\n          }\\n        }\\n\\n        effect = effect.next;\\n      } while (effect !== firstEffect);\\n    }\\n  }\\n\\n  function commitHookEffectListMount(flags, finishedWork) {\\n    var updateQueue = finishedWork.updateQueue;\\n    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\\n\\n    if (lastEffect !== null) {\\n      var firstEffect = lastEffect.next;\\n      var effect = firstEffect;\\n\\n      do {\\n        if ((effect.tag & flags) === flags) {\\n          {\\n            if ((flags & Passive$1) !== NoFlags$1) {\\n              markComponentPassiveEffectMountStarted(finishedWork);\\n            } else if ((flags & Layout) !== NoFlags$1) {\\n              markComponentLayoutEffectMountStarted(finishedWork);\\n            }\\n          } // Mount\\n\\n\\n          var create = effect.create;\\n\\n          {\\n            if ((flags & Insertion) !== NoFlags$1) {\\n              setIsRunningInsertionEffect(true);\\n            }\\n          }\\n\\n          effect.destroy = create();\\n\\n          {\\n            if ((flags & Insertion) !== NoFlags$1) {\\n              setIsRunningInsertionEffect(false);\\n            }\\n          }\\n\\n          {\\n            if ((flags & Passive$1) !== NoFlags$1) {\\n              markComponentPassiveEffectMountStopped();\\n            } else if ((flags & Layout) !== NoFlags$1) {\\n              markComponentLayoutEffectMountStopped();\\n            }\\n          }\\n\\n          {\\n            var destroy = effect.destroy;\\n\\n            if (destroy !== undefined && typeof destroy !== 'function') {\\n              var hookName = void 0;\\n\\n              if ((effect.tag & Layout) !== NoFlags) {\\n                hookName = 'useLayoutEffect';\\n              } else if ((effect.tag & Insertion) !== NoFlags) {\\n                hookName = 'useInsertionEffect';\\n              } else {\\n                hookName = 'useEffect';\\n              }\\n\\n              var addendum = void 0;\\n\\n              if (destroy === null) {\\n                addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\\n              } else if (typeof destroy.then === 'function') {\\n                addendum = '\\\\n\\\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\\\n\\\\n' + hookName + '(() => {\\\\n' + '  async function fetchData() {\\\\n' + '    // You can await here\\\\n' + '    const response = await MyAPI.getData(someId);\\\\n' + '    // ...\\\\n' + '  }\\\\n' + '  fetchData();\\\\n' + \\\"}, [someId]); // Or [] if effect doesn't need props or state\\\\n\\\\n\\\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\\n              } else {\\n                addendum = ' You returned: ' + destroy;\\n              }\\n\\n              error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\\n            }\\n          }\\n        }\\n\\n        effect = effect.next;\\n      } while (effect !== firstEffect);\\n    }\\n  }\\n\\n  function commitPassiveEffectDurations(finishedRoot, finishedWork) {\\n    {\\n      // Only Profilers with work in their subtree will have an Update effect scheduled.\\n      if ((finishedWork.flags & Update) !== NoFlags) {\\n        switch (finishedWork.tag) {\\n          case Profiler:\\n            {\\n              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\\n              var _finishedWork$memoize = finishedWork.memoizedProps,\\n                  id = _finishedWork$memoize.id,\\n                  onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\\n              // It does not get reset until the start of the next commit phase.\\n\\n              var commitTime = getCommitTime();\\n              var phase = finishedWork.alternate === null ? 'mount' : 'update';\\n\\n              {\\n                if (isCurrentUpdateNested()) {\\n                  phase = 'nested-update';\\n                }\\n              }\\n\\n              if (typeof onPostCommit === 'function') {\\n                onPostCommit(id, phase, passiveEffectDuration, commitTime);\\n              } // Bubble times to the next nearest ancestor Profiler.\\n              // After we process that Profiler, we'll bubble further up.\\n\\n\\n              var parentFiber = finishedWork.return;\\n\\n              outer: while (parentFiber !== null) {\\n                switch (parentFiber.tag) {\\n                  case HostRoot:\\n                    var root = parentFiber.stateNode;\\n                    root.passiveEffectDuration += passiveEffectDuration;\\n                    break outer;\\n\\n                  case Profiler:\\n                    var parentStateNode = parentFiber.stateNode;\\n                    parentStateNode.passiveEffectDuration += passiveEffectDuration;\\n                    break outer;\\n                }\\n\\n                parentFiber = parentFiber.return;\\n              }\\n\\n              break;\\n            }\\n        }\\n      }\\n    }\\n  }\\n\\n  function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\\n    if ((finishedWork.flags & LayoutMask) !== NoFlags) {\\n      switch (finishedWork.tag) {\\n        case FunctionComponent:\\n        case ForwardRef:\\n        case SimpleMemoComponent:\\n          {\\n            if ( !offscreenSubtreeWasHidden) {\\n              // At this point layout effects have already been destroyed (during mutation phase).\\n              // This is done to prevent sibling component effects from interfering with each other,\\n              // e.g. a destroy function in one component should never override a ref set\\n              // by a create function in another component during the same commit.\\n              if ( finishedWork.mode & ProfileMode) {\\n                try {\\n                  startLayoutEffectTimer();\\n                  commitHookEffectListMount(Layout | HasEffect, finishedWork);\\n                } finally {\\n                  recordLayoutEffectDuration(finishedWork);\\n                }\\n              } else {\\n                commitHookEffectListMount(Layout | HasEffect, finishedWork);\\n              }\\n            }\\n\\n            break;\\n          }\\n\\n        case ClassComponent:\\n          {\\n            var instance = finishedWork.stateNode;\\n\\n            if (finishedWork.flags & Update) {\\n              if (!offscreenSubtreeWasHidden) {\\n                if (current === null) {\\n                  // We could update instance props and state here,\\n                  // but instead we rely on them being set during last render.\\n                  // TODO: revisit this when we implement resuming.\\n                  {\\n                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\\n                      if (instance.props !== finishedWork.memoizedProps) {\\n                        error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                      }\\n\\n                      if (instance.state !== finishedWork.memoizedState) {\\n                        error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                      }\\n                    }\\n                  }\\n\\n                  if ( finishedWork.mode & ProfileMode) {\\n                    try {\\n                      startLayoutEffectTimer();\\n                      instance.componentDidMount();\\n                    } finally {\\n                      recordLayoutEffectDuration(finishedWork);\\n                    }\\n                  } else {\\n                    instance.componentDidMount();\\n                  }\\n                } else {\\n                  var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\\n                  var prevState = current.memoizedState; // We could update instance props and state here,\\n                  // but instead we rely on them being set during last render.\\n                  // TODO: revisit this when we implement resuming.\\n\\n                  {\\n                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\\n                      if (instance.props !== finishedWork.memoizedProps) {\\n                        error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                      }\\n\\n                      if (instance.state !== finishedWork.memoizedState) {\\n                        error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                      }\\n                    }\\n                  }\\n\\n                  if ( finishedWork.mode & ProfileMode) {\\n                    try {\\n                      startLayoutEffectTimer();\\n                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\\n                    } finally {\\n                      recordLayoutEffectDuration(finishedWork);\\n                    }\\n                  } else {\\n                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\\n                  }\\n                }\\n              }\\n            } // TODO: I think this is now always non-null by the time it reaches the\\n            // commit phase. Consider removing the type check.\\n\\n\\n            var updateQueue = finishedWork.updateQueue;\\n\\n            if (updateQueue !== null) {\\n              {\\n                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\\n                  if (instance.props !== finishedWork.memoizedProps) {\\n                    error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                  }\\n\\n                  if (instance.state !== finishedWork.memoizedState) {\\n                    error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\\n                  }\\n                }\\n              } // We could update instance props and state here,\\n              // but instead we rely on them being set during last render.\\n              // TODO: revisit this when we implement resuming.\\n\\n\\n              commitUpdateQueue(finishedWork, updateQueue, instance);\\n            }\\n\\n            break;\\n          }\\n\\n        case HostRoot:\\n          {\\n            // TODO: I think this is now always non-null by the time it reaches the\\n            // commit phase. Consider removing the type check.\\n            var _updateQueue = finishedWork.updateQueue;\\n\\n            if (_updateQueue !== null) {\\n              var _instance = null;\\n\\n              if (finishedWork.child !== null) {\\n                switch (finishedWork.child.tag) {\\n                  case HostComponent:\\n                    _instance = getPublicInstance(finishedWork.child.stateNode);\\n                    break;\\n\\n                  case ClassComponent:\\n                    _instance = finishedWork.child.stateNode;\\n                    break;\\n                }\\n              }\\n\\n              commitUpdateQueue(finishedWork, _updateQueue, _instance);\\n            }\\n\\n            break;\\n          }\\n\\n        case HostComponent:\\n          {\\n            var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\\n            // (eg DOM renderer may schedule auto-focus for inputs and form controls).\\n            // These effects should only be committed when components are first mounted,\\n            // aka when there is no current/alternate.\\n\\n            if (current === null && finishedWork.flags & Update) {\\n              var type = finishedWork.type;\\n              var props = finishedWork.memoizedProps;\\n              commitMount(_instance2, type, props);\\n            }\\n\\n            break;\\n          }\\n\\n        case HostText:\\n          {\\n            // We have no life-cycles associated with text.\\n            break;\\n          }\\n\\n        case HostPortal:\\n          {\\n            // We have no life-cycles associated with portals.\\n            break;\\n          }\\n\\n        case Profiler:\\n          {\\n            {\\n              var _finishedWork$memoize2 = finishedWork.memoizedProps,\\n                  onCommit = _finishedWork$memoize2.onCommit,\\n                  onRender = _finishedWork$memoize2.onRender;\\n              var effectDuration = finishedWork.stateNode.effectDuration;\\n              var commitTime = getCommitTime();\\n              var phase = current === null ? 'mount' : 'update';\\n\\n              {\\n                if (isCurrentUpdateNested()) {\\n                  phase = 'nested-update';\\n                }\\n              }\\n\\n              if (typeof onRender === 'function') {\\n                onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\\n              }\\n\\n              {\\n                if (typeof onCommit === 'function') {\\n                  onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\\n                } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\\n                // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\\n                // because the effect is also where times bubble to parent Profilers.\\n\\n\\n                enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\\n                // Do not reset these values until the next render so DevTools has a chance to read them first.\\n\\n                var parentFiber = finishedWork.return;\\n\\n                outer: while (parentFiber !== null) {\\n                  switch (parentFiber.tag) {\\n                    case HostRoot:\\n                      var root = parentFiber.stateNode;\\n                      root.effectDuration += effectDuration;\\n                      break outer;\\n\\n                    case Profiler:\\n                      var parentStateNode = parentFiber.stateNode;\\n                      parentStateNode.effectDuration += effectDuration;\\n                      break outer;\\n                  }\\n\\n                  parentFiber = parentFiber.return;\\n                }\\n              }\\n            }\\n\\n            break;\\n          }\\n\\n        case SuspenseComponent:\\n          {\\n            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\\n            break;\\n          }\\n\\n        case SuspenseListComponent:\\n        case IncompleteClassComponent:\\n        case ScopeComponent:\\n        case OffscreenComponent:\\n        case LegacyHiddenComponent:\\n        case TracingMarkerComponent:\\n          {\\n            break;\\n          }\\n\\n        default:\\n          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\\n      }\\n    }\\n\\n    if ( !offscreenSubtreeWasHidden) {\\n      {\\n        if (finishedWork.flags & Ref) {\\n          commitAttachRef(finishedWork);\\n        }\\n      }\\n    }\\n  }\\n\\n  function reappearLayoutEffectsOnFiber(node) {\\n    // Turn on layout effects in a tree that previously disappeared.\\n    // TODO (Offscreen) Check: flags & LayoutStatic\\n    switch (node.tag) {\\n      case FunctionComponent:\\n      case ForwardRef:\\n      case SimpleMemoComponent:\\n        {\\n          if ( node.mode & ProfileMode) {\\n            try {\\n              startLayoutEffectTimer();\\n              safelyCallCommitHookLayoutEffectListMount(node, node.return);\\n            } finally {\\n              recordLayoutEffectDuration(node);\\n            }\\n          } else {\\n            safelyCallCommitHookLayoutEffectListMount(node, node.return);\\n          }\\n\\n          break;\\n        }\\n\\n      case ClassComponent:\\n        {\\n          var instance = node.stateNode;\\n\\n          if (typeof instance.componentDidMount === 'function') {\\n            safelyCallComponentDidMount(node, node.return, instance);\\n          }\\n\\n          safelyAttachRef(node, node.return);\\n          break;\\n        }\\n\\n      case HostComponent:\\n        {\\n          safelyAttachRef(node, node.return);\\n          break;\\n        }\\n    }\\n  }\\n\\n  function hideOrUnhideAllChildren(finishedWork, isHidden) {\\n    // Only hide or unhide the top-most host nodes.\\n    var hostSubtreeRoot = null;\\n\\n    {\\n      // We only have the top Fiber that was inserted but we need to recurse down its\\n      // children to find all the terminal nodes.\\n      var node = finishedWork;\\n\\n      while (true) {\\n        if (node.tag === HostComponent) {\\n          if (hostSubtreeRoot === null) {\\n            hostSubtreeRoot = node;\\n\\n            try {\\n              var instance = node.stateNode;\\n\\n              if (isHidden) {\\n                hideInstance(instance);\\n              } else {\\n                unhideInstance(node.stateNode, node.memoizedProps);\\n              }\\n            } catch (error) {\\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n            }\\n          }\\n        } else if (node.tag === HostText) {\\n          if (hostSubtreeRoot === null) {\\n            try {\\n              var _instance3 = node.stateNode;\\n\\n              if (isHidden) {\\n                hideTextInstance(_instance3);\\n              } else {\\n                unhideTextInstance(_instance3, node.memoizedProps);\\n              }\\n            } catch (error) {\\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n            }\\n          }\\n        } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\\n          node.child.return = node;\\n          node = node.child;\\n          continue;\\n        }\\n\\n        if (node === finishedWork) {\\n          return;\\n        }\\n\\n        while (node.sibling === null) {\\n          if (node.return === null || node.return === finishedWork) {\\n            return;\\n          }\\n\\n          if (hostSubtreeRoot === node) {\\n            hostSubtreeRoot = null;\\n          }\\n\\n          node = node.return;\\n        }\\n\\n        if (hostSubtreeRoot === node) {\\n          hostSubtreeRoot = null;\\n        }\\n\\n        node.sibling.return = node.return;\\n        node = node.sibling;\\n      }\\n    }\\n  }\\n\\n  function commitAttachRef(finishedWork) {\\n    var ref = finishedWork.ref;\\n\\n    if (ref !== null) {\\n      var instance = finishedWork.stateNode;\\n      var instanceToUse;\\n\\n      switch (finishedWork.tag) {\\n        case HostComponent:\\n          instanceToUse = getPublicInstance(instance);\\n          break;\\n\\n        default:\\n          instanceToUse = instance;\\n      } // Moved outside to ensure DCE works with this flag\\n\\n      if (typeof ref === 'function') {\\n        var retVal;\\n\\n        if ( finishedWork.mode & ProfileMode) {\\n          try {\\n            startLayoutEffectTimer();\\n            retVal = ref(instanceToUse);\\n          } finally {\\n            recordLayoutEffectDuration(finishedWork);\\n          }\\n        } else {\\n          retVal = ref(instanceToUse);\\n        }\\n\\n        {\\n          if (typeof retVal === 'function') {\\n            error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\\n          }\\n        }\\n      } else {\\n        {\\n          if (!ref.hasOwnProperty('current')) {\\n            error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\\n          }\\n        }\\n\\n        ref.current = instanceToUse;\\n      }\\n    }\\n  }\\n\\n  function detachFiberMutation(fiber) {\\n    // Cut off the return pointer to disconnect it from the tree.\\n    // This enables us to detect and warn against state updates on an unmounted component.\\n    // It also prevents events from bubbling from within disconnected components.\\n    //\\n    // Ideally, we should also clear the child pointer of the parent alternate to let this\\n    // get GC:ed but we don't know which for sure which parent is the current\\n    // one so we'll settle for GC:ing the subtree of this child.\\n    // This child itself will be GC:ed when the parent updates the next time.\\n    //\\n    // Note that we can't clear child or sibling pointers yet.\\n    // They're needed for passive effects and for findDOMNode.\\n    // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\\n    //\\n    // Don't reset the alternate yet, either. We need that so we can detach the\\n    // alternate's fields in the passive phase. Clearing the return pointer is\\n    // sufficient for findDOMNode semantics.\\n    var alternate = fiber.alternate;\\n\\n    if (alternate !== null) {\\n      alternate.return = null;\\n    }\\n\\n    fiber.return = null;\\n  }\\n\\n  function detachFiberAfterEffects(fiber) {\\n    var alternate = fiber.alternate;\\n\\n    if (alternate !== null) {\\n      fiber.alternate = null;\\n      detachFiberAfterEffects(alternate);\\n    } // Note: Defensively using negation instead of < in case\\n    // `deletedTreeCleanUpLevel` is undefined.\\n\\n\\n    {\\n      // Clear cyclical Fiber fields. This level alone is designed to roughly\\n      // approximate the planned Fiber refactor. In that world, `setState` will be\\n      // bound to a special \\\"instance\\\" object instead of a Fiber. The Instance\\n      // object will not have any of these fields. It will only be connected to\\n      // the fiber tree via a single link at the root. So if this level alone is\\n      // sufficient to fix memory issues, that bodes well for our plans.\\n      fiber.child = null;\\n      fiber.deletions = null;\\n      fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\\n      // tree, which has its own pointers to children, parents, and siblings.\\n      // The other host nodes also point back to fibers, so we should detach that\\n      // one, too.\\n\\n      if (fiber.tag === HostComponent) {\\n        var hostInstance = fiber.stateNode;\\n\\n        if (hostInstance !== null) {\\n          detachDeletedInstance(hostInstance);\\n        }\\n      }\\n\\n      fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\\n      // already disconnect the `return` pointer at the root of the deleted\\n      // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\\n      // cyclical — it's only cyclical when combined with `child`, `sibling`, and\\n      // `alternate`. But we'll clear it in the next level anyway, just in case.\\n\\n      {\\n        fiber._debugOwner = null;\\n      }\\n\\n      {\\n        // Theoretically, nothing in here should be necessary, because we already\\n        // disconnected the fiber from the tree. So even if something leaks this\\n        // particular fiber, it won't leak anything else\\n        //\\n        // The purpose of this branch is to be super aggressive so we can measure\\n        // if there's any difference in memory impact. If there is, that could\\n        // indicate a React leak we don't know about.\\n        fiber.return = null;\\n        fiber.dependencies = null;\\n        fiber.memoizedProps = null;\\n        fiber.memoizedState = null;\\n        fiber.pendingProps = null;\\n        fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\\n\\n        fiber.updateQueue = null;\\n      }\\n    }\\n  }\\n\\n  function getHostParentFiber(fiber) {\\n    var parent = fiber.return;\\n\\n    while (parent !== null) {\\n      if (isHostParent(parent)) {\\n        return parent;\\n      }\\n\\n      parent = parent.return;\\n    }\\n\\n    throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\\n  }\\n\\n  function isHostParent(fiber) {\\n    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\\n  }\\n\\n  function getHostSibling(fiber) {\\n    // We're going to search forward into the tree until we find a sibling host\\n    // node. Unfortunately, if multiple insertions are done in a row we have to\\n    // search past them. This leads to exponential search for the next sibling.\\n    // TODO: Find a more efficient way to do this.\\n    var node = fiber;\\n\\n    siblings: while (true) {\\n      // If we didn't find anything, let's try the next sibling.\\n      while (node.sibling === null) {\\n        if (node.return === null || isHostParent(node.return)) {\\n          // If we pop out of the root or hit the parent the fiber we are the\\n          // last sibling.\\n          return null;\\n        }\\n\\n        node = node.return;\\n      }\\n\\n      node.sibling.return = node.return;\\n      node = node.sibling;\\n\\n      while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\\n        // If it is not host node and, we might have a host node inside it.\\n        // Try to search down until we find one.\\n        if (node.flags & Placement) {\\n          // If we don't have a child, try the siblings instead.\\n          continue siblings;\\n        } // If we don't have a child, try the siblings instead.\\n        // We also skip portals because they are not part of this host tree.\\n\\n\\n        if (node.child === null || node.tag === HostPortal) {\\n          continue siblings;\\n        } else {\\n          node.child.return = node;\\n          node = node.child;\\n        }\\n      } // Check if this host node is stable or about to be placed.\\n\\n\\n      if (!(node.flags & Placement)) {\\n        // Found it!\\n        return node.stateNode;\\n      }\\n    }\\n  }\\n\\n  function commitPlacement(finishedWork) {\\n\\n\\n    var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\\n\\n    switch (parentFiber.tag) {\\n      case HostComponent:\\n        {\\n          var parent = parentFiber.stateNode;\\n\\n          if (parentFiber.flags & ContentReset) {\\n            // Reset the text content of the parent before doing any insertions\\n            resetTextContent(parent); // Clear ContentReset from the effect tag\\n\\n            parentFiber.flags &= ~ContentReset;\\n          }\\n\\n          var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\\n          // children to find all the terminal nodes.\\n\\n          insertOrAppendPlacementNode(finishedWork, before, parent);\\n          break;\\n        }\\n\\n      case HostRoot:\\n      case HostPortal:\\n        {\\n          var _parent = parentFiber.stateNode.containerInfo;\\n\\n          var _before = getHostSibling(finishedWork);\\n\\n          insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\\n          break;\\n        }\\n      // eslint-disable-next-line-no-fallthrough\\n\\n      default:\\n        throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\\n    }\\n  }\\n\\n  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\\n    var tag = node.tag;\\n    var isHost = tag === HostComponent || tag === HostText;\\n\\n    if (isHost) {\\n      var stateNode = node.stateNode;\\n\\n      if (before) {\\n        insertInContainerBefore(parent, stateNode, before);\\n      } else {\\n        appendChildToContainer(parent, stateNode);\\n      }\\n    } else if (tag === HostPortal) ; else {\\n      var child = node.child;\\n\\n      if (child !== null) {\\n        insertOrAppendPlacementNodeIntoContainer(child, before, parent);\\n        var sibling = child.sibling;\\n\\n        while (sibling !== null) {\\n          insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\\n          sibling = sibling.sibling;\\n        }\\n      }\\n    }\\n  }\\n\\n  function insertOrAppendPlacementNode(node, before, parent) {\\n    var tag = node.tag;\\n    var isHost = tag === HostComponent || tag === HostText;\\n\\n    if (isHost) {\\n      var stateNode = node.stateNode;\\n\\n      if (before) {\\n        insertBefore(parent, stateNode, before);\\n      } else {\\n        appendChild(parent, stateNode);\\n      }\\n    } else if (tag === HostPortal) ; else {\\n      var child = node.child;\\n\\n      if (child !== null) {\\n        insertOrAppendPlacementNode(child, before, parent);\\n        var sibling = child.sibling;\\n\\n        while (sibling !== null) {\\n          insertOrAppendPlacementNode(sibling, before, parent);\\n          sibling = sibling.sibling;\\n        }\\n      }\\n    }\\n  } // These are tracked on the stack as we recursively traverse a\\n  // deleted subtree.\\n  // TODO: Update these during the whole mutation phase, not just during\\n  // a deletion.\\n\\n\\n  var hostParent = null;\\n  var hostParentIsContainer = false;\\n\\n  function commitDeletionEffects(root, returnFiber, deletedFiber) {\\n    {\\n      // We only have the top Fiber that was deleted but we need to recurse down its\\n      // children to find all the terminal nodes.\\n      // Recursively delete all host nodes from the parent, detach refs, clean\\n      // up mounted layout effects, and call componentWillUnmount.\\n      // We only need to remove the topmost host child in each branch. But then we\\n      // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\\n      // could split this into two separate traversals functions, where the second\\n      // one doesn't include any removeChild logic. This is maybe the same\\n      // function as \\\"disappearLayoutEffects\\\" (or whatever that turns into after\\n      // the layout phase is refactored to use recursion).\\n      // Before starting, find the nearest host parent on the stack so we know\\n      // which instance/container to remove the children from.\\n      // TODO: Instead of searching up the fiber return path on every deletion, we\\n      // can track the nearest host component on the JS stack as we traverse the\\n      // tree during the commit phase. This would make insertions faster, too.\\n      var parent = returnFiber;\\n\\n      findParent: while (parent !== null) {\\n        switch (parent.tag) {\\n          case HostComponent:\\n            {\\n              hostParent = parent.stateNode;\\n              hostParentIsContainer = false;\\n              break findParent;\\n            }\\n\\n          case HostRoot:\\n            {\\n              hostParent = parent.stateNode.containerInfo;\\n              hostParentIsContainer = true;\\n              break findParent;\\n            }\\n\\n          case HostPortal:\\n            {\\n              hostParent = parent.stateNode.containerInfo;\\n              hostParentIsContainer = true;\\n              break findParent;\\n            }\\n        }\\n\\n        parent = parent.return;\\n      }\\n\\n      if (hostParent === null) {\\n        throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\\n      }\\n\\n      commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\\n      hostParent = null;\\n      hostParentIsContainer = false;\\n    }\\n\\n    detachFiberMutation(deletedFiber);\\n  }\\n\\n  function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\\n    // TODO: Use a static flag to skip trees that don't have unmount effects\\n    var child = parent.child;\\n\\n    while (child !== null) {\\n      commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\\n      child = child.sibling;\\n    }\\n  }\\n\\n  function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\\n    onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\\n    // into their subtree. There are simpler cases in the inner switch\\n    // that don't modify the stack.\\n\\n    switch (deletedFiber.tag) {\\n      case HostComponent:\\n        {\\n          if (!offscreenSubtreeWasHidden) {\\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\\n          } // Intentional fallthrough to next branch\\n\\n        }\\n      // eslint-disable-next-line-no-fallthrough\\n\\n      case HostText:\\n        {\\n          // We only need to remove the nearest host child. Set the host parent\\n          // to `null` on the stack to indicate that nested children don't\\n          // need to be removed.\\n          {\\n            var prevHostParent = hostParent;\\n            var prevHostParentIsContainer = hostParentIsContainer;\\n            hostParent = null;\\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n            hostParent = prevHostParent;\\n            hostParentIsContainer = prevHostParentIsContainer;\\n\\n            if (hostParent !== null) {\\n              // Now that all the child effects have unmounted, we can remove the\\n              // node from the tree.\\n              if (hostParentIsContainer) {\\n                removeChildFromContainer(hostParent, deletedFiber.stateNode);\\n              } else {\\n                removeChild(hostParent, deletedFiber.stateNode);\\n              }\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case DehydratedFragment:\\n        {\\n          // Delete the dehydrated suspense boundary and all of its content.\\n\\n\\n          {\\n            if (hostParent !== null) {\\n              if (hostParentIsContainer) {\\n                clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\\n              } else {\\n                clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\\n              }\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case HostPortal:\\n        {\\n          {\\n            // When we go into a portal, it becomes the parent to remove from.\\n            var _prevHostParent = hostParent;\\n            var _prevHostParentIsContainer = hostParentIsContainer;\\n            hostParent = deletedFiber.stateNode.containerInfo;\\n            hostParentIsContainer = true;\\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n            hostParent = _prevHostParent;\\n            hostParentIsContainer = _prevHostParentIsContainer;\\n          }\\n\\n          return;\\n        }\\n\\n      case FunctionComponent:\\n      case ForwardRef:\\n      case MemoComponent:\\n      case SimpleMemoComponent:\\n        {\\n          if (!offscreenSubtreeWasHidden) {\\n            var updateQueue = deletedFiber.updateQueue;\\n\\n            if (updateQueue !== null) {\\n              var lastEffect = updateQueue.lastEffect;\\n\\n              if (lastEffect !== null) {\\n                var firstEffect = lastEffect.next;\\n                var effect = firstEffect;\\n\\n                do {\\n                  var _effect = effect,\\n                      destroy = _effect.destroy,\\n                      tag = _effect.tag;\\n\\n                  if (destroy !== undefined) {\\n                    if ((tag & Insertion) !== NoFlags$1) {\\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\\n                    } else if ((tag & Layout) !== NoFlags$1) {\\n                      {\\n                        markComponentLayoutEffectUnmountStarted(deletedFiber);\\n                      }\\n\\n                      if ( deletedFiber.mode & ProfileMode) {\\n                        startLayoutEffectTimer();\\n                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\\n                        recordLayoutEffectDuration(deletedFiber);\\n                      } else {\\n                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\\n                      }\\n\\n                      {\\n                        markComponentLayoutEffectUnmountStopped();\\n                      }\\n                    }\\n                  }\\n\\n                  effect = effect.next;\\n                } while (effect !== firstEffect);\\n              }\\n            }\\n          }\\n\\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n          return;\\n        }\\n\\n      case ClassComponent:\\n        {\\n          if (!offscreenSubtreeWasHidden) {\\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\\n            var instance = deletedFiber.stateNode;\\n\\n            if (typeof instance.componentWillUnmount === 'function') {\\n              safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\\n            }\\n          }\\n\\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n          return;\\n        }\\n\\n      case ScopeComponent:\\n        {\\n\\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n          return;\\n        }\\n\\n      case OffscreenComponent:\\n        {\\n          if ( // TODO: Remove this dead flag\\n           deletedFiber.mode & ConcurrentMode) {\\n            // If this offscreen component is hidden, we already unmounted it. Before\\n            // deleting the children, track that it's already unmounted so that we\\n            // don't attempt to unmount the effects again.\\n            // TODO: If the tree is hidden, in most cases we should be able to skip\\n            // over the nested children entirely. An exception is we haven't yet found\\n            // the topmost host node to delete, which we already track on the stack.\\n            // But the other case is portals, which need to be detached no matter how\\n            // deeply they are nested. We should use a subtree flag to track whether a\\n            // subtree includes a nested portal.\\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\\n          } else {\\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n          }\\n\\n          break;\\n        }\\n\\n      default:\\n        {\\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\\n          return;\\n        }\\n    }\\n  }\\n\\n  function commitSuspenseCallback(finishedWork) {\\n    // TODO: Move this to passive phase\\n    var newState = finishedWork.memoizedState;\\n  }\\n\\n  function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\\n\\n    var newState = finishedWork.memoizedState;\\n\\n    if (newState === null) {\\n      var current = finishedWork.alternate;\\n\\n      if (current !== null) {\\n        var prevState = current.memoizedState;\\n\\n        if (prevState !== null) {\\n          var suspenseInstance = prevState.dehydrated;\\n\\n          if (suspenseInstance !== null) {\\n            commitHydratedSuspenseInstance(suspenseInstance);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function attachSuspenseRetryListeners(finishedWork) {\\n    // If this boundary just timed out, then it will have a set of wakeables.\\n    // For each wakeable, attach a listener so that when it resolves, React\\n    // attempts to re-render the boundary in the primary (pre-timeout) state.\\n    var wakeables = finishedWork.updateQueue;\\n\\n    if (wakeables !== null) {\\n      finishedWork.updateQueue = null;\\n      var retryCache = finishedWork.stateNode;\\n\\n      if (retryCache === null) {\\n        retryCache = finishedWork.stateNode = new PossiblyWeakSet();\\n      }\\n\\n      wakeables.forEach(function (wakeable) {\\n        // Memoize using the boundary fiber to prevent redundant listeners.\\n        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\\n\\n        if (!retryCache.has(wakeable)) {\\n          retryCache.add(wakeable);\\n\\n          {\\n            if (isDevToolsPresent) {\\n              if (inProgressLanes !== null && inProgressRoot !== null) {\\n                // If we have pending work still, associate the original updaters with it.\\n                restorePendingUpdaters(inProgressRoot, inProgressLanes);\\n              } else {\\n                throw Error('Expected finished root and lanes to be set. This is a bug in React.');\\n              }\\n            }\\n          }\\n\\n          wakeable.then(retry, retry);\\n        }\\n      });\\n    }\\n  } // This function detects when a Suspense boundary goes from visible to hidden.\\n  function commitMutationEffects(root, finishedWork, committedLanes) {\\n    inProgressLanes = committedLanes;\\n    inProgressRoot = root;\\n    setCurrentFiber(finishedWork);\\n    commitMutationEffectsOnFiber(finishedWork, root);\\n    setCurrentFiber(finishedWork);\\n    inProgressLanes = null;\\n    inProgressRoot = null;\\n  }\\n\\n  function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\\n    // Deletions effects can be scheduled on any fiber type. They need to happen\\n    // before the children effects hae fired.\\n    var deletions = parentFiber.deletions;\\n\\n    if (deletions !== null) {\\n      for (var i = 0; i < deletions.length; i++) {\\n        var childToDelete = deletions[i];\\n\\n        try {\\n          commitDeletionEffects(root, parentFiber, childToDelete);\\n        } catch (error) {\\n          captureCommitPhaseError(childToDelete, parentFiber, error);\\n        }\\n      }\\n    }\\n\\n    var prevDebugFiber = getCurrentFiber();\\n\\n    if (parentFiber.subtreeFlags & MutationMask) {\\n      var child = parentFiber.child;\\n\\n      while (child !== null) {\\n        setCurrentFiber(child);\\n        commitMutationEffectsOnFiber(child, root);\\n        child = child.sibling;\\n      }\\n    }\\n\\n    setCurrentFiber(prevDebugFiber);\\n  }\\n\\n  function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\\n    var current = finishedWork.alternate;\\n    var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\\n    // because the fiber tag is more specific. An exception is any flag related\\n    // to reconcilation, because those can be set on all fiber types.\\n\\n    switch (finishedWork.tag) {\\n      case FunctionComponent:\\n      case ForwardRef:\\n      case MemoComponent:\\n      case SimpleMemoComponent:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n\\n          if (flags & Update) {\\n            try {\\n              commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\\n              commitHookEffectListMount(Insertion | HasEffect, finishedWork);\\n            } catch (error) {\\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n            } // Layout effects are destroyed during the mutation phase so that all\\n            // destroy functions for all fibers are called before any create functions.\\n            // This prevents sibling component effects from interfering with each other,\\n            // e.g. a destroy function in one component should never override a ref set\\n            // by a create function in another component during the same commit.\\n\\n\\n            if ( finishedWork.mode & ProfileMode) {\\n              try {\\n                startLayoutEffectTimer();\\n                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\\n              } catch (error) {\\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n              }\\n\\n              recordLayoutEffectDuration(finishedWork);\\n            } else {\\n              try {\\n                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\\n              } catch (error) {\\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n              }\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case ClassComponent:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n\\n          if (flags & Ref) {\\n            if (current !== null) {\\n              safelyDetachRef(current, current.return);\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case HostComponent:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n\\n          if (flags & Ref) {\\n            if (current !== null) {\\n              safelyDetachRef(current, current.return);\\n            }\\n          }\\n\\n          {\\n            // TODO: ContentReset gets cleared by the children during the commit\\n            // phase. This is a refactor hazard because it means we must read\\n            // flags the flags after `commitReconciliationEffects` has already run;\\n            // the order matters. We should refactor so that ContentReset does not\\n            // rely on mutating the flag during commit. Like by setting a flag\\n            // during the render phase instead.\\n            if (finishedWork.flags & ContentReset) {\\n              var instance = finishedWork.stateNode;\\n\\n              try {\\n                resetTextContent(instance);\\n              } catch (error) {\\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n              }\\n            }\\n\\n            if (flags & Update) {\\n              var _instance4 = finishedWork.stateNode;\\n\\n              if (_instance4 != null) {\\n                // Commit the work prepared earlier.\\n                var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\\n                // as the newProps. The updatePayload will contain the real change in\\n                // this case.\\n\\n                var oldProps = current !== null ? current.memoizedProps : newProps;\\n                var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\\n\\n                var updatePayload = finishedWork.updateQueue;\\n                finishedWork.updateQueue = null;\\n\\n                if (updatePayload !== null) {\\n                  try {\\n                    commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\\n                  } catch (error) {\\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n                  }\\n                }\\n              }\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case HostText:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n\\n          if (flags & Update) {\\n            {\\n              if (finishedWork.stateNode === null) {\\n                throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\\n              }\\n\\n              var textInstance = finishedWork.stateNode;\\n              var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\\n              // as the newProps. The updatePayload will contain the real change in\\n              // this case.\\n\\n              var oldText = current !== null ? current.memoizedProps : newText;\\n\\n              try {\\n                commitTextUpdate(textInstance, oldText, newText);\\n              } catch (error) {\\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n              }\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case HostRoot:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n\\n          if (flags & Update) {\\n            {\\n              if (current !== null) {\\n                var prevRootState = current.memoizedState;\\n\\n                if (prevRootState.isDehydrated) {\\n                  try {\\n                    commitHydratedContainer(root.containerInfo);\\n                  } catch (error) {\\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n                  }\\n                }\\n              }\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case HostPortal:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n\\n          return;\\n        }\\n\\n      case SuspenseComponent:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n          var offscreenFiber = finishedWork.child;\\n\\n          if (offscreenFiber.flags & Visibility) {\\n            var offscreenInstance = offscreenFiber.stateNode;\\n            var newState = offscreenFiber.memoizedState;\\n            var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\\n            // read it during an event\\n\\n            offscreenInstance.isHidden = isHidden;\\n\\n            if (isHidden) {\\n              var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\\n\\n              if (!wasHidden) {\\n                // TODO: Move to passive phase\\n                markCommitTimeOfFallback();\\n              }\\n            }\\n          }\\n\\n          if (flags & Update) {\\n            try {\\n              commitSuspenseCallback(finishedWork);\\n            } catch (error) {\\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n            }\\n\\n            attachSuspenseRetryListeners(finishedWork);\\n          }\\n\\n          return;\\n        }\\n\\n      case OffscreenComponent:\\n        {\\n          var _wasHidden = current !== null && current.memoizedState !== null;\\n\\n          if ( // TODO: Remove this dead flag\\n           finishedWork.mode & ConcurrentMode) {\\n            // Before committing the children, track on the stack whether this\\n            // offscreen subtree was already hidden, so that we don't unmount the\\n            // effects again.\\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\\n            recursivelyTraverseMutationEffects(root, finishedWork);\\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\\n          } else {\\n            recursivelyTraverseMutationEffects(root, finishedWork);\\n          }\\n\\n          commitReconciliationEffects(finishedWork);\\n\\n          if (flags & Visibility) {\\n            var _offscreenInstance = finishedWork.stateNode;\\n            var _newState = finishedWork.memoizedState;\\n\\n            var _isHidden = _newState !== null;\\n\\n            var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\\n            // read it during an event\\n\\n            _offscreenInstance.isHidden = _isHidden;\\n\\n            {\\n              if (_isHidden) {\\n                if (!_wasHidden) {\\n                  if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\\n                    nextEffect = offscreenBoundary;\\n                    var offscreenChild = offscreenBoundary.child;\\n\\n                    while (offscreenChild !== null) {\\n                      nextEffect = offscreenChild;\\n                      disappearLayoutEffects_begin(offscreenChild);\\n                      offscreenChild = offscreenChild.sibling;\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n\\n            {\\n              // TODO: This needs to run whenever there's an insertion or update\\n              // inside a hidden Offscreen tree.\\n              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\\n            }\\n          }\\n\\n          return;\\n        }\\n\\n      case SuspenseListComponent:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n\\n          if (flags & Update) {\\n            attachSuspenseRetryListeners(finishedWork);\\n          }\\n\\n          return;\\n        }\\n\\n      case ScopeComponent:\\n        {\\n\\n          return;\\n        }\\n\\n      default:\\n        {\\n          recursivelyTraverseMutationEffects(root, finishedWork);\\n          commitReconciliationEffects(finishedWork);\\n          return;\\n        }\\n    }\\n  }\\n\\n  function commitReconciliationEffects(finishedWork) {\\n    // Placement effects (insertions, reorders) can be scheduled on any fiber\\n    // type. They needs to happen after the children effects have fired, but\\n    // before the effects on this fiber have fired.\\n    var flags = finishedWork.flags;\\n\\n    if (flags & Placement) {\\n      try {\\n        commitPlacement(finishedWork);\\n      } catch (error) {\\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\\n      } // Clear the \\\"placement\\\" from effect tag so that we know that this is\\n      // inserted, before any life-cycles like componentDidMount gets called.\\n      // TODO: findDOMNode doesn't rely on this any more but isMounted does\\n      // and isMounted is deprecated anyway so we should be able to kill this.\\n\\n\\n      finishedWork.flags &= ~Placement;\\n    }\\n\\n    if (flags & Hydrating) {\\n      finishedWork.flags &= ~Hydrating;\\n    }\\n  }\\n\\n  function commitLayoutEffects(finishedWork, root, committedLanes) {\\n    inProgressLanes = committedLanes;\\n    inProgressRoot = root;\\n    nextEffect = finishedWork;\\n    commitLayoutEffects_begin(finishedWork, root, committedLanes);\\n    inProgressLanes = null;\\n    inProgressRoot = null;\\n  }\\n\\n  function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\\n    // Suspense layout effects semantics don't change for legacy roots.\\n    var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\\n\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n      var firstChild = fiber.child;\\n\\n      if ( fiber.tag === OffscreenComponent && isModernRoot) {\\n        // Keep track of the current Offscreen stack's state.\\n        var isHidden = fiber.memoizedState !== null;\\n        var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\\n\\n        if (newOffscreenSubtreeIsHidden) {\\n          // The Offscreen tree is hidden. Skip over its layout effects.\\n          commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\\n          continue;\\n        } else {\\n          // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\\n          var current = fiber.alternate;\\n          var wasHidden = current !== null && current.memoizedState !== null;\\n          var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\\n          var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\\n          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\\n\\n          offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\\n          offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\\n\\n          if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\\n            // This is the root of a reappearing boundary. Turn its layout effects\\n            // back on.\\n            nextEffect = fiber;\\n            reappearLayoutEffects_begin(fiber);\\n          }\\n\\n          var child = firstChild;\\n\\n          while (child !== null) {\\n            nextEffect = child;\\n            commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\\n            root, committedLanes);\\n            child = child.sibling;\\n          } // Restore Offscreen state and resume in our-progress traversal.\\n\\n\\n          nextEffect = fiber;\\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\\n          commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\\n          continue;\\n        }\\n      }\\n\\n      if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\\n        firstChild.return = fiber;\\n        nextEffect = firstChild;\\n      } else {\\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\\n      }\\n    }\\n  }\\n\\n  function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n\\n      if ((fiber.flags & LayoutMask) !== NoFlags) {\\n        var current = fiber.alternate;\\n        setCurrentFiber(fiber);\\n\\n        try {\\n          commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\\n        } catch (error) {\\n          captureCommitPhaseError(fiber, fiber.return, error);\\n        }\\n\\n        resetCurrentFiber();\\n      }\\n\\n      if (fiber === subtreeRoot) {\\n        nextEffect = null;\\n        return;\\n      }\\n\\n      var sibling = fiber.sibling;\\n\\n      if (sibling !== null) {\\n        sibling.return = fiber.return;\\n        nextEffect = sibling;\\n        return;\\n      }\\n\\n      nextEffect = fiber.return;\\n    }\\n  }\\n\\n  function disappearLayoutEffects_begin(subtreeRoot) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n      var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\\n\\n      switch (fiber.tag) {\\n        case FunctionComponent:\\n        case ForwardRef:\\n        case MemoComponent:\\n        case SimpleMemoComponent:\\n          {\\n            if ( fiber.mode & ProfileMode) {\\n              try {\\n                startLayoutEffectTimer();\\n                commitHookEffectListUnmount(Layout, fiber, fiber.return);\\n              } finally {\\n                recordLayoutEffectDuration(fiber);\\n              }\\n            } else {\\n              commitHookEffectListUnmount(Layout, fiber, fiber.return);\\n            }\\n\\n            break;\\n          }\\n\\n        case ClassComponent:\\n          {\\n            // TODO (Offscreen) Check: flags & RefStatic\\n            safelyDetachRef(fiber, fiber.return);\\n            var instance = fiber.stateNode;\\n\\n            if (typeof instance.componentWillUnmount === 'function') {\\n              safelyCallComponentWillUnmount(fiber, fiber.return, instance);\\n            }\\n\\n            break;\\n          }\\n\\n        case HostComponent:\\n          {\\n            safelyDetachRef(fiber, fiber.return);\\n            break;\\n          }\\n\\n        case OffscreenComponent:\\n          {\\n            // Check if this is a\\n            var isHidden = fiber.memoizedState !== null;\\n\\n            if (isHidden) {\\n              // Nested Offscreen tree is already hidden. Don't disappear\\n              // its effects.\\n              disappearLayoutEffects_complete(subtreeRoot);\\n              continue;\\n            }\\n\\n            break;\\n          }\\n      } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\\n\\n\\n      if (firstChild !== null) {\\n        firstChild.return = fiber;\\n        nextEffect = firstChild;\\n      } else {\\n        disappearLayoutEffects_complete(subtreeRoot);\\n      }\\n    }\\n  }\\n\\n  function disappearLayoutEffects_complete(subtreeRoot) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n\\n      if (fiber === subtreeRoot) {\\n        nextEffect = null;\\n        return;\\n      }\\n\\n      var sibling = fiber.sibling;\\n\\n      if (sibling !== null) {\\n        sibling.return = fiber.return;\\n        nextEffect = sibling;\\n        return;\\n      }\\n\\n      nextEffect = fiber.return;\\n    }\\n  }\\n\\n  function reappearLayoutEffects_begin(subtreeRoot) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n      var firstChild = fiber.child;\\n\\n      if (fiber.tag === OffscreenComponent) {\\n        var isHidden = fiber.memoizedState !== null;\\n\\n        if (isHidden) {\\n          // Nested Offscreen tree is still hidden. Don't re-appear its effects.\\n          reappearLayoutEffects_complete(subtreeRoot);\\n          continue;\\n        }\\n      } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\\n\\n\\n      if (firstChild !== null) {\\n        // This node may have been reused from a previous render, so we can't\\n        // assume its return pointer is correct.\\n        firstChild.return = fiber;\\n        nextEffect = firstChild;\\n      } else {\\n        reappearLayoutEffects_complete(subtreeRoot);\\n      }\\n    }\\n  }\\n\\n  function reappearLayoutEffects_complete(subtreeRoot) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\\n\\n      setCurrentFiber(fiber);\\n\\n      try {\\n        reappearLayoutEffectsOnFiber(fiber);\\n      } catch (error) {\\n        captureCommitPhaseError(fiber, fiber.return, error);\\n      }\\n\\n      resetCurrentFiber();\\n\\n      if (fiber === subtreeRoot) {\\n        nextEffect = null;\\n        return;\\n      }\\n\\n      var sibling = fiber.sibling;\\n\\n      if (sibling !== null) {\\n        // This node may have been reused from a previous render, so we can't\\n        // assume its return pointer is correct.\\n        sibling.return = fiber.return;\\n        nextEffect = sibling;\\n        return;\\n      }\\n\\n      nextEffect = fiber.return;\\n    }\\n  }\\n\\n  function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\\n    nextEffect = finishedWork;\\n    commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\\n  }\\n\\n  function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n      var firstChild = fiber.child;\\n\\n      if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\\n        firstChild.return = fiber;\\n        nextEffect = firstChild;\\n      } else {\\n        commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\\n      }\\n    }\\n  }\\n\\n  function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n\\n      if ((fiber.flags & Passive) !== NoFlags) {\\n        setCurrentFiber(fiber);\\n\\n        try {\\n          commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\\n        } catch (error) {\\n          captureCommitPhaseError(fiber, fiber.return, error);\\n        }\\n\\n        resetCurrentFiber();\\n      }\\n\\n      if (fiber === subtreeRoot) {\\n        nextEffect = null;\\n        return;\\n      }\\n\\n      var sibling = fiber.sibling;\\n\\n      if (sibling !== null) {\\n        sibling.return = fiber.return;\\n        nextEffect = sibling;\\n        return;\\n      }\\n\\n      nextEffect = fiber.return;\\n    }\\n  }\\n\\n  function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\\n    switch (finishedWork.tag) {\\n      case FunctionComponent:\\n      case ForwardRef:\\n      case SimpleMemoComponent:\\n        {\\n          if ( finishedWork.mode & ProfileMode) {\\n            startPassiveEffectTimer();\\n\\n            try {\\n              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\\n            } finally {\\n              recordPassiveEffectDuration(finishedWork);\\n            }\\n          } else {\\n            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\\n          }\\n\\n          break;\\n        }\\n    }\\n  }\\n\\n  function commitPassiveUnmountEffects(firstChild) {\\n    nextEffect = firstChild;\\n    commitPassiveUnmountEffects_begin();\\n  }\\n\\n  function commitPassiveUnmountEffects_begin() {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n      var child = fiber.child;\\n\\n      if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\\n        var deletions = fiber.deletions;\\n\\n        if (deletions !== null) {\\n          for (var i = 0; i < deletions.length; i++) {\\n            var fiberToDelete = deletions[i];\\n            nextEffect = fiberToDelete;\\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\\n          }\\n\\n          {\\n            // A fiber was deleted from this parent fiber, but it's still part of\\n            // the previous (alternate) parent fiber's list of children. Because\\n            // children are a linked list, an earlier sibling that's still alive\\n            // will be connected to the deleted fiber via its `alternate`:\\n            //\\n            //   live fiber\\n            //   --alternate--> previous live fiber\\n            //   --sibling--> deleted fiber\\n            //\\n            // We can't disconnect `alternate` on nodes that haven't been deleted\\n            // yet, but we can disconnect the `sibling` and `child` pointers.\\n            var previousFiber = fiber.alternate;\\n\\n            if (previousFiber !== null) {\\n              var detachedChild = previousFiber.child;\\n\\n              if (detachedChild !== null) {\\n                previousFiber.child = null;\\n\\n                do {\\n                  var detachedSibling = detachedChild.sibling;\\n                  detachedChild.sibling = null;\\n                  detachedChild = detachedSibling;\\n                } while (detachedChild !== null);\\n              }\\n            }\\n          }\\n\\n          nextEffect = fiber;\\n        }\\n      }\\n\\n      if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\\n        child.return = fiber;\\n        nextEffect = child;\\n      } else {\\n        commitPassiveUnmountEffects_complete();\\n      }\\n    }\\n  }\\n\\n  function commitPassiveUnmountEffects_complete() {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n\\n      if ((fiber.flags & Passive) !== NoFlags) {\\n        setCurrentFiber(fiber);\\n        commitPassiveUnmountOnFiber(fiber);\\n        resetCurrentFiber();\\n      }\\n\\n      var sibling = fiber.sibling;\\n\\n      if (sibling !== null) {\\n        sibling.return = fiber.return;\\n        nextEffect = sibling;\\n        return;\\n      }\\n\\n      nextEffect = fiber.return;\\n    }\\n  }\\n\\n  function commitPassiveUnmountOnFiber(finishedWork) {\\n    switch (finishedWork.tag) {\\n      case FunctionComponent:\\n      case ForwardRef:\\n      case SimpleMemoComponent:\\n        {\\n          if ( finishedWork.mode & ProfileMode) {\\n            startPassiveEffectTimer();\\n            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\\n            recordPassiveEffectDuration(finishedWork);\\n          } else {\\n            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\\n          }\\n\\n          break;\\n        }\\n    }\\n  }\\n\\n  function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect; // Deletion effects fire in parent -> child order\\n      // TODO: Check if fiber has a PassiveStatic flag\\n\\n      setCurrentFiber(fiber);\\n      commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\\n      resetCurrentFiber();\\n      var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\\n      // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\\n\\n      if (child !== null) {\\n        child.return = fiber;\\n        nextEffect = child;\\n      } else {\\n        commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\\n      }\\n    }\\n  }\\n\\n  function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\\n    while (nextEffect !== null) {\\n      var fiber = nextEffect;\\n      var sibling = fiber.sibling;\\n      var returnFiber = fiber.return;\\n\\n      {\\n        // Recursively traverse the entire deleted tree and clean up fiber fields.\\n        // This is more aggressive than ideal, and the long term goal is to only\\n        // have to detach the deleted tree at the root.\\n        detachFiberAfterEffects(fiber);\\n\\n        if (fiber === deletedSubtreeRoot) {\\n          nextEffect = null;\\n          return;\\n        }\\n      }\\n\\n      if (sibling !== null) {\\n        sibling.return = returnFiber;\\n        nextEffect = sibling;\\n        return;\\n      }\\n\\n      nextEffect = returnFiber;\\n    }\\n  }\\n\\n  function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\\n    switch (current.tag) {\\n      case FunctionComponent:\\n      case ForwardRef:\\n      case SimpleMemoComponent:\\n        {\\n          if ( current.mode & ProfileMode) {\\n            startPassiveEffectTimer();\\n            commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\\n            recordPassiveEffectDuration(current);\\n          } else {\\n            commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\\n          }\\n\\n          break;\\n        }\\n    }\\n  } // TODO: Reuse reappearLayoutEffects traversal here?\\n\\n\\n  function invokeLayoutEffectMountInDEV(fiber) {\\n    {\\n      // We don't need to re-check StrictEffectsMode here.\\n      // This function is only called if that check has already passed.\\n      switch (fiber.tag) {\\n        case FunctionComponent:\\n        case ForwardRef:\\n        case SimpleMemoComponent:\\n          {\\n            try {\\n              commitHookEffectListMount(Layout | HasEffect, fiber);\\n            } catch (error) {\\n              captureCommitPhaseError(fiber, fiber.return, error);\\n            }\\n\\n            break;\\n          }\\n\\n        case ClassComponent:\\n          {\\n            var instance = fiber.stateNode;\\n\\n            try {\\n              instance.componentDidMount();\\n            } catch (error) {\\n              captureCommitPhaseError(fiber, fiber.return, error);\\n            }\\n\\n            break;\\n          }\\n      }\\n    }\\n  }\\n\\n  function invokePassiveEffectMountInDEV(fiber) {\\n    {\\n      // We don't need to re-check StrictEffectsMode here.\\n      // This function is only called if that check has already passed.\\n      switch (fiber.tag) {\\n        case FunctionComponent:\\n        case ForwardRef:\\n        case SimpleMemoComponent:\\n          {\\n            try {\\n              commitHookEffectListMount(Passive$1 | HasEffect, fiber);\\n            } catch (error) {\\n              captureCommitPhaseError(fiber, fiber.return, error);\\n            }\\n\\n            break;\\n          }\\n      }\\n    }\\n  }\\n\\n  function invokeLayoutEffectUnmountInDEV(fiber) {\\n    {\\n      // We don't need to re-check StrictEffectsMode here.\\n      // This function is only called if that check has already passed.\\n      switch (fiber.tag) {\\n        case FunctionComponent:\\n        case ForwardRef:\\n        case SimpleMemoComponent:\\n          {\\n            try {\\n              commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\\n            } catch (error) {\\n              captureCommitPhaseError(fiber, fiber.return, error);\\n            }\\n\\n            break;\\n          }\\n\\n        case ClassComponent:\\n          {\\n            var instance = fiber.stateNode;\\n\\n            if (typeof instance.componentWillUnmount === 'function') {\\n              safelyCallComponentWillUnmount(fiber, fiber.return, instance);\\n            }\\n\\n            break;\\n          }\\n      }\\n    }\\n  }\\n\\n  function invokePassiveEffectUnmountInDEV(fiber) {\\n    {\\n      // We don't need to re-check StrictEffectsMode here.\\n      // This function is only called if that check has already passed.\\n      switch (fiber.tag) {\\n        case FunctionComponent:\\n        case ForwardRef:\\n        case SimpleMemoComponent:\\n          {\\n            try {\\n              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\\n            } catch (error) {\\n              captureCommitPhaseError(fiber, fiber.return, error);\\n            }\\n          }\\n      }\\n    }\\n  }\\n\\n  var COMPONENT_TYPE = 0;\\n  var HAS_PSEUDO_CLASS_TYPE = 1;\\n  var ROLE_TYPE = 2;\\n  var TEST_NAME_TYPE = 3;\\n  var TEXT_TYPE = 4;\\n\\n  if (typeof Symbol === 'function' && Symbol.for) {\\n    var symbolFor = Symbol.for;\\n    COMPONENT_TYPE = symbolFor('selector.component');\\n    HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\\n    ROLE_TYPE = symbolFor('selector.role');\\n    TEST_NAME_TYPE = symbolFor('selector.test_id');\\n    TEXT_TYPE = symbolFor('selector.text');\\n  }\\n  var commitHooks = [];\\n  function onCommitRoot$1() {\\n    {\\n      commitHooks.forEach(function (commitHook) {\\n        return commitHook();\\n      });\\n    }\\n  }\\n\\n  var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\\n  function isLegacyActEnvironment(fiber) {\\n    {\\n      // Legacy mode. We preserve the behavior of React 17's act. It assumes an\\n      // act environment whenever `jest` is defined, but you can still turn off\\n      // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\\n      // to false.\\n      var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\\n\\n      var jestIsDefined = typeof jest !== 'undefined';\\n      return  jestIsDefined && isReactActEnvironmentGlobal !== false;\\n    }\\n  }\\n  function isConcurrentActEnvironment() {\\n    {\\n      var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\\n\\n      if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\\n        // TODO: Include link to relevant documentation page.\\n        error('The current testing environment is not configured to support ' + 'act(...)');\\n      }\\n\\n      return isReactActEnvironmentGlobal;\\n    }\\n  }\\n\\n  var ceil = Math.ceil;\\n  var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\\n      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\\n      ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,\\n      ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\\n  var NoContext =\\n  /*             */\\n  0;\\n  var BatchedContext =\\n  /*               */\\n  1;\\n  var RenderContext =\\n  /*                */\\n  2;\\n  var CommitContext =\\n  /*                */\\n  4;\\n  var RootInProgress = 0;\\n  var RootFatalErrored = 1;\\n  var RootErrored = 2;\\n  var RootSuspended = 3;\\n  var RootSuspendedWithDelay = 4;\\n  var RootCompleted = 5;\\n  var RootDidNotComplete = 6; // Describes where we are in the React execution stack\\n\\n  var executionContext = NoContext; // The root we're working on\\n\\n  var workInProgressRoot = null; // The fiber we're working on\\n\\n  var workInProgress = null; // The lanes we're rendering\\n\\n  var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\\n  // This is a superset of the lanes we started working on at the root. The only\\n  // case where it's different from `workInProgressRootRenderLanes` is when we\\n  // enter a subtree that is hidden and needs to be unhidden: Suspense and\\n  // Offscreen component.\\n  //\\n  // Most things in the work loop should deal with workInProgressRootRenderLanes.\\n  // Most things in begin/complete phases should deal with subtreeRenderLanes.\\n\\n  var subtreeRenderLanes = NoLanes;\\n  var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\\n\\n  var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\\n\\n  var workInProgressRootFatalError = null; // \\\"Included\\\" lanes refer to lanes that were worked on during this render. It's\\n  // slightly different than `renderLanes` because `renderLanes` can change as you\\n  // enter and exit an Offscreen tree. This value is the combination of all render\\n  // lanes for the entire render phase.\\n\\n  var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\\n  // includes unprocessed updates, not work in bailed out children.\\n\\n  var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\\n\\n  var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\\n\\n  var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\\n\\n  var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\\n  // We will log them once the tree commits.\\n\\n  var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\\n  // model where we don't commit new loading states in too quick succession.\\n\\n  var globalMostRecentFallbackTime = 0;\\n  var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\\n  // more and prefer CPU suspense heuristics instead.\\n\\n  var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\\n  // suspense heuristics and opt out of rendering more content.\\n\\n  var RENDER_TIMEOUT_MS = 500;\\n  var workInProgressTransitions = null;\\n\\n  function resetRenderTimer() {\\n    workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\\n  }\\n\\n  function getRenderTargetTime() {\\n    return workInProgressRootRenderTargetTime;\\n  }\\n  var hasUncaughtError = false;\\n  var firstUncaughtError = null;\\n  var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\\n  var rootDoesHavePassiveEffects = false;\\n  var rootWithPendingPassiveEffects = null;\\n  var pendingPassiveEffectsLanes = NoLanes;\\n  var pendingPassiveProfilerEffects = [];\\n  var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\\n\\n  var NESTED_UPDATE_LIMIT = 50;\\n  var nestedUpdateCount = 0;\\n  var rootWithNestedUpdates = null;\\n  var isFlushingPassiveEffects = false;\\n  var didScheduleUpdateDuringPassiveEffects = false;\\n  var NESTED_PASSIVE_UPDATE_LIMIT = 50;\\n  var nestedPassiveUpdateCount = 0;\\n  var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\\n  // event times as simultaneous, even if the actual clock time has advanced\\n  // between the first and second call.\\n\\n  var currentEventTime = NoTimestamp;\\n  var currentEventTransitionLane = NoLanes;\\n  var isRunningInsertionEffect = false;\\n  function getWorkInProgressRoot() {\\n    return workInProgressRoot;\\n  }\\n  function requestEventTime() {\\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\\n      // We're inside React, so it's fine to read the actual time.\\n      return now();\\n    } // We're not inside React, so we may be in the middle of a browser event.\\n\\n\\n    if (currentEventTime !== NoTimestamp) {\\n      // Use the same start time for all updates until we enter React again.\\n      return currentEventTime;\\n    } // This is the first update since React yielded. Compute a new start time.\\n\\n\\n    currentEventTime = now();\\n    return currentEventTime;\\n  }\\n  function requestUpdateLane(fiber) {\\n    // Special cases\\n    var mode = fiber.mode;\\n\\n    if ((mode & ConcurrentMode) === NoMode) {\\n      return SyncLane;\\n    } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\\n      // This is a render phase update. These are not officially supported. The\\n      // old behavior is to give this the same \\\"thread\\\" (lanes) as\\n      // whatever is currently rendering. So if you call `setState` on a component\\n      // that happens later in the same render, it will flush. Ideally, we want to\\n      // remove the special case and treat them as if they came from an\\n      // interleaved event. Regardless, this pattern is not officially supported.\\n      // This behavior is only a fallback. The flag only exists until we can roll\\n      // out the setState warning, since existing code might accidentally rely on\\n      // the current behavior.\\n      return pickArbitraryLane(workInProgressRootRenderLanes);\\n    }\\n\\n    var isTransition = requestCurrentTransition() !== NoTransition;\\n\\n    if (isTransition) {\\n      if ( ReactCurrentBatchConfig$3.transition !== null) {\\n        var transition = ReactCurrentBatchConfig$3.transition;\\n\\n        if (!transition._updatedFibers) {\\n          transition._updatedFibers = new Set();\\n        }\\n\\n        transition._updatedFibers.add(fiber);\\n      } // The algorithm for assigning an update to a lane should be stable for all\\n      // updates at the same priority within the same event. To do this, the\\n      // inputs to the algorithm must be the same.\\n      //\\n      // The trick we use is to cache the first of each of these inputs within an\\n      // event. Then reset the cached values once we can be sure the event is\\n      // over. Our heuristic for that is whenever we enter a concurrent work loop.\\n\\n\\n      if (currentEventTransitionLane === NoLane) {\\n        // All transitions within the same event are assigned the same lane.\\n        currentEventTransitionLane = claimNextTransitionLane();\\n      }\\n\\n      return currentEventTransitionLane;\\n    } // Updates originating inside certain React methods, like flushSync, have\\n    // their priority set by tracking it with a context variable.\\n    //\\n    // The opaque type returned by the host config is internally a lane, so we can\\n    // use that directly.\\n    // TODO: Move this type conversion to the event priority module.\\n\\n\\n    var updateLane = getCurrentUpdatePriority();\\n\\n    if (updateLane !== NoLane) {\\n      return updateLane;\\n    } // This update originated outside React. Ask the host environment for an\\n    // appropriate priority, based on the type of event.\\n    //\\n    // The opaque type returned by the host config is internally a lane, so we can\\n    // use that directly.\\n    // TODO: Move this type conversion to the event priority module.\\n\\n\\n    var eventLane = getCurrentEventPriority();\\n    return eventLane;\\n  }\\n\\n  function requestRetryLane(fiber) {\\n    // This is a fork of `requestUpdateLane` designed specifically for Suspense\\n    // \\\"retries\\\" — a special update that attempts to flip a Suspense boundary\\n    // from its placeholder state to its primary/resolved state.\\n    // Special cases\\n    var mode = fiber.mode;\\n\\n    if ((mode & ConcurrentMode) === NoMode) {\\n      return SyncLane;\\n    }\\n\\n    return claimNextRetryLane();\\n  }\\n\\n  function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\\n    checkForNestedUpdates();\\n\\n    {\\n      if (isRunningInsertionEffect) {\\n        error('useInsertionEffect must not schedule updates.');\\n      }\\n    }\\n\\n    {\\n      if (isFlushingPassiveEffects) {\\n        didScheduleUpdateDuringPassiveEffects = true;\\n      }\\n    } // Mark that the root has a pending update.\\n\\n\\n    markRootUpdated(root, lane, eventTime);\\n\\n    if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\\n      // This update was dispatched during the render phase. This is a mistake\\n      // if the update originates from user space (with the exception of local\\n      // hook updates, which are handled differently and don't reach this\\n      // function), but there are some internal React features that use this as\\n      // an implementation detail, like selective hydration.\\n      warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\\n    } else {\\n      // This is a normal update, scheduled from outside the render phase. For\\n      // example, during an input event.\\n      {\\n        if (isDevToolsPresent) {\\n          addFiberToLanesMap(root, fiber, lane);\\n        }\\n      }\\n\\n      warnIfUpdatesNotWrappedWithActDEV(fiber);\\n\\n      if (root === workInProgressRoot) {\\n        // Received an update to a tree that's in the middle of rendering. Mark\\n        // that there was an interleaved update work on this root. Unless the\\n        // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\\n        // phase update. In that case, we don't treat render phase updates as if\\n        // they were interleaved, for backwards compat reasons.\\n        if ( (executionContext & RenderContext) === NoContext) {\\n          workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\\n        }\\n\\n        if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\\n          // The root already suspended with a delay, which means this render\\n          // definitely won't finish. Since we have a new update, let's mark it as\\n          // suspended now, right before marking the incoming update. This has the\\n          // effect of interrupting the current render and switching to the update.\\n          // TODO: Make sure this doesn't override pings that happen while we've\\n          // already started rendering.\\n          markRootSuspended$1(root, workInProgressRootRenderLanes);\\n        }\\n      }\\n\\n      ensureRootIsScheduled(root, eventTime);\\n\\n      if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\\n      !( ReactCurrentActQueue$1.isBatchingLegacy)) {\\n        // Flush the synchronous work now, unless we're already working or inside\\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\\n        // without immediately flushing it. We only do this for user-initiated\\n        // updates, to preserve historical behavior of legacy mode.\\n        resetRenderTimer();\\n        flushSyncCallbacksOnlyInLegacyMode();\\n      }\\n    }\\n  }\\n  function scheduleInitialHydrationOnRoot(root, lane, eventTime) {\\n    // This is a special fork of scheduleUpdateOnFiber that is only used to\\n    // schedule the initial hydration of a root that has just been created. Most\\n    // of the stuff in scheduleUpdateOnFiber can be skipped.\\n    //\\n    // The main reason for this separate path, though, is to distinguish the\\n    // initial children from subsequent updates. In fully client-rendered roots\\n    // (createRoot instead of hydrateRoot), all top-level renders are modeled as\\n    // updates, but hydration roots are special because the initial render must\\n    // match what was rendered on the server.\\n    var current = root.current;\\n    current.lanes = lane;\\n    markRootUpdated(root, lane, eventTime);\\n    ensureRootIsScheduled(root, eventTime);\\n  }\\n  function isUnsafeClassRenderPhaseUpdate(fiber) {\\n    // Check if this is a render phase update. Only called by class components,\\n    // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\\n    return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\\n      // decided not to enable it.\\n       (executionContext & RenderContext) !== NoContext\\n    );\\n  } // Use this function to schedule a task for a root. There's only one task per\\n  // root; if a task was already scheduled, we'll check to make sure the priority\\n  // of the existing task is the same as the priority of the next level that the\\n  // root has work on. This function is called on every update, and right before\\n  // exiting a task.\\n\\n  function ensureRootIsScheduled(root, currentTime) {\\n    var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\\n    // expired so we know to work on those next.\\n\\n    markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\\n\\n    var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\\n\\n    if (nextLanes === NoLanes) {\\n      // Special case: There's nothing to work on.\\n      if (existingCallbackNode !== null) {\\n        cancelCallback$1(existingCallbackNode);\\n      }\\n\\n      root.callbackNode = null;\\n      root.callbackPriority = NoLane;\\n      return;\\n    } // We use the highest priority lane to represent the priority of the callback.\\n\\n\\n    var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\\n\\n    var existingCallbackPriority = root.callbackPriority;\\n\\n    if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\\n    // on the `act` queue.\\n    !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\\n      {\\n        // If we're going to re-use an existing task, it needs to exist.\\n        // Assume that discrete update microtasks are non-cancellable and null.\\n        // TODO: Temporary until we confirm this warning is not fired.\\n        if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\\n          error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\\n        }\\n      } // The priority hasn't changed. We can reuse the existing task. Exit.\\n\\n\\n      return;\\n    }\\n\\n    if (existingCallbackNode != null) {\\n      // Cancel the existing callback. We'll schedule a new one below.\\n      cancelCallback$1(existingCallbackNode);\\n    } // Schedule a new callback.\\n\\n\\n    var newCallbackNode;\\n\\n    if (newCallbackPriority === SyncLane) {\\n      // Special case: Sync React callbacks are scheduled on a special\\n      // internal queue\\n      if (root.tag === LegacyRoot) {\\n        if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\\n          ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\\n        }\\n\\n        scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\\n      } else {\\n        scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\\n      }\\n\\n      {\\n        // Flush the queue in a microtask.\\n        if ( ReactCurrentActQueue$1.current !== null) {\\n          // Inside `act`, use our internal `act` queue so that these get flushed\\n          // at the end of the current scope even when using the sync version\\n          // of `act`.\\n          ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\\n        } else {\\n          scheduleMicrotask(function () {\\n            // In Safari, appending an iframe forces microtasks to run.\\n            // https://github.com/facebook/react/issues/22459\\n            // We don't support running callbacks in the middle of render\\n            // or commit so we need to check against that.\\n            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\\n              // Note that this would still prematurely flush the callbacks\\n              // if this happens outside render or commit phase (e.g. in an event).\\n              flushSyncCallbacks();\\n            }\\n          });\\n        }\\n      }\\n\\n      newCallbackNode = null;\\n    } else {\\n      var schedulerPriorityLevel;\\n\\n      switch (lanesToEventPriority(nextLanes)) {\\n        case DiscreteEventPriority:\\n          schedulerPriorityLevel = ImmediatePriority;\\n          break;\\n\\n        case ContinuousEventPriority:\\n          schedulerPriorityLevel = UserBlockingPriority;\\n          break;\\n\\n        case DefaultEventPriority:\\n          schedulerPriorityLevel = NormalPriority;\\n          break;\\n\\n        case IdleEventPriority:\\n          schedulerPriorityLevel = IdlePriority;\\n          break;\\n\\n        default:\\n          schedulerPriorityLevel = NormalPriority;\\n          break;\\n      }\\n\\n      newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\\n    }\\n\\n    root.callbackPriority = newCallbackPriority;\\n    root.callbackNode = newCallbackNode;\\n  } // This is the entry point for every concurrent task, i.e. anything that\\n  // goes through Scheduler.\\n\\n\\n  function performConcurrentWorkOnRoot(root, didTimeout) {\\n    {\\n      resetNestedUpdateFlag();\\n    } // Since we know we're in a React event, we can clear the current\\n    // event time. The next update will compute a new event time.\\n\\n\\n    currentEventTime = NoTimestamp;\\n    currentEventTransitionLane = NoLanes;\\n\\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\\n      throw new Error('Should not already be working.');\\n    } // Flush any pending passive effects before deciding which lanes to work on,\\n    // in case they schedule additional work.\\n\\n\\n    var originalCallbackNode = root.callbackNode;\\n    var didFlushPassiveEffects = flushPassiveEffects();\\n\\n    if (didFlushPassiveEffects) {\\n      // Something in the passive effect phase may have canceled the current task.\\n      // Check if the task node for this root was changed.\\n      if (root.callbackNode !== originalCallbackNode) {\\n        // The current task was canceled. Exit. We don't need to call\\n        // `ensureRootIsScheduled` because the check above implies either that\\n        // there's a new task, or that there's no remaining work on this root.\\n        return null;\\n      }\\n    } // Determine the next lanes to work on, using the fields stored\\n    // on the root.\\n\\n\\n    var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\\n\\n    if (lanes === NoLanes) {\\n      // Defensive coding. This is never expected to happen.\\n      return null;\\n    } // We disable time-slicing in some cases: if the work has been CPU-bound\\n    // for too long (\\\"expired\\\" work, to prevent starvation), or we're in\\n    // sync-updates-by-default mode.\\n    // TODO: We only check `didTimeout` defensively, to account for a Scheduler\\n    // bug we're still investigating. Once the bug in Scheduler is fixed,\\n    // we can remove this, since we track expiration ourselves.\\n\\n\\n    var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\\n    var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\\n\\n    if (exitStatus !== RootInProgress) {\\n      if (exitStatus === RootErrored) {\\n        // If something threw an error, try rendering one more time. We'll\\n        // render synchronously to block concurrent data mutations, and we'll\\n        // includes all pending updates are included. If it still fails after\\n        // the second attempt, we'll give up and commit the resulting tree.\\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\\n\\n        if (errorRetryLanes !== NoLanes) {\\n          lanes = errorRetryLanes;\\n          exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\\n        }\\n      }\\n\\n      if (exitStatus === RootFatalErrored) {\\n        var fatalError = workInProgressRootFatalError;\\n        prepareFreshStack(root, NoLanes);\\n        markRootSuspended$1(root, lanes);\\n        ensureRootIsScheduled(root, now());\\n        throw fatalError;\\n      }\\n\\n      if (exitStatus === RootDidNotComplete) {\\n        // The render unwound without completing the tree. This happens in special\\n        // cases where need to exit the current render without producing a\\n        // consistent tree or committing.\\n        //\\n        // This should only happen during a concurrent render, not a discrete or\\n        // synchronous update. We should have already checked for this when we\\n        // unwound the stack.\\n        markRootSuspended$1(root, lanes);\\n      } else {\\n        // The render completed.\\n        // Check if this render may have yielded to a concurrent event, and if so,\\n        // confirm that any newly rendered stores are consistent.\\n        // TODO: It's possible that even a concurrent render may never have yielded\\n        // to the main thread, if it was fast enough, or if it expired. We could\\n        // skip the consistency check in that case, too.\\n        var renderWasConcurrent = !includesBlockingLane(root, lanes);\\n        var finishedWork = root.current.alternate;\\n\\n        if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\\n          // A store was mutated in an interleaved event. Render again,\\n          // synchronously, to block further mutations.\\n          exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\\n\\n          if (exitStatus === RootErrored) {\\n            var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\\n\\n            if (_errorRetryLanes !== NoLanes) {\\n              lanes = _errorRetryLanes;\\n              exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\\n              // concurrent events.\\n            }\\n          }\\n\\n          if (exitStatus === RootFatalErrored) {\\n            var _fatalError = workInProgressRootFatalError;\\n            prepareFreshStack(root, NoLanes);\\n            markRootSuspended$1(root, lanes);\\n            ensureRootIsScheduled(root, now());\\n            throw _fatalError;\\n          }\\n        } // We now have a consistent tree. The next step is either to commit it,\\n        // or, if something suspended, wait to commit it after a timeout.\\n\\n\\n        root.finishedWork = finishedWork;\\n        root.finishedLanes = lanes;\\n        finishConcurrentRender(root, exitStatus, lanes);\\n      }\\n    }\\n\\n    ensureRootIsScheduled(root, now());\\n\\n    if (root.callbackNode === originalCallbackNode) {\\n      // The task node scheduled for this root is the same one that's\\n      // currently executed. Need to return a continuation.\\n      return performConcurrentWorkOnRoot.bind(null, root);\\n    }\\n\\n    return null;\\n  }\\n\\n  function recoverFromConcurrentError(root, errorRetryLanes) {\\n    // If an error occurred during hydration, discard server response and fall\\n    // back to client side render.\\n    // Before rendering again, save the errors from the previous attempt.\\n    var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\\n\\n    if (isRootDehydrated(root)) {\\n      // The shell failed to hydrate. Set a flag to force a client rendering\\n      // during the next attempt. To do this, we call prepareFreshStack now\\n      // to create the root work-in-progress fiber. This is a bit weird in terms\\n      // of factoring, because it relies on renderRootSync not calling\\n      // prepareFreshStack again in the call below, which happens because the\\n      // root and lanes haven't changed.\\n      //\\n      // TODO: I think what we should do is set ForceClientRender inside\\n      // throwException, like we do for nested Suspense boundaries. The reason\\n      // it's here instead is so we can switch to the synchronous work loop, too.\\n      // Something to consider for a future refactor.\\n      var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\\n      rootWorkInProgress.flags |= ForceClientRender;\\n\\n      {\\n        errorHydratingContainer(root.containerInfo);\\n      }\\n    }\\n\\n    var exitStatus = renderRootSync(root, errorRetryLanes);\\n\\n    if (exitStatus !== RootErrored) {\\n      // Successfully finished rendering on retry\\n      // The errors from the failed first attempt have been recovered. Add\\n      // them to the collection of recoverable errors. We'll log them in the\\n      // commit phase.\\n      var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\\n      workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\\n      // from the first attempt, to preserve the causal sequence.\\n\\n      if (errorsFromSecondAttempt !== null) {\\n        queueRecoverableErrors(errorsFromSecondAttempt);\\n      }\\n    }\\n\\n    return exitStatus;\\n  }\\n\\n  function queueRecoverableErrors(errors) {\\n    if (workInProgressRootRecoverableErrors === null) {\\n      workInProgressRootRecoverableErrors = errors;\\n    } else {\\n      workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\\n    }\\n  }\\n\\n  function finishConcurrentRender(root, exitStatus, lanes) {\\n    switch (exitStatus) {\\n      case RootInProgress:\\n      case RootFatalErrored:\\n        {\\n          throw new Error('Root did not complete. This is a bug in React.');\\n        }\\n      // Flow knows about invariant, so it complains if I add a break\\n      // statement, but eslint doesn't know about invariant, so it complains\\n      // if I do. eslint-disable-next-line no-fallthrough\\n\\n      case RootErrored:\\n        {\\n          // We should have already attempted to retry this tree. If we reached\\n          // this point, it errored again. Commit it.\\n          commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\\n          break;\\n        }\\n\\n      case RootSuspended:\\n        {\\n          markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\\n          // should immediately commit it or wait a bit.\\n\\n          if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\\n          !shouldForceFlushFallbacksInDEV()) {\\n            // This render only included retries, no updates. Throttle committing\\n            // retries so that we don't show too many loading states too quickly.\\n            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\\n\\n            if (msUntilTimeout > 10) {\\n              var nextLanes = getNextLanes(root, NoLanes);\\n\\n              if (nextLanes !== NoLanes) {\\n                // There's additional work on this root.\\n                break;\\n              }\\n\\n              var suspendedLanes = root.suspendedLanes;\\n\\n              if (!isSubsetOfLanes(suspendedLanes, lanes)) {\\n                // We should prefer to render the fallback of at the last\\n                // suspended level. Ping the last suspended level to try\\n                // rendering it again.\\n                // FIXME: What if the suspended lanes are Idle? Should not restart.\\n                var eventTime = requestEventTime();\\n                markRootPinged(root, suspendedLanes);\\n                break;\\n              } // The render is suspended, it hasn't timed out, and there's no\\n              // lower priority work to do. Instead of committing the fallback\\n              // immediately, wait for more data to arrive.\\n\\n\\n              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\\n              break;\\n            }\\n          } // The work expired. Commit immediately.\\n\\n\\n          commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\\n          break;\\n        }\\n\\n      case RootSuspendedWithDelay:\\n        {\\n          markRootSuspended$1(root, lanes);\\n\\n          if (includesOnlyTransitions(lanes)) {\\n            // This is a transition, so we should exit without committing a\\n            // placeholder and without scheduling a timeout. Delay indefinitely\\n            // until we receive more data.\\n            break;\\n          }\\n\\n          if (!shouldForceFlushFallbacksInDEV()) {\\n            // This is not a transition, but we did trigger an avoided state.\\n            // Schedule a placeholder to display after a short delay, using the Just\\n            // Noticeable Difference.\\n            // TODO: Is the JND optimization worth the added complexity? If this is\\n            // the only reason we track the event time, then probably not.\\n            // Consider removing.\\n            var mostRecentEventTime = getMostRecentEventTime(root, lanes);\\n            var eventTimeMs = mostRecentEventTime;\\n            var timeElapsedMs = now() - eventTimeMs;\\n\\n            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\\n\\n\\n            if (_msUntilTimeout > 10) {\\n              // Instead of committing the fallback immediately, wait for more data\\n              // to arrive.\\n              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\\n              break;\\n            }\\n          } // Commit the placeholder.\\n\\n\\n          commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\\n          break;\\n        }\\n\\n      case RootCompleted:\\n        {\\n          // The work completed. Ready to commit.\\n          commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\\n          break;\\n        }\\n\\n      default:\\n        {\\n          throw new Error('Unknown root exit status.');\\n        }\\n    }\\n  }\\n\\n  function isRenderConsistentWithExternalStores(finishedWork) {\\n    // Search the rendered tree for external store reads, and check whether the\\n    // stores were mutated in a concurrent event. Intentionally using an iterative\\n    // loop instead of recursion so we can exit early.\\n    var node = finishedWork;\\n\\n    while (true) {\\n      if (node.flags & StoreConsistency) {\\n        var updateQueue = node.updateQueue;\\n\\n        if (updateQueue !== null) {\\n          var checks = updateQueue.stores;\\n\\n          if (checks !== null) {\\n            for (var i = 0; i < checks.length; i++) {\\n              var check = checks[i];\\n              var getSnapshot = check.getSnapshot;\\n              var renderedValue = check.value;\\n\\n              try {\\n                if (!objectIs(getSnapshot(), renderedValue)) {\\n                  // Found an inconsistent store.\\n                  return false;\\n                }\\n              } catch (error) {\\n                // If `getSnapshot` throws, return `false`. This will schedule\\n                // a re-render, and the error will be rethrown during render.\\n                return false;\\n              }\\n            }\\n          }\\n        }\\n      }\\n\\n      var child = node.child;\\n\\n      if (node.subtreeFlags & StoreConsistency && child !== null) {\\n        child.return = node;\\n        node = child;\\n        continue;\\n      }\\n\\n      if (node === finishedWork) {\\n        return true;\\n      }\\n\\n      while (node.sibling === null) {\\n        if (node.return === null || node.return === finishedWork) {\\n          return true;\\n        }\\n\\n        node = node.return;\\n      }\\n\\n      node.sibling.return = node.return;\\n      node = node.sibling;\\n    } // Flow doesn't know this is unreachable, but eslint does\\n    // eslint-disable-next-line no-unreachable\\n\\n\\n    return true;\\n  }\\n\\n  function markRootSuspended$1(root, suspendedLanes) {\\n    // When suspending, we should always exclude lanes that were pinged or (more\\n    // rarely, since we try to avoid it) updated during the render phase.\\n    // TODO: Lol maybe there's a better way to factor this besides this\\n    // obnoxiously named function :)\\n    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\\n    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\\n    markRootSuspended(root, suspendedLanes);\\n  } // This is the entry point for synchronous tasks that don't go\\n  // through Scheduler\\n\\n\\n  function performSyncWorkOnRoot(root) {\\n    {\\n      syncNestedUpdateFlag();\\n    }\\n\\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\\n      throw new Error('Should not already be working.');\\n    }\\n\\n    flushPassiveEffects();\\n    var lanes = getNextLanes(root, NoLanes);\\n\\n    if (!includesSomeLane(lanes, SyncLane)) {\\n      // There's no remaining sync work left.\\n      ensureRootIsScheduled(root, now());\\n      return null;\\n    }\\n\\n    var exitStatus = renderRootSync(root, lanes);\\n\\n    if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\\n      // If something threw an error, try rendering one more time. We'll render\\n      // synchronously to block concurrent data mutations, and we'll includes\\n      // all pending updates are included. If it still fails after the second\\n      // attempt, we'll give up and commit the resulting tree.\\n      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\\n\\n      if (errorRetryLanes !== NoLanes) {\\n        lanes = errorRetryLanes;\\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\\n      }\\n    }\\n\\n    if (exitStatus === RootFatalErrored) {\\n      var fatalError = workInProgressRootFatalError;\\n      prepareFreshStack(root, NoLanes);\\n      markRootSuspended$1(root, lanes);\\n      ensureRootIsScheduled(root, now());\\n      throw fatalError;\\n    }\\n\\n    if (exitStatus === RootDidNotComplete) {\\n      throw new Error('Root did not complete. This is a bug in React.');\\n    } // We now have a consistent tree. Because this is a sync render, we\\n    // will commit it even if something suspended.\\n\\n\\n    var finishedWork = root.current.alternate;\\n    root.finishedWork = finishedWork;\\n    root.finishedLanes = lanes;\\n    commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\\n    // pending level.\\n\\n    ensureRootIsScheduled(root, now());\\n    return null;\\n  }\\n\\n  function flushRoot(root, lanes) {\\n    if (lanes !== NoLanes) {\\n      markRootEntangled(root, mergeLanes(lanes, SyncLane));\\n      ensureRootIsScheduled(root, now());\\n\\n      if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\\n        resetRenderTimer();\\n        flushSyncCallbacks();\\n      }\\n    }\\n  }\\n  function batchedUpdates$1(fn, a) {\\n    var prevExecutionContext = executionContext;\\n    executionContext |= BatchedContext;\\n\\n    try {\\n      return fn(a);\\n    } finally {\\n      executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\\n      // most batchedUpdates-like method.\\n\\n      if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\\n      !( ReactCurrentActQueue$1.isBatchingLegacy)) {\\n        resetRenderTimer();\\n        flushSyncCallbacksOnlyInLegacyMode();\\n      }\\n    }\\n  }\\n  function discreteUpdates(fn, a, b, c, d) {\\n    var previousPriority = getCurrentUpdatePriority();\\n    var prevTransition = ReactCurrentBatchConfig$3.transition;\\n\\n    try {\\n      ReactCurrentBatchConfig$3.transition = null;\\n      setCurrentUpdatePriority(DiscreteEventPriority);\\n      return fn(a, b, c, d);\\n    } finally {\\n      setCurrentUpdatePriority(previousPriority);\\n      ReactCurrentBatchConfig$3.transition = prevTransition;\\n\\n      if (executionContext === NoContext) {\\n        resetRenderTimer();\\n      }\\n    }\\n  } // Overload the definition to the two valid signatures.\\n  // Warning, this opts-out of checking the function body.\\n\\n  // eslint-disable-next-line no-redeclare\\n  function flushSync(fn) {\\n    // In legacy mode, we flush pending passive effects at the beginning of the\\n    // next event, not at the end of the previous one.\\n    if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\\n      flushPassiveEffects();\\n    }\\n\\n    var prevExecutionContext = executionContext;\\n    executionContext |= BatchedContext;\\n    var prevTransition = ReactCurrentBatchConfig$3.transition;\\n    var previousPriority = getCurrentUpdatePriority();\\n\\n    try {\\n      ReactCurrentBatchConfig$3.transition = null;\\n      setCurrentUpdatePriority(DiscreteEventPriority);\\n\\n      if (fn) {\\n        return fn();\\n      } else {\\n        return undefined;\\n      }\\n    } finally {\\n      setCurrentUpdatePriority(previousPriority);\\n      ReactCurrentBatchConfig$3.transition = prevTransition;\\n      executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\\n      // Note that this will happen even if batchedUpdates is higher up\\n      // the stack.\\n\\n      if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\\n        flushSyncCallbacks();\\n      }\\n    }\\n  }\\n  function isAlreadyRendering() {\\n    // Used by the renderer to print a warning if certain APIs are called from\\n    // the wrong context.\\n    return  (executionContext & (RenderContext | CommitContext)) !== NoContext;\\n  }\\n  function pushRenderLanes(fiber, lanes) {\\n    push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\\n    subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\\n    workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\\n  }\\n  function popRenderLanes(fiber) {\\n    subtreeRenderLanes = subtreeRenderLanesCursor.current;\\n    pop(subtreeRenderLanesCursor, fiber);\\n  }\\n\\n  function prepareFreshStack(root, lanes) {\\n    root.finishedWork = null;\\n    root.finishedLanes = NoLanes;\\n    var timeoutHandle = root.timeoutHandle;\\n\\n    if (timeoutHandle !== noTimeout) {\\n      // The root previous suspended and scheduled a timeout to commit a fallback\\n      // state. Now that we have additional work, cancel the timeout.\\n      root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\\n\\n      cancelTimeout(timeoutHandle);\\n    }\\n\\n    if (workInProgress !== null) {\\n      var interruptedWork = workInProgress.return;\\n\\n      while (interruptedWork !== null) {\\n        var current = interruptedWork.alternate;\\n        unwindInterruptedWork(current, interruptedWork);\\n        interruptedWork = interruptedWork.return;\\n      }\\n    }\\n\\n    workInProgressRoot = root;\\n    var rootWorkInProgress = createWorkInProgress(root.current, null);\\n    workInProgress = rootWorkInProgress;\\n    workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\\n    workInProgressRootExitStatus = RootInProgress;\\n    workInProgressRootFatalError = null;\\n    workInProgressRootSkippedLanes = NoLanes;\\n    workInProgressRootInterleavedUpdatedLanes = NoLanes;\\n    workInProgressRootPingedLanes = NoLanes;\\n    workInProgressRootConcurrentErrors = null;\\n    workInProgressRootRecoverableErrors = null;\\n    finishQueueingConcurrentUpdates();\\n\\n    {\\n      ReactStrictModeWarnings.discardPendingWarnings();\\n    }\\n\\n    return rootWorkInProgress;\\n  }\\n\\n  function handleError(root, thrownValue) {\\n    do {\\n      var erroredWork = workInProgress;\\n\\n      try {\\n        // Reset module-level state that was set during the render phase.\\n        resetContextDependencies();\\n        resetHooksAfterThrow();\\n        resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\\n        // separate issue. Write a regression test using string refs.\\n\\n        ReactCurrentOwner$2.current = null;\\n\\n        if (erroredWork === null || erroredWork.return === null) {\\n          // Expected to be working on a non-root fiber. This is a fatal error\\n          // because there's no ancestor that can handle it; the root is\\n          // supposed to capture all errors that weren't caught by an error\\n          // boundary.\\n          workInProgressRootExitStatus = RootFatalErrored;\\n          workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\\n          // sibling, or the parent if there are no siblings. But since the root\\n          // has no siblings nor a parent, we set it to null. Usually this is\\n          // handled by `completeUnitOfWork` or `unwindWork`, but since we're\\n          // intentionally not calling those, we need set it here.\\n          // TODO: Consider calling `unwindWork` to pop the contexts.\\n\\n          workInProgress = null;\\n          return;\\n        }\\n\\n        if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\\n          // Record the time spent rendering before an error was thrown. This\\n          // avoids inaccurate Profiler durations in the case of a\\n          // suspended render.\\n          stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\\n        }\\n\\n        if (enableSchedulingProfiler) {\\n          markComponentRenderStopped();\\n\\n          if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\\n            var wakeable = thrownValue;\\n            markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\\n          } else {\\n            markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\\n          }\\n        }\\n\\n        throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\\n        completeUnitOfWork(erroredWork);\\n      } catch (yetAnotherThrownValue) {\\n        // Something in the return path also threw.\\n        thrownValue = yetAnotherThrownValue;\\n\\n        if (workInProgress === erroredWork && erroredWork !== null) {\\n          // If this boundary has already errored, then we had trouble processing\\n          // the error. Bubble it to the next boundary.\\n          erroredWork = erroredWork.return;\\n          workInProgress = erroredWork;\\n        } else {\\n          erroredWork = workInProgress;\\n        }\\n\\n        continue;\\n      } // Return to the normal work loop.\\n\\n\\n      return;\\n    } while (true);\\n  }\\n\\n  function pushDispatcher() {\\n    var prevDispatcher = ReactCurrentDispatcher$2.current;\\n    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\\n\\n    if (prevDispatcher === null) {\\n      // The React isomorphic package does not include a default dispatcher.\\n      // Instead the first renderer will lazily attach one, in order to give\\n      // nicer error messages.\\n      return ContextOnlyDispatcher;\\n    } else {\\n      return prevDispatcher;\\n    }\\n  }\\n\\n  function popDispatcher(prevDispatcher) {\\n    ReactCurrentDispatcher$2.current = prevDispatcher;\\n  }\\n\\n  function markCommitTimeOfFallback() {\\n    globalMostRecentFallbackTime = now();\\n  }\\n  function markSkippedUpdateLanes(lane) {\\n    workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\\n  }\\n  function renderDidSuspend() {\\n    if (workInProgressRootExitStatus === RootInProgress) {\\n      workInProgressRootExitStatus = RootSuspended;\\n    }\\n  }\\n  function renderDidSuspendDelayIfPossible() {\\n    if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\\n      workInProgressRootExitStatus = RootSuspendedWithDelay;\\n    } // Check if there are updates that we skipped tree that might have unblocked\\n    // this render.\\n\\n\\n    if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\\n      // Mark the current render as suspended so that we switch to working on\\n      // the updates that were skipped. Usually we only suspend at the end of\\n      // the render phase.\\n      // TODO: We should probably always mark the root as suspended immediately\\n      // (inside this function), since by suspending at the end of the render\\n      // phase introduces a potential mistake where we suspend lanes that were\\n      // pinged or updated while we were rendering.\\n      markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\\n    }\\n  }\\n  function renderDidError(error) {\\n    if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\\n      workInProgressRootExitStatus = RootErrored;\\n    }\\n\\n    if (workInProgressRootConcurrentErrors === null) {\\n      workInProgressRootConcurrentErrors = [error];\\n    } else {\\n      workInProgressRootConcurrentErrors.push(error);\\n    }\\n  } // Called during render to determine if anything has suspended.\\n  // Returns false if we're not sure.\\n\\n  function renderHasNotSuspendedYet() {\\n    // If something errored or completed, we can't really be sure,\\n    // so those are false.\\n    return workInProgressRootExitStatus === RootInProgress;\\n  }\\n\\n  function renderRootSync(root, lanes) {\\n    var prevExecutionContext = executionContext;\\n    executionContext |= RenderContext;\\n    var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\\n    // and prepare a fresh one. Otherwise we'll continue where we left off.\\n\\n    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\\n      {\\n        if (isDevToolsPresent) {\\n          var memoizedUpdaters = root.memoizedUpdaters;\\n\\n          if (memoizedUpdaters.size > 0) {\\n            restorePendingUpdaters(root, workInProgressRootRenderLanes);\\n            memoizedUpdaters.clear();\\n          } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\\n          // If we bailout on this work, we'll move them back (like above).\\n          // It's important to move them now in case the work spawns more work at the same priority with different updaters.\\n          // That way we can keep the current update and future updates separate.\\n\\n\\n          movePendingFibersToMemoized(root, lanes);\\n        }\\n      }\\n\\n      workInProgressTransitions = getTransitionsForLanes();\\n      prepareFreshStack(root, lanes);\\n    }\\n\\n    {\\n      markRenderStarted(lanes);\\n    }\\n\\n    do {\\n      try {\\n        workLoopSync();\\n        break;\\n      } catch (thrownValue) {\\n        handleError(root, thrownValue);\\n      }\\n    } while (true);\\n\\n    resetContextDependencies();\\n    executionContext = prevExecutionContext;\\n    popDispatcher(prevDispatcher);\\n\\n    if (workInProgress !== null) {\\n      // This is a sync render, so we should have finished the whole tree.\\n      throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\\n    }\\n\\n    {\\n      markRenderStopped();\\n    } // Set this to null to indicate there's no in-progress render.\\n\\n\\n    workInProgressRoot = null;\\n    workInProgressRootRenderLanes = NoLanes;\\n    return workInProgressRootExitStatus;\\n  } // The work loop is an extremely hot path. Tell Closure not to inline it.\\n\\n  /** @noinline */\\n\\n\\n  function workLoopSync() {\\n    // Already timed out, so perform work without checking if we need to yield.\\n    while (workInProgress !== null) {\\n      performUnitOfWork(workInProgress);\\n    }\\n  }\\n\\n  function renderRootConcurrent(root, lanes) {\\n    var prevExecutionContext = executionContext;\\n    executionContext |= RenderContext;\\n    var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\\n    // and prepare a fresh one. Otherwise we'll continue where we left off.\\n\\n    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\\n      {\\n        if (isDevToolsPresent) {\\n          var memoizedUpdaters = root.memoizedUpdaters;\\n\\n          if (memoizedUpdaters.size > 0) {\\n            restorePendingUpdaters(root, workInProgressRootRenderLanes);\\n            memoizedUpdaters.clear();\\n          } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\\n          // If we bailout on this work, we'll move them back (like above).\\n          // It's important to move them now in case the work spawns more work at the same priority with different updaters.\\n          // That way we can keep the current update and future updates separate.\\n\\n\\n          movePendingFibersToMemoized(root, lanes);\\n        }\\n      }\\n\\n      workInProgressTransitions = getTransitionsForLanes();\\n      resetRenderTimer();\\n      prepareFreshStack(root, lanes);\\n    }\\n\\n    {\\n      markRenderStarted(lanes);\\n    }\\n\\n    do {\\n      try {\\n        workLoopConcurrent();\\n        break;\\n      } catch (thrownValue) {\\n        handleError(root, thrownValue);\\n      }\\n    } while (true);\\n\\n    resetContextDependencies();\\n    popDispatcher(prevDispatcher);\\n    executionContext = prevExecutionContext;\\n\\n\\n    if (workInProgress !== null) {\\n      // Still work remaining.\\n      {\\n        markRenderYielded();\\n      }\\n\\n      return RootInProgress;\\n    } else {\\n      // Completed the tree.\\n      {\\n        markRenderStopped();\\n      } // Set this to null to indicate there's no in-progress render.\\n\\n\\n      workInProgressRoot = null;\\n      workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\\n\\n      return workInProgressRootExitStatus;\\n    }\\n  }\\n  /** @noinline */\\n\\n\\n  function workLoopConcurrent() {\\n    // Perform work until Scheduler asks us to yield\\n    while (workInProgress !== null && !shouldYield()) {\\n      performUnitOfWork(workInProgress);\\n    }\\n  }\\n\\n  function performUnitOfWork(unitOfWork) {\\n    // The current, flushed, state of this fiber is the alternate. Ideally\\n    // nothing should rely on this, but relying on it here means that we don't\\n    // need an additional field on the work in progress.\\n    var current = unitOfWork.alternate;\\n    setCurrentFiber(unitOfWork);\\n    var next;\\n\\n    if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\\n      startProfilerTimer(unitOfWork);\\n      next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\\n      stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\\n    } else {\\n      next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\\n    }\\n\\n    resetCurrentFiber();\\n    unitOfWork.memoizedProps = unitOfWork.pendingProps;\\n\\n    if (next === null) {\\n      // If this doesn't spawn new work, complete the current work.\\n      completeUnitOfWork(unitOfWork);\\n    } else {\\n      workInProgress = next;\\n    }\\n\\n    ReactCurrentOwner$2.current = null;\\n  }\\n\\n  function completeUnitOfWork(unitOfWork) {\\n    // Attempt to complete the current unit of work, then move to the next\\n    // sibling. If there are no more siblings, return to the parent fiber.\\n    var completedWork = unitOfWork;\\n\\n    do {\\n      // The current, flushed, state of this fiber is the alternate. Ideally\\n      // nothing should rely on this, but relying on it here means that we don't\\n      // need an additional field on the work in progress.\\n      var current = completedWork.alternate;\\n      var returnFiber = completedWork.return; // Check if the work completed or if something threw.\\n\\n      if ((completedWork.flags & Incomplete) === NoFlags) {\\n        setCurrentFiber(completedWork);\\n        var next = void 0;\\n\\n        if ( (completedWork.mode & ProfileMode) === NoMode) {\\n          next = completeWork(current, completedWork, subtreeRenderLanes);\\n        } else {\\n          startProfilerTimer(completedWork);\\n          next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\\n\\n          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\\n        }\\n\\n        resetCurrentFiber();\\n\\n        if (next !== null) {\\n          // Completing this fiber spawned new work. Work on that next.\\n          workInProgress = next;\\n          return;\\n        }\\n      } else {\\n        // This fiber did not complete because something threw. Pop values off\\n        // the stack without entering the complete phase. If this is a boundary,\\n        // capture values if possible.\\n        var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\\n\\n\\n        if (_next !== null) {\\n          // If completing this work spawned new work, do that next. We'll come\\n          // back here again.\\n          // Since we're restarting, remove anything that is not a host effect\\n          // from the effect tag.\\n          _next.flags &= HostEffectMask;\\n          workInProgress = _next;\\n          return;\\n        }\\n\\n        if ( (completedWork.mode & ProfileMode) !== NoMode) {\\n          // Record the render duration for the fiber that errored.\\n          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\\n\\n          var actualDuration = completedWork.actualDuration;\\n          var child = completedWork.child;\\n\\n          while (child !== null) {\\n            actualDuration += child.actualDuration;\\n            child = child.sibling;\\n          }\\n\\n          completedWork.actualDuration = actualDuration;\\n        }\\n\\n        if (returnFiber !== null) {\\n          // Mark the parent fiber as incomplete and clear its subtree flags.\\n          returnFiber.flags |= Incomplete;\\n          returnFiber.subtreeFlags = NoFlags;\\n          returnFiber.deletions = null;\\n        } else {\\n          // We've unwound all the way to the root.\\n          workInProgressRootExitStatus = RootDidNotComplete;\\n          workInProgress = null;\\n          return;\\n        }\\n      }\\n\\n      var siblingFiber = completedWork.sibling;\\n\\n      if (siblingFiber !== null) {\\n        // If there is more work to do in this returnFiber, do that next.\\n        workInProgress = siblingFiber;\\n        return;\\n      } // Otherwise, return to the parent\\n\\n\\n      completedWork = returnFiber; // Update the next thing we're working on in case something throws.\\n\\n      workInProgress = completedWork;\\n    } while (completedWork !== null); // We've reached the root.\\n\\n\\n    if (workInProgressRootExitStatus === RootInProgress) {\\n      workInProgressRootExitStatus = RootCompleted;\\n    }\\n  }\\n\\n  function commitRoot(root, recoverableErrors, transitions) {\\n    // TODO: This no longer makes any sense. We already wrap the mutation and\\n    // layout phases. Should be able to remove.\\n    var previousUpdateLanePriority = getCurrentUpdatePriority();\\n    var prevTransition = ReactCurrentBatchConfig$3.transition;\\n\\n    try {\\n      ReactCurrentBatchConfig$3.transition = null;\\n      setCurrentUpdatePriority(DiscreteEventPriority);\\n      commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\\n    } finally {\\n      ReactCurrentBatchConfig$3.transition = prevTransition;\\n      setCurrentUpdatePriority(previousUpdateLanePriority);\\n    }\\n\\n    return null;\\n  }\\n\\n  function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\\n    do {\\n      // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\\n      // means `flushPassiveEffects` will sometimes result in additional\\n      // passive effects. So we need to keep flushing in a loop until there are\\n      // no more pending effects.\\n      // TODO: Might be better if `flushPassiveEffects` did not automatically\\n      // flush synchronous work at the end, to avoid factoring hazards like this.\\n      flushPassiveEffects();\\n    } while (rootWithPendingPassiveEffects !== null);\\n\\n    flushRenderPhaseStrictModeWarningsInDEV();\\n\\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\\n      throw new Error('Should not already be working.');\\n    }\\n\\n    var finishedWork = root.finishedWork;\\n    var lanes = root.finishedLanes;\\n\\n    {\\n      markCommitStarted(lanes);\\n    }\\n\\n    if (finishedWork === null) {\\n\\n      {\\n        markCommitStopped();\\n      }\\n\\n      return null;\\n    } else {\\n      {\\n        if (lanes === NoLanes) {\\n          error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\\n        }\\n      }\\n    }\\n\\n    root.finishedWork = null;\\n    root.finishedLanes = NoLanes;\\n\\n    if (finishedWork === root.current) {\\n      throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\\n    } // commitRoot never returns a continuation; it always finishes synchronously.\\n    // So we can clear these now to allow a new callback to be scheduled.\\n\\n\\n    root.callbackNode = null;\\n    root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\\n    // pending time is whatever is left on the root fiber.\\n\\n    var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\\n    markRootFinished(root, remainingLanes);\\n\\n    if (root === workInProgressRoot) {\\n      // We can reset these now that they are finished.\\n      workInProgressRoot = null;\\n      workInProgress = null;\\n      workInProgressRootRenderLanes = NoLanes;\\n    } // If there are pending passive effects, schedule a callback to process them.\\n    // Do this as early as possible, so it is queued before anything else that\\n    // might get scheduled in the commit phase. (See #16714.)\\n    // TODO: Delete all other places that schedule the passive effect callback\\n    // They're redundant.\\n\\n\\n    if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\\n      if (!rootDoesHavePassiveEffects) {\\n        rootDoesHavePassiveEffects = true;\\n        // to store it in pendingPassiveTransitions until they get processed\\n        // We need to pass this through as an argument to commitRoot\\n        // because workInProgressTransitions might have changed between\\n        // the previous render and commit if we throttle the commit\\n        // with setTimeout\\n\\n        pendingPassiveTransitions = transitions;\\n        scheduleCallback$1(NormalPriority, function () {\\n          flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\\n          // *after* passive effects fire to avoid freeing a cache pool that may\\n          // be referenced by a node in the tree (HostRoot, Cache boundary etc)\\n\\n          return null;\\n        });\\n      }\\n    } // Check if there are any effects in the whole tree.\\n    // TODO: This is left over from the effect list implementation, where we had\\n    // to check for the existence of `firstEffect` to satisfy Flow. I think the\\n    // only other reason this optimization exists is because it affects profiling.\\n    // Reconsider whether this is necessary.\\n\\n\\n    var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\\n    var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\\n\\n    if (subtreeHasEffects || rootHasEffect) {\\n      var prevTransition = ReactCurrentBatchConfig$3.transition;\\n      ReactCurrentBatchConfig$3.transition = null;\\n      var previousPriority = getCurrentUpdatePriority();\\n      setCurrentUpdatePriority(DiscreteEventPriority);\\n      var prevExecutionContext = executionContext;\\n      executionContext |= CommitContext; // Reset this to null before calling lifecycles\\n\\n      ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\\n      // of the effect list for each phase: all mutation effects come before all\\n      // layout effects, and so on.\\n      // The first phase a \\\"before mutation\\\" phase. We use this phase to read the\\n      // state of the host tree right before we mutate it. This is where\\n      // getSnapshotBeforeUpdate is called.\\n\\n      var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\\n\\n      {\\n        // Mark the current commit time to be shared by all Profilers in this\\n        // batch. This enables them to be grouped later.\\n        recordCommitTime();\\n      }\\n\\n\\n      commitMutationEffects(root, finishedWork, lanes);\\n\\n      resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\\n      // the mutation phase, so that the previous tree is still current during\\n      // componentWillUnmount, but before the layout phase, so that the finished\\n      // work is current during componentDidMount/Update.\\n\\n      root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\\n\\n      {\\n        markLayoutEffectsStarted(lanes);\\n      }\\n\\n      commitLayoutEffects(finishedWork, root, lanes);\\n\\n      {\\n        markLayoutEffectsStopped();\\n      }\\n      // opportunity to paint.\\n\\n\\n      requestPaint();\\n      executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\\n\\n      setCurrentUpdatePriority(previousPriority);\\n      ReactCurrentBatchConfig$3.transition = prevTransition;\\n    } else {\\n      // No effects.\\n      root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\\n      // no effects.\\n      // TODO: Maybe there's a better way to report this.\\n\\n      {\\n        recordCommitTime();\\n      }\\n    }\\n\\n    var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\\n\\n    if (rootDoesHavePassiveEffects) {\\n      // This commit has passive effects. Stash a reference to them. But don't\\n      // schedule a callback until after flushing layout work.\\n      rootDoesHavePassiveEffects = false;\\n      rootWithPendingPassiveEffects = root;\\n      pendingPassiveEffectsLanes = lanes;\\n    } else {\\n\\n      {\\n        nestedPassiveUpdateCount = 0;\\n        rootWithPassiveNestedUpdates = null;\\n      }\\n    } // Read this again, since an effect might have updated it\\n\\n\\n    remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\\n    // TODO: This is part of the `componentDidCatch` implementation. Its purpose\\n    // is to detect whether something might have called setState inside\\n    // `componentDidCatch`. The mechanism is known to be flawed because `setState`\\n    // inside `componentDidCatch` is itself flawed — that's why we recommend\\n    // `getDerivedStateFromError` instead. However, it could be improved by\\n    // checking if remainingLanes includes Sync work, instead of whether there's\\n    // any work remaining at all (which would also include stuff like Suspense\\n    // retries or transitions). It's been like this for a while, though, so fixing\\n    // it probably isn't that urgent.\\n\\n    if (remainingLanes === NoLanes) {\\n      // If there's no remaining work, we can clear the set of already failed\\n      // error boundaries.\\n      legacyErrorBoundariesThatAlreadyFailed = null;\\n    }\\n\\n    {\\n      if (!rootDidHavePassiveEffects) {\\n        commitDoubleInvokeEffectsInDEV(root.current, false);\\n      }\\n    }\\n\\n    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\\n\\n    {\\n      if (isDevToolsPresent) {\\n        root.memoizedUpdaters.clear();\\n      }\\n    }\\n\\n    {\\n      onCommitRoot$1();\\n    } // Always call this before exiting `commitRoot`, to ensure that any\\n    // additional work on this root is scheduled.\\n\\n\\n    ensureRootIsScheduled(root, now());\\n\\n    if (recoverableErrors !== null) {\\n      // There were errors during this render, but recovered from them without\\n      // needing to surface it to the UI. We log them here.\\n      var onRecoverableError = root.onRecoverableError;\\n\\n      for (var i = 0; i < recoverableErrors.length; i++) {\\n        var recoverableError = recoverableErrors[i];\\n        var componentStack = recoverableError.stack;\\n        var digest = recoverableError.digest;\\n        onRecoverableError(recoverableError.value, {\\n          componentStack: componentStack,\\n          digest: digest\\n        });\\n      }\\n    }\\n\\n    if (hasUncaughtError) {\\n      hasUncaughtError = false;\\n      var error$1 = firstUncaughtError;\\n      firstUncaughtError = null;\\n      throw error$1;\\n    } // If the passive effects are the result of a discrete render, flush them\\n    // synchronously at the end of the current task so that the result is\\n    // immediately observable. Otherwise, we assume that they are not\\n    // order-dependent and do not need to be observed by external systems, so we\\n    // can wait until after paint.\\n    // TODO: We can optimize this by not scheduling the callback earlier. Since we\\n    // currently schedule the callback in multiple places, will wait until those\\n    // are consolidated.\\n\\n\\n    if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\\n      flushPassiveEffects();\\n    } // Read this again, since a passive effect might have updated it\\n\\n\\n    remainingLanes = root.pendingLanes;\\n\\n    if (includesSomeLane(remainingLanes, SyncLane)) {\\n      {\\n        markNestedUpdateScheduled();\\n      } // Count the number of times the root synchronously re-renders without\\n      // finishing. If there are too many, it indicates an infinite update loop.\\n\\n\\n      if (root === rootWithNestedUpdates) {\\n        nestedUpdateCount++;\\n      } else {\\n        nestedUpdateCount = 0;\\n        rootWithNestedUpdates = root;\\n      }\\n    } else {\\n      nestedUpdateCount = 0;\\n    } // If layout work was scheduled, flush it now.\\n\\n\\n    flushSyncCallbacks();\\n\\n    {\\n      markCommitStopped();\\n    }\\n\\n    return null;\\n  }\\n\\n  function flushPassiveEffects() {\\n    // Returns whether passive effects were flushed.\\n    // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\\n    // probably just combine the two functions. I believe they were only separate\\n    // in the first place because we used to wrap it with\\n    // `Scheduler.runWithPriority`, which accepts a function. But now we track the\\n    // priority within React itself, so we can mutate the variable directly.\\n    if (rootWithPendingPassiveEffects !== null) {\\n      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\\n      var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\\n      var prevTransition = ReactCurrentBatchConfig$3.transition;\\n      var previousPriority = getCurrentUpdatePriority();\\n\\n      try {\\n        ReactCurrentBatchConfig$3.transition = null;\\n        setCurrentUpdatePriority(priority);\\n        return flushPassiveEffectsImpl();\\n      } finally {\\n        setCurrentUpdatePriority(previousPriority);\\n        ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a\\n      }\\n    }\\n\\n    return false;\\n  }\\n  function enqueuePendingPassiveProfilerEffect(fiber) {\\n    {\\n      pendingPassiveProfilerEffects.push(fiber);\\n\\n      if (!rootDoesHavePassiveEffects) {\\n        rootDoesHavePassiveEffects = true;\\n        scheduleCallback$1(NormalPriority, function () {\\n          flushPassiveEffects();\\n          return null;\\n        });\\n      }\\n    }\\n  }\\n\\n  function flushPassiveEffectsImpl() {\\n    if (rootWithPendingPassiveEffects === null) {\\n      return false;\\n    } // Cache and clear the transitions flag\\n\\n\\n    var transitions = pendingPassiveTransitions;\\n    pendingPassiveTransitions = null;\\n    var root = rootWithPendingPassiveEffects;\\n    var lanes = pendingPassiveEffectsLanes;\\n    rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\\n    // Figure out why and fix it. It's not causing any known issues (probably\\n    // because it's only used for profiling), but it's a refactor hazard.\\n\\n    pendingPassiveEffectsLanes = NoLanes;\\n\\n    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\\n      throw new Error('Cannot flush passive effects while already rendering.');\\n    }\\n\\n    {\\n      isFlushingPassiveEffects = true;\\n      didScheduleUpdateDuringPassiveEffects = false;\\n    }\\n\\n    {\\n      markPassiveEffectsStarted(lanes);\\n    }\\n\\n    var prevExecutionContext = executionContext;\\n    executionContext |= CommitContext;\\n    commitPassiveUnmountEffects(root.current);\\n    commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\\n\\n    {\\n      var profilerEffects = pendingPassiveProfilerEffects;\\n      pendingPassiveProfilerEffects = [];\\n\\n      for (var i = 0; i < profilerEffects.length; i++) {\\n        var _fiber = profilerEffects[i];\\n        commitPassiveEffectDurations(root, _fiber);\\n      }\\n    }\\n\\n    {\\n      markPassiveEffectsStopped();\\n    }\\n\\n    {\\n      commitDoubleInvokeEffectsInDEV(root.current, true);\\n    }\\n\\n    executionContext = prevExecutionContext;\\n    flushSyncCallbacks();\\n\\n    {\\n      // If additional passive effects were scheduled, increment a counter. If this\\n      // exceeds the limit, we'll fire a warning.\\n      if (didScheduleUpdateDuringPassiveEffects) {\\n        if (root === rootWithPassiveNestedUpdates) {\\n          nestedPassiveUpdateCount++;\\n        } else {\\n          nestedPassiveUpdateCount = 0;\\n          rootWithPassiveNestedUpdates = root;\\n        }\\n      } else {\\n        nestedPassiveUpdateCount = 0;\\n      }\\n\\n      isFlushingPassiveEffects = false;\\n      didScheduleUpdateDuringPassiveEffects = false;\\n    } // TODO: Move to commitPassiveMountEffects\\n\\n\\n    onPostCommitRoot(root);\\n\\n    {\\n      var stateNode = root.current.stateNode;\\n      stateNode.effectDuration = 0;\\n      stateNode.passiveEffectDuration = 0;\\n    }\\n\\n    return true;\\n  }\\n\\n  function isAlreadyFailedLegacyErrorBoundary(instance) {\\n    return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\\n  }\\n  function markLegacyErrorBoundaryAsFailed(instance) {\\n    if (legacyErrorBoundariesThatAlreadyFailed === null) {\\n      legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\\n    } else {\\n      legacyErrorBoundariesThatAlreadyFailed.add(instance);\\n    }\\n  }\\n\\n  function prepareToThrowUncaughtError(error) {\\n    if (!hasUncaughtError) {\\n      hasUncaughtError = true;\\n      firstUncaughtError = error;\\n    }\\n  }\\n\\n  var onUncaughtError = prepareToThrowUncaughtError;\\n\\n  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\\n    var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\\n    var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\\n    var root = enqueueUpdate(rootFiber, update, SyncLane);\\n    var eventTime = requestEventTime();\\n\\n    if (root !== null) {\\n      markRootUpdated(root, SyncLane, eventTime);\\n      ensureRootIsScheduled(root, eventTime);\\n    }\\n  }\\n\\n  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\\n    {\\n      reportUncaughtErrorInDEV(error$1);\\n      setIsRunningInsertionEffect(false);\\n    }\\n\\n    if (sourceFiber.tag === HostRoot) {\\n      // Error was thrown at the root. There is no parent, so the root\\n      // itself should capture it.\\n      captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\\n      return;\\n    }\\n\\n    var fiber = null;\\n\\n    {\\n      fiber = nearestMountedAncestor;\\n    }\\n\\n    while (fiber !== null) {\\n      if (fiber.tag === HostRoot) {\\n        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\\n        return;\\n      } else if (fiber.tag === ClassComponent) {\\n        var ctor = fiber.type;\\n        var instance = fiber.stateNode;\\n\\n        if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\\n          var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\\n          var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\\n          var root = enqueueUpdate(fiber, update, SyncLane);\\n          var eventTime = requestEventTime();\\n\\n          if (root !== null) {\\n            markRootUpdated(root, SyncLane, eventTime);\\n            ensureRootIsScheduled(root, eventTime);\\n          }\\n\\n          return;\\n        }\\n      }\\n\\n      fiber = fiber.return;\\n    }\\n\\n    {\\n      // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\\n      // will fire for errors that are thrown by destroy functions inside deleted\\n      // trees. What it should instead do is propagate the error to the parent of\\n      // the deleted tree. In the meantime, do not add this warning to the\\n      // allowlist; this is only for our internal use.\\n      error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\\\n\\\\n' + 'Error message:\\\\n\\\\n%s', error$1);\\n    }\\n  }\\n  function pingSuspendedRoot(root, wakeable, pingedLanes) {\\n    var pingCache = root.pingCache;\\n\\n    if (pingCache !== null) {\\n      // The wakeable resolved, so we no longer need to memoize, because it will\\n      // never be thrown again.\\n      pingCache.delete(wakeable);\\n    }\\n\\n    var eventTime = requestEventTime();\\n    markRootPinged(root, pingedLanes);\\n    warnIfSuspenseResolutionNotWrappedWithActDEV(root);\\n\\n    if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\\n      // Received a ping at the same priority level at which we're currently\\n      // rendering. We might want to restart this render. This should mirror\\n      // the logic of whether or not a root suspends once it completes.\\n      // TODO: If we're rendering sync either due to Sync, Batched or expired,\\n      // we should probably never restart.\\n      // If we're suspended with delay, or if it's a retry, we'll always suspend\\n      // so we can always restart.\\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\\n        // Restart from the root.\\n        prepareFreshStack(root, NoLanes);\\n      } else {\\n        // Even though we can't restart right now, we might get an\\n        // opportunity later. So we mark this render as having a ping.\\n        workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\\n      }\\n    }\\n\\n    ensureRootIsScheduled(root, eventTime);\\n  }\\n\\n  function retryTimedOutBoundary(boundaryFiber, retryLane) {\\n    // The boundary fiber (a Suspense component or SuspenseList component)\\n    // previously was rendered in its fallback state. One of the promises that\\n    // suspended it has resolved, which means at least part of the tree was\\n    // likely unblocked. Try rendering again, at a new lanes.\\n    if (retryLane === NoLane) {\\n      // TODO: Assign this to `suspenseState.retryLane`? to avoid\\n      // unnecessary entanglement?\\n      retryLane = requestRetryLane(boundaryFiber);\\n    } // TODO: Special case idle priority?\\n\\n\\n    var eventTime = requestEventTime();\\n    var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\\n\\n    if (root !== null) {\\n      markRootUpdated(root, retryLane, eventTime);\\n      ensureRootIsScheduled(root, eventTime);\\n    }\\n  }\\n\\n  function retryDehydratedSuspenseBoundary(boundaryFiber) {\\n    var suspenseState = boundaryFiber.memoizedState;\\n    var retryLane = NoLane;\\n\\n    if (suspenseState !== null) {\\n      retryLane = suspenseState.retryLane;\\n    }\\n\\n    retryTimedOutBoundary(boundaryFiber, retryLane);\\n  }\\n  function resolveRetryWakeable(boundaryFiber, wakeable) {\\n    var retryLane = NoLane; // Default\\n\\n    var retryCache;\\n\\n    switch (boundaryFiber.tag) {\\n      case SuspenseComponent:\\n        retryCache = boundaryFiber.stateNode;\\n        var suspenseState = boundaryFiber.memoizedState;\\n\\n        if (suspenseState !== null) {\\n          retryLane = suspenseState.retryLane;\\n        }\\n\\n        break;\\n\\n      case SuspenseListComponent:\\n        retryCache = boundaryFiber.stateNode;\\n        break;\\n\\n      default:\\n        throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\\n    }\\n\\n    if (retryCache !== null) {\\n      // The wakeable resolved, so we no longer need to memoize, because it will\\n      // never be thrown again.\\n      retryCache.delete(wakeable);\\n    }\\n\\n    retryTimedOutBoundary(boundaryFiber, retryLane);\\n  } // Computes the next Just Noticeable Difference (JND) boundary.\\n  // The theory is that a person can't tell the difference between small differences in time.\\n  // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\\n  // difference in the experience. However, waiting for longer might mean that we can avoid\\n  // showing an intermediate loading state. The longer we have already waited, the harder it\\n  // is to tell small differences in time. Therefore, the longer we've already waited,\\n  // the longer we can wait additionally. At some point we have to give up though.\\n  // We pick a train model where the next boundary commits at a consistent schedule.\\n  // These particular numbers are vague estimates. We expect to adjust them based on research.\\n\\n  function jnd(timeElapsed) {\\n    return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\\n  }\\n\\n  function checkForNestedUpdates() {\\n    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\\n      nestedUpdateCount = 0;\\n      rootWithNestedUpdates = null;\\n      throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\\n    }\\n\\n    {\\n      if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\\n        nestedPassiveUpdateCount = 0;\\n        rootWithPassiveNestedUpdates = null;\\n\\n        error('Maximum update depth exceeded. This can happen when a component ' + \\\"calls setState inside useEffect, but useEffect either doesn't \\\" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\\n      }\\n    }\\n  }\\n\\n  function flushRenderPhaseStrictModeWarningsInDEV() {\\n    {\\n      ReactStrictModeWarnings.flushLegacyContextWarning();\\n\\n      {\\n        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\\n      }\\n    }\\n  }\\n\\n  function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\\n    {\\n      // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\\n      // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\\n      // Maybe not a big deal since this is DEV only behavior.\\n      setCurrentFiber(fiber);\\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\\n\\n      if (hasPassiveEffects) {\\n        invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\\n      }\\n\\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\\n\\n      if (hasPassiveEffects) {\\n        invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\\n      }\\n\\n      resetCurrentFiber();\\n    }\\n  }\\n\\n  function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\\n    {\\n      // We don't need to re-check StrictEffectsMode here.\\n      // This function is only called if that check has already passed.\\n      var current = firstChild;\\n      var subtreeRoot = null;\\n\\n      while (current !== null) {\\n        var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\\n\\n        if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\\n          current = current.child;\\n        } else {\\n          if ((current.flags & fiberFlags) !== NoFlags) {\\n            invokeEffectFn(current);\\n          }\\n\\n          if (current.sibling !== null) {\\n            current = current.sibling;\\n          } else {\\n            current = subtreeRoot = current.return;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  var didWarnStateUpdateForNotYetMountedComponent = null;\\n  function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\\n    {\\n      if ((executionContext & RenderContext) !== NoContext) {\\n        // We let the other warning about render phase updates deal with this one.\\n        return;\\n      }\\n\\n      if (!(fiber.mode & ConcurrentMode)) {\\n        return;\\n      }\\n\\n      var tag = fiber.tag;\\n\\n      if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\\n        // Only warn for user-defined components, not internal ones like Suspense.\\n        return;\\n      } // We show the whole stack but dedupe on the top component's name because\\n      // the problematic code almost always lies inside that component.\\n\\n\\n      var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\\n\\n      if (didWarnStateUpdateForNotYetMountedComponent !== null) {\\n        if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\\n          return;\\n        }\\n\\n        didWarnStateUpdateForNotYetMountedComponent.add(componentName);\\n      } else {\\n        didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\\n      }\\n\\n      var previousFiber = current;\\n\\n      try {\\n        setCurrentFiber(fiber);\\n\\n        error(\\\"Can't perform a React state update on a component that hasn't mounted yet. \\\" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\\n      } finally {\\n        if (previousFiber) {\\n          setCurrentFiber(fiber);\\n        } else {\\n          resetCurrentFiber();\\n        }\\n      }\\n    }\\n  }\\n  var beginWork$1;\\n\\n  {\\n    var dummyFiber = null;\\n\\n    beginWork$1 = function (current, unitOfWork, lanes) {\\n      // If a component throws an error, we replay it again in a synchronously\\n      // dispatched event, so that the debugger will treat it as an uncaught\\n      // error See ReactErrorUtils for more information.\\n      // Before entering the begin phase, copy the work-in-progress onto a dummy\\n      // fiber. If beginWork throws, we'll use this to reset the state.\\n      var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\\n\\n      try {\\n        return beginWork(current, unitOfWork, lanes);\\n      } catch (originalError) {\\n        if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\\n          // Don't replay promises.\\n          // Don't replay errors if we are hydrating and have already suspended or handled an error\\n          throw originalError;\\n        } // Keep this code in sync with handleError; any changes here must have\\n        // corresponding changes there.\\n\\n\\n        resetContextDependencies();\\n        resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\\n        // same fiber again.\\n        // Unwind the failed stack frame\\n\\n        unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\\n\\n        assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\\n\\n        if ( unitOfWork.mode & ProfileMode) {\\n          // Reset the profiler timer.\\n          startProfilerTimer(unitOfWork);\\n        } // Run beginWork again.\\n\\n\\n        invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\\n\\n        if (hasCaughtError()) {\\n          var replayError = clearCaughtError();\\n\\n          if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\\n            // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\\n            originalError._suppressLogging = true;\\n          }\\n        } // We always throw the original error in case the second render pass is not idempotent.\\n        // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\\n\\n\\n        throw originalError;\\n      }\\n    };\\n  }\\n\\n  var didWarnAboutUpdateInRender = false;\\n  var didWarnAboutUpdateInRenderForAnotherComponent;\\n\\n  {\\n    didWarnAboutUpdateInRenderForAnotherComponent = new Set();\\n  }\\n\\n  function warnAboutRenderPhaseUpdatesInDEV(fiber) {\\n    {\\n      if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\\n        switch (fiber.tag) {\\n          case FunctionComponent:\\n          case ForwardRef:\\n          case SimpleMemoComponent:\\n            {\\n              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\\n\\n              var dedupeKey = renderingComponentName;\\n\\n              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\\n                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\\n                var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\\n\\n                error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\\n              }\\n\\n              break;\\n            }\\n\\n          case ClassComponent:\\n            {\\n              if (!didWarnAboutUpdateInRender) {\\n                error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\\n\\n                didWarnAboutUpdateInRender = true;\\n              }\\n\\n              break;\\n            }\\n        }\\n      }\\n    }\\n  }\\n\\n  function restorePendingUpdaters(root, lanes) {\\n    {\\n      if (isDevToolsPresent) {\\n        var memoizedUpdaters = root.memoizedUpdaters;\\n        memoizedUpdaters.forEach(function (schedulingFiber) {\\n          addFiberToLanesMap(root, schedulingFiber, lanes);\\n        }); // This function intentionally does not clear memoized updaters.\\n        // Those may still be relevant to the current commit\\n        // and a future one (e.g. Suspense).\\n      }\\n    }\\n  }\\n  var fakeActCallbackNode = {};\\n\\n  function scheduleCallback$1(priorityLevel, callback) {\\n    {\\n      // If we're currently inside an `act` scope, bypass Scheduler and push to\\n      // the `act` queue instead.\\n      var actQueue = ReactCurrentActQueue$1.current;\\n\\n      if (actQueue !== null) {\\n        actQueue.push(callback);\\n        return fakeActCallbackNode;\\n      } else {\\n        return scheduleCallback(priorityLevel, callback);\\n      }\\n    }\\n  }\\n\\n  function cancelCallback$1(callbackNode) {\\n    if ( callbackNode === fakeActCallbackNode) {\\n      return;\\n    } // In production, always call Scheduler. This function will be stripped out.\\n\\n\\n    return cancelCallback(callbackNode);\\n  }\\n\\n  function shouldForceFlushFallbacksInDEV() {\\n    // Never force flush in production. This function should get stripped out.\\n    return  ReactCurrentActQueue$1.current !== null;\\n  }\\n\\n  function warnIfUpdatesNotWrappedWithActDEV(fiber) {\\n    {\\n      if (fiber.mode & ConcurrentMode) {\\n        if (!isConcurrentActEnvironment()) {\\n          // Not in an act environment. No need to warn.\\n          return;\\n        }\\n      } else {\\n        // Legacy mode has additional cases where we suppress a warning.\\n        if (!isLegacyActEnvironment()) {\\n          // Not in an act environment. No need to warn.\\n          return;\\n        }\\n\\n        if (executionContext !== NoContext) {\\n          // Legacy mode doesn't warn if the update is batched, i.e.\\n          // batchedUpdates or flushSync.\\n          return;\\n        }\\n\\n        if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\\n          // For backwards compatibility with pre-hooks code, legacy mode only\\n          // warns for updates that originate from a hook.\\n          return;\\n        }\\n      }\\n\\n      if (ReactCurrentActQueue$1.current === null) {\\n        var previousFiber = current;\\n\\n        try {\\n          setCurrentFiber(fiber);\\n\\n          error('An update to %s inside a test was not wrapped in act(...).\\\\n\\\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\\\n\\\\n' + 'act(() => {\\\\n' + '  /* fire events that update state */\\\\n' + '});\\\\n' + '/* assert on the output */\\\\n\\\\n' + \\\"This ensures that you're testing the behavior the user would see \\\" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\\n        } finally {\\n          if (previousFiber) {\\n            setCurrentFiber(fiber);\\n          } else {\\n            resetCurrentFiber();\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\\n    {\\n      if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\\n        error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\\\n\\\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\\\n\\\\n' + 'act(() => {\\\\n' + '  /* finish loading suspended data */\\\\n' + '});\\\\n' + '/* assert on the output */\\\\n\\\\n' + \\\"This ensures that you're testing the behavior the user would see \\\" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\\n      }\\n    }\\n  }\\n\\n  function setIsRunningInsertionEffect(isRunning) {\\n    {\\n      isRunningInsertionEffect = isRunning;\\n    }\\n  }\\n\\n  /* eslint-disable react-internal/prod-error-codes */\\n  var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\\n\\n  var failedBoundaries = null;\\n  var setRefreshHandler = function (handler) {\\n    {\\n      resolveFamily = handler;\\n    }\\n  };\\n  function resolveFunctionForHotReloading(type) {\\n    {\\n      if (resolveFamily === null) {\\n        // Hot reloading is disabled.\\n        return type;\\n      }\\n\\n      var family = resolveFamily(type);\\n\\n      if (family === undefined) {\\n        return type;\\n      } // Use the latest known implementation.\\n\\n\\n      return family.current;\\n    }\\n  }\\n  function resolveClassForHotReloading(type) {\\n    // No implementation differences.\\n    return resolveFunctionForHotReloading(type);\\n  }\\n  function resolveForwardRefForHotReloading(type) {\\n    {\\n      if (resolveFamily === null) {\\n        // Hot reloading is disabled.\\n        return type;\\n      }\\n\\n      var family = resolveFamily(type);\\n\\n      if (family === undefined) {\\n        // Check if we're dealing with a real forwardRef. Don't want to crash early.\\n        if (type !== null && type !== undefined && typeof type.render === 'function') {\\n          // ForwardRef is special because its resolved .type is an object,\\n          // but it's possible that we only have its inner render function in the map.\\n          // If that inner render function is different, we'll build a new forwardRef type.\\n          var currentRender = resolveFunctionForHotReloading(type.render);\\n\\n          if (type.render !== currentRender) {\\n            var syntheticType = {\\n              $$typeof: REACT_FORWARD_REF_TYPE,\\n              render: currentRender\\n            };\\n\\n            if (type.displayName !== undefined) {\\n              syntheticType.displayName = type.displayName;\\n            }\\n\\n            return syntheticType;\\n          }\\n        }\\n\\n        return type;\\n      } // Use the latest known implementation.\\n\\n\\n      return family.current;\\n    }\\n  }\\n  function isCompatibleFamilyForHotReloading(fiber, element) {\\n    {\\n      if (resolveFamily === null) {\\n        // Hot reloading is disabled.\\n        return false;\\n      }\\n\\n      var prevType = fiber.elementType;\\n      var nextType = element.type; // If we got here, we know types aren't === equal.\\n\\n      var needsCompareFamilies = false;\\n      var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\\n\\n      switch (fiber.tag) {\\n        case ClassComponent:\\n          {\\n            if (typeof nextType === 'function') {\\n              needsCompareFamilies = true;\\n            }\\n\\n            break;\\n          }\\n\\n        case FunctionComponent:\\n          {\\n            if (typeof nextType === 'function') {\\n              needsCompareFamilies = true;\\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\\n              // We don't know the inner type yet.\\n              // We're going to assume that the lazy inner type is stable,\\n              // and so it is sufficient to avoid reconciling it away.\\n              // We're not going to unwrap or actually use the new lazy type.\\n              needsCompareFamilies = true;\\n            }\\n\\n            break;\\n          }\\n\\n        case ForwardRef:\\n          {\\n            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\\n              needsCompareFamilies = true;\\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\\n              needsCompareFamilies = true;\\n            }\\n\\n            break;\\n          }\\n\\n        case MemoComponent:\\n        case SimpleMemoComponent:\\n          {\\n            if ($$typeofNextType === REACT_MEMO_TYPE) {\\n              // TODO: if it was but can no longer be simple,\\n              // we shouldn't set this.\\n              needsCompareFamilies = true;\\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\\n              needsCompareFamilies = true;\\n            }\\n\\n            break;\\n          }\\n\\n        default:\\n          return false;\\n      } // Check if both types have a family and it's the same one.\\n\\n\\n      if (needsCompareFamilies) {\\n        // Note: memo() and forwardRef() we'll compare outer rather than inner type.\\n        // This means both of them need to be registered to preserve state.\\n        // If we unwrapped and compared the inner types for wrappers instead,\\n        // then we would risk falsely saying two separate memo(Foo)\\n        // calls are equivalent because they wrap the same Foo function.\\n        var prevFamily = resolveFamily(prevType);\\n\\n        if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\\n          return true;\\n        }\\n      }\\n\\n      return false;\\n    }\\n  }\\n  function markFailedErrorBoundaryForHotReloading(fiber) {\\n    {\\n      if (resolveFamily === null) {\\n        // Hot reloading is disabled.\\n        return;\\n      }\\n\\n      if (typeof WeakSet !== 'function') {\\n        return;\\n      }\\n\\n      if (failedBoundaries === null) {\\n        failedBoundaries = new WeakSet();\\n      }\\n\\n      failedBoundaries.add(fiber);\\n    }\\n  }\\n  var scheduleRefresh = function (root, update) {\\n    {\\n      if (resolveFamily === null) {\\n        // Hot reloading is disabled.\\n        return;\\n      }\\n\\n      var staleFamilies = update.staleFamilies,\\n          updatedFamilies = update.updatedFamilies;\\n      flushPassiveEffects();\\n      flushSync(function () {\\n        scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\\n      });\\n    }\\n  };\\n  var scheduleRoot = function (root, element) {\\n    {\\n      if (root.context !== emptyContextObject) {\\n        // Super edge case: root has a legacy _renderSubtree context\\n        // but we don't know the parentComponent so we can't pass it.\\n        // Just ignore. We'll delete this with _renderSubtree code path later.\\n        return;\\n      }\\n\\n      flushPassiveEffects();\\n      flushSync(function () {\\n        updateContainer(element, root, null, null);\\n      });\\n    }\\n  };\\n\\n  function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\\n    {\\n      var alternate = fiber.alternate,\\n          child = fiber.child,\\n          sibling = fiber.sibling,\\n          tag = fiber.tag,\\n          type = fiber.type;\\n      var candidateType = null;\\n\\n      switch (tag) {\\n        case FunctionComponent:\\n        case SimpleMemoComponent:\\n        case ClassComponent:\\n          candidateType = type;\\n          break;\\n\\n        case ForwardRef:\\n          candidateType = type.render;\\n          break;\\n      }\\n\\n      if (resolveFamily === null) {\\n        throw new Error('Expected resolveFamily to be set during hot reload.');\\n      }\\n\\n      var needsRender = false;\\n      var needsRemount = false;\\n\\n      if (candidateType !== null) {\\n        var family = resolveFamily(candidateType);\\n\\n        if (family !== undefined) {\\n          if (staleFamilies.has(family)) {\\n            needsRemount = true;\\n          } else if (updatedFamilies.has(family)) {\\n            if (tag === ClassComponent) {\\n              needsRemount = true;\\n            } else {\\n              needsRender = true;\\n            }\\n          }\\n        }\\n      }\\n\\n      if (failedBoundaries !== null) {\\n        if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\\n          needsRemount = true;\\n        }\\n      }\\n\\n      if (needsRemount) {\\n        fiber._debugNeedsRemount = true;\\n      }\\n\\n      if (needsRemount || needsRender) {\\n        var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n        if (_root !== null) {\\n          scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\\n        }\\n      }\\n\\n      if (child !== null && !needsRemount) {\\n        scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\\n      }\\n\\n      if (sibling !== null) {\\n        scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\\n      }\\n    }\\n  }\\n\\n  var findHostInstancesForRefresh = function (root, families) {\\n    {\\n      var hostInstances = new Set();\\n      var types = new Set(families.map(function (family) {\\n        return family.current;\\n      }));\\n      findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\\n      return hostInstances;\\n    }\\n  };\\n\\n  function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\\n    {\\n      var child = fiber.child,\\n          sibling = fiber.sibling,\\n          tag = fiber.tag,\\n          type = fiber.type;\\n      var candidateType = null;\\n\\n      switch (tag) {\\n        case FunctionComponent:\\n        case SimpleMemoComponent:\\n        case ClassComponent:\\n          candidateType = type;\\n          break;\\n\\n        case ForwardRef:\\n          candidateType = type.render;\\n          break;\\n      }\\n\\n      var didMatch = false;\\n\\n      if (candidateType !== null) {\\n        if (types.has(candidateType)) {\\n          didMatch = true;\\n        }\\n      }\\n\\n      if (didMatch) {\\n        // We have a match. This only drills down to the closest host components.\\n        // There's no need to search deeper because for the purpose of giving\\n        // visual feedback, \\\"flashing\\\" outermost parent rectangles is sufficient.\\n        findHostInstancesForFiberShallowly(fiber, hostInstances);\\n      } else {\\n        // If there's no match, maybe there will be one further down in the child tree.\\n        if (child !== null) {\\n          findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\\n        }\\n      }\\n\\n      if (sibling !== null) {\\n        findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\\n      }\\n    }\\n  }\\n\\n  function findHostInstancesForFiberShallowly(fiber, hostInstances) {\\n    {\\n      var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\\n\\n      if (foundHostInstances) {\\n        return;\\n      } // If we didn't find any host children, fallback to closest host parent.\\n\\n\\n      var node = fiber;\\n\\n      while (true) {\\n        switch (node.tag) {\\n          case HostComponent:\\n            hostInstances.add(node.stateNode);\\n            return;\\n\\n          case HostPortal:\\n            hostInstances.add(node.stateNode.containerInfo);\\n            return;\\n\\n          case HostRoot:\\n            hostInstances.add(node.stateNode.containerInfo);\\n            return;\\n        }\\n\\n        if (node.return === null) {\\n          throw new Error('Expected to reach root first.');\\n        }\\n\\n        node = node.return;\\n      }\\n    }\\n  }\\n\\n  function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\\n    {\\n      var node = fiber;\\n      var foundHostInstances = false;\\n\\n      while (true) {\\n        if (node.tag === HostComponent) {\\n          // We got a match.\\n          foundHostInstances = true;\\n          hostInstances.add(node.stateNode); // There may still be more, so keep searching.\\n        } else if (node.child !== null) {\\n          node.child.return = node;\\n          node = node.child;\\n          continue;\\n        }\\n\\n        if (node === fiber) {\\n          return foundHostInstances;\\n        }\\n\\n        while (node.sibling === null) {\\n          if (node.return === null || node.return === fiber) {\\n            return foundHostInstances;\\n          }\\n\\n          node = node.return;\\n        }\\n\\n        node.sibling.return = node.return;\\n        node = node.sibling;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  var hasBadMapPolyfill;\\n\\n  {\\n    hasBadMapPolyfill = false;\\n\\n    try {\\n      var nonExtensibleObject = Object.preventExtensions({});\\n      /* eslint-disable no-new */\\n\\n      new Map([[nonExtensibleObject, null]]);\\n      new Set([nonExtensibleObject]);\\n      /* eslint-enable no-new */\\n    } catch (e) {\\n      // TODO: Consider warning about bad polyfills\\n      hasBadMapPolyfill = true;\\n    }\\n  }\\n\\n  function FiberNode(tag, pendingProps, key, mode) {\\n    // Instance\\n    this.tag = tag;\\n    this.key = key;\\n    this.elementType = null;\\n    this.type = null;\\n    this.stateNode = null; // Fiber\\n\\n    this.return = null;\\n    this.child = null;\\n    this.sibling = null;\\n    this.index = 0;\\n    this.ref = null;\\n    this.pendingProps = pendingProps;\\n    this.memoizedProps = null;\\n    this.updateQueue = null;\\n    this.memoizedState = null;\\n    this.dependencies = null;\\n    this.mode = mode; // Effects\\n\\n    this.flags = NoFlags;\\n    this.subtreeFlags = NoFlags;\\n    this.deletions = null;\\n    this.lanes = NoLanes;\\n    this.childLanes = NoLanes;\\n    this.alternate = null;\\n\\n    {\\n      // Note: The following is done to avoid a v8 performance cliff.\\n      //\\n      // Initializing the fields below to smis and later updating them with\\n      // double values will cause Fibers to end up having separate shapes.\\n      // This behavior/bug has something to do with Object.preventExtension().\\n      // Fortunately this only impacts DEV builds.\\n      // Unfortunately it makes React unusably slow for some applications.\\n      // To work around this, initialize the fields below with doubles.\\n      //\\n      // Learn more about this here:\\n      // https://github.com/facebook/react/issues/14365\\n      // https://bugs.chromium.org/p/v8/issues/detail?id=8538\\n      this.actualDuration = Number.NaN;\\n      this.actualStartTime = Number.NaN;\\n      this.selfBaseDuration = Number.NaN;\\n      this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\\n      // This won't trigger the performance cliff mentioned above,\\n      // and it simplifies other profiler code (including DevTools).\\n\\n      this.actualDuration = 0;\\n      this.actualStartTime = -1;\\n      this.selfBaseDuration = 0;\\n      this.treeBaseDuration = 0;\\n    }\\n\\n    {\\n      // This isn't directly used but is handy for debugging internals:\\n      this._debugSource = null;\\n      this._debugOwner = null;\\n      this._debugNeedsRemount = false;\\n      this._debugHookTypes = null;\\n\\n      if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\\n        Object.preventExtensions(this);\\n      }\\n    }\\n  } // This is a constructor function, rather than a POJO constructor, still\\n  // please ensure we do the following:\\n  // 1) Nobody should add any instance methods on this. Instance methods can be\\n  //    more difficult to predict when they get optimized and they are almost\\n  //    never inlined properly in static compilers.\\n  // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\\n  //    always know when it is a fiber.\\n  // 3) We might want to experiment with using numeric keys since they are easier\\n  //    to optimize in a non-JIT environment.\\n  // 4) We can easily go from a constructor to a createFiber object literal if that\\n  //    is faster.\\n  // 5) It should be easy to port this to a C struct and keep a C implementation\\n  //    compatible.\\n\\n\\n  var createFiber = function (tag, pendingProps, key, mode) {\\n    // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\\n    return new FiberNode(tag, pendingProps, key, mode);\\n  };\\n\\n  function shouldConstruct$1(Component) {\\n    var prototype = Component.prototype;\\n    return !!(prototype && prototype.isReactComponent);\\n  }\\n\\n  function isSimpleFunctionComponent(type) {\\n    return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\\n  }\\n  function resolveLazyComponentTag(Component) {\\n    if (typeof Component === 'function') {\\n      return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\\n    } else if (Component !== undefined && Component !== null) {\\n      var $$typeof = Component.$$typeof;\\n\\n      if ($$typeof === REACT_FORWARD_REF_TYPE) {\\n        return ForwardRef;\\n      }\\n\\n      if ($$typeof === REACT_MEMO_TYPE) {\\n        return MemoComponent;\\n      }\\n    }\\n\\n    return IndeterminateComponent;\\n  } // This is used to create an alternate fiber to do work on.\\n\\n  function createWorkInProgress(current, pendingProps) {\\n    var workInProgress = current.alternate;\\n\\n    if (workInProgress === null) {\\n      // We use a double buffering pooling technique because we know that we'll\\n      // only ever need at most two versions of a tree. We pool the \\\"other\\\" unused\\n      // node that we're free to reuse. This is lazily created to avoid allocating\\n      // extra objects for things that are never updated. It also allow us to\\n      // reclaim the extra memory if needed.\\n      workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\\n      workInProgress.elementType = current.elementType;\\n      workInProgress.type = current.type;\\n      workInProgress.stateNode = current.stateNode;\\n\\n      {\\n        // DEV-only fields\\n        workInProgress._debugSource = current._debugSource;\\n        workInProgress._debugOwner = current._debugOwner;\\n        workInProgress._debugHookTypes = current._debugHookTypes;\\n      }\\n\\n      workInProgress.alternate = current;\\n      current.alternate = workInProgress;\\n    } else {\\n      workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\\n\\n      workInProgress.type = current.type; // We already have an alternate.\\n      // Reset the effect tag.\\n\\n      workInProgress.flags = NoFlags; // The effects are no longer valid.\\n\\n      workInProgress.subtreeFlags = NoFlags;\\n      workInProgress.deletions = null;\\n\\n      {\\n        // We intentionally reset, rather than copy, actualDuration & actualStartTime.\\n        // This prevents time from endlessly accumulating in new commits.\\n        // This has the downside of resetting values for different priority renders,\\n        // But works for yielding (the common case) and should support resuming.\\n        workInProgress.actualDuration = 0;\\n        workInProgress.actualStartTime = -1;\\n      }\\n    } // Reset all effects except static ones.\\n    // Static effects are not specific to a render.\\n\\n\\n    workInProgress.flags = current.flags & StaticMask;\\n    workInProgress.childLanes = current.childLanes;\\n    workInProgress.lanes = current.lanes;\\n    workInProgress.child = current.child;\\n    workInProgress.memoizedProps = current.memoizedProps;\\n    workInProgress.memoizedState = current.memoizedState;\\n    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\\n    // it cannot be shared with the current fiber.\\n\\n    var currentDependencies = current.dependencies;\\n    workInProgress.dependencies = currentDependencies === null ? null : {\\n      lanes: currentDependencies.lanes,\\n      firstContext: currentDependencies.firstContext\\n    }; // These will be overridden during the parent's reconciliation\\n\\n    workInProgress.sibling = current.sibling;\\n    workInProgress.index = current.index;\\n    workInProgress.ref = current.ref;\\n\\n    {\\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\\n    }\\n\\n    {\\n      workInProgress._debugNeedsRemount = current._debugNeedsRemount;\\n\\n      switch (workInProgress.tag) {\\n        case IndeterminateComponent:\\n        case FunctionComponent:\\n        case SimpleMemoComponent:\\n          workInProgress.type = resolveFunctionForHotReloading(current.type);\\n          break;\\n\\n        case ClassComponent:\\n          workInProgress.type = resolveClassForHotReloading(current.type);\\n          break;\\n\\n        case ForwardRef:\\n          workInProgress.type = resolveForwardRefForHotReloading(current.type);\\n          break;\\n      }\\n    }\\n\\n    return workInProgress;\\n  } // Used to reuse a Fiber for a second pass.\\n\\n  function resetWorkInProgress(workInProgress, renderLanes) {\\n    // This resets the Fiber to what createFiber or createWorkInProgress would\\n    // have set the values to before during the first pass. Ideally this wouldn't\\n    // be necessary but unfortunately many code paths reads from the workInProgress\\n    // when they should be reading from current and writing to workInProgress.\\n    // We assume pendingProps, index, key, ref, return are still untouched to\\n    // avoid doing another reconciliation.\\n    // Reset the effect flags but keep any Placement tags, since that's something\\n    // that child fiber is setting, not the reconciliation.\\n    workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\\n\\n    var current = workInProgress.alternate;\\n\\n    if (current === null) {\\n      // Reset to createFiber's initial values.\\n      workInProgress.childLanes = NoLanes;\\n      workInProgress.lanes = renderLanes;\\n      workInProgress.child = null;\\n      workInProgress.subtreeFlags = NoFlags;\\n      workInProgress.memoizedProps = null;\\n      workInProgress.memoizedState = null;\\n      workInProgress.updateQueue = null;\\n      workInProgress.dependencies = null;\\n      workInProgress.stateNode = null;\\n\\n      {\\n        // Note: We don't reset the actualTime counts. It's useful to accumulate\\n        // actual time across multiple render passes.\\n        workInProgress.selfBaseDuration = 0;\\n        workInProgress.treeBaseDuration = 0;\\n      }\\n    } else {\\n      // Reset to the cloned values that createWorkInProgress would've.\\n      workInProgress.childLanes = current.childLanes;\\n      workInProgress.lanes = current.lanes;\\n      workInProgress.child = current.child;\\n      workInProgress.subtreeFlags = NoFlags;\\n      workInProgress.deletions = null;\\n      workInProgress.memoizedProps = current.memoizedProps;\\n      workInProgress.memoizedState = current.memoizedState;\\n      workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\\n\\n      workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\\n      // it cannot be shared with the current fiber.\\n\\n      var currentDependencies = current.dependencies;\\n      workInProgress.dependencies = currentDependencies === null ? null : {\\n        lanes: currentDependencies.lanes,\\n        firstContext: currentDependencies.firstContext\\n      };\\n\\n      {\\n        // Note: We don't reset the actualTime counts. It's useful to accumulate\\n        // actual time across multiple render passes.\\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\\n      }\\n    }\\n\\n    return workInProgress;\\n  }\\n  function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\\n    var mode;\\n\\n    if (tag === ConcurrentRoot) {\\n      mode = ConcurrentMode;\\n\\n      if (isStrictMode === true) {\\n        mode |= StrictLegacyMode;\\n\\n        {\\n          mode |= StrictEffectsMode;\\n        }\\n      }\\n    } else {\\n      mode = NoMode;\\n    }\\n\\n    if ( isDevToolsPresent) {\\n      // Always collect profile timings when DevTools are present.\\n      // This enables DevTools to start capturing timing at any point–\\n      // Without some nodes in the tree having empty base times.\\n      mode |= ProfileMode;\\n    }\\n\\n    return createFiber(HostRoot, null, null, mode);\\n  }\\n  function createFiberFromTypeAndProps(type, // React$ElementType\\n  key, pendingProps, owner, mode, lanes) {\\n    var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\\n\\n    var resolvedType = type;\\n\\n    if (typeof type === 'function') {\\n      if (shouldConstruct$1(type)) {\\n        fiberTag = ClassComponent;\\n\\n        {\\n          resolvedType = resolveClassForHotReloading(resolvedType);\\n        }\\n      } else {\\n        {\\n          resolvedType = resolveFunctionForHotReloading(resolvedType);\\n        }\\n      }\\n    } else if (typeof type === 'string') {\\n      fiberTag = HostComponent;\\n    } else {\\n      getTag: switch (type) {\\n        case REACT_FRAGMENT_TYPE:\\n          return createFiberFromFragment(pendingProps.children, mode, lanes, key);\\n\\n        case REACT_STRICT_MODE_TYPE:\\n          fiberTag = Mode;\\n          mode |= StrictLegacyMode;\\n\\n          if ( (mode & ConcurrentMode) !== NoMode) {\\n            // Strict effects should never run on legacy roots\\n            mode |= StrictEffectsMode;\\n          }\\n\\n          break;\\n\\n        case REACT_PROFILER_TYPE:\\n          return createFiberFromProfiler(pendingProps, mode, lanes, key);\\n\\n        case REACT_SUSPENSE_TYPE:\\n          return createFiberFromSuspense(pendingProps, mode, lanes, key);\\n\\n        case REACT_SUSPENSE_LIST_TYPE:\\n          return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\\n\\n        case REACT_OFFSCREEN_TYPE:\\n          return createFiberFromOffscreen(pendingProps, mode, lanes, key);\\n\\n        case REACT_LEGACY_HIDDEN_TYPE:\\n\\n        // eslint-disable-next-line no-fallthrough\\n\\n        case REACT_SCOPE_TYPE:\\n\\n        // eslint-disable-next-line no-fallthrough\\n\\n        case REACT_CACHE_TYPE:\\n\\n        // eslint-disable-next-line no-fallthrough\\n\\n        case REACT_TRACING_MARKER_TYPE:\\n\\n        // eslint-disable-next-line no-fallthrough\\n\\n        case REACT_DEBUG_TRACING_MODE_TYPE:\\n\\n        // eslint-disable-next-line no-fallthrough\\n\\n        default:\\n          {\\n            if (typeof type === 'object' && type !== null) {\\n              switch (type.$$typeof) {\\n                case REACT_PROVIDER_TYPE:\\n                  fiberTag = ContextProvider;\\n                  break getTag;\\n\\n                case REACT_CONTEXT_TYPE:\\n                  // This is a consumer\\n                  fiberTag = ContextConsumer;\\n                  break getTag;\\n\\n                case REACT_FORWARD_REF_TYPE:\\n                  fiberTag = ForwardRef;\\n\\n                  {\\n                    resolvedType = resolveForwardRefForHotReloading(resolvedType);\\n                  }\\n\\n                  break getTag;\\n\\n                case REACT_MEMO_TYPE:\\n                  fiberTag = MemoComponent;\\n                  break getTag;\\n\\n                case REACT_LAZY_TYPE:\\n                  fiberTag = LazyComponent;\\n                  resolvedType = null;\\n                  break getTag;\\n              }\\n            }\\n\\n            var info = '';\\n\\n            {\\n              if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\\n                info += ' You likely forgot to export your component from the file ' + \\\"it's defined in, or you might have mixed up default and \\\" + 'named imports.';\\n              }\\n\\n              var ownerName = owner ? getComponentNameFromFiber(owner) : null;\\n\\n              if (ownerName) {\\n                info += '\\\\n\\\\nCheck the render method of `' + ownerName + '`.';\\n              }\\n            }\\n\\n            throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\\\"but got: \\\" + (type == null ? type : typeof type) + \\\".\\\" + info));\\n          }\\n      }\\n    }\\n\\n    var fiber = createFiber(fiberTag, pendingProps, key, mode);\\n    fiber.elementType = type;\\n    fiber.type = resolvedType;\\n    fiber.lanes = lanes;\\n\\n    {\\n      fiber._debugOwner = owner;\\n    }\\n\\n    return fiber;\\n  }\\n  function createFiberFromElement(element, mode, lanes) {\\n    var owner = null;\\n\\n    {\\n      owner = element._owner;\\n    }\\n\\n    var type = element.type;\\n    var key = element.key;\\n    var pendingProps = element.props;\\n    var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\\n\\n    {\\n      fiber._debugSource = element._source;\\n      fiber._debugOwner = element._owner;\\n    }\\n\\n    return fiber;\\n  }\\n  function createFiberFromFragment(elements, mode, lanes, key) {\\n    var fiber = createFiber(Fragment, elements, key, mode);\\n    fiber.lanes = lanes;\\n    return fiber;\\n  }\\n\\n  function createFiberFromProfiler(pendingProps, mode, lanes, key) {\\n    {\\n      if (typeof pendingProps.id !== 'string') {\\n        error('Profiler must specify an \\\"id\\\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\\n      }\\n    }\\n\\n    var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\\n    fiber.elementType = REACT_PROFILER_TYPE;\\n    fiber.lanes = lanes;\\n\\n    {\\n      fiber.stateNode = {\\n        effectDuration: 0,\\n        passiveEffectDuration: 0\\n      };\\n    }\\n\\n    return fiber;\\n  }\\n\\n  function createFiberFromSuspense(pendingProps, mode, lanes, key) {\\n    var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\\n    fiber.elementType = REACT_SUSPENSE_TYPE;\\n    fiber.lanes = lanes;\\n    return fiber;\\n  }\\n  function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\\n    var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\\n    fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\\n    fiber.lanes = lanes;\\n    return fiber;\\n  }\\n  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\\n    var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\\n    fiber.elementType = REACT_OFFSCREEN_TYPE;\\n    fiber.lanes = lanes;\\n    var primaryChildInstance = {\\n      isHidden: false\\n    };\\n    fiber.stateNode = primaryChildInstance;\\n    return fiber;\\n  }\\n  function createFiberFromText(content, mode, lanes) {\\n    var fiber = createFiber(HostText, content, null, mode);\\n    fiber.lanes = lanes;\\n    return fiber;\\n  }\\n  function createFiberFromHostInstanceForDeletion() {\\n    var fiber = createFiber(HostComponent, null, null, NoMode);\\n    fiber.elementType = 'DELETED';\\n    return fiber;\\n  }\\n  function createFiberFromDehydratedFragment(dehydratedNode) {\\n    var fiber = createFiber(DehydratedFragment, null, null, NoMode);\\n    fiber.stateNode = dehydratedNode;\\n    return fiber;\\n  }\\n  function createFiberFromPortal(portal, mode, lanes) {\\n    var pendingProps = portal.children !== null ? portal.children : [];\\n    var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\\n    fiber.lanes = lanes;\\n    fiber.stateNode = {\\n      containerInfo: portal.containerInfo,\\n      pendingChildren: null,\\n      // Used by persistent updates\\n      implementation: portal.implementation\\n    };\\n    return fiber;\\n  } // Used for stashing WIP properties to replay failed work in DEV.\\n\\n  function assignFiberPropertiesInDEV(target, source) {\\n    if (target === null) {\\n      // This Fiber's initial properties will always be overwritten.\\n      // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\\n      target = createFiber(IndeterminateComponent, null, null, NoMode);\\n    } // This is intentionally written as a list of all properties.\\n    // We tried to use Object.assign() instead but this is called in\\n    // the hottest path, and Object.assign() was too slow:\\n    // https://github.com/facebook/react/issues/12502\\n    // This code is DEV-only so size is not a concern.\\n\\n\\n    target.tag = source.tag;\\n    target.key = source.key;\\n    target.elementType = source.elementType;\\n    target.type = source.type;\\n    target.stateNode = source.stateNode;\\n    target.return = source.return;\\n    target.child = source.child;\\n    target.sibling = source.sibling;\\n    target.index = source.index;\\n    target.ref = source.ref;\\n    target.pendingProps = source.pendingProps;\\n    target.memoizedProps = source.memoizedProps;\\n    target.updateQueue = source.updateQueue;\\n    target.memoizedState = source.memoizedState;\\n    target.dependencies = source.dependencies;\\n    target.mode = source.mode;\\n    target.flags = source.flags;\\n    target.subtreeFlags = source.subtreeFlags;\\n    target.deletions = source.deletions;\\n    target.lanes = source.lanes;\\n    target.childLanes = source.childLanes;\\n    target.alternate = source.alternate;\\n\\n    {\\n      target.actualDuration = source.actualDuration;\\n      target.actualStartTime = source.actualStartTime;\\n      target.selfBaseDuration = source.selfBaseDuration;\\n      target.treeBaseDuration = source.treeBaseDuration;\\n    }\\n\\n    target._debugSource = source._debugSource;\\n    target._debugOwner = source._debugOwner;\\n    target._debugNeedsRemount = source._debugNeedsRemount;\\n    target._debugHookTypes = source._debugHookTypes;\\n    return target;\\n  }\\n\\n  function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\\n    this.tag = tag;\\n    this.containerInfo = containerInfo;\\n    this.pendingChildren = null;\\n    this.current = null;\\n    this.pingCache = null;\\n    this.finishedWork = null;\\n    this.timeoutHandle = noTimeout;\\n    this.context = null;\\n    this.pendingContext = null;\\n    this.callbackNode = null;\\n    this.callbackPriority = NoLane;\\n    this.eventTimes = createLaneMap(NoLanes);\\n    this.expirationTimes = createLaneMap(NoTimestamp);\\n    this.pendingLanes = NoLanes;\\n    this.suspendedLanes = NoLanes;\\n    this.pingedLanes = NoLanes;\\n    this.expiredLanes = NoLanes;\\n    this.mutableReadLanes = NoLanes;\\n    this.finishedLanes = NoLanes;\\n    this.entangledLanes = NoLanes;\\n    this.entanglements = createLaneMap(NoLanes);\\n    this.identifierPrefix = identifierPrefix;\\n    this.onRecoverableError = onRecoverableError;\\n\\n    {\\n      this.mutableSourceEagerHydrationData = null;\\n    }\\n\\n    {\\n      this.effectDuration = 0;\\n      this.passiveEffectDuration = 0;\\n    }\\n\\n    {\\n      this.memoizedUpdaters = new Set();\\n      var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\\n\\n      for (var _i = 0; _i < TotalLanes; _i++) {\\n        pendingUpdatersLaneMap.push(new Set());\\n      }\\n    }\\n\\n    {\\n      switch (tag) {\\n        case ConcurrentRoot:\\n          this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\\n          break;\\n\\n        case LegacyRoot:\\n          this._debugRootType = hydrate ? 'hydrate()' : 'render()';\\n          break;\\n      }\\n    }\\n  }\\n\\n  function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\\n  // host config, but because they are passed in at runtime, we have to thread\\n  // them through the root constructor. Perhaps we should put them all into a\\n  // single type, like a DynamicHostConfig that is defined by the renderer.\\n  identifierPrefix, onRecoverableError, transitionCallbacks) {\\n    var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\\n    // stateNode is any.\\n\\n\\n    var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\\n    root.current = uninitializedFiber;\\n    uninitializedFiber.stateNode = root;\\n\\n    {\\n      var _initialState = {\\n        element: initialChildren,\\n        isDehydrated: hydrate,\\n        cache: null,\\n        // not enabled yet\\n        transitions: null,\\n        pendingSuspenseBoundaries: null\\n      };\\n      uninitializedFiber.memoizedState = _initialState;\\n    }\\n\\n    initializeUpdateQueue(uninitializedFiber);\\n    return root;\\n  }\\n\\n  var ReactVersion = '18.2.0';\\n\\n  function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\\n  implementation) {\\n    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\\n\\n    {\\n      checkKeyStringCoercion(key);\\n    }\\n\\n    return {\\n      // This tag allow us to uniquely identify this as a React Portal\\n      $$typeof: REACT_PORTAL_TYPE,\\n      key: key == null ? null : '' + key,\\n      children: children,\\n      containerInfo: containerInfo,\\n      implementation: implementation\\n    };\\n  }\\n\\n  var didWarnAboutNestedUpdates;\\n  var didWarnAboutFindNodeInStrictMode;\\n\\n  {\\n    didWarnAboutNestedUpdates = false;\\n    didWarnAboutFindNodeInStrictMode = {};\\n  }\\n\\n  function getContextForSubtree(parentComponent) {\\n    if (!parentComponent) {\\n      return emptyContextObject;\\n    }\\n\\n    var fiber = get(parentComponent);\\n    var parentContext = findCurrentUnmaskedContext(fiber);\\n\\n    if (fiber.tag === ClassComponent) {\\n      var Component = fiber.type;\\n\\n      if (isContextProvider(Component)) {\\n        return processChildContext(fiber, Component, parentContext);\\n      }\\n    }\\n\\n    return parentContext;\\n  }\\n\\n  function findHostInstanceWithWarning(component, methodName) {\\n    {\\n      var fiber = get(component);\\n\\n      if (fiber === undefined) {\\n        if (typeof component.render === 'function') {\\n          throw new Error('Unable to find node on an unmounted component.');\\n        } else {\\n          var keys = Object.keys(component).join(',');\\n          throw new Error(\\\"Argument appears to not be a ReactComponent. Keys: \\\" + keys);\\n        }\\n      }\\n\\n      var hostFiber = findCurrentHostFiber(fiber);\\n\\n      if (hostFiber === null) {\\n        return null;\\n      }\\n\\n      if (hostFiber.mode & StrictLegacyMode) {\\n        var componentName = getComponentNameFromFiber(fiber) || 'Component';\\n\\n        if (!didWarnAboutFindNodeInStrictMode[componentName]) {\\n          didWarnAboutFindNodeInStrictMode[componentName] = true;\\n          var previousFiber = current;\\n\\n          try {\\n            setCurrentFiber(hostFiber);\\n\\n            if (fiber.mode & StrictLegacyMode) {\\n              error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\\n            } else {\\n              error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\\n            }\\n          } finally {\\n            // Ideally this should reset to previous but this shouldn't be called in\\n            // render and there's another warning for that anyway.\\n            if (previousFiber) {\\n              setCurrentFiber(previousFiber);\\n            } else {\\n              resetCurrentFiber();\\n            }\\n          }\\n        }\\n      }\\n\\n      return hostFiber.stateNode;\\n    }\\n  }\\n\\n  function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\\n    var hydrate = false;\\n    var initialChildren = null;\\n    return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\\n  }\\n  function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\\n  callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\\n    var hydrate = true;\\n    var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\\n\\n    root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\\n    // a regular update because the initial render must match was was rendered\\n    // on the server.\\n    // NOTE: This update intentionally doesn't have a payload. We're only using\\n    // the update to schedule work on the root fiber (and, for legacy roots, to\\n    // enqueue the callback if one is provided).\\n\\n    var current = root.current;\\n    var eventTime = requestEventTime();\\n    var lane = requestUpdateLane(current);\\n    var update = createUpdate(eventTime, lane);\\n    update.callback = callback !== undefined && callback !== null ? callback : null;\\n    enqueueUpdate(current, update, lane);\\n    scheduleInitialHydrationOnRoot(root, lane, eventTime);\\n    return root;\\n  }\\n  function updateContainer(element, container, parentComponent, callback) {\\n    {\\n      onScheduleRoot(container, element);\\n    }\\n\\n    var current$1 = container.current;\\n    var eventTime = requestEventTime();\\n    var lane = requestUpdateLane(current$1);\\n\\n    {\\n      markRenderScheduled(lane);\\n    }\\n\\n    var context = getContextForSubtree(parentComponent);\\n\\n    if (container.context === null) {\\n      container.context = context;\\n    } else {\\n      container.pendingContext = context;\\n    }\\n\\n    {\\n      if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\\n        didWarnAboutNestedUpdates = true;\\n\\n        error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\\\n\\\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\\n      }\\n    }\\n\\n    var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\\n    // being called \\\"element\\\".\\n\\n    update.payload = {\\n      element: element\\n    };\\n    callback = callback === undefined ? null : callback;\\n\\n    if (callback !== null) {\\n      {\\n        if (typeof callback !== 'function') {\\n          error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\\n        }\\n      }\\n\\n      update.callback = callback;\\n    }\\n\\n    var root = enqueueUpdate(current$1, update, lane);\\n\\n    if (root !== null) {\\n      scheduleUpdateOnFiber(root, current$1, lane, eventTime);\\n      entangleTransitions(root, current$1, lane);\\n    }\\n\\n    return lane;\\n  }\\n  function getPublicRootInstance(container) {\\n    var containerFiber = container.current;\\n\\n    if (!containerFiber.child) {\\n      return null;\\n    }\\n\\n    switch (containerFiber.child.tag) {\\n      case HostComponent:\\n        return getPublicInstance(containerFiber.child.stateNode);\\n\\n      default:\\n        return containerFiber.child.stateNode;\\n    }\\n  }\\n  function attemptSynchronousHydration$1(fiber) {\\n    switch (fiber.tag) {\\n      case HostRoot:\\n        {\\n          var root = fiber.stateNode;\\n\\n          if (isRootDehydrated(root)) {\\n            // Flush the first scheduled \\\"update\\\".\\n            var lanes = getHighestPriorityPendingLanes(root);\\n            flushRoot(root, lanes);\\n          }\\n\\n          break;\\n        }\\n\\n      case SuspenseComponent:\\n        {\\n          flushSync(function () {\\n            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n            if (root !== null) {\\n              var eventTime = requestEventTime();\\n              scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\\n            }\\n          }); // If we're still blocked after this, we need to increase\\n          // the priority of any promises resolving within this\\n          // boundary so that they next attempt also has higher pri.\\n\\n          var retryLane = SyncLane;\\n          markRetryLaneIfNotHydrated(fiber, retryLane);\\n          break;\\n        }\\n    }\\n  }\\n\\n  function markRetryLaneImpl(fiber, retryLane) {\\n    var suspenseState = fiber.memoizedState;\\n\\n    if (suspenseState !== null && suspenseState.dehydrated !== null) {\\n      suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\\n    }\\n  } // Increases the priority of thenables when they resolve within this boundary.\\n\\n\\n  function markRetryLaneIfNotHydrated(fiber, retryLane) {\\n    markRetryLaneImpl(fiber, retryLane);\\n    var alternate = fiber.alternate;\\n\\n    if (alternate) {\\n      markRetryLaneImpl(alternate, retryLane);\\n    }\\n  }\\n  function attemptContinuousHydration$1(fiber) {\\n    if (fiber.tag !== SuspenseComponent) {\\n      // We ignore HostRoots here because we can't increase\\n      // their priority and they should not suspend on I/O,\\n      // since you have to wrap anything that might suspend in\\n      // Suspense.\\n      return;\\n    }\\n\\n    var lane = SelectiveHydrationLane;\\n    var root = enqueueConcurrentRenderForLane(fiber, lane);\\n\\n    if (root !== null) {\\n      var eventTime = requestEventTime();\\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\\n    }\\n\\n    markRetryLaneIfNotHydrated(fiber, lane);\\n  }\\n  function attemptHydrationAtCurrentPriority$1(fiber) {\\n    if (fiber.tag !== SuspenseComponent) {\\n      // We ignore HostRoots here because we can't increase\\n      // their priority other than synchronously flush it.\\n      return;\\n    }\\n\\n    var lane = requestUpdateLane(fiber);\\n    var root = enqueueConcurrentRenderForLane(fiber, lane);\\n\\n    if (root !== null) {\\n      var eventTime = requestEventTime();\\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\\n    }\\n\\n    markRetryLaneIfNotHydrated(fiber, lane);\\n  }\\n  function findHostInstanceWithNoPortals(fiber) {\\n    var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\\n\\n    if (hostFiber === null) {\\n      return null;\\n    }\\n\\n    return hostFiber.stateNode;\\n  }\\n\\n  var shouldErrorImpl = function (fiber) {\\n    return null;\\n  };\\n\\n  function shouldError(fiber) {\\n    return shouldErrorImpl(fiber);\\n  }\\n\\n  var shouldSuspendImpl = function (fiber) {\\n    return false;\\n  };\\n\\n  function shouldSuspend(fiber) {\\n    return shouldSuspendImpl(fiber);\\n  }\\n  var overrideHookState = null;\\n  var overrideHookStateDeletePath = null;\\n  var overrideHookStateRenamePath = null;\\n  var overrideProps = null;\\n  var overridePropsDeletePath = null;\\n  var overridePropsRenamePath = null;\\n  var scheduleUpdate = null;\\n  var setErrorHandler = null;\\n  var setSuspenseHandler = null;\\n\\n  {\\n    var copyWithDeleteImpl = function (obj, path, index) {\\n      var key = path[index];\\n      var updated = isArray(obj) ? obj.slice() : assign({}, obj);\\n\\n      if (index + 1 === path.length) {\\n        if (isArray(updated)) {\\n          updated.splice(key, 1);\\n        } else {\\n          delete updated[key];\\n        }\\n\\n        return updated;\\n      } // $FlowFixMe number or string is fine here\\n\\n\\n      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\\n      return updated;\\n    };\\n\\n    var copyWithDelete = function (obj, path) {\\n      return copyWithDeleteImpl(obj, path, 0);\\n    };\\n\\n    var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\\n      var oldKey = oldPath[index];\\n      var updated = isArray(obj) ? obj.slice() : assign({}, obj);\\n\\n      if (index + 1 === oldPath.length) {\\n        var newKey = newPath[index]; // $FlowFixMe number or string is fine here\\n\\n        updated[newKey] = updated[oldKey];\\n\\n        if (isArray(updated)) {\\n          updated.splice(oldKey, 1);\\n        } else {\\n          delete updated[oldKey];\\n        }\\n      } else {\\n        // $FlowFixMe number or string is fine here\\n        updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\\n        obj[oldKey], oldPath, newPath, index + 1);\\n      }\\n\\n      return updated;\\n    };\\n\\n    var copyWithRename = function (obj, oldPath, newPath) {\\n      if (oldPath.length !== newPath.length) {\\n        warn('copyWithRename() expects paths of the same length');\\n\\n        return;\\n      } else {\\n        for (var i = 0; i < newPath.length - 1; i++) {\\n          if (oldPath[i] !== newPath[i]) {\\n            warn('copyWithRename() expects paths to be the same except for the deepest key');\\n\\n            return;\\n          }\\n        }\\n      }\\n\\n      return copyWithRenameImpl(obj, oldPath, newPath, 0);\\n    };\\n\\n    var copyWithSetImpl = function (obj, path, index, value) {\\n      if (index >= path.length) {\\n        return value;\\n      }\\n\\n      var key = path[index];\\n      var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\\n\\n      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\\n      return updated;\\n    };\\n\\n    var copyWithSet = function (obj, path, value) {\\n      return copyWithSetImpl(obj, path, 0, value);\\n    };\\n\\n    var findHook = function (fiber, id) {\\n      // For now, the \\\"id\\\" of stateful hooks is just the stateful hook index.\\n      // This may change in the future with e.g. nested hooks.\\n      var currentHook = fiber.memoizedState;\\n\\n      while (currentHook !== null && id > 0) {\\n        currentHook = currentHook.next;\\n        id--;\\n      }\\n\\n      return currentHook;\\n    }; // Support DevTools editable values for useState and useReducer.\\n\\n\\n    overrideHookState = function (fiber, id, path, value) {\\n      var hook = findHook(fiber, id);\\n\\n      if (hook !== null) {\\n        var newState = copyWithSet(hook.memoizedState, path, value);\\n        hook.memoizedState = newState;\\n        hook.baseState = newState; // We aren't actually adding an update to the queue,\\n        // because there is no update we can add for useReducer hooks that won't trigger an error.\\n        // (There's no appropriate action type for DevTools overrides.)\\n        // As a result though, React will see the scheduled update as a noop and bailout.\\n        // Shallow cloning props works as a workaround for now to bypass the bailout check.\\n\\n        fiber.memoizedProps = assign({}, fiber.memoizedProps);\\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n        if (root !== null) {\\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n        }\\n      }\\n    };\\n\\n    overrideHookStateDeletePath = function (fiber, id, path) {\\n      var hook = findHook(fiber, id);\\n\\n      if (hook !== null) {\\n        var newState = copyWithDelete(hook.memoizedState, path);\\n        hook.memoizedState = newState;\\n        hook.baseState = newState; // We aren't actually adding an update to the queue,\\n        // because there is no update we can add for useReducer hooks that won't trigger an error.\\n        // (There's no appropriate action type for DevTools overrides.)\\n        // As a result though, React will see the scheduled update as a noop and bailout.\\n        // Shallow cloning props works as a workaround for now to bypass the bailout check.\\n\\n        fiber.memoizedProps = assign({}, fiber.memoizedProps);\\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n        if (root !== null) {\\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n        }\\n      }\\n    };\\n\\n    overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\\n      var hook = findHook(fiber, id);\\n\\n      if (hook !== null) {\\n        var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\\n        hook.memoizedState = newState;\\n        hook.baseState = newState; // We aren't actually adding an update to the queue,\\n        // because there is no update we can add for useReducer hooks that won't trigger an error.\\n        // (There's no appropriate action type for DevTools overrides.)\\n        // As a result though, React will see the scheduled update as a noop and bailout.\\n        // Shallow cloning props works as a workaround for now to bypass the bailout check.\\n\\n        fiber.memoizedProps = assign({}, fiber.memoizedProps);\\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n        if (root !== null) {\\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n        }\\n      }\\n    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\\n\\n\\n    overrideProps = function (fiber, path, value) {\\n      fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\\n\\n      if (fiber.alternate) {\\n        fiber.alternate.pendingProps = fiber.pendingProps;\\n      }\\n\\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n      if (root !== null) {\\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n      }\\n    };\\n\\n    overridePropsDeletePath = function (fiber, path) {\\n      fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\\n\\n      if (fiber.alternate) {\\n        fiber.alternate.pendingProps = fiber.pendingProps;\\n      }\\n\\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n      if (root !== null) {\\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n      }\\n    };\\n\\n    overridePropsRenamePath = function (fiber, oldPath, newPath) {\\n      fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\\n\\n      if (fiber.alternate) {\\n        fiber.alternate.pendingProps = fiber.pendingProps;\\n      }\\n\\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n      if (root !== null) {\\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n      }\\n    };\\n\\n    scheduleUpdate = function (fiber) {\\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\\n\\n      if (root !== null) {\\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\\n      }\\n    };\\n\\n    setErrorHandler = function (newShouldErrorImpl) {\\n      shouldErrorImpl = newShouldErrorImpl;\\n    };\\n\\n    setSuspenseHandler = function (newShouldSuspendImpl) {\\n      shouldSuspendImpl = newShouldSuspendImpl;\\n    };\\n  }\\n\\n  function findHostInstanceByFiber(fiber) {\\n    var hostFiber = findCurrentHostFiber(fiber);\\n\\n    if (hostFiber === null) {\\n      return null;\\n    }\\n\\n    return hostFiber.stateNode;\\n  }\\n\\n  function emptyFindFiberByHostInstance(instance) {\\n    return null;\\n  }\\n\\n  function getCurrentFiberForDevTools() {\\n    return current;\\n  }\\n\\n  function injectIntoDevTools(devToolsConfig) {\\n    var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\\n    return injectInternals({\\n      bundleType: devToolsConfig.bundleType,\\n      version: devToolsConfig.version,\\n      rendererPackageName: devToolsConfig.rendererPackageName,\\n      rendererConfig: devToolsConfig.rendererConfig,\\n      overrideHookState: overrideHookState,\\n      overrideHookStateDeletePath: overrideHookStateDeletePath,\\n      overrideHookStateRenamePath: overrideHookStateRenamePath,\\n      overrideProps: overrideProps,\\n      overridePropsDeletePath: overridePropsDeletePath,\\n      overridePropsRenamePath: overridePropsRenamePath,\\n      setErrorHandler: setErrorHandler,\\n      setSuspenseHandler: setSuspenseHandler,\\n      scheduleUpdate: scheduleUpdate,\\n      currentDispatcherRef: ReactCurrentDispatcher,\\n      findHostInstanceByFiber: findHostInstanceByFiber,\\n      findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\\n      // React Refresh\\n      findHostInstancesForRefresh:  findHostInstancesForRefresh ,\\n      scheduleRefresh:  scheduleRefresh ,\\n      scheduleRoot:  scheduleRoot ,\\n      setRefreshHandler:  setRefreshHandler ,\\n      // Enables DevTools to append owner stacks to error messages in DEV mode.\\n      getCurrentFiber:  getCurrentFiberForDevTools ,\\n      // Enables DevTools to detect reconciler version rather than renderer version\\n      // which may not match for third party renderers.\\n      reconcilerVersion: ReactVersion\\n    });\\n  }\\n\\n  /* global reportError */\\n\\n  var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,\\n  // emulating an uncaught JavaScript error.\\n  reportError : function (error) {\\n    // In older browsers and test environments, fallback to console.error.\\n    // eslint-disable-next-line react-internal/no-production-logging\\n    console['error'](error);\\n  };\\n\\n  function ReactDOMRoot(internalRoot) {\\n    this._internalRoot = internalRoot;\\n  }\\n\\n  ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {\\n    var root = this._internalRoot;\\n\\n    if (root === null) {\\n      throw new Error('Cannot update an unmounted root.');\\n    }\\n\\n    {\\n      if (typeof arguments[1] === 'function') {\\n        error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\\n      } else if (isValidContainer(arguments[1])) {\\n        error('You passed a container to the second argument of root.render(...). ' + \\\"You don't need to pass it again since you already passed it to create the root.\\\");\\n      } else if (typeof arguments[1] !== 'undefined') {\\n        error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');\\n      }\\n\\n      var container = root.containerInfo;\\n\\n      if (container.nodeType !== COMMENT_NODE) {\\n        var hostInstance = findHostInstanceWithNoPortals(root.current);\\n\\n        if (hostInstance) {\\n          if (hostInstance.parentNode !== container) {\\n            error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + \\\"root.unmount() to empty a root's container.\\\");\\n          }\\n        }\\n      }\\n    }\\n\\n    updateContainer(children, root, null, null);\\n  };\\n\\n  ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {\\n    {\\n      if (typeof arguments[0] === 'function') {\\n        error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');\\n      }\\n    }\\n\\n    var root = this._internalRoot;\\n\\n    if (root !== null) {\\n      this._internalRoot = null;\\n      var container = root.containerInfo;\\n\\n      {\\n        if (isAlreadyRendering()) {\\n          error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');\\n        }\\n      }\\n\\n      flushSync(function () {\\n        updateContainer(null, root, null, null);\\n      });\\n      unmarkContainerAsRoot(container);\\n    }\\n  };\\n\\n  function createRoot(container, options) {\\n    if (!isValidContainer(container)) {\\n      throw new Error('createRoot(...): Target container is not a DOM element.');\\n    }\\n\\n    warnIfReactDOMContainerInDEV(container);\\n    var isStrictMode = false;\\n    var concurrentUpdatesByDefaultOverride = false;\\n    var identifierPrefix = '';\\n    var onRecoverableError = defaultOnRecoverableError;\\n    var transitionCallbacks = null;\\n\\n    if (options !== null && options !== undefined) {\\n      {\\n        if (options.hydrate) {\\n          warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');\\n        } else {\\n          if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {\\n            error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\\\\n\\\\n' + '  let root = createRoot(domContainer);\\\\n' + '  root.render(<App />);');\\n          }\\n        }\\n      }\\n\\n      if (options.unstable_strictMode === true) {\\n        isStrictMode = true;\\n      }\\n\\n      if (options.identifierPrefix !== undefined) {\\n        identifierPrefix = options.identifierPrefix;\\n      }\\n\\n      if (options.onRecoverableError !== undefined) {\\n        onRecoverableError = options.onRecoverableError;\\n      }\\n\\n      if (options.transitionCallbacks !== undefined) {\\n        transitionCallbacks = options.transitionCallbacks;\\n      }\\n    }\\n\\n    var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\\n    markContainerAsRoot(root.current, container);\\n    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\\n    listenToAllSupportedEvents(rootContainerElement);\\n    return new ReactDOMRoot(root);\\n  }\\n\\n  function ReactDOMHydrationRoot(internalRoot) {\\n    this._internalRoot = internalRoot;\\n  }\\n\\n  function scheduleHydration(target) {\\n    if (target) {\\n      queueExplicitHydrationTarget(target);\\n    }\\n  }\\n\\n  ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;\\n  function hydrateRoot(container, initialChildren, options) {\\n    if (!isValidContainer(container)) {\\n      throw new Error('hydrateRoot(...): Target container is not a DOM element.');\\n    }\\n\\n    warnIfReactDOMContainerInDEV(container);\\n\\n    {\\n      if (initialChildren === undefined) {\\n        error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');\\n      }\\n    } // For now we reuse the whole bag of options since they contain\\n    // the hydration callbacks.\\n\\n\\n    var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option\\n\\n    var mutableSources = options != null && options.hydratedSources || null;\\n    var isStrictMode = false;\\n    var concurrentUpdatesByDefaultOverride = false;\\n    var identifierPrefix = '';\\n    var onRecoverableError = defaultOnRecoverableError;\\n\\n    if (options !== null && options !== undefined) {\\n      if (options.unstable_strictMode === true) {\\n        isStrictMode = true;\\n      }\\n\\n      if (options.identifierPrefix !== undefined) {\\n        identifierPrefix = options.identifierPrefix;\\n      }\\n\\n      if (options.onRecoverableError !== undefined) {\\n        onRecoverableError = options.onRecoverableError;\\n      }\\n    }\\n\\n    var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\\n    markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.\\n\\n    listenToAllSupportedEvents(container);\\n\\n    if (mutableSources) {\\n      for (var i = 0; i < mutableSources.length; i++) {\\n        var mutableSource = mutableSources[i];\\n        registerMutableSourceForHydration(root, mutableSource);\\n      }\\n    }\\n\\n    return new ReactDOMHydrationRoot(root);\\n  }\\n  function isValidContainer(node) {\\n    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));\\n  } // TODO: Remove this function which also includes comment nodes.\\n  // We only use it in places that are currently more relaxed.\\n\\n  function isValidContainerLegacy(node) {\\n    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));\\n  }\\n\\n  function warnIfReactDOMContainerInDEV(container) {\\n    {\\n      if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {\\n        error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');\\n      }\\n\\n      if (isContainerMarkedAsRoot(container)) {\\n        if (container._reactRootContainer) {\\n          error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');\\n        } else {\\n          error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');\\n        }\\n      }\\n    }\\n  }\\n\\n  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;\\n  var topLevelUpdateWarnings;\\n\\n  {\\n    topLevelUpdateWarnings = function (container) {\\n      if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {\\n        var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);\\n\\n        if (hostInstance) {\\n          if (hostInstance.parentNode !== container) {\\n            error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');\\n          }\\n        }\\n      }\\n\\n      var isRootRenderedBySomeReact = !!container._reactRootContainer;\\n      var rootEl = getReactRootElementInContainer(container);\\n      var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));\\n\\n      if (hasNonRootReactChild && !isRootRenderedBySomeReact) {\\n        error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');\\n      }\\n\\n      if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {\\n        error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');\\n      }\\n    };\\n  }\\n\\n  function getReactRootElementInContainer(container) {\\n    if (!container) {\\n      return null;\\n    }\\n\\n    if (container.nodeType === DOCUMENT_NODE) {\\n      return container.documentElement;\\n    } else {\\n      return container.firstChild;\\n    }\\n  }\\n\\n  function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the\\n    // legacy API.\\n  }\\n\\n  function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {\\n    if (isHydrationContainer) {\\n      if (typeof callback === 'function') {\\n        var originalCallback = callback;\\n\\n        callback = function () {\\n          var instance = getPublicRootInstance(root);\\n          originalCallback.call(instance);\\n        };\\n      }\\n\\n      var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks\\n      false, // isStrictMode\\n      false, // concurrentUpdatesByDefaultOverride,\\n      '', // identifierPrefix\\n      noopOnRecoverableError);\\n      container._reactRootContainer = root;\\n      markContainerAsRoot(root.current, container);\\n      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\\n      listenToAllSupportedEvents(rootContainerElement);\\n      flushSync();\\n      return root;\\n    } else {\\n      // First clear any existing content.\\n      var rootSibling;\\n\\n      while (rootSibling = container.lastChild) {\\n        container.removeChild(rootSibling);\\n      }\\n\\n      if (typeof callback === 'function') {\\n        var _originalCallback = callback;\\n\\n        callback = function () {\\n          var instance = getPublicRootInstance(_root);\\n\\n          _originalCallback.call(instance);\\n        };\\n      }\\n\\n      var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks\\n      false, // isStrictMode\\n      false, // concurrentUpdatesByDefaultOverride,\\n      '', // identifierPrefix\\n      noopOnRecoverableError);\\n\\n      container._reactRootContainer = _root;\\n      markContainerAsRoot(_root.current, container);\\n\\n      var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;\\n\\n      listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.\\n\\n      flushSync(function () {\\n        updateContainer(initialChildren, _root, parentComponent, callback);\\n      });\\n      return _root;\\n    }\\n  }\\n\\n  function warnOnInvalidCallback$1(callback, callerName) {\\n    {\\n      if (callback !== null && typeof callback !== 'function') {\\n        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\\n      }\\n    }\\n  }\\n\\n  function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {\\n    {\\n      topLevelUpdateWarnings(container);\\n      warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');\\n    }\\n\\n    var maybeRoot = container._reactRootContainer;\\n    var root;\\n\\n    if (!maybeRoot) {\\n      // Initial mount\\n      root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);\\n    } else {\\n      root = maybeRoot;\\n\\n      if (typeof callback === 'function') {\\n        var originalCallback = callback;\\n\\n        callback = function () {\\n          var instance = getPublicRootInstance(root);\\n          originalCallback.call(instance);\\n        };\\n      } // Update\\n\\n\\n      updateContainer(children, root, parentComponent, callback);\\n    }\\n\\n    return getPublicRootInstance(root);\\n  }\\n\\n  function findDOMNode(componentOrElement) {\\n    {\\n      var owner = ReactCurrentOwner$3.current;\\n\\n      if (owner !== null && owner.stateNode !== null) {\\n        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;\\n\\n        if (!warnedAboutRefsInRender) {\\n          error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');\\n        }\\n\\n        owner.stateNode._warnedAboutRefsInRender = true;\\n      }\\n    }\\n\\n    if (componentOrElement == null) {\\n      return null;\\n    }\\n\\n    if (componentOrElement.nodeType === ELEMENT_NODE) {\\n      return componentOrElement;\\n    }\\n\\n    {\\n      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');\\n    }\\n  }\\n  function hydrate(element, container, callback) {\\n    {\\n      error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \\\"if it's running React 17. Learn \\\" + 'more: https://reactjs.org/link/switch-to-createroot');\\n    }\\n\\n    if (!isValidContainerLegacy(container)) {\\n      throw new Error('Target container is not a DOM element.');\\n    }\\n\\n    {\\n      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\\n\\n      if (isModernRoot) {\\n        error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');\\n      }\\n    } // TODO: throw or warn if we couldn't hydrate?\\n\\n\\n    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);\\n  }\\n  function render(element, container, callback) {\\n    {\\n      error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + \\\"if it's running React 17. Learn \\\" + 'more: https://reactjs.org/link/switch-to-createroot');\\n    }\\n\\n    if (!isValidContainerLegacy(container)) {\\n      throw new Error('Target container is not a DOM element.');\\n    }\\n\\n    {\\n      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\\n\\n      if (isModernRoot) {\\n        error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');\\n      }\\n    }\\n\\n    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);\\n  }\\n  function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\\n    {\\n      error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + \\\"the createRoot API, your app will behave as if it's running React \\\" + '17. Learn more: https://reactjs.org/link/switch-to-createroot');\\n    }\\n\\n    if (!isValidContainerLegacy(containerNode)) {\\n      throw new Error('Target container is not a DOM element.');\\n    }\\n\\n    if (parentComponent == null || !has(parentComponent)) {\\n      throw new Error('parentComponent must be a valid React Component');\\n    }\\n\\n    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);\\n  }\\n  function unmountComponentAtNode(container) {\\n    if (!isValidContainerLegacy(container)) {\\n      throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');\\n    }\\n\\n    {\\n      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;\\n\\n      if (isModernRoot) {\\n        error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');\\n      }\\n    }\\n\\n    if (container._reactRootContainer) {\\n      {\\n        var rootEl = getReactRootElementInContainer(container);\\n        var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);\\n\\n        if (renderedByDifferentReact) {\\n          error(\\\"unmountComponentAtNode(): The node you're attempting to unmount \\\" + 'was rendered by another copy of React.');\\n        }\\n      } // Unmount should not be batched.\\n\\n\\n      flushSync(function () {\\n        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {\\n          // $FlowFixMe This should probably use `delete container._reactRootContainer`\\n          container._reactRootContainer = null;\\n          unmarkContainerAsRoot(container);\\n        });\\n      }); // If you call unmountComponentAtNode twice in quick succession, you'll\\n      // get `true` twice. That's probably fine?\\n\\n      return true;\\n    } else {\\n      {\\n        var _rootEl = getReactRootElementInContainer(container);\\n\\n        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.\\n\\n        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;\\n\\n        if (hasNonRootReactChild) {\\n          error(\\\"unmountComponentAtNode(): The node you're attempting to unmount \\\" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');\\n        }\\n      }\\n\\n      return false;\\n    }\\n  }\\n\\n  setAttemptSynchronousHydration(attemptSynchronousHydration$1);\\n  setAttemptContinuousHydration(attemptContinuousHydration$1);\\n  setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);\\n  setGetCurrentUpdatePriority(getCurrentUpdatePriority);\\n  setAttemptHydrationAtPriority(runWithPriority);\\n\\n  {\\n    if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype\\n    Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype\\n    Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {\\n      error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');\\n    }\\n  }\\n\\n  setRestoreImplementation(restoreControlledState$3);\\n  setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);\\n\\n  function createPortal$1(children, container) {\\n    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n    if (!isValidContainer(container)) {\\n      throw new Error('Target container is not a DOM element.');\\n    } // TODO: pass ReactDOM portal implementation as third argument\\n    // $FlowFixMe The Flow type is opaque but there's no way to actually create it.\\n\\n\\n    return createPortal(children, container, null, key);\\n  }\\n\\n  function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\\n    return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);\\n  }\\n\\n  var Internals = {\\n    usingClientEntryPoint: false,\\n    // Keep in sync with ReactTestUtils.js.\\n    // This is an array for better minification.\\n    Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]\\n  };\\n\\n  function createRoot$1(container, options) {\\n    {\\n      if (!Internals.usingClientEntryPoint && !true) {\\n        error('You are importing createRoot from \\\"react-dom\\\" which is not supported. ' + 'You should instead import it from \\\"react-dom/client\\\".');\\n      }\\n    }\\n\\n    return createRoot(container, options);\\n  }\\n\\n  function hydrateRoot$1(container, initialChildren, options) {\\n    {\\n      if (!Internals.usingClientEntryPoint && !true) {\\n        error('You are importing hydrateRoot from \\\"react-dom\\\" which is not supported. ' + 'You should instead import it from \\\"react-dom/client\\\".');\\n      }\\n    }\\n\\n    return hydrateRoot(container, initialChildren, options);\\n  } // Overload the definition to the two valid signatures.\\n  // Warning, this opts-out of checking the function body.\\n\\n\\n  // eslint-disable-next-line no-redeclare\\n  function flushSync$1(fn) {\\n    {\\n      if (isAlreadyRendering()) {\\n        error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');\\n      }\\n    }\\n\\n    return flushSync(fn);\\n  }\\n  var foundDevTools = injectIntoDevTools({\\n    findFiberByHostInstance: getClosestInstanceFromNode,\\n    bundleType:  1 ,\\n    version: ReactVersion,\\n    rendererPackageName: 'react-dom'\\n  });\\n\\n  {\\n    if (!foundDevTools && canUseDOM && window.top === window.self) {\\n      // If we're in Chrome or Firefox, provide a download link if not installed.\\n      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\\n        var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.\\n\\n        if (/^(https?|file):$/.test(protocol)) {\\n          // eslint-disable-next-line react-internal/no-production-logging\\n          console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\\\\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');\\n        }\\n      }\\n    }\\n  }\\n\\n  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\\n  exports.createPortal = createPortal$1;\\n  exports.createRoot = createRoot$1;\\n  exports.findDOMNode = findDOMNode;\\n  exports.flushSync = flushSync$1;\\n  exports.hydrate = hydrate;\\n  exports.hydrateRoot = hydrateRoot$1;\\n  exports.render = render;\\n  exports.unmountComponentAtNode = unmountComponentAtNode;\\n  exports.unstable_batchedUpdates = batchedUpdates$1;\\n  exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;\\n  exports.version = ReactVersion;\\n\\n})));\\n\"","/**\nThe data structure for documents. @nonabstract\n*/\nclass Text {\n    /**\n    Get the line description around the given position.\n    */\n    lineAt(pos) {\n        if (pos < 0 || pos > this.length)\n            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);\n        return this.lineInner(pos, false, 1, 0);\n    }\n    /**\n    Get the description for the given (1-based) line number.\n    */\n    line(n) {\n        if (n < 1 || n > this.lines)\n            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);\n        return this.lineInner(n, true, 1, 0);\n    }\n    /**\n    Replace a range of the text with the given content.\n    */\n    replace(from, to, text) {\n        [from, to] = clip(this, from, to);\n        let parts = [];\n        this.decompose(0, from, parts, 2 /* Open.To */);\n        if (text.length)\n            text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);\n        this.decompose(to, this.length, parts, 1 /* Open.From */);\n        return TextNode.from(parts, this.length - (to - from) + text.length);\n    }\n    /**\n    Append another document to this one.\n    */\n    append(other) {\n        return this.replace(this.length, this.length, other);\n    }\n    /**\n    Retrieve the text between the given points.\n    */\n    slice(from, to = this.length) {\n        [from, to] = clip(this, from, to);\n        let parts = [];\n        this.decompose(from, to, parts, 0);\n        return TextNode.from(parts, to - from);\n    }\n    /**\n    Test whether this text is equal to another instance.\n    */\n    eq(other) {\n        if (other == this)\n            return true;\n        if (other.length != this.length || other.lines != this.lines)\n            return false;\n        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);\n        let a = new RawTextCursor(this), b = new RawTextCursor(other);\n        for (let skip = start, pos = start;;) {\n            a.next(skip);\n            b.next(skip);\n            skip = 0;\n            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)\n                return false;\n            pos += a.value.length;\n            if (a.done || pos >= end)\n                return true;\n        }\n    }\n    /**\n    Iterate over the text. When `dir` is `-1`, iteration happens\n    from end to start. This will return lines and the breaks between\n    them as separate strings.\n    */\n    iter(dir = 1) { return new RawTextCursor(this, dir); }\n    /**\n    Iterate over a range of the text. When `from` > `to`, the\n    iterator will run in reverse.\n    */\n    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }\n    /**\n    Return a cursor that iterates over the given range of lines,\n    _without_ returning the line breaks between, and yielding empty\n    strings for empty lines.\n    \n    When `from` and `to` are given, they should be 1-based line numbers.\n    */\n    iterLines(from, to) {\n        let inner;\n        if (from == null) {\n            inner = this.iter();\n        }\n        else {\n            if (to == null)\n                to = this.lines + 1;\n            let start = this.line(from).from;\n            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));\n        }\n        return new LineCursor(inner);\n    }\n    /**\n    Return the document as a string, using newline characters to\n    separate lines.\n    */\n    toString() { return this.sliceString(0); }\n    /**\n    Convert the document to an array of lines (which can be\n    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).\n    */\n    toJSON() {\n        let lines = [];\n        this.flatten(lines);\n        return lines;\n    }\n    /**\n    @internal\n    */\n    constructor() { }\n    /**\n    Create a `Text` instance for the given array of lines.\n    */\n    static of(text) {\n        if (text.length == 0)\n            throw new RangeError(\"A document must have at least one line\");\n        if (text.length == 1 && !text[0])\n            return Text.empty;\n        return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));\n    }\n}\n// Leaves store an array of line strings. There are always line breaks\n// between these strings. Leaves are limited in size and have to be\n// contained in TextNode instances for bigger documents.\nclass TextLeaf extends Text {\n    constructor(text, length = textLength(text)) {\n        super();\n        this.text = text;\n        this.length = length;\n    }\n    get lines() { return this.text.length; }\n    get children() { return null; }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let string = this.text[i], end = offset + string.length;\n            if ((isLine ? line : end) >= target)\n                return new Line(offset, end, line, string);\n            offset = end + 1;\n            line++;\n        }\n    }\n    decompose(from, to, target, open) {\n        let text = from <= 0 && to >= this.length ? this\n            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));\n        if (open & 1 /* Open.From */) {\n            let prev = target.pop();\n            let joined = appendText(text.text, prev.text.slice(), 0, text.length);\n            if (joined.length <= 32 /* Tree.Branch */) {\n                target.push(new TextLeaf(joined, prev.length + text.length));\n            }\n            else {\n                let mid = joined.length >> 1;\n                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));\n            }\n        }\n        else {\n            target.push(text);\n        }\n    }\n    replace(from, to, text) {\n        if (!(text instanceof TextLeaf))\n            return super.replace(from, to, text);\n        [from, to] = clip(this, from, to);\n        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);\n        let newLen = this.length + text.length - (to - from);\n        if (lines.length <= 32 /* Tree.Branch */)\n            return new TextLeaf(lines, newLen);\n        return TextNode.from(TextLeaf.split(lines, []), newLen);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        [from, to] = clip(this, from, to);\n        let result = \"\";\n        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {\n            let line = this.text[i], end = pos + line.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += line.slice(Math.max(0, from - pos), to - pos);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let line of this.text)\n            target.push(line);\n    }\n    scanIdentical() { return 0; }\n    static split(text, target) {\n        let part = [], len = -1;\n        for (let line of text) {\n            part.push(line);\n            len += line.length + 1;\n            if (part.length == 32 /* Tree.Branch */) {\n                target.push(new TextLeaf(part, len));\n                part = [];\n                len = -1;\n            }\n        }\n        if (len > -1)\n            target.push(new TextLeaf(part, len));\n        return target;\n    }\n}\n// Nodes provide the tree structure of the `Text` type. They store a\n// number of other nodes or leaves, taking care to balance themselves\n// on changes. There are implied line breaks _between_ the children of\n// a node (but not before the first or after the last child).\nclass TextNode extends Text {\n    constructor(children, length) {\n        super();\n        this.children = children;\n        this.length = length;\n        this.lines = 0;\n        for (let child of children)\n            this.lines += child.lines;\n    }\n    lineInner(target, isLine, line, offset) {\n        for (let i = 0;; i++) {\n            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;\n            if ((isLine ? endLine : end) >= target)\n                return child.lineInner(target, isLine, line, offset);\n            offset = end + 1;\n            line = endLine + 1;\n        }\n    }\n    decompose(from, to, target, open) {\n        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (from <= end && to >= pos) {\n                let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));\n                if (pos >= from && end <= to && !childOpen)\n                    target.push(child);\n                else\n                    child.decompose(from - pos, to - pos, target, childOpen);\n            }\n            pos = end + 1;\n        }\n    }\n    replace(from, to, text) {\n        [from, to] = clip(this, from, to);\n        if (text.lines < this.lines)\n            for (let i = 0, pos = 0; i < this.children.length; i++) {\n                let child = this.children[i], end = pos + child.length;\n                // Fast path: if the change only affects one child and the\n                // child's size remains in the acceptable range, only update\n                // that child\n                if (from >= pos && to <= end) {\n                    let updated = child.replace(from - pos, to - pos, text);\n                    let totalLines = this.lines - child.lines + updated.lines;\n                    if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&\n                        updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {\n                        let copy = this.children.slice();\n                        copy[i] = updated;\n                        return new TextNode(copy, this.length - (to - from) + text.length);\n                    }\n                    return super.replace(pos, end, updated);\n                }\n                pos = end + 1;\n            }\n        return super.replace(from, to, text);\n    }\n    sliceString(from, to = this.length, lineSep = \"\\n\") {\n        [from, to] = clip(this, from, to);\n        let result = \"\";\n        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (pos > from && i)\n                result += lineSep;\n            if (from < end && to > pos)\n                result += child.sliceString(from - pos, to - pos, lineSep);\n            pos = end + 1;\n        }\n        return result;\n    }\n    flatten(target) {\n        for (let child of this.children)\n            child.flatten(target);\n    }\n    scanIdentical(other, dir) {\n        if (!(other instanceof TextNode))\n            return 0;\n        let length = 0;\n        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]\n            : [this.children.length - 1, other.children.length - 1, -1, -1];\n        for (;; iA += dir, iB += dir) {\n            if (iA == eA || iB == eB)\n                return length;\n            let chA = this.children[iA], chB = other.children[iB];\n            if (chA != chB)\n                return length + chA.scanIdentical(chB, dir);\n            length += chA.length + 1;\n        }\n    }\n    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {\n        let lines = 0;\n        for (let ch of children)\n            lines += ch.lines;\n        if (lines < 32 /* Tree.Branch */) {\n            let flat = [];\n            for (let ch of children)\n                ch.flatten(flat);\n            return new TextLeaf(flat, length);\n        }\n        let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;\n        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];\n        function add(child) {\n            let last;\n            if (child.lines > maxChunk && child instanceof TextNode) {\n                for (let node of child.children)\n                    add(node);\n            }\n            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {\n                flush();\n                chunked.push(child);\n            }\n            else if (child instanceof TextLeaf && currentLines &&\n                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&\n                child.lines + last.lines <= 32 /* Tree.Branch */) {\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);\n            }\n            else {\n                if (currentLines + child.lines > chunk)\n                    flush();\n                currentLines += child.lines;\n                currentLen += child.length + 1;\n                currentChunk.push(child);\n            }\n        }\n        function flush() {\n            if (currentLines == 0)\n                return;\n            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));\n            currentLen = -1;\n            currentLines = currentChunk.length = 0;\n        }\n        for (let child of children)\n            add(child);\n        flush();\n        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);\n    }\n}\nText.empty = /*@__PURE__*/new TextLeaf([\"\"], 0);\nfunction textLength(text) {\n    let length = -1;\n    for (let line of text)\n        length += line.length + 1;\n    return length;\n}\nfunction appendText(text, target, from = 0, to = 1e9) {\n    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {\n        let line = text[i], end = pos + line.length;\n        if (end >= from) {\n            if (end > to)\n                line = line.slice(0, to - pos);\n            if (pos < from)\n                line = line.slice(from - pos);\n            if (first) {\n                target[target.length - 1] += line;\n                first = false;\n            }\n            else\n                target.push(line);\n        }\n        pos = end + 1;\n    }\n    return target;\n}\nfunction sliceText(text, from, to) {\n    return appendText(text, [\"\"], from, to);\n}\nclass RawTextCursor {\n    constructor(text, dir = 1) {\n        this.dir = dir;\n        this.done = false;\n        this.lineBreak = false;\n        this.value = \"\";\n        this.nodes = [text];\n        this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];\n    }\n    nextInner(skip, dir) {\n        this.done = this.lineBreak = false;\n        for (;;) {\n            let last = this.nodes.length - 1;\n            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;\n            let size = top instanceof TextLeaf ? top.text.length : top.children.length;\n            if (offset == (dir > 0 ? size : 0)) {\n                if (last == 0) {\n                    this.done = true;\n                    this.value = \"\";\n                    return this;\n                }\n                if (dir > 0)\n                    this.offsets[last - 1]++;\n                this.nodes.pop();\n                this.offsets.pop();\n            }\n            else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {\n                this.offsets[last] += dir;\n                if (skip == 0) {\n                    this.lineBreak = true;\n                    this.value = \"\\n\";\n                    return this;\n                }\n                skip--;\n            }\n            else if (top instanceof TextLeaf) {\n                // Move to the next string\n                let next = top.text[offset + (dir < 0 ? -1 : 0)];\n                this.offsets[last] += dir;\n                if (next.length > Math.max(0, skip)) {\n                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);\n                    return this;\n                }\n                skip -= next.length;\n            }\n            else {\n                let next = top.children[offset + (dir < 0 ? -1 : 0)];\n                if (skip > next.length) {\n                    skip -= next.length;\n                    this.offsets[last] += dir;\n                }\n                else {\n                    if (dir < 0)\n                        this.offsets[last]--;\n                    this.nodes.push(next);\n                    this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);\n                }\n            }\n        }\n    }\n    next(skip = 0) {\n        if (skip < 0) {\n            this.nextInner(-skip, (-this.dir));\n            skip = this.value.length;\n        }\n        return this.nextInner(skip, this.dir);\n    }\n}\nclass PartialTextCursor {\n    constructor(text, start, end) {\n        this.value = \"\";\n        this.done = false;\n        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);\n        this.pos = start > end ? text.length : 0;\n        this.from = Math.min(start, end);\n        this.to = Math.max(start, end);\n    }\n    nextInner(skip, dir) {\n        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {\n            this.value = \"\";\n            this.done = true;\n            return this;\n        }\n        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);\n        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;\n        if (skip > limit)\n            skip = limit;\n        limit -= skip;\n        let { value } = this.cursor.next(skip);\n        this.pos += (value.length + skip) * dir;\n        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);\n        this.done = !this.value;\n        return this;\n    }\n    next(skip = 0) {\n        if (skip < 0)\n            skip = Math.max(skip, this.from - this.pos);\n        else if (skip > 0)\n            skip = Math.min(skip, this.to - this.pos);\n        return this.nextInner(skip, this.cursor.dir);\n    }\n    get lineBreak() { return this.cursor.lineBreak && this.value != \"\"; }\n}\nclass LineCursor {\n    constructor(inner) {\n        this.inner = inner;\n        this.afterBreak = true;\n        this.value = \"\";\n        this.done = false;\n    }\n    next(skip = 0) {\n        let { done, lineBreak, value } = this.inner.next(skip);\n        if (done && this.afterBreak) {\n            this.value = \"\";\n            this.afterBreak = false;\n        }\n        else if (done) {\n            this.done = true;\n            this.value = \"\";\n        }\n        else if (lineBreak) {\n            if (this.afterBreak) {\n                this.value = \"\";\n            }\n            else {\n                this.afterBreak = true;\n                this.next();\n            }\n        }\n        else {\n            this.value = value;\n            this.afterBreak = false;\n        }\n        return this;\n    }\n    get lineBreak() { return false; }\n}\nif (typeof Symbol != \"undefined\") {\n    Text.prototype[Symbol.iterator] = function () { return this.iter(); };\n    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =\n        LineCursor.prototype[Symbol.iterator] = function () { return this; };\n}\n/**\nThis type describes a line in the document. It is created\non-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).\n*/\nclass Line {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The position of the start of the line.\n    */\n    from, \n    /**\n    The position at the end of the line (_before_ the line break,\n    or at the end of document for the last line).\n    */\n    to, \n    /**\n    This line's line number (1-based).\n    */\n    number, \n    /**\n    The line's content.\n    */\n    text) {\n        this.from = from;\n        this.to = to;\n        this.number = number;\n        this.text = text;\n    }\n    /**\n    The length of the line (not including any line break after it).\n    */\n    get length() { return this.to - this.from; }\n}\nfunction clip(text, from, to) {\n    from = Math.max(0, Math.min(text.length, from));\n    return [from, Math.max(from, Math.min(text.length, to))];\n}\n\n// Compressed representation of the Grapheme_Cluster_Break=Extend\n// information from\n// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n// Each pair of elements represents a range, as an offet from the\n// previous range and a length. Numbers are in base-36, with the empty\n// string being a shorthand for 1.\nlet extend = /*@__PURE__*/\"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1);\n// Convert offsets into absolute values\nfor (let i = 1; i < extend.length; i++)\n    extend[i] += extend[i - 1];\nfunction isExtendingChar(code) {\n    for (let i = 1; i < extend.length; i += 2)\n        if (extend[i] > code)\n            return extend[i - 1] <= code;\n    return false;\n}\nfunction isRegionalIndicator(code) {\n    return code >= 0x1F1E6 && code <= 0x1F1FF;\n}\nconst ZWJ = 0x200d;\n/**\nReturns a next grapheme cluster break _after_ (not equal to)\n`pos`, if `forward` is true, or before otherwise. Returns `pos`\nitself if no further cluster break is available in the string.\nMoves across surrogate pairs, extending characters (when\n`includeExtending` is true), characters joined with zero-width\njoiners, and flag emoji.\n*/\nfunction findClusterBreak(str, pos, forward = true, includeExtending = true) {\n    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);\n}\nfunction nextClusterBreak(str, pos, includeExtending) {\n    if (pos == str.length)\n        return pos;\n    // If pos is in the middle of a surrogate pair, move to its start\n    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))\n        pos--;\n    let prev = codePointAt(str, pos);\n    pos += codePointSize(prev);\n    while (pos < str.length) {\n        let next = codePointAt(str, pos);\n        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\n            pos += codePointSize(next);\n            prev = next;\n        }\n        else if (isRegionalIndicator(next)) {\n            let countBefore = 0, i = pos - 2;\n            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\n                countBefore++;\n                i -= 2;\n            }\n            if (countBefore % 2 == 0)\n                break;\n            else\n                pos += 2;\n        }\n        else {\n            break;\n        }\n    }\n    return pos;\n}\nfunction prevClusterBreak(str, pos, includeExtending) {\n    while (pos > 0) {\n        let found = nextClusterBreak(str, pos - 2, includeExtending);\n        if (found < pos)\n            return found;\n        pos--;\n    }\n    return 0;\n}\nfunction surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }\nfunction surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }\n/**\nFind the code point at the given position in a string (like the\n[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\nstring method).\n*/\nfunction codePointAt(str, pos) {\n    let code0 = str.charCodeAt(pos);\n    if (!surrogateHigh(code0) || pos + 1 == str.length)\n        return code0;\n    let code1 = str.charCodeAt(pos + 1);\n    if (!surrogateLow(code1))\n        return code0;\n    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;\n}\n/**\nGiven a Unicode codepoint, return the JavaScript string that\nrespresents it (like\n[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).\n*/\nfunction fromCodePoint(code) {\n    if (code <= 0xffff)\n        return String.fromCharCode(code);\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);\n}\n/**\nThe amount of positions a character takes up a JavaScript string.\n*/\nfunction codePointSize(code) { return code < 0x10000 ? 1 : 2; }\n\nconst DefaultSplit = /\\r\\n?|\\n/;\n/**\nDistinguishes different ways in which positions can be mapped.\n*/\nvar MapMode = /*@__PURE__*/(function (MapMode) {\n    /**\n    Map a position to a valid new position, even when its context\n    was deleted.\n    */\n    MapMode[MapMode[\"Simple\"] = 0] = \"Simple\";\n    /**\n    Return null if deletion happens across the position.\n    */\n    MapMode[MapMode[\"TrackDel\"] = 1] = \"TrackDel\";\n    /**\n    Return null if the character _before_ the position is deleted.\n    */\n    MapMode[MapMode[\"TrackBefore\"] = 2] = \"TrackBefore\";\n    /**\n    Return null if the character _after_ the position is deleted.\n    */\n    MapMode[MapMode[\"TrackAfter\"] = 3] = \"TrackAfter\";\nreturn MapMode})(MapMode || (MapMode = {}));\n/**\nA change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)\nthat doesn't store the inserted text. As such, it can't be\napplied, but is cheaper to store and manipulate.\n*/\nclass ChangeDesc {\n    // Sections are encoded as pairs of integers. The first is the\n    // length in the current document, and the second is -1 for\n    // unaffected sections, and the length of the replacement content\n    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\n    // 0), and a replacement two positive numbers.\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    sections) {\n        this.sections = sections;\n    }\n    /**\n    The length of the document before the change.\n    */\n    get length() {\n        let result = 0;\n        for (let i = 0; i < this.sections.length; i += 2)\n            result += this.sections[i];\n        return result;\n    }\n    /**\n    The length of the document after the change.\n    */\n    get newLength() {\n        let result = 0;\n        for (let i = 0; i < this.sections.length; i += 2) {\n            let ins = this.sections[i + 1];\n            result += ins < 0 ? this.sections[i] : ins;\n        }\n        return result;\n    }\n    /**\n    False when there are actual changes in this set.\n    */\n    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }\n    /**\n    Iterate over the unchanged parts left by these changes. `posA`\n    provides the position of the range in the old document, `posB`\n    the new position in the changed document.\n    */\n    iterGaps(f) {\n        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0) {\n                f(posA, posB, len);\n                posB += len;\n            }\n            else {\n                posB += ins;\n            }\n            posA += len;\n        }\n    }\n    /**\n    Iterate over the ranges changed by these changes. (See\n    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\n    variant that also provides you with the inserted text.)\n    `fromA`/`toA` provides the extent of the change in the starting\n    document, `fromB`/`toB` the extent of the replacement in the\n    changed document.\n    \n    When `individual` is true, adjacent changes (which are kept\n    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\n    reported separately.\n    */\n    iterChangedRanges(f, individual = false) {\n        iterChanges(this, f, individual);\n    }\n    /**\n    Get a description of the inverted form of these changes.\n    */\n    get invertedDesc() {\n        let sections = [];\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0)\n                sections.push(len, ins);\n            else\n                sections.push(ins, len);\n        }\n        return new ChangeDesc(sections);\n    }\n    /**\n    Compute the combined effect of applying another set of changes\n    after this one. The length of the document after this set should\n    match the length before `other`.\n    */\n    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }\n    /**\n    Map this description, which should start with the same document\n    as `other`, over another set of changes, so that it can be\n    applied after it. When `before` is true, map as if the changes\n    in `other` happened before the ones in `this`.\n    */\n    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }\n    mapPos(pos, assoc = -1, mode = MapMode.Simple) {\n        let posA = 0, posB = 0;\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;\n            if (ins < 0) {\n                if (endA > pos)\n                    return posB + (pos - posA);\n                posB += len;\n            }\n            else {\n                if (mode != MapMode.Simple && endA >= pos &&\n                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||\n                        mode == MapMode.TrackBefore && posA < pos ||\n                        mode == MapMode.TrackAfter && endA > pos))\n                    return null;\n                if (endA > pos || endA == pos && assoc < 0 && !len)\n                    return pos == posA || assoc < 0 ? posB : posB + ins;\n                posB += ins;\n            }\n            posA = endA;\n        }\n        if (pos > posA)\n            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\n        return posB;\n    }\n    /**\n    Check whether these changes touch a given range. When one of the\n    changes entirely covers the range, the string `\"cover\"` is\n    returned.\n    */\n    touchesRange(from, to = from) {\n        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {\n            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;\n            if (ins >= 0 && pos <= to && end >= from)\n                return pos < from && end > to ? \"cover\" : true;\n            pos = end;\n        }\n        return false;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let result = \"\";\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\n        }\n        return result;\n    }\n    /**\n    Serialize this change desc to a JSON-representable value.\n    */\n    toJSON() { return this.sections; }\n    /**\n    Create a change desc from its JSON representation (as produced\n    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\n    */\n    static fromJSON(json) {\n        if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != \"number\"))\n            throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\n        return new ChangeDesc(json);\n    }\n    /**\n    @internal\n    */\n    static create(sections) { return new ChangeDesc(sections); }\n}\n/**\nA change set represents a group of modifications to a document. It\nstores the document length, and can only be applied to documents\nwith exactly that length.\n*/\nclass ChangeSet extends ChangeDesc {\n    constructor(sections, \n    /**\n    @internal\n    */\n    inserted) {\n        super(sections);\n        this.inserted = inserted;\n    }\n    /**\n    Apply the changes to a document, returning the modified\n    document.\n    */\n    apply(doc) {\n        if (this.length != doc.length)\n            throw new RangeError(\"Applying change set to a document with the wrong length\");\n        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);\n        return doc;\n    }\n    mapDesc(other, before = false) { return mapSet(this, other, before, true); }\n    /**\n    Given the document as it existed _before_ the changes, return a\n    change set that represents the inverse of this set, which could\n    be used to go from the document created by the changes back to\n    the document as it existed before the changes.\n    */\n    invert(doc) {\n        let sections = this.sections.slice(), inserted = [];\n        for (let i = 0, pos = 0; i < sections.length; i += 2) {\n            let len = sections[i], ins = sections[i + 1];\n            if (ins >= 0) {\n                sections[i] = ins;\n                sections[i + 1] = len;\n                let index = i >> 1;\n                while (inserted.length < index)\n                    inserted.push(Text.empty);\n                inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);\n            }\n            pos += len;\n        }\n        return new ChangeSet(sections, inserted);\n    }\n    /**\n    Combine two subsequent change sets into a single set. `other`\n    must start in the document produced by `this`. If `this` goes\n    `docA` → `docB` and `other` represents `docB` → `docC`, the\n    returned value will represent the change `docA` → `docC`.\n    */\n    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }\n    /**\n    Given another change set starting in the same document, maps this\n    change set over the other, producing a new change set that can be\n    applied to the document produced by applying `other`. When\n    `before` is `true`, order changes as if `this` comes before\n    `other`, otherwise (the default) treat `other` as coming first.\n    \n    Given two changes `A` and `B`, `A.compose(B.map(A))` and\n    `B.compose(A.map(B, true))` will produce the same document. This\n    provides a basic form of [operational\n    transformation](https://en.wikipedia.org/wiki/Operational_transformation),\n    and can be used for collaborative editing.\n    */\n    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }\n    /**\n    Iterate over the changed ranges in the document, calling `f` for\n    each, with the range in the original document (`fromA`-`toA`)\n    and the range that replaces it in the new document\n    (`fromB`-`toB`).\n    \n    When `individual` is true, adjacent changes are reported\n    separately.\n    */\n    iterChanges(f, individual = false) {\n        iterChanges(this, f, individual);\n    }\n    /**\n    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\n    set.\n    */\n    get desc() { return ChangeDesc.create(this.sections); }\n    /**\n    @internal\n    */\n    filter(ranges) {\n        let resultSections = [], resultInserted = [], filteredSections = [];\n        let iter = new SectionIter(this);\n        done: for (let i = 0, pos = 0;;) {\n            let next = i == ranges.length ? 1e9 : ranges[i++];\n            while (pos < next || pos == next && iter.len == 0) {\n                if (iter.done)\n                    break done;\n                let len = Math.min(iter.len, next - pos);\n                addSection(filteredSections, len, -1);\n                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\n                addSection(resultSections, len, ins);\n                if (ins > 0)\n                    addInsert(resultInserted, resultSections, iter.text);\n                iter.forward(len);\n                pos += len;\n            }\n            let end = ranges[i++];\n            while (pos < end) {\n                if (iter.done)\n                    break done;\n                let len = Math.min(iter.len, end - pos);\n                addSection(resultSections, len, -1);\n                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\n                iter.forward(len);\n                pos += len;\n            }\n        }\n        return { changes: new ChangeSet(resultSections, resultInserted),\n            filtered: ChangeDesc.create(filteredSections) };\n    }\n    /**\n    Serialize this change set to a JSON-representable value.\n    */\n    toJSON() {\n        let parts = [];\n        for (let i = 0; i < this.sections.length; i += 2) {\n            let len = this.sections[i], ins = this.sections[i + 1];\n            if (ins < 0)\n                parts.push(len);\n            else if (ins == 0)\n                parts.push([len]);\n            else\n                parts.push([len].concat(this.inserted[i >> 1].toJSON()));\n        }\n        return parts;\n    }\n    /**\n    Create a change set for the given changes, for a document of the\n    given length, using `lineSep` as line separator.\n    */\n    static of(changes, length, lineSep) {\n        let sections = [], inserted = [], pos = 0;\n        let total = null;\n        function flush(force = false) {\n            if (!force && !sections.length)\n                return;\n            if (pos < length)\n                addSection(sections, length - pos, -1);\n            let set = new ChangeSet(sections, inserted);\n            total = total ? total.compose(set.map(total)) : set;\n            sections = [];\n            inserted = [];\n            pos = 0;\n        }\n        function process(spec) {\n            if (Array.isArray(spec)) {\n                for (let sub of spec)\n                    process(sub);\n            }\n            else if (spec instanceof ChangeSet) {\n                if (spec.length != length)\n                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\n                flush();\n                total = total ? total.compose(spec.map(total)) : spec;\n            }\n            else {\n                let { from, to = from, insert } = spec;\n                if (from > to || from < 0 || to > length)\n                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\n                let insText = !insert ? Text.empty : typeof insert == \"string\" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;\n                let insLen = insText.length;\n                if (from == to && insLen == 0)\n                    return;\n                if (from < pos)\n                    flush();\n                if (from > pos)\n                    addSection(sections, from - pos, -1);\n                addSection(sections, to - from, insLen);\n                addInsert(inserted, sections, insText);\n                pos = to;\n            }\n        }\n        process(changes);\n        flush(!total);\n        return total;\n    }\n    /**\n    Create an empty changeset of the given length.\n    */\n    static empty(length) {\n        return new ChangeSet(length ? [length, -1] : [], []);\n    }\n    /**\n    Create a changeset from its JSON representation (as produced by\n    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\n    */\n    static fromJSON(json) {\n        if (!Array.isArray(json))\n            throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n        let sections = [], inserted = [];\n        for (let i = 0; i < json.length; i++) {\n            let part = json[i];\n            if (typeof part == \"number\") {\n                sections.push(part, -1);\n            }\n            else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i) => i && typeof e != \"string\")) {\n                throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n            }\n            else if (part.length == 1) {\n                sections.push(part[0], 0);\n            }\n            else {\n                while (inserted.length < i)\n                    inserted.push(Text.empty);\n                inserted[i] = Text.of(part.slice(1));\n                sections.push(part[0], inserted[i].length);\n            }\n        }\n        return new ChangeSet(sections, inserted);\n    }\n    /**\n    @internal\n    */\n    static createSet(sections, inserted) {\n        return new ChangeSet(sections, inserted);\n    }\n}\nfunction addSection(sections, len, ins, forceJoin = false) {\n    if (len == 0 && ins <= 0)\n        return;\n    let last = sections.length - 2;\n    if (last >= 0 && ins <= 0 && ins == sections[last + 1])\n        sections[last] += len;\n    else if (len == 0 && sections[last] == 0)\n        sections[last + 1] += ins;\n    else if (forceJoin) {\n        sections[last] += len;\n        sections[last + 1] += ins;\n    }\n    else\n        sections.push(len, ins);\n}\nfunction addInsert(values, sections, value) {\n    if (value.length == 0)\n        return;\n    let index = (sections.length - 2) >> 1;\n    if (index < values.length) {\n        values[values.length - 1] = values[values.length - 1].append(value);\n    }\n    else {\n        while (values.length < index)\n            values.push(Text.empty);\n        values.push(value);\n    }\n}\nfunction iterChanges(desc, f, individual) {\n    let inserted = desc.inserted;\n    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {\n        let len = desc.sections[i++], ins = desc.sections[i++];\n        if (ins < 0) {\n            posA += len;\n            posB += len;\n        }\n        else {\n            let endA = posA, endB = posB, text = Text.empty;\n            for (;;) {\n                endA += len;\n                endB += ins;\n                if (ins && inserted)\n                    text = text.append(inserted[(i - 2) >> 1]);\n                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)\n                    break;\n                len = desc.sections[i++];\n                ins = desc.sections[i++];\n            }\n            f(posA, endA, posB, endB, text);\n            posA = endA;\n            posB = endB;\n        }\n    }\n}\nfunction mapSet(setA, setB, before, mkSet = false) {\n    // Produce a copy of setA that applies to the document after setB\n    // has been applied (assuming both start at the same document).\n    let sections = [], insert = mkSet ? [] : null;\n    let a = new SectionIter(setA), b = new SectionIter(setB);\n    // Iterate over both sets in parallel. inserted tracks, for changes\n    // in A that have to be processed piece-by-piece, whether their\n    // content has been inserted already, and refers to the section\n    // index.\n    for (let inserted = -1;;) {\n        if (a.ins == -1 && b.ins == -1) {\n            // Move across ranges skipped by both sets.\n            let len = Math.min(a.len, b.len);\n            addSection(sections, len, -1);\n            a.forward(len);\n            b.forward(len);\n        }\n        else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {\n            // If there's a change in B that comes before the next change in\n            // A (ordered by start pos, then len, then before flag), skip\n            // that (and process any changes in A it covers).\n            let len = b.len;\n            addSection(sections, b.ins, -1);\n            while (len) {\n                let piece = Math.min(a.len, len);\n                if (a.ins >= 0 && inserted < a.i && a.len <= piece) {\n                    addSection(sections, 0, a.ins);\n                    if (insert)\n                        addInsert(insert, sections, a.text);\n                    inserted = a.i;\n                }\n                a.forward(piece);\n                len -= piece;\n            }\n            b.next();\n        }\n        else if (a.ins >= 0) {\n            // Process the part of a change in A up to the start of the next\n            // non-deletion change in B (if overlapping).\n            let len = 0, left = a.len;\n            while (left) {\n                if (b.ins == -1) {\n                    let piece = Math.min(left, b.len);\n                    len += piece;\n                    left -= piece;\n                    b.forward(piece);\n                }\n                else if (b.ins == 0 && b.len < left) {\n                    left -= b.len;\n                    b.next();\n                }\n                else {\n                    break;\n                }\n            }\n            addSection(sections, len, inserted < a.i ? a.ins : 0);\n            if (insert && inserted < a.i)\n                addInsert(insert, sections, a.text);\n            inserted = a.i;\n            a.forward(a.len - left);\n        }\n        else if (a.done && b.done) {\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\n        }\n        else {\n            throw new Error(\"Mismatched change set lengths\");\n        }\n    }\n}\nfunction composeSets(setA, setB, mkSet = false) {\n    let sections = [];\n    let insert = mkSet ? [] : null;\n    let a = new SectionIter(setA), b = new SectionIter(setB);\n    for (let open = false;;) {\n        if (a.done && b.done) {\n            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);\n        }\n        else if (a.ins == 0) { // Deletion in A\n            addSection(sections, a.len, 0, open);\n            a.next();\n        }\n        else if (b.len == 0 && !b.done) { // Insertion in B\n            addSection(sections, 0, b.ins, open);\n            if (insert)\n                addInsert(insert, sections, b.text);\n            b.next();\n        }\n        else if (a.done || b.done) {\n            throw new Error(\"Mismatched change set lengths\");\n        }\n        else {\n            let len = Math.min(a.len2, b.len), sectionLen = sections.length;\n            if (a.ins == -1) {\n                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;\n                addSection(sections, len, insB, open);\n                if (insert && insB)\n                    addInsert(insert, sections, b.text);\n            }\n            else if (b.ins == -1) {\n                addSection(sections, a.off ? 0 : a.len, len, open);\n                if (insert)\n                    addInsert(insert, sections, a.textBit(len));\n            }\n            else {\n                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);\n                if (insert && !b.off)\n                    addInsert(insert, sections, b.text);\n            }\n            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);\n            a.forward2(len);\n            b.forward(len);\n        }\n    }\n}\nclass SectionIter {\n    constructor(set) {\n        this.set = set;\n        this.i = 0;\n        this.next();\n    }\n    next() {\n        let { sections } = this.set;\n        if (this.i < sections.length) {\n            this.len = sections[this.i++];\n            this.ins = sections[this.i++];\n        }\n        else {\n            this.len = 0;\n            this.ins = -2;\n        }\n        this.off = 0;\n    }\n    get done() { return this.ins == -2; }\n    get len2() { return this.ins < 0 ? this.len : this.ins; }\n    get text() {\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\n        return index >= inserted.length ? Text.empty : inserted[index];\n    }\n    textBit(len) {\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\n        return index >= inserted.length && !len ? Text.empty\n            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);\n    }\n    forward(len) {\n        if (len == this.len)\n            this.next();\n        else {\n            this.len -= len;\n            this.off += len;\n        }\n    }\n    forward2(len) {\n        if (this.ins == -1)\n            this.forward(len);\n        else if (len == this.ins)\n            this.next();\n        else {\n            this.ins -= len;\n            this.off += len;\n        }\n    }\n}\n\n/**\nA single selection range. When\n[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\nis enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold\nmultiple ranges. By default, selections hold exactly one range.\n*/\nclass SelectionRange {\n    constructor(\n    /**\n    The lower boundary of the range.\n    */\n    from, \n    /**\n    The upper boundary of the range.\n    */\n    to, flags) {\n        this.from = from;\n        this.to = to;\n        this.flags = flags;\n    }\n    /**\n    The anchor of the range—the side that doesn't move when you\n    extend it.\n    */\n    get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }\n    /**\n    The head of the range, which is moved when the range is\n    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).\n    */\n    get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }\n    /**\n    True when `anchor` and `head` are at the same position.\n    */\n    get empty() { return this.from == this.to; }\n    /**\n    If this is a cursor that is explicitly associated with the\n    character on one of its sides, this returns the side. -1 means\n    the character before its position, 1 the character after, and 0\n    means no association.\n    */\n    get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }\n    /**\n    The bidirectional text level associated with this cursor, if\n    any.\n    */\n    get bidiLevel() {\n        let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;\n        return level == 7 ? null : level;\n    }\n    /**\n    The goal column (stored vertical offset) associated with a\n    cursor. This is used to preserve the vertical position when\n    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across\n    lines of different length.\n    */\n    get goalColumn() {\n        let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;\n        return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;\n    }\n    /**\n    Map this range through a change, producing a valid range in the\n    updated document.\n    */\n    map(change, assoc = -1) {\n        let from, to;\n        if (this.empty) {\n            from = to = change.mapPos(this.from, assoc);\n        }\n        else {\n            from = change.mapPos(this.from, 1);\n            to = change.mapPos(this.to, -1);\n        }\n        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);\n    }\n    /**\n    Extend this range to cover at least `from` to `to`.\n    */\n    extend(from, to = from) {\n        if (from <= this.anchor && to >= this.anchor)\n            return EditorSelection.range(from, to);\n        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;\n        return EditorSelection.range(this.anchor, head);\n    }\n    /**\n    Compare this range to another range.\n    */\n    eq(other, includeAssoc = false) {\n        return this.anchor == other.anchor && this.head == other.head &&\n            (!includeAssoc || !this.empty || this.assoc == other.assoc);\n    }\n    /**\n    Return a JSON-serializable object representing the range.\n    */\n    toJSON() { return { anchor: this.anchor, head: this.head }; }\n    /**\n    Convert a JSON representation of a range to a `SelectionRange`\n    instance.\n    */\n    static fromJSON(json) {\n        if (!json || typeof json.anchor != \"number\" || typeof json.head != \"number\")\n            throw new RangeError(\"Invalid JSON representation for SelectionRange\");\n        return EditorSelection.range(json.anchor, json.head);\n    }\n    /**\n    @internal\n    */\n    static create(from, to, flags) {\n        return new SelectionRange(from, to, flags);\n    }\n}\n/**\nAn editor selection holds one or more selection ranges.\n*/\nclass EditorSelection {\n    constructor(\n    /**\n    The ranges in the selection, sorted by position. Ranges cannot\n    overlap (but they may touch, if they aren't empty).\n    */\n    ranges, \n    /**\n    The index of the _main_ range in the selection (which is\n    usually the range that was added last).\n    */\n    mainIndex) {\n        this.ranges = ranges;\n        this.mainIndex = mainIndex;\n    }\n    /**\n    Map a selection through a change. Used to adjust the selection\n    position for changes.\n    */\n    map(change, assoc = -1) {\n        if (change.empty)\n            return this;\n        return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);\n    }\n    /**\n    Compare this selection to another selection. By default, ranges\n    are compared only by position. When `includeAssoc` is true,\n    cursor ranges must also have the same\n    [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.\n    */\n    eq(other, includeAssoc = false) {\n        if (this.ranges.length != other.ranges.length ||\n            this.mainIndex != other.mainIndex)\n            return false;\n        for (let i = 0; i < this.ranges.length; i++)\n            if (!this.ranges[i].eq(other.ranges[i], includeAssoc))\n                return false;\n        return true;\n    }\n    /**\n    Get the primary selection range. Usually, you should make sure\n    your code applies to _all_ ranges, by using methods like\n    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\n    */\n    get main() { return this.ranges[this.mainIndex]; }\n    /**\n    Make sure the selection only has one range. Returns a selection\n    holding only the main range from this selection.\n    */\n    asSingle() {\n        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);\n    }\n    /**\n    Extend this selection with an extra range.\n    */\n    addRange(range, main = true) {\n        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);\n    }\n    /**\n    Replace a given range with another range, and then normalize the\n    selection to merge and sort ranges if necessary.\n    */\n    replaceRange(range, which = this.mainIndex) {\n        let ranges = this.ranges.slice();\n        ranges[which] = range;\n        return EditorSelection.create(ranges, this.mainIndex);\n    }\n    /**\n    Convert this selection to an object that can be serialized to\n    JSON.\n    */\n    toJSON() {\n        return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };\n    }\n    /**\n    Create a selection from a JSON representation.\n    */\n    static fromJSON(json) {\n        if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length)\n            throw new RangeError(\"Invalid JSON representation for EditorSelection\");\n        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);\n    }\n    /**\n    Create a selection holding a single range.\n    */\n    static single(anchor, head = anchor) {\n        return new EditorSelection([EditorSelection.range(anchor, head)], 0);\n    }\n    /**\n    Sort and merge the given set of ranges, creating a valid\n    selection.\n    */\n    static create(ranges, mainIndex = 0) {\n        if (ranges.length == 0)\n            throw new RangeError(\"A selection needs at least one range\");\n        for (let pos = 0, i = 0; i < ranges.length; i++) {\n            let range = ranges[i];\n            if (range.empty ? range.from <= pos : range.from < pos)\n                return EditorSelection.normalized(ranges.slice(), mainIndex);\n            pos = range.to;\n        }\n        return new EditorSelection(ranges, mainIndex);\n    }\n    /**\n    Create a cursor selection range at the given position. You can\n    safely ignore the optional arguments in most situations.\n    */\n    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\n        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |\n            (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |\n            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));\n    }\n    /**\n    Create a selection range.\n    */\n    static range(anchor, head, goalColumn, bidiLevel) {\n        let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |\n            (bidiLevel == null ? 7 : Math.min(6, bidiLevel));\n        return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)\n            : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);\n    }\n    /**\n    @internal\n    */\n    static normalized(ranges, mainIndex = 0) {\n        let main = ranges[mainIndex];\n        ranges.sort((a, b) => a.from - b.from);\n        mainIndex = ranges.indexOf(main);\n        for (let i = 1; i < ranges.length; i++) {\n            let range = ranges[i], prev = ranges[i - 1];\n            if (range.empty ? range.from <= prev.to : range.from < prev.to) {\n                let from = prev.from, to = Math.max(range.to, prev.to);\n                if (i <= mainIndex)\n                    mainIndex--;\n                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));\n            }\n        }\n        return new EditorSelection(ranges, mainIndex);\n    }\n}\nfunction checkSelection(selection, docLength) {\n    for (let range of selection.ranges)\n        if (range.to > docLength)\n            throw new RangeError(\"Selection points outside of document\");\n}\n\nlet nextID = 0;\n/**\nA facet is a labeled value that is associated with an editor\nstate. It takes inputs from any number of extensions, and combines\nthose into a single output value.\n\nExamples of uses of facets are the [tab\nsize](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor\nattributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update\nlisteners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).\n\nNote that `Facet` instances can be used anywhere where\n[`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.\n*/\nclass Facet {\n    constructor(\n    /**\n    @internal\n    */\n    combine, \n    /**\n    @internal\n    */\n    compareInput, \n    /**\n    @internal\n    */\n    compare, isStatic, enables) {\n        this.combine = combine;\n        this.compareInput = compareInput;\n        this.compare = compare;\n        this.isStatic = isStatic;\n        /**\n        @internal\n        */\n        this.id = nextID++;\n        this.default = combine([]);\n        this.extensions = typeof enables == \"function\" ? enables(this) : enables;\n    }\n    /**\n    Returns a facet reader for this facet, which can be used to\n    [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.\n    */\n    get reader() { return this; }\n    /**\n    Define a new facet.\n    */\n    static define(config = {}) {\n        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);\n    }\n    /**\n    Returns an extension that adds the given value to this facet.\n    */\n    of(value) {\n        return new FacetProvider([], this, 0 /* Provider.Static */, value);\n    }\n    /**\n    Create an extension that computes a value for the facet from a\n    state. You must take care to declare the parts of the state that\n    this value depends on, since your function is only called again\n    for a new state when one of those parts changed.\n    \n    In cases where your value depends only on a single field, you'll\n    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.\n    */\n    compute(deps, get) {\n        if (this.isStatic)\n            throw new Error(\"Can't compute a static facet\");\n        return new FacetProvider(deps, this, 1 /* Provider.Single */, get);\n    }\n    /**\n    Create an extension that computes zero or more values for this\n    facet from a state.\n    */\n    computeN(deps, get) {\n        if (this.isStatic)\n            throw new Error(\"Can't compute a static facet\");\n        return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);\n    }\n    from(field, get) {\n        if (!get)\n            get = x => x;\n        return this.compute([field], state => get(state.field(field)));\n    }\n}\nfunction sameArray(a, b) {\n    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);\n}\nclass FacetProvider {\n    constructor(dependencies, facet, type, value) {\n        this.dependencies = dependencies;\n        this.facet = facet;\n        this.type = type;\n        this.value = value;\n        this.id = nextID++;\n    }\n    dynamicSlot(addresses) {\n        var _a;\n        let getter = this.value;\n        let compare = this.facet.compareInput;\n        let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;\n        let depDoc = false, depSel = false, depAddrs = [];\n        for (let dep of this.dependencies) {\n            if (dep == \"doc\")\n                depDoc = true;\n            else if (dep == \"selection\")\n                depSel = true;\n            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)\n                depAddrs.push(addresses[dep.id]);\n        }\n        return {\n            create(state) {\n                state.values[idx] = getter(state);\n                return 1 /* SlotStatus.Changed */;\n            },\n            update(state, tr) {\n                if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {\n                    let newVal = getter(state);\n                    if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {\n                        state.values[idx] = newVal;\n                        return 1 /* SlotStatus.Changed */;\n                    }\n                }\n                return 0;\n            },\n            reconfigure: (state, oldState) => {\n                let newVal, oldAddr = oldState.config.address[id];\n                if (oldAddr != null) {\n                    let oldVal = getAddr(oldState, oldAddr);\n                    if (this.dependencies.every(dep => {\n                        return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :\n                            dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;\n                    }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {\n                        state.values[idx] = oldVal;\n                        return 0;\n                    }\n                }\n                else {\n                    newVal = getter(state);\n                }\n                state.values[idx] = newVal;\n                return 1 /* SlotStatus.Changed */;\n            }\n        };\n    }\n}\nfunction compareArray(a, b, compare) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!compare(a[i], b[i]))\n            return false;\n    return true;\n}\nfunction ensureAll(state, addrs) {\n    let changed = false;\n    for (let addr of addrs)\n        if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)\n            changed = true;\n    return changed;\n}\nfunction dynamicFacetSlot(addresses, facet, providers) {\n    let providerAddrs = providers.map(p => addresses[p.id]);\n    let providerTypes = providers.map(p => p.type);\n    let dynamic = providerAddrs.filter(p => !(p & 1));\n    let idx = addresses[facet.id] >> 1;\n    function get(state) {\n        let values = [];\n        for (let i = 0; i < providerAddrs.length; i++) {\n            let value = getAddr(state, providerAddrs[i]);\n            if (providerTypes[i] == 2 /* Provider.Multi */)\n                for (let val of value)\n                    values.push(val);\n            else\n                values.push(value);\n        }\n        return facet.combine(values);\n    }\n    return {\n        create(state) {\n            for (let addr of providerAddrs)\n                ensureAddr(state, addr);\n            state.values[idx] = get(state);\n            return 1 /* SlotStatus.Changed */;\n        },\n        update(state, tr) {\n            if (!ensureAll(state, dynamic))\n                return 0;\n            let value = get(state);\n            if (facet.compare(value, state.values[idx]))\n                return 0;\n            state.values[idx] = value;\n            return 1 /* SlotStatus.Changed */;\n        },\n        reconfigure(state, oldState) {\n            let depChanged = ensureAll(state, providerAddrs);\n            let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);\n            if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {\n                state.values[idx] = oldValue;\n                return 0;\n            }\n            let value = get(state);\n            if (facet.compare(value, oldValue)) {\n                state.values[idx] = oldValue;\n                return 0;\n            }\n            state.values[idx] = value;\n            return 1 /* SlotStatus.Changed */;\n        }\n    };\n}\nconst initField = /*@__PURE__*/Facet.define({ static: true });\n/**\nFields can store additional information in an editor state, and\nkeep it in sync with the rest of the state.\n*/\nclass StateField {\n    constructor(\n    /**\n    @internal\n    */\n    id, createF, updateF, compareF, \n    /**\n    @internal\n    */\n    spec) {\n        this.id = id;\n        this.createF = createF;\n        this.updateF = updateF;\n        this.compareF = compareF;\n        this.spec = spec;\n        /**\n        @internal\n        */\n        this.provides = undefined;\n    }\n    /**\n    Define a state field.\n    */\n    static define(config) {\n        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);\n        if (config.provide)\n            field.provides = config.provide(field);\n        return field;\n    }\n    create(state) {\n        let init = state.facet(initField).find(i => i.field == this);\n        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\n    }\n    /**\n    @internal\n    */\n    slot(addresses) {\n        let idx = addresses[this.id] >> 1;\n        return {\n            create: (state) => {\n                state.values[idx] = this.create(state);\n                return 1 /* SlotStatus.Changed */;\n            },\n            update: (state, tr) => {\n                let oldVal = state.values[idx];\n                let value = this.updateF(oldVal, tr);\n                if (this.compareF(oldVal, value))\n                    return 0;\n                state.values[idx] = value;\n                return 1 /* SlotStatus.Changed */;\n            },\n            reconfigure: (state, oldState) => {\n                if (oldState.config.address[this.id] != null) {\n                    state.values[idx] = oldState.field(this);\n                    return 0;\n                }\n                state.values[idx] = this.create(state);\n                return 1 /* SlotStatus.Changed */;\n            }\n        };\n    }\n    /**\n    Returns an extension that enables this field and overrides the\n    way it is initialized. Can be useful when you need to provide a\n    non-default starting value for the field.\n    */\n    init(create) {\n        return [this, initField.of({ field: this, create })];\n    }\n    /**\n    State field instances can be used as\n    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\n    given state.\n    */\n    get extension() { return this; }\n}\nconst Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };\nfunction prec(value) {\n    return (ext) => new PrecExtension(ext, value);\n}\n/**\nBy default extensions are registered in the order they are found\nin the flattened form of nested array that was provided.\nIndividual extension values can be assigned a precedence to\noverride this. Extensions that do not have a precedence set get\nthe precedence of the nearest parent with a precedence, or\n[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The\nfinal ordering of extensions is determined by first sorting by\nprecedence and then by order within each precedence.\n*/\nconst Prec = {\n    /**\n    The highest precedence level, for extensions that should end up\n    near the start of the precedence ordering.\n    */\n    highest: /*@__PURE__*/prec(Prec_.highest),\n    /**\n    A higher-than-default precedence, for extensions that should\n    come before those with default precedence.\n    */\n    high: /*@__PURE__*/prec(Prec_.high),\n    /**\n    The default precedence, which is also used for extensions\n    without an explicit precedence.\n    */\n    default: /*@__PURE__*/prec(Prec_.default),\n    /**\n    A lower-than-default precedence.\n    */\n    low: /*@__PURE__*/prec(Prec_.low),\n    /**\n    The lowest precedence level. Meant for things that should end up\n    near the end of the extension order.\n    */\n    lowest: /*@__PURE__*/prec(Prec_.lowest)\n};\nclass PrecExtension {\n    constructor(inner, prec) {\n        this.inner = inner;\n        this.prec = prec;\n    }\n}\n/**\nExtension compartments can be used to make a configuration\ndynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your\nconfiguration in a compartment, you can later\n[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a\ntransaction.\n*/\nclass Compartment {\n    /**\n    Create an instance of this compartment to add to your [state\n    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\n    */\n    of(ext) { return new CompartmentInstance(this, ext); }\n    /**\n    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\n    reconfigures this compartment.\n    */\n    reconfigure(content) {\n        return Compartment.reconfigure.of({ compartment: this, extension: content });\n    }\n    /**\n    Get the current content of the compartment in the state, or\n    `undefined` if it isn't present.\n    */\n    get(state) {\n        return state.config.compartments.get(this);\n    }\n}\nclass CompartmentInstance {\n    constructor(compartment, inner) {\n        this.compartment = compartment;\n        this.inner = inner;\n    }\n}\nclass Configuration {\n    constructor(base, compartments, dynamicSlots, address, staticValues, facets) {\n        this.base = base;\n        this.compartments = compartments;\n        this.dynamicSlots = dynamicSlots;\n        this.address = address;\n        this.staticValues = staticValues;\n        this.facets = facets;\n        this.statusTemplate = [];\n        while (this.statusTemplate.length < dynamicSlots.length)\n            this.statusTemplate.push(0 /* SlotStatus.Unresolved */);\n    }\n    staticFacet(facet) {\n        let addr = this.address[facet.id];\n        return addr == null ? facet.default : this.staticValues[addr >> 1];\n    }\n    static resolve(base, compartments, oldState) {\n        let fields = [];\n        let facets = Object.create(null);\n        let newCompartments = new Map();\n        for (let ext of flatten(base, compartments, newCompartments)) {\n            if (ext instanceof StateField)\n                fields.push(ext);\n            else\n                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);\n        }\n        let address = Object.create(null);\n        let staticValues = [];\n        let dynamicSlots = [];\n        for (let field of fields) {\n            address[field.id] = dynamicSlots.length << 1;\n            dynamicSlots.push(a => field.slot(a));\n        }\n        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;\n        for (let id in facets) {\n            let providers = facets[id], facet = providers[0].facet;\n            let oldProviders = oldFacets && oldFacets[id] || [];\n            if (providers.every(p => p.type == 0 /* Provider.Static */)) {\n                address[facet.id] = (staticValues.length << 1) | 1;\n                if (sameArray(oldProviders, providers)) {\n                    staticValues.push(oldState.facet(facet));\n                }\n                else {\n                    let value = facet.combine(providers.map(p => p.value));\n                    staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);\n                }\n            }\n            else {\n                for (let p of providers) {\n                    if (p.type == 0 /* Provider.Static */) {\n                        address[p.id] = (staticValues.length << 1) | 1;\n                        staticValues.push(p.value);\n                    }\n                    else {\n                        address[p.id] = dynamicSlots.length << 1;\n                        dynamicSlots.push(a => p.dynamicSlot(a));\n                    }\n                }\n                address[facet.id] = dynamicSlots.length << 1;\n                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));\n            }\n        }\n        let dynamic = dynamicSlots.map(f => f(address));\n        return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);\n    }\n}\nfunction flatten(extension, compartments, newCompartments) {\n    let result = [[], [], [], [], []];\n    let seen = new Map();\n    function inner(ext, prec) {\n        let known = seen.get(ext);\n        if (known != null) {\n            if (known <= prec)\n                return;\n            let found = result[known].indexOf(ext);\n            if (found > -1)\n                result[known].splice(found, 1);\n            if (ext instanceof CompartmentInstance)\n                newCompartments.delete(ext.compartment);\n        }\n        seen.set(ext, prec);\n        if (Array.isArray(ext)) {\n            for (let e of ext)\n                inner(e, prec);\n        }\n        else if (ext instanceof CompartmentInstance) {\n            if (newCompartments.has(ext.compartment))\n                throw new RangeError(`Duplicate use of compartment in extensions`);\n            let content = compartments.get(ext.compartment) || ext.inner;\n            newCompartments.set(ext.compartment, content);\n            inner(content, prec);\n        }\n        else if (ext instanceof PrecExtension) {\n            inner(ext.inner, ext.prec);\n        }\n        else if (ext instanceof StateField) {\n            result[prec].push(ext);\n            if (ext.provides)\n                inner(ext.provides, prec);\n        }\n        else if (ext instanceof FacetProvider) {\n            result[prec].push(ext);\n            if (ext.facet.extensions)\n                inner(ext.facet.extensions, Prec_.default);\n        }\n        else {\n            let content = ext.extension;\n            if (!content)\n                throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);\n            inner(content, prec);\n        }\n    }\n    inner(extension, Prec_.default);\n    return result.reduce((a, b) => a.concat(b));\n}\nfunction ensureAddr(state, addr) {\n    if (addr & 1)\n        return 2 /* SlotStatus.Computed */;\n    let idx = addr >> 1;\n    let status = state.status[idx];\n    if (status == 4 /* SlotStatus.Computing */)\n        throw new Error(\"Cyclic dependency between fields and/or facets\");\n    if (status & 2 /* SlotStatus.Computed */)\n        return status;\n    state.status[idx] = 4 /* SlotStatus.Computing */;\n    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);\n    return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;\n}\nfunction getAddr(state, addr) {\n    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];\n}\n\nconst languageData = /*@__PURE__*/Facet.define();\nconst allowMultipleSelections = /*@__PURE__*/Facet.define({\n    combine: values => values.some(v => v),\n    static: true\n});\nconst lineSeparator = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : undefined,\n    static: true\n});\nconst changeFilter = /*@__PURE__*/Facet.define();\nconst transactionFilter = /*@__PURE__*/Facet.define();\nconst transactionExtender = /*@__PURE__*/Facet.define();\nconst readOnly = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : false\n});\n\n/**\nAnnotations are tagged values that are used to add metadata to\ntransactions in an extensible way. They should be used to model\nthings that effect the entire transaction (such as its [time\nstamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its\n[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen\n_alongside_ the other changes made by the transaction, [state\neffects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.\n*/\nclass Annotation {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The annotation type.\n    */\n    type, \n    /**\n    The value of this annotation.\n    */\n    value) {\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Define a new type of annotation.\n    */\n    static define() { return new AnnotationType(); }\n}\n/**\nMarker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).\n*/\nclass AnnotationType {\n    /**\n    Create an instance of this annotation.\n    */\n    of(value) { return new Annotation(this, value); }\n}\n/**\nRepresentation of a type of state effect. Defined with\n[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).\n*/\nclass StateEffectType {\n    /**\n    @internal\n    */\n    constructor(\n    // The `any` types in these function types are there to work\n    // around TypeScript issue #37631, where the type guard on\n    // `StateEffect.is` mysteriously stops working when these properly\n    // have type `Value`.\n    /**\n    @internal\n    */\n    map) {\n        this.map = map;\n    }\n    /**\n    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this\n    type.\n    */\n    of(value) { return new StateEffect(this, value); }\n}\n/**\nState effects can be used to represent additional effects\nassociated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They\nare often useful to model changes to custom [state\nfields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in\ndocument or selection changes.\n*/\nclass StateEffect {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    type, \n    /**\n    The value of this effect.\n    */\n    value) {\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Map this effect through a position mapping. Will return\n    `undefined` when that ends up deleting the effect.\n    */\n    map(mapping) {\n        let mapped = this.type.map(this.value, mapping);\n        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);\n    }\n    /**\n    Tells you whether this effect object is of a given\n    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\n    */\n    is(type) { return this.type == type; }\n    /**\n    Define a new effect type. The type parameter indicates the type\n    of values that his effect holds. It should be a type that\n    doesn't include `undefined`, since that is used in\n    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is\n    removed.\n    */\n    static define(spec = {}) {\n        return new StateEffectType(spec.map || (v => v));\n    }\n    /**\n    Map an array of effects through a change set.\n    */\n    static mapEffects(effects, mapping) {\n        if (!effects.length)\n            return effects;\n        let result = [];\n        for (let effect of effects) {\n            let mapped = effect.map(mapping);\n            if (mapped)\n                result.push(mapped);\n        }\n        return result;\n    }\n}\n/**\nThis effect can be used to reconfigure the root extensions of\nthe editor. Doing this will discard any extensions\n[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset\nthe content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)\ncompartments.\n*/\nStateEffect.reconfigure = /*@__PURE__*/StateEffect.define();\n/**\nAppend extensions to the top-level configuration of the editor.\n*/\nStateEffect.appendConfig = /*@__PURE__*/StateEffect.define();\n/**\nChanges to the editor state are grouped into transactions.\nTypically, a user action creates a single transaction, which may\ncontain any number of document changes, may change the selection,\nor have other effects. Create a transaction by calling\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately\ndispatch one by calling\n[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).\n*/\nclass Transaction {\n    constructor(\n    /**\n    The state from which the transaction starts.\n    */\n    startState, \n    /**\n    The document changes made by this transaction.\n    */\n    changes, \n    /**\n    The selection set by this transaction, or undefined if it\n    doesn't explicitly set a selection.\n    */\n    selection, \n    /**\n    The effects added to the transaction.\n    */\n    effects, \n    /**\n    @internal\n    */\n    annotations, \n    /**\n    Whether the selection should be scrolled into view after this\n    transaction is dispatched.\n    */\n    scrollIntoView) {\n        this.startState = startState;\n        this.changes = changes;\n        this.selection = selection;\n        this.effects = effects;\n        this.annotations = annotations;\n        this.scrollIntoView = scrollIntoView;\n        /**\n        @internal\n        */\n        this._doc = null;\n        /**\n        @internal\n        */\n        this._state = null;\n        if (selection)\n            checkSelection(selection, changes.newLength);\n        if (!annotations.some((a) => a.type == Transaction.time))\n            this.annotations = annotations.concat(Transaction.time.of(Date.now()));\n    }\n    /**\n    @internal\n    */\n    static create(startState, changes, selection, effects, annotations, scrollIntoView) {\n        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);\n    }\n    /**\n    The new document produced by the transaction. Contrary to\n    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\n    force the entire new state to be computed right away, so it is\n    recommended that [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\n    when they need to look at the new document.\n    */\n    get newDoc() {\n        return this._doc || (this._doc = this.changes.apply(this.startState.doc));\n    }\n    /**\n    The new selection produced by the transaction. If\n    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\n    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\n    current selection through the changes made by the transaction.\n    */\n    get newSelection() {\n        return this.selection || this.startState.selection.map(this.changes);\n    }\n    /**\n    The new state created by the transaction. Computed on demand\n    (but retained for subsequent access), so it is recommended not to\n    access it in [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\n    */\n    get state() {\n        if (!this._state)\n            this.startState.applyTransaction(this);\n        return this._state;\n    }\n    /**\n    Get the value of the given annotation type, if any.\n    */\n    annotation(type) {\n        for (let ann of this.annotations)\n            if (ann.type == type)\n                return ann.value;\n        return undefined;\n    }\n    /**\n    Indicates whether the transaction changed the document.\n    */\n    get docChanged() { return !this.changes.empty; }\n    /**\n    Indicates whether this transaction reconfigures the state\n    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\n    with a top-level configuration\n    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\n    */\n    get reconfigured() { return this.startState.config != this.state.config; }\n    /**\n    Returns true if the transaction has a [user\n    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to\n    or more specific than `event`. For example, if the transaction\n    has `\"select.pointer\"` as user event, `\"select\"` and\n    `\"select.pointer\"` will match it.\n    */\n    isUserEvent(event) {\n        let e = this.annotation(Transaction.userEvent);\n        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == \".\"));\n    }\n}\n/**\nAnnotation used to store transaction timestamps. Automatically\nadded to every transaction, holding `Date.now()`.\n*/\nTransaction.time = /*@__PURE__*/Annotation.define();\n/**\nAnnotation used to associate a transaction with a user interface\nevent. Holds a string identifying the event, using a\ndot-separated format to support attaching more specific\ninformation. The events used by the core libraries are:\n\n - `\"input\"` when content is entered\n   - `\"input.type\"` for typed input\n     - `\"input.type.compose\"` for composition\n   - `\"input.paste\"` for pasted input\n   - `\"input.drop\"` when adding content with drag-and-drop\n   - `\"input.complete\"` when autocompleting\n - `\"delete\"` when the user deletes content\n   - `\"delete.selection\"` when deleting the selection\n   - `\"delete.forward\"` when deleting forward from the selection\n   - `\"delete.backward\"` when deleting backward from the selection\n   - `\"delete.cut\"` when cutting to the clipboard\n - `\"move\"` when content is moved\n   - `\"move.drop\"` when content is moved within the editor through drag-and-drop\n - `\"select\"` when explicitly changing the selection\n   - `\"select.pointer\"` when selecting with a mouse or other pointing device\n - `\"undo\"` and `\"redo\"` for history actions\n\nUse [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check\nwhether the annotation matches a given event.\n*/\nTransaction.userEvent = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating whether a transaction should be added to\nthe undo history or not.\n*/\nTransaction.addToHistory = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating (when present and true) that a transaction\nrepresents a change made by some other actor, not the user. This\nis used, for example, to tag other people's changes in\ncollaborative editing.\n*/\nTransaction.remote = /*@__PURE__*/Annotation.define();\nfunction joinRanges(a, b) {\n    let result = [];\n    for (let iA = 0, iB = 0;;) {\n        let from, to;\n        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {\n            from = a[iA++];\n            to = a[iA++];\n        }\n        else if (iB < b.length) {\n            from = b[iB++];\n            to = b[iB++];\n        }\n        else\n            return result;\n        if (!result.length || result[result.length - 1] < from)\n            result.push(from, to);\n        else if (result[result.length - 1] < to)\n            result[result.length - 1] = to;\n    }\n}\nfunction mergeTransaction(a, b, sequential) {\n    var _a;\n    let mapForA, mapForB, changes;\n    if (sequential) {\n        mapForA = b.changes;\n        mapForB = ChangeSet.empty(b.changes.length);\n        changes = a.changes.compose(b.changes);\n    }\n    else {\n        mapForA = b.changes.map(a.changes);\n        mapForB = a.changes.mapDesc(b.changes, true);\n        changes = a.changes.compose(mapForA);\n    }\n    return {\n        changes,\n        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),\n        effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),\n        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,\n        scrollIntoView: a.scrollIntoView || b.scrollIntoView\n    };\n}\nfunction resolveTransactionInner(state, spec, docSize) {\n    let sel = spec.selection, annotations = asArray(spec.annotations);\n    if (spec.userEvent)\n        annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));\n    return {\n        changes: spec.changes instanceof ChangeSet ? spec.changes\n            : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),\n        selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),\n        effects: asArray(spec.effects),\n        annotations,\n        scrollIntoView: !!spec.scrollIntoView\n    };\n}\nfunction resolveTransaction(state, specs, filter) {\n    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);\n    if (specs.length && specs[0].filter === false)\n        filter = false;\n    for (let i = 1; i < specs.length; i++) {\n        if (specs[i].filter === false)\n            filter = false;\n        let seq = !!specs[i].sequential;\n        s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);\n    }\n    let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);\n    return extendTransaction(filter ? filterTransaction(tr) : tr);\n}\n// Finish a transaction by applying filters if necessary.\nfunction filterTransaction(tr) {\n    let state = tr.startState;\n    // Change filters\n    let result = true;\n    for (let filter of state.facet(changeFilter)) {\n        let value = filter(tr);\n        if (value === false) {\n            result = false;\n            break;\n        }\n        if (Array.isArray(value))\n            result = result === true ? value : joinRanges(result, value);\n    }\n    if (result !== true) {\n        let changes, back;\n        if (result === false) {\n            back = tr.changes.invertedDesc;\n            changes = ChangeSet.empty(state.doc.length);\n        }\n        else {\n            let filtered = tr.changes.filter(result);\n            changes = filtered.changes;\n            back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;\n        }\n        tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);\n    }\n    // Transaction filters\n    let filters = state.facet(transactionFilter);\n    for (let i = filters.length - 1; i >= 0; i--) {\n        let filtered = filters[i](tr);\n        if (filtered instanceof Transaction)\n            tr = filtered;\n        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)\n            tr = filtered[0];\n        else\n            tr = resolveTransaction(state, asArray(filtered), false);\n    }\n    return tr;\n}\nfunction extendTransaction(tr) {\n    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;\n    for (let i = extenders.length - 1; i >= 0; i--) {\n        let extension = extenders[i](tr);\n        if (extension && Object.keys(extension).length)\n            spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);\n    }\n    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);\n}\nconst none = [];\nfunction asArray(value) {\n    return value == null ? none : Array.isArray(value) ? value : [value];\n}\n\n/**\nThe categories produced by a [character\ncategorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used\ndo things like selecting by word.\n*/\nvar CharCategory = /*@__PURE__*/(function (CharCategory) {\n    /**\n    Word characters.\n    */\n    CharCategory[CharCategory[\"Word\"] = 0] = \"Word\";\n    /**\n    Whitespace.\n    */\n    CharCategory[CharCategory[\"Space\"] = 1] = \"Space\";\n    /**\n    Anything else.\n    */\n    CharCategory[CharCategory[\"Other\"] = 2] = \"Other\";\nreturn CharCategory})(CharCategory || (CharCategory = {}));\nconst nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\nlet wordChar;\ntry {\n    wordChar = /*@__PURE__*/new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n}\ncatch (_) { }\nfunction hasWordChar(str) {\n    if (wordChar)\n        return wordChar.test(str);\n    for (let i = 0; i < str.length; i++) {\n        let ch = str[i];\n        if (/\\w/.test(ch) || ch > \"\\x80\" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))\n            return true;\n    }\n    return false;\n}\nfunction makeCategorizer(wordChars) {\n    return (char) => {\n        if (!/\\S/.test(char))\n            return CharCategory.Space;\n        if (hasWordChar(char))\n            return CharCategory.Word;\n        for (let i = 0; i < wordChars.length; i++)\n            if (char.indexOf(wordChars[i]) > -1)\n                return CharCategory.Word;\n        return CharCategory.Other;\n    };\n}\n\n/**\nThe editor state class is a persistent (immutable) data structure.\nTo update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a\n[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state\ninstance, without modifying the original object.\n\nAs such, _never_ mutate properties of a state directly. That'll\njust break things.\n*/\nclass EditorState {\n    constructor(\n    /**\n    @internal\n    */\n    config, \n    /**\n    The current document.\n    */\n    doc, \n    /**\n    The current selection.\n    */\n    selection, \n    /**\n    @internal\n    */\n    values, computeSlot, tr) {\n        this.config = config;\n        this.doc = doc;\n        this.selection = selection;\n        this.values = values;\n        this.status = config.statusTemplate.slice();\n        this.computeSlot = computeSlot;\n        // Fill in the computed state immediately, so that further queries\n        // for it made during the update return this state\n        if (tr)\n            tr._state = this;\n        for (let i = 0; i < this.config.dynamicSlots.length; i++)\n            ensureAddr(this, i << 1);\n        this.computeSlot = null;\n    }\n    field(field, require = true) {\n        let addr = this.config.address[field.id];\n        if (addr == null) {\n            if (require)\n                throw new RangeError(\"Field is not present in this state\");\n            return undefined;\n        }\n        ensureAddr(this, addr);\n        return getAddr(this, addr);\n    }\n    /**\n    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\n    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\n    can be passed. Unless\n    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\n    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\n    are assumed to start in the _current_ document (not the document\n    produced by previous specs), and its\n    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\n    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\n    to the document created by its _own_ changes. The resulting\n    transaction contains the combined effect of all the different\n    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\n    specs take precedence over earlier ones.\n    */\n    update(...specs) {\n        return resolveTransaction(this, specs, true);\n    }\n    /**\n    @internal\n    */\n    applyTransaction(tr) {\n        let conf = this.config, { base, compartments } = conf;\n        for (let effect of tr.effects) {\n            if (effect.is(Compartment.reconfigure)) {\n                if (conf) {\n                    compartments = new Map;\n                    conf.compartments.forEach((val, key) => compartments.set(key, val));\n                    conf = null;\n                }\n                compartments.set(effect.value.compartment, effect.value.extension);\n            }\n            else if (effect.is(StateEffect.reconfigure)) {\n                conf = null;\n                base = effect.value;\n            }\n            else if (effect.is(StateEffect.appendConfig)) {\n                conf = null;\n                base = asArray(base).concat(effect.value);\n            }\n        }\n        let startValues;\n        if (!conf) {\n            conf = Configuration.resolve(base, compartments, this);\n            let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);\n            startValues = intermediateState.values;\n        }\n        else {\n            startValues = tr.startState.values.slice();\n        }\n        let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();\n        new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);\n    }\n    /**\n    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\n    replaces every selection range with the given content.\n    */\n    replaceSelection(text) {\n        if (typeof text == \"string\")\n            text = this.toText(text);\n        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },\n            range: EditorSelection.cursor(range.from + text.length) }));\n    }\n    /**\n    Create a set of changes and a new selection by running the given\n    function for each range in the active selection. The function\n    can return an optional set of changes (in the coordinate space\n    of the start document), plus an updated range (in the coordinate\n    space of the document produced by the call's own changes). This\n    method will merge all the changes and ranges into a single\n    changeset and selection, and return it as a [transaction\n    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\n    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n    */\n    changeByRange(f) {\n        let sel = this.selection;\n        let result1 = f(sel.ranges[0]);\n        let changes = this.changes(result1.changes), ranges = [result1.range];\n        let effects = asArray(result1.effects);\n        for (let i = 1; i < sel.ranges.length; i++) {\n            let result = f(sel.ranges[i]);\n            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);\n            for (let j = 0; j < i; j++)\n                ranges[j] = ranges[j].map(newMapped);\n            let mapBy = changes.mapDesc(newChanges, true);\n            ranges.push(result.range.map(mapBy));\n            changes = changes.compose(newMapped);\n            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));\n        }\n        return {\n            changes,\n            selection: EditorSelection.create(ranges, sel.mainIndex),\n            effects\n        };\n    }\n    /**\n    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\n    description, taking the state's document length and line\n    separator into account.\n    */\n    changes(spec = []) {\n        if (spec instanceof ChangeSet)\n            return spec;\n        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));\n    }\n    /**\n    Using the state's [line\n    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\n    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.\n    */\n    toText(string) {\n        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));\n    }\n    /**\n    Return the given range of the document as a string.\n    */\n    sliceDoc(from = 0, to = this.doc.length) {\n        return this.doc.sliceString(from, to, this.lineBreak);\n    }\n    /**\n    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\n    */\n    facet(facet) {\n        let addr = this.config.address[facet.id];\n        if (addr == null)\n            return facet.default;\n        ensureAddr(this, addr);\n        return getAddr(this, addr);\n    }\n    /**\n    Convert this state to a JSON-serializable object. When custom\n    fields should be serialized, you can pass them in as an object\n    mapping property names (in the resulting object, which should\n    not use `doc` or `selection`) to fields.\n    */\n    toJSON(fields) {\n        let result = {\n            doc: this.sliceDoc(),\n            selection: this.selection.toJSON()\n        };\n        if (fields)\n            for (let prop in fields) {\n                let value = fields[prop];\n                if (value instanceof StateField && this.config.address[value.id] != null)\n                    result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\n            }\n        return result;\n    }\n    /**\n    Deserialize a state from its JSON representation. When custom\n    fields should be deserialized, pass the same object you passed\n    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\n    third argument.\n    */\n    static fromJSON(json, config = {}, fields) {\n        if (!json || typeof json.doc != \"string\")\n            throw new RangeError(\"Invalid JSON representation for EditorState\");\n        let fieldInit = [];\n        if (fields)\n            for (let prop in fields) {\n                if (Object.prototype.hasOwnProperty.call(json, prop)) {\n                    let field = fields[prop], value = json[prop];\n                    fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));\n                }\n            }\n        return EditorState.create({\n            doc: json.doc,\n            selection: EditorSelection.fromJSON(json.selection),\n            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit\n        });\n    }\n    /**\n    Create a new state. You'll usually only need this when\n    initializing an editor—updated states are created by applying\n    transactions.\n    */\n    static create(config = {}) {\n        let configuration = Configuration.resolve(config.extensions || [], new Map);\n        let doc = config.doc instanceof Text ? config.doc\n            : Text.of((config.doc || \"\").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));\n        let selection = !config.selection ? EditorSelection.single(0)\n            : config.selection instanceof EditorSelection ? config.selection\n                : EditorSelection.single(config.selection.anchor, config.selection.head);\n        checkSelection(selection, doc.length);\n        if (!configuration.staticFacet(allowMultipleSelections))\n            selection = selection.asSingle();\n        return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);\n    }\n    /**\n    The size (in columns) of a tab in the document, determined by\n    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\n    */\n    get tabSize() { return this.facet(EditorState.tabSize); }\n    /**\n    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\n    string for this state.\n    */\n    get lineBreak() { return this.facet(EditorState.lineSeparator) || \"\\n\"; }\n    /**\n    Returns true when the editor is\n    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.\n    */\n    get readOnly() { return this.facet(readOnly); }\n    /**\n    Look up a translation for the given phrase (via the\n    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\n    original string if no translation is found.\n    \n    If additional arguments are passed, they will be inserted in\n    place of markers like `$1` (for the first value) and `$2`, etc.\n    A single `$` is equivalent to `$1`, and `$$` will produce a\n    literal dollar sign.\n    */\n    phrase(phrase, ...insert) {\n        for (let map of this.facet(EditorState.phrases))\n            if (Object.prototype.hasOwnProperty.call(map, phrase)) {\n                phrase = map[phrase];\n                break;\n            }\n        if (insert.length)\n            phrase = phrase.replace(/\\$(\\$|\\d*)/g, (m, i) => {\n                if (i == \"$\")\n                    return \"$\";\n                let n = +(i || 1);\n                return !n || n > insert.length ? m : insert[n - 1];\n            });\n        return phrase;\n    }\n    /**\n    Find the values for a given language data field, provided by the\n    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\n    \n    Examples of language data fields are...\n    \n    - [`\"commentTokens\"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying\n      comment syntax.\n    - [`\"autocomplete\"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)\n      for providing language-specific completion sources.\n    - [`\"wordChars\"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding\n      characters that should be considered part of words in this\n      language.\n    - [`\"closeBrackets\"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls\n      bracket closing behavior.\n    */\n    languageDataAt(name, pos, side = -1) {\n        let values = [];\n        for (let provider of this.facet(languageData)) {\n            for (let result of provider(this, pos, side)) {\n                if (Object.prototype.hasOwnProperty.call(result, name))\n                    values.push(result[name]);\n            }\n        }\n        return values;\n    }\n    /**\n    Return a function that can categorize strings (expected to\n    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))\n    into one of:\n    \n     - Word (contains an alphanumeric character or a character\n       explicitly listed in the local language's `\"wordChars\"`\n       language data, which should be a string)\n     - Space (contains only whitespace)\n     - Other (anything else)\n    */\n    charCategorizer(at) {\n        return makeCategorizer(this.languageDataAt(\"wordChars\", at).join(\"\"));\n    }\n    /**\n    Find the word at the given position, meaning the range\n    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\n    around it. If no word characters are adjacent to the position,\n    this returns null.\n    */\n    wordAt(pos) {\n        let { text, from, length } = this.doc.lineAt(pos);\n        let cat = this.charCategorizer(pos);\n        let start = pos - from, end = pos - from;\n        while (start > 0) {\n            let prev = findClusterBreak(text, start, false);\n            if (cat(text.slice(prev, start)) != CharCategory.Word)\n                break;\n            start = prev;\n        }\n        while (end < length) {\n            let next = findClusterBreak(text, end);\n            if (cat(text.slice(end, next)) != CharCategory.Word)\n                break;\n            end = next;\n        }\n        return start == end ? null : EditorSelection.range(start + from, end + from);\n    }\n}\n/**\nA facet that, when enabled, causes the editor to allow multiple\nranges to be selected. Be careful though, because by default the\neditor relies on the native DOM selection, which cannot handle\nmultiple selections. An extension like\n[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make\nsecondary selections visible to the user.\n*/\nEditorState.allowMultipleSelections = allowMultipleSelections;\n/**\nConfigures the tab size to use in this state. The first\n(highest-precedence) value of the facet is used. If no value is\ngiven, this defaults to 4.\n*/\nEditorState.tabSize = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : 4\n});\n/**\nThe line separator to use. By default, any of `\"\\n\"`, `\"\\r\\n\"`\nand `\"\\r\"` is treated as a separator when splitting lines, and\nlines are joined with `\"\\n\"`.\n\nWhen you configure a value here, only that precise separator\nwill be used, allowing you to round-trip documents through the\neditor without normalizing line separators.\n*/\nEditorState.lineSeparator = lineSeparator;\n/**\nThis facet controls the value of the\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is\nconsulted by commands and extensions that implement editing\nfunctionality to determine whether they should apply. It\ndefaults to false, but when its highest-precedence value is\n`true`, such functionality disables itself.\n\nNot to be confused with\n[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which\ncontrols whether the editor's DOM is set to be editable (and\nthus focusable).\n*/\nEditorState.readOnly = readOnly;\n/**\nRegisters translation phrases. The\n[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through\nall objects registered with this facet to find translations for\nits argument.\n*/\nEditorState.phrases = /*@__PURE__*/Facet.define({\n    compare(a, b) {\n        let kA = Object.keys(a), kB = Object.keys(b);\n        return kA.length == kB.length && kA.every(k => a[k] == b[k]);\n    }\n});\n/**\nA facet used to register [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.\n*/\nEditorState.languageData = languageData;\n/**\nFacet used to register change filters, which are called for each\ntransaction (unless explicitly\n[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress\npart of the transaction's changes.\n\nSuch a function can return `true` to indicate that it doesn't\nwant to do anything, `false` to completely stop the changes in\nthe transaction, or a set of ranges in which changes should be\nsuppressed. Such ranges are represented as an array of numbers,\nwith each pair of two numbers indicating the start and end of a\nrange. So for example `[10, 20, 100, 110]` suppresses changes\nbetween 10 and 20, and between 100 and 110.\n*/\nEditorState.changeFilter = changeFilter;\n/**\nFacet used to register a hook that gets a chance to update or\nreplace transaction specs before they are applied. This will\nonly be applied for transactions that don't have\n[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You\ncan either return a single transaction spec (possibly the input\ntransaction), or an array of specs (which will be combined in\nthe same way as the arguments to\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).\n\nWhen possible, it is recommended to avoid accessing\n[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,\nsince it will force creation of a state that will then be\ndiscarded again, if the transaction is actually filtered.\n\n(This functionality should be used with care. Indiscriminately\nmodifying transaction is likely to break something or degrade\nthe user experience.)\n*/\nEditorState.transactionFilter = transactionFilter;\n/**\nThis is a more limited form of\n[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),\nwhich can only add\n[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and\n[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type\nof filter runs even if the transaction has disabled regular\n[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable\nfor effects that don't need to touch the changes or selection,\nbut do want to process every transaction.\n\nExtenders run _after_ filters, when both are present.\n*/\nEditorState.transactionExtender = transactionExtender;\nCompartment.reconfigure = /*@__PURE__*/StateEffect.define();\n\n/**\nUtility function for combining behaviors to fill in a config\nobject from an array of provided configs. `defaults` should hold\ndefault values for all optional fields in `Config`.\n\nThe function will, by default, error\nwhen a field gets two values that aren't `===`-equal, but you can\nprovide combine functions per field to do something else.\n*/\nfunction combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that\ncombine = {}) {\n    let result = {};\n    for (let config of configs)\n        for (let key of Object.keys(config)) {\n            let value = config[key], current = result[key];\n            if (current === undefined)\n                result[key] = value;\n            else if (current === value || value === undefined) ; // No conflict\n            else if (Object.hasOwnProperty.call(combine, key))\n                result[key] = combine[key](current, value);\n            else\n                throw new Error(\"Config merge conflict for field \" + key);\n        }\n    for (let key in defaults)\n        if (result[key] === undefined)\n            result[key] = defaults[key];\n    return result;\n}\n\n/**\nEach range is associated with a value, which must inherit from\nthis class.\n*/\nclass RangeValue {\n    /**\n    Compare this value with another value. Used when comparing\n    rangesets. The default implementation compares by identity.\n    Unless you are only creating a fixed number of unique instances\n    of your value type, it is a good idea to implement this\n    properly.\n    */\n    eq(other) { return this == other; }\n    /**\n    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.\n    */\n    range(from, to = from) { return Range.create(from, to, this); }\n}\nRangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;\nRangeValue.prototype.point = false;\nRangeValue.prototype.mapMode = MapMode.TrackDel;\n/**\nA range associates a value with a range of positions.\n*/\nclass Range {\n    constructor(\n    /**\n    The range's start position.\n    */\n    from, \n    /**\n    Its end position.\n    */\n    to, \n    /**\n    The value associated with this range.\n    */\n    value) {\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n    /**\n    @internal\n    */\n    static create(from, to, value) {\n        return new Range(from, to, value);\n    }\n}\nfunction cmpRange(a, b) {\n    return a.from - b.from || a.value.startSide - b.value.startSide;\n}\nclass Chunk {\n    constructor(from, to, value, \n    // Chunks are marked with the largest point that occurs\n    // in them (or -1 for no points), so that scans that are\n    // only interested in points (such as the\n    // heightmap-related logic) can skip range-only chunks.\n    maxPoint) {\n        this.from = from;\n        this.to = to;\n        this.value = value;\n        this.maxPoint = maxPoint;\n    }\n    get length() { return this.to[this.to.length - 1]; }\n    // Find the index of the given position and side. Use the ranges'\n    // `from` pos when `end == false`, `to` when `end == true`.\n    findIndex(pos, side, end, startAt = 0) {\n        let arr = end ? this.to : this.from;\n        for (let lo = startAt, hi = arr.length;;) {\n            if (lo == hi)\n                return lo;\n            let mid = (lo + hi) >> 1;\n            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;\n            if (mid == lo)\n                return diff >= 0 ? lo : hi;\n            if (diff >= 0)\n                hi = mid;\n            else\n                lo = mid + 1;\n        }\n    }\n    between(offset, from, to, f) {\n        for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)\n            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)\n                return false;\n    }\n    map(offset, changes) {\n        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;\n        for (let i = 0; i < this.value.length; i++) {\n            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;\n            if (curFrom == curTo) {\n                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);\n                if (mapped == null)\n                    continue;\n                newFrom = newTo = mapped;\n                if (val.startSide != val.endSide) {\n                    newTo = changes.mapPos(curFrom, val.endSide);\n                    if (newTo < newFrom)\n                        continue;\n                }\n            }\n            else {\n                newFrom = changes.mapPos(curFrom, val.startSide);\n                newTo = changes.mapPos(curTo, val.endSide);\n                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)\n                    continue;\n            }\n            if ((newTo - newFrom || val.endSide - val.startSide) < 0)\n                continue;\n            if (newPos < 0)\n                newPos = newFrom;\n            if (val.point)\n                maxPoint = Math.max(maxPoint, newTo - newFrom);\n            value.push(val);\n            from.push(newFrom - newPos);\n            to.push(newTo - newPos);\n        }\n        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };\n    }\n}\n/**\nA range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a\nway that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and\n[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data\nstructure.\n*/\nclass RangeSet {\n    constructor(\n    /**\n    @internal\n    */\n    chunkPos, \n    /**\n    @internal\n    */\n    chunk, \n    /**\n    @internal\n    */\n    nextLayer, \n    /**\n    @internal\n    */\n    maxPoint) {\n        this.chunkPos = chunkPos;\n        this.chunk = chunk;\n        this.nextLayer = nextLayer;\n        this.maxPoint = maxPoint;\n    }\n    /**\n    @internal\n    */\n    static create(chunkPos, chunk, nextLayer, maxPoint) {\n        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);\n    }\n    /**\n    @internal\n    */\n    get length() {\n        let last = this.chunk.length - 1;\n        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);\n    }\n    /**\n    The number of ranges in the set.\n    */\n    get size() {\n        if (this.isEmpty)\n            return 0;\n        let size = this.nextLayer.size;\n        for (let chunk of this.chunk)\n            size += chunk.value.length;\n        return size;\n    }\n    /**\n    @internal\n    */\n    chunkEnd(index) {\n        return this.chunkPos[index] + this.chunk[index].length;\n    }\n    /**\n    Update the range set, optionally adding new ranges or filtering\n    out existing ones.\n    \n    (Note: The type parameter is just there as a kludge to work\n    around TypeScript variance issues that prevented `RangeSet<X>`\n    from being a subtype of `RangeSet<Y>` when `X` is a subtype of\n    `Y`.)\n    */\n    update(updateSpec) {\n        let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;\n        let filter = updateSpec.filter;\n        if (add.length == 0 && !filter)\n            return this;\n        if (sort)\n            add = add.slice().sort(cmpRange);\n        if (this.isEmpty)\n            return add.length ? RangeSet.of(add) : this;\n        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];\n        let builder = new RangeSetBuilder();\n        while (cur.value || i < add.length) {\n            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {\n                let range = add[i++];\n                if (!builder.addInner(range.from, range.to, range.value))\n                    spill.push(range);\n            }\n            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&\n                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&\n                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&\n                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {\n                cur.nextChunk();\n            }\n            else {\n                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {\n                    if (!builder.addInner(cur.from, cur.to, cur.value))\n                        spill.push(Range.create(cur.from, cur.to, cur.value));\n                }\n                cur.next();\n            }\n        }\n        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty\n            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));\n    }\n    /**\n    Map this range set through a set of changes, return the new set.\n    */\n    map(changes) {\n        if (changes.empty || this.isEmpty)\n            return this;\n        let chunks = [], chunkPos = [], maxPoint = -1;\n        for (let i = 0; i < this.chunk.length; i++) {\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            let touch = changes.touchesRange(start, start + chunk.length);\n            if (touch === false) {\n                maxPoint = Math.max(maxPoint, chunk.maxPoint);\n                chunks.push(chunk);\n                chunkPos.push(changes.mapPos(start));\n            }\n            else if (touch === true) {\n                let { mapped, pos } = chunk.map(start, changes);\n                if (mapped) {\n                    maxPoint = Math.max(maxPoint, mapped.maxPoint);\n                    chunks.push(mapped);\n                    chunkPos.push(pos);\n                }\n            }\n        }\n        let next = this.nextLayer.map(changes);\n        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);\n    }\n    /**\n    Iterate over the ranges that touch the region `from` to `to`,\n    calling `f` for each. There is no guarantee that the ranges will\n    be reported in any specific order. When the callback returns\n    `false`, iteration stops.\n    */\n    between(from, to, f) {\n        if (this.isEmpty)\n            return;\n        for (let i = 0; i < this.chunk.length; i++) {\n            let start = this.chunkPos[i], chunk = this.chunk[i];\n            if (to >= start && from <= start + chunk.length &&\n                chunk.between(start, from - start, to - start, f) === false)\n                return;\n        }\n        this.nextLayer.between(from, to, f);\n    }\n    /**\n    Iterate over the ranges in this set, in order, including all\n    ranges that end at or after `from`.\n    */\n    iter(from = 0) {\n        return HeapCursor.from([this]).goto(from);\n    }\n    /**\n    @internal\n    */\n    get isEmpty() { return this.nextLayer == this; }\n    /**\n    Iterate over the ranges in a collection of sets, in order,\n    starting from `from`.\n    */\n    static iter(sets, from = 0) {\n        return HeapCursor.from(sets).goto(from);\n    }\n    /**\n    Iterate over two groups of sets, calling methods on `comparator`\n    to notify it of possible differences.\n    */\n    static compare(oldSets, newSets, \n    /**\n    This indicates how the underlying data changed between these\n    ranges, and is needed to synchronize the iteration.\n    */\n    textDiff, comparator, \n    /**\n    Can be used to ignore all non-point ranges, and points below\n    the given size. When -1, all ranges are compared.\n    */\n    minPointSize = -1) {\n        let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n        let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);\n        let sharedChunks = findSharedChunks(a, b, textDiff);\n        let sideA = new SpanCursor(a, sharedChunks, minPointSize);\n        let sideB = new SpanCursor(b, sharedChunks, minPointSize);\n        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));\n        if (textDiff.empty && textDiff.length == 0)\n            compare(sideA, 0, sideB, 0, 0, comparator);\n    }\n    /**\n    Compare the contents of two groups of range sets, returning true\n    if they are equivalent in the given range.\n    */\n    static eq(oldSets, newSets, from = 0, to) {\n        if (to == null)\n            to = 1000000000 /* C.Far */ - 1;\n        let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);\n        let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);\n        if (a.length != b.length)\n            return false;\n        if (!a.length)\n            return true;\n        let sharedChunks = findSharedChunks(a, b);\n        let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);\n        for (;;) {\n            if (sideA.to != sideB.to ||\n                !sameValues(sideA.active, sideB.active) ||\n                sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))\n                return false;\n            if (sideA.to > to)\n                return true;\n            sideA.next();\n            sideB.next();\n        }\n    }\n    /**\n    Iterate over a group of range sets at the same time, notifying\n    the iterator about the ranges covering every given piece of\n    content. Returns the open count (see\n    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end\n    of the iteration.\n    */\n    static spans(sets, from, to, iterator, \n    /**\n    When given and greater than -1, only points of at least this\n    size are taken into account.\n    */\n    minPointSize = -1) {\n        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;\n        let openRanges = cursor.openStart;\n        for (;;) {\n            let curTo = Math.min(cursor.to, to);\n            if (cursor.point) {\n                let active = cursor.activeForPoint(cursor.to);\n                let openCount = cursor.pointFrom < from ? active.length + 1\n                    : cursor.point.startSide < 0 ? active.length\n                        : Math.min(active.length, openRanges);\n                iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);\n                openRanges = Math.min(cursor.openEnd(curTo), active.length);\n            }\n            else if (curTo > pos) {\n                iterator.span(pos, curTo, cursor.active, openRanges);\n                openRanges = cursor.openEnd(curTo);\n            }\n            if (cursor.to > to)\n                return openRanges + (cursor.point && cursor.to > to ? 1 : 0);\n            pos = cursor.to;\n            cursor.next();\n        }\n    }\n    /**\n    Create a range set for the given range or array of ranges. By\n    default, this expects the ranges to be _sorted_ (by start\n    position and, if two start at the same position,\n    `value.startSide`). You can pass `true` as second argument to\n    cause the method to sort them.\n    */\n    static of(ranges, sort = false) {\n        let build = new RangeSetBuilder();\n        for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)\n            build.add(range.from, range.to, range.value);\n        return build.finish();\n    }\n    /**\n    Join an array of range sets into a single set.\n    */\n    static join(sets) {\n        if (!sets.length)\n            return RangeSet.empty;\n        let result = sets[sets.length - 1];\n        for (let i = sets.length - 2; i >= 0; i--) {\n            for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)\n                result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));\n        }\n        return result;\n    }\n}\n/**\nThe empty set of ranges.\n*/\nRangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);\nfunction lazySort(ranges) {\n    if (ranges.length > 1)\n        for (let prev = ranges[0], i = 1; i < ranges.length; i++) {\n            let cur = ranges[i];\n            if (cmpRange(prev, cur) > 0)\n                return ranges.slice().sort(cmpRange);\n            prev = cur;\n        }\n    return ranges;\n}\nRangeSet.empty.nextLayer = RangeSet.empty;\n/**\nA range set builder is a data structure that helps build up a\n[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating\nan array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.\n*/\nclass RangeSetBuilder {\n    finishChunk(newArrays) {\n        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));\n        this.chunkPos.push(this.chunkStart);\n        this.chunkStart = -1;\n        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);\n        this.maxPoint = -1;\n        if (newArrays) {\n            this.from = [];\n            this.to = [];\n            this.value = [];\n        }\n    }\n    /**\n    Create an empty builder.\n    */\n    constructor() {\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunkStart = -1;\n        this.last = null;\n        this.lastFrom = -1000000000 /* C.Far */;\n        this.lastTo = -1000000000 /* C.Far */;\n        this.from = [];\n        this.to = [];\n        this.value = [];\n        this.maxPoint = -1;\n        this.setMaxPoint = -1;\n        this.nextLayer = null;\n    }\n    /**\n    Add a range. Ranges should be added in sorted (by `from` and\n    `value.startSide`) order.\n    */\n    add(from, to, value) {\n        if (!this.addInner(from, to, value))\n            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);\n    }\n    /**\n    @internal\n    */\n    addInner(from, to, value) {\n        let diff = from - this.lastTo || value.startSide - this.last.endSide;\n        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)\n            throw new Error(\"Ranges must be added sorted by `from` position and `startSide`\");\n        if (diff < 0)\n            return false;\n        if (this.from.length == 250 /* C.ChunkSize */)\n            this.finishChunk(true);\n        if (this.chunkStart < 0)\n            this.chunkStart = from;\n        this.from.push(from - this.chunkStart);\n        this.to.push(to - this.chunkStart);\n        this.last = value;\n        this.lastFrom = from;\n        this.lastTo = to;\n        this.value.push(value);\n        if (value.point)\n            this.maxPoint = Math.max(this.maxPoint, to - from);\n        return true;\n    }\n    /**\n    @internal\n    */\n    addChunk(from, chunk) {\n        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)\n            return false;\n        if (this.from.length)\n            this.finishChunk(true);\n        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);\n        this.chunks.push(chunk);\n        this.chunkPos.push(from);\n        let last = chunk.value.length - 1;\n        this.last = chunk.value[last];\n        this.lastFrom = chunk.from[last] + from;\n        this.lastTo = chunk.to[last] + from;\n        return true;\n    }\n    /**\n    Finish the range set. Returns the new set. The builder can't be\n    used anymore after this has been called.\n    */\n    finish() { return this.finishInner(RangeSet.empty); }\n    /**\n    @internal\n    */\n    finishInner(next) {\n        if (this.from.length)\n            this.finishChunk(false);\n        if (this.chunks.length == 0)\n            return next;\n        let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);\n        this.from = null; // Make sure further `add` calls produce errors\n        return result;\n    }\n}\nfunction findSharedChunks(a, b, textDiff) {\n    let inA = new Map();\n    for (let set of a)\n        for (let i = 0; i < set.chunk.length; i++)\n            if (set.chunk[i].maxPoint <= 0)\n                inA.set(set.chunk[i], set.chunkPos[i]);\n    let shared = new Set();\n    for (let set of b)\n        for (let i = 0; i < set.chunk.length; i++) {\n            let known = inA.get(set.chunk[i]);\n            if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&\n                !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))\n                shared.add(set.chunk[i]);\n        }\n    return shared;\n}\nclass LayerCursor {\n    constructor(layer, skip, minPoint, rank = 0) {\n        this.layer = layer;\n        this.skip = skip;\n        this.minPoint = minPoint;\n        this.rank = rank;\n    }\n    get startSide() { return this.value ? this.value.startSide : 0; }\n    get endSide() { return this.value ? this.value.endSide : 0; }\n    goto(pos, side = -1000000000 /* C.Far */) {\n        this.chunkIndex = this.rangeIndex = 0;\n        this.gotoInner(pos, side, false);\n        return this;\n    }\n    gotoInner(pos, side, forward) {\n        while (this.chunkIndex < this.layer.chunk.length) {\n            let next = this.layer.chunk[this.chunkIndex];\n            if (!(this.skip && this.skip.has(next) ||\n                this.layer.chunkEnd(this.chunkIndex) < pos ||\n                next.maxPoint < this.minPoint))\n                break;\n            this.chunkIndex++;\n            forward = false;\n        }\n        if (this.chunkIndex < this.layer.chunk.length) {\n            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);\n            if (!forward || this.rangeIndex < rangeIndex)\n                this.setRangeIndex(rangeIndex);\n        }\n        this.next();\n    }\n    forward(pos, side) {\n        if ((this.to - pos || this.endSide - side) < 0)\n            this.gotoInner(pos, side, true);\n    }\n    next() {\n        for (;;) {\n            if (this.chunkIndex == this.layer.chunk.length) {\n                this.from = this.to = 1000000000 /* C.Far */;\n                this.value = null;\n                break;\n            }\n            else {\n                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];\n                let from = chunkPos + chunk.from[this.rangeIndex];\n                this.from = from;\n                this.to = chunkPos + chunk.to[this.rangeIndex];\n                this.value = chunk.value[this.rangeIndex];\n                this.setRangeIndex(this.rangeIndex + 1);\n                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)\n                    break;\n            }\n        }\n    }\n    setRangeIndex(index) {\n        if (index == this.layer.chunk[this.chunkIndex].value.length) {\n            this.chunkIndex++;\n            if (this.skip) {\n                while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))\n                    this.chunkIndex++;\n            }\n            this.rangeIndex = 0;\n        }\n        else {\n            this.rangeIndex = index;\n        }\n    }\n    nextChunk() {\n        this.chunkIndex++;\n        this.rangeIndex = 0;\n        this.next();\n    }\n    compare(other) {\n        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||\n            this.to - other.to || this.endSide - other.endSide;\n    }\n}\nclass HeapCursor {\n    constructor(heap) {\n        this.heap = heap;\n    }\n    static from(sets, skip = null, minPoint = -1) {\n        let heap = [];\n        for (let i = 0; i < sets.length; i++) {\n            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {\n                if (cur.maxPoint >= minPoint)\n                    heap.push(new LayerCursor(cur, skip, minPoint, i));\n            }\n        }\n        return heap.length == 1 ? heap[0] : new HeapCursor(heap);\n    }\n    get startSide() { return this.value ? this.value.startSide : 0; }\n    goto(pos, side = -1000000000 /* C.Far */) {\n        for (let cur of this.heap)\n            cur.goto(pos, side);\n        for (let i = this.heap.length >> 1; i >= 0; i--)\n            heapBubble(this.heap, i);\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        for (let cur of this.heap)\n            cur.forward(pos, side);\n        for (let i = this.heap.length >> 1; i >= 0; i--)\n            heapBubble(this.heap, i);\n        if ((this.to - pos || this.value.endSide - side) < 0)\n            this.next();\n    }\n    next() {\n        if (this.heap.length == 0) {\n            this.from = this.to = 1000000000 /* C.Far */;\n            this.value = null;\n            this.rank = -1;\n        }\n        else {\n            let top = this.heap[0];\n            this.from = top.from;\n            this.to = top.to;\n            this.value = top.value;\n            this.rank = top.rank;\n            if (top.value)\n                top.next();\n            heapBubble(this.heap, 0);\n        }\n    }\n}\nfunction heapBubble(heap, index) {\n    for (let cur = heap[index];;) {\n        let childIndex = (index << 1) + 1;\n        if (childIndex >= heap.length)\n            break;\n        let child = heap[childIndex];\n        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {\n            child = heap[childIndex + 1];\n            childIndex++;\n        }\n        if (cur.compare(child) < 0)\n            break;\n        heap[childIndex] = cur;\n        heap[index] = child;\n        index = childIndex;\n    }\n}\nclass SpanCursor {\n    constructor(sets, skip, minPoint) {\n        this.minPoint = minPoint;\n        this.active = [];\n        this.activeTo = [];\n        this.activeRank = [];\n        this.minActive = -1;\n        // A currently active point range, if any\n        this.point = null;\n        this.pointFrom = 0;\n        this.pointRank = 0;\n        this.to = -1000000000 /* C.Far */;\n        this.endSide = 0;\n        // The amount of open active ranges at the start of the iterator.\n        // Not including points.\n        this.openStart = -1;\n        this.cursor = HeapCursor.from(sets, skip, minPoint);\n    }\n    goto(pos, side = -1000000000 /* C.Far */) {\n        this.cursor.goto(pos, side);\n        this.active.length = this.activeTo.length = this.activeRank.length = 0;\n        this.minActive = -1;\n        this.to = pos;\n        this.endSide = side;\n        this.openStart = -1;\n        this.next();\n        return this;\n    }\n    forward(pos, side) {\n        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)\n            this.removeActive(this.minActive);\n        this.cursor.forward(pos, side);\n    }\n    removeActive(index) {\n        remove(this.active, index);\n        remove(this.activeTo, index);\n        remove(this.activeRank, index);\n        this.minActive = findMinIndex(this.active, this.activeTo);\n    }\n    addActive(trackOpen) {\n        let i = 0, { value, to, rank } = this.cursor;\n        // Organize active marks by rank first, then by size\n        while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)\n            i++;\n        insert(this.active, i, value);\n        insert(this.activeTo, i, to);\n        insert(this.activeRank, i, rank);\n        if (trackOpen)\n            insert(trackOpen, i, this.cursor.from);\n        this.minActive = findMinIndex(this.active, this.activeTo);\n    }\n    // After calling this, if `this.point` != null, the next range is a\n    // point. Otherwise, it's a regular range, covered by `this.active`.\n    next() {\n        let from = this.to, wasPoint = this.point;\n        this.point = null;\n        let trackOpen = this.openStart < 0 ? [] : null;\n        for (;;) {\n            let a = this.minActive;\n            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {\n                if (this.activeTo[a] > from) {\n                    this.to = this.activeTo[a];\n                    this.endSide = this.active[a].endSide;\n                    break;\n                }\n                this.removeActive(a);\n                if (trackOpen)\n                    remove(trackOpen, a);\n            }\n            else if (!this.cursor.value) {\n                this.to = this.endSide = 1000000000 /* C.Far */;\n                break;\n            }\n            else if (this.cursor.from > from) {\n                this.to = this.cursor.from;\n                this.endSide = this.cursor.startSide;\n                break;\n            }\n            else {\n                let nextVal = this.cursor.value;\n                if (!nextVal.point) { // Opening a range\n                    this.addActive(trackOpen);\n                    this.cursor.next();\n                }\n                else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {\n                    // Ignore any non-empty points that end precisely at the end of the prev point\n                    this.cursor.next();\n                }\n                else { // New point\n                    this.point = nextVal;\n                    this.pointFrom = this.cursor.from;\n                    this.pointRank = this.cursor.rank;\n                    this.to = this.cursor.to;\n                    this.endSide = nextVal.endSide;\n                    this.cursor.next();\n                    this.forward(this.to, this.endSide);\n                    break;\n                }\n            }\n        }\n        if (trackOpen) {\n            this.openStart = 0;\n            for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)\n                this.openStart++;\n        }\n    }\n    activeForPoint(to) {\n        if (!this.active.length)\n            return this.active;\n        let active = [];\n        for (let i = this.active.length - 1; i >= 0; i--) {\n            if (this.activeRank[i] < this.pointRank)\n                break;\n            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)\n                active.push(this.active[i]);\n        }\n        return active.reverse();\n    }\n    openEnd(to) {\n        let open = 0;\n        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)\n            open++;\n        return open;\n    }\n}\nfunction compare(a, startA, b, startB, length, comparator) {\n    a.goto(startA);\n    b.goto(startB);\n    let endB = startB + length;\n    let pos = startB, dPos = startB - startA;\n    for (;;) {\n        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;\n        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);\n        if (a.point || b.point) {\n            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&\n                sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))\n                comparator.comparePoint(pos, clipEnd, a.point, b.point);\n        }\n        else {\n            if (clipEnd > pos && !sameValues(a.active, b.active))\n                comparator.compareRange(pos, clipEnd, a.active, b.active);\n        }\n        if (end > endB)\n            break;\n        pos = end;\n        if (diff <= 0)\n            a.next();\n        if (diff >= 0)\n            b.next();\n    }\n}\nfunction sameValues(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (a[i] != b[i] && !a[i].eq(b[i]))\n            return false;\n    return true;\n}\nfunction remove(array, index) {\n    for (let i = index, e = array.length - 1; i < e; i++)\n        array[i] = array[i + 1];\n    array.pop();\n}\nfunction insert(array, index, value) {\n    for (let i = array.length - 1; i >= index; i--)\n        array[i + 1] = array[i];\n    array[index] = value;\n}\nfunction findMinIndex(value, array) {\n    let found = -1, foundPos = 1000000000 /* C.Far */;\n    for (let i = 0; i < array.length; i++)\n        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {\n            found = i;\n            foundPos = array[i];\n        }\n    return found;\n}\n\n/**\nCount the column position at the given offset into the string,\ntaking extending characters and tab size into account.\n*/\nfunction countColumn(string, tabSize, to = string.length) {\n    let n = 0;\n    for (let i = 0; i < to;) {\n        if (string.charCodeAt(i) == 9) {\n            n += tabSize - (n % tabSize);\n            i++;\n        }\n        else {\n            n++;\n            i = findClusterBreak(string, i);\n        }\n    }\n    return n;\n}\n/**\nFind the offset that corresponds to the given column position in a\nstring, taking extending characters and tab size into account. By\ndefault, the string length is returned when it is too short to\nreach the column. Pass `strict` true to make it return -1 in that\nsituation.\n*/\nfunction findColumn(string, col, tabSize, strict) {\n    for (let i = 0, n = 0;;) {\n        if (n >= col)\n            return i;\n        if (i == string.length)\n            break;\n        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;\n        i = findClusterBreak(string, i);\n    }\n    return strict === true ? -1 : string.length;\n}\n\nexport { Annotation, AnnotationType, ChangeDesc, ChangeSet, CharCategory, Compartment, EditorSelection, EditorState, Facet, Line, MapMode, Prec, Range, RangeSet, RangeSetBuilder, RangeValue, SelectionRange, StateEffect, StateEffectType, StateField, Text, Transaction, codePointAt, codePointSize, combineConfig, countColumn, findClusterBreak, findColumn, fromCodePoint };\n","const C = \"\\u037c\"\nconst COUNT = typeof Symbol == \"undefined\" ? \"__\" + C : Symbol.for(C)\nconst SET = typeof Symbol == \"undefined\" ? \"__styleSet\" + Math.floor(Math.random() * 1e8) : Symbol(\"styleSet\")\nconst top = typeof globalThis != \"undefined\" ? globalThis : typeof window != \"undefined\" ? window : {}\n\n// :: - Style modules encapsulate a set of CSS rules defined from\n// JavaScript. Their definitions are only available in a given DOM\n// root after it has been _mounted_ there with `StyleModule.mount`.\n//\n// Style modules should be created once and stored somewhere, as\n// opposed to re-creating them every time you need them. The amount of\n// CSS rules generated for a given DOM root is bounded by the amount\n// of style modules that were used. So to avoid leaking rules, don't\n// create these dynamically, but treat them as one-time allocations.\nexport class StyleModule {\n  // :: (Object<Style>, ?{finish: ?(string) → string})\n  // Create a style module from the given spec.\n  //\n  // When `finish` is given, it is called on regular (non-`@`)\n  // selectors (after `&` expansion) to compute the final selector.\n  constructor(spec, options) {\n    this.rules = []\n    let {finish} = options || {}\n\n    function splitSelector(selector) {\n      return /^@/.test(selector) ? [selector] : selector.split(/,\\s*/)\n    }\n\n    function render(selectors, spec, target, isKeyframes) {\n      let local = [], isAt = /^@(\\w+)\\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == \"keyframes\"\n      if (isAt && spec == null) return target.push(selectors[0] + \";\")\n      for (let prop in spec) {\n        let value = spec[prop]\n        if (/&/.test(prop)) {\n          render(prop.split(/,\\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),\n                 value, target)\n        } else if (value && typeof value == \"object\") {\n          if (!isAt) throw new RangeError(\"The value of a property (\" + prop + \") should be a primitive value.\")\n          render(splitSelector(prop), value, local, keyframes)\n        } else if (value != null) {\n          local.push(prop.replace(/_.*/, \"\").replace(/[A-Z]/g, l => \"-\" + l.toLowerCase()) + \": \" + value + \";\")\n        }\n      }\n      if (local.length || keyframes) {\n        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(\", \") +\n                    \" {\" + local.join(\" \") + \"}\")\n      }\n    }\n\n    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules)\n  }\n\n  // :: () → string\n  // Returns a string containing the module's CSS rules.\n  getRules() { return this.rules.join(\"\\n\") }\n\n  // :: () → string\n  // Generate a new unique CSS class name.\n  static newName() {\n    let id = top[COUNT] || 1\n    top[COUNT] = id + 1\n    return C + id.toString(36)\n  }\n\n  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})\n  //\n  // Mount the given set of modules in the given DOM root, which ensures\n  // that the CSS rules defined by the module are available in that\n  // context.\n  //\n  // Rules are only added to the document once per root.\n  //\n  // Rule order will follow the order of the modules, so that rules from\n  // modules later in the array take precedence of those from earlier\n  // modules. If you call this function multiple times for the same root\n  // in a way that changes the order of already mounted modules, the old\n  // order will be changed.\n  //\n  // If a Content Security Policy nonce is provided, it is added to\n  // the `<style>` tag generated by the library.\n  static mount(root, modules, options) {\n    let set = root[SET], nonce = options && options.nonce\n    if (!set) set = new StyleSet(root, nonce)\n    else if (nonce) set.setNonce(nonce)\n    set.mount(Array.isArray(modules) ? modules : [modules], root)\n  }\n}\n\nlet adoptedSet = new Map //<Document, StyleSet>\n\nclass StyleSet {\n  constructor(root, nonce) {\n    let doc = root.ownerDocument || root, win = doc.defaultView\n    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {\n      let adopted = adoptedSet.get(doc)\n      if (adopted) return root[SET] = adopted\n      this.sheet = new win.CSSStyleSheet\n      adoptedSet.set(doc, this)\n    } else {\n      this.styleTag = doc.createElement(\"style\")\n      if (nonce) this.styleTag.setAttribute(\"nonce\", nonce)\n    }\n    this.modules = []\n    root[SET] = this\n  }\n\n  mount(modules, root) {\n    let sheet = this.sheet\n    let pos = 0 /* Current rule offset */, j = 0 /* Index into this.modules */\n    for (let i = 0; i < modules.length; i++) {\n      let mod = modules[i], index = this.modules.indexOf(mod)\n      if (index < j && index > -1) { // Ordering conflict\n        this.modules.splice(index, 1)\n        j--\n        index = -1\n      }\n      if (index == -1) {\n        this.modules.splice(j++, 0, mod)\n        if (sheet) for (let k = 0; k < mod.rules.length; k++)\n          sheet.insertRule(mod.rules[k], pos++)\n      } else {\n        while (j < index) pos += this.modules[j++].rules.length\n        pos += mod.rules.length\n        j++\n      }\n    }\n\n    if (sheet) {\n      if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)\n        root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets]\n    } else {\n      let text = \"\"\n      for (let i = 0; i < this.modules.length; i++)\n        text += this.modules[i].getRules() + \"\\n\"\n      this.styleTag.textContent = text\n      let target = root.head || root\n      if (this.styleTag.parentNode != target)\n        target.insertBefore(this.styleTag, target.firstChild)\n    }\n  }\n\n  setNonce(nonce) {\n    if (this.styleTag && this.styleTag.getAttribute(\"nonce\") != nonce)\n      this.styleTag.setAttribute(\"nonce\", nonce)\n  }\n}\n\n// Style::Object<union<Style,string>>\n//\n// A style is an object that, in the simple case, maps CSS property\n// names to strings holding their values, as in `{color: \"red\",\n// fontWeight: \"bold\"}`. The property names can be given in\n// camel-case—the library will insert a dash before capital letters\n// when converting them to CSS.\n//\n// If you include an underscore in a property name, it and everything\n// after it will be removed from the output, which can be useful when\n// providing a property multiple times, for browser compatibility\n// reasons.\n//\n// A property in a style object can also be a sub-selector, which\n// extends the current context to add a pseudo-selector or a child\n// selector. Such a property should contain a `&` character, which\n// will be replaced by the current selector. For example `{\"&:before\":\n// {content: '\"hi\"'}}`. Sub-selectors and regular properties can\n// freely be mixed in a given object. Any property containing a `&` is\n// assumed to be a sub-selector.\n//\n// Finally, a property can specify an @-block to be wrapped around the\n// styles defined inside the object that's the property's value. For\n// example to create a media query you can do `{\"@media screen and\n// (min-width: 400px)\": {...}}`.\n","export var base = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n}\n\nexport var shift = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \":\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: \"\\\"\"\n}\n\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\nvar ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n// Fill in the digit keys\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\n\n// The function keys\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\n\n// And the alphabetic keys\nfor (var i = 65; i <= 90; i++) {\n  base[i] = String.fromCharCode(i + 32)\n  shift[i] = String.fromCharCode(i)\n}\n\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\n\nexport function keyName(event) {\n  // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.\n  // On IE, shift effect is never included in `.key`.\n  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||\n      ie && event.shiftKey && event.key && event.key.length == 1 ||\n      event.key == \"Unidentified\"\n  var name = (!ignoreKey && event.key) ||\n    (event.shiftKey ? shift : base)[event.keyCode] ||\n    event.key || \"Unidentified\"\n  // Edge sometimes produces wrong names (Issue #3)\n  if (name == \"Esc\") name = \"Escape\"\n  if (name == \"Del\") name = \"Delete\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n  if (name == \"Left\") name = \"ArrowLeft\"\n  if (name == \"Up\") name = \"ArrowUp\"\n  if (name == \"Right\") name = \"ArrowRight\"\n  if (name == \"Down\") name = \"ArrowDown\"\n  return name\n}\n","import { Text, RangeSet, MapMode, RangeValue, findClusterBreak, EditorSelection, Facet, StateEffect, ChangeSet, findColumn, CharCategory, Annotation, EditorState, Transaction, Prec, codePointAt, codePointSize, combineConfig, StateField, RangeSetBuilder, countColumn } from '@codemirror/state';\nimport { StyleModule } from 'style-mod';\nimport { keyName, base, shift } from 'w3c-keyname';\n\nfunction getSelection(root) {\n    let target;\n    // Browsers differ on whether shadow roots have a getSelection\n    // method. If it exists, use that, otherwise, call it on the\n    // document.\n    if (root.nodeType == 11) { // Shadow root\n        target = root.getSelection ? root : root.ownerDocument;\n    }\n    else {\n        target = root;\n    }\n    return target.getSelection();\n}\nfunction contains(dom, node) {\n    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;\n}\nfunction deepActiveElement(doc) {\n    let elt = doc.activeElement;\n    while (elt && elt.shadowRoot)\n        elt = elt.shadowRoot.activeElement;\n    return elt;\n}\nfunction hasSelection(dom, selection) {\n    if (!selection.anchorNode)\n        return false;\n    try {\n        // Firefox will raise 'permission denied' errors when accessing\n        // properties of `sel.anchorNode` when it's in a generated CSS\n        // element.\n        return contains(dom, selection.anchorNode);\n    }\n    catch (_) {\n        return false;\n    }\n}\nfunction clientRectsFor(dom) {\n    if (dom.nodeType == 3)\n        return textRange(dom, 0, dom.nodeValue.length).getClientRects();\n    else if (dom.nodeType == 1)\n        return dom.getClientRects();\n    else\n        return [];\n}\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nfunction isEquivalentPosition(node, off, targetNode, targetOff) {\n    return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||\n        scanFor(node, off, targetNode, targetOff, 1)) : false;\n}\nfunction domIndex(node) {\n    for (var index = 0;; index++) {\n        node = node.previousSibling;\n        if (!node)\n            return index;\n    }\n}\nfunction isBlockElement(node) {\n    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\\d|SECTION|PRE)$/.test(node.nodeName);\n}\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n    for (;;) {\n        if (node == targetNode && off == targetOff)\n            return true;\n        if (off == (dir < 0 ? 0 : maxOffset(node))) {\n            if (node.nodeName == \"DIV\")\n                return false;\n            let parent = node.parentNode;\n            if (!parent || parent.nodeType != 1)\n                return false;\n            off = domIndex(node) + (dir < 0 ? 0 : 1);\n            node = parent;\n        }\n        else if (node.nodeType == 1) {\n            node = node.childNodes[off + (dir < 0 ? -1 : 0)];\n            if (node.nodeType == 1 && node.contentEditable == \"false\")\n                return false;\n            off = dir < 0 ? maxOffset(node) : 0;\n        }\n        else {\n            return false;\n        }\n    }\n}\nfunction maxOffset(node) {\n    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;\n}\nfunction flattenRect(rect, left) {\n    let x = left ? rect.left : rect.right;\n    return { left: x, right: x, top: rect.top, bottom: rect.bottom };\n}\nfunction windowRect(win) {\n    let vp = win.visualViewport;\n    if (vp)\n        return {\n            left: 0, right: vp.width,\n            top: 0, bottom: vp.height\n        };\n    return { left: 0, right: win.innerWidth,\n        top: 0, bottom: win.innerHeight };\n}\nfunction getScale(elt, rect) {\n    let scaleX = rect.width / elt.offsetWidth;\n    let scaleY = rect.height / elt.offsetHeight;\n    if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)\n        scaleX = 1;\n    if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)\n        scaleY = 1;\n    return { scaleX, scaleY };\n}\nfunction scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\n    for (let cur = dom, stop = false; cur && !stop;) {\n        if (cur.nodeType == 1) { // Element\n            let bounding, top = cur == doc.body;\n            let scaleX = 1, scaleY = 1;\n            if (top) {\n                bounding = windowRect(win);\n            }\n            else {\n                if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))\n                    stop = true;\n                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {\n                    cur = cur.assignedSlot || cur.parentNode;\n                    continue;\n                }\n                let rect = cur.getBoundingClientRect();\n                ({ scaleX, scaleY } = getScale(cur, rect));\n                // Make sure scrollbar width isn't included in the rectangle\n                bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,\n                    top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };\n            }\n            let moveX = 0, moveY = 0;\n            if (y == \"nearest\") {\n                if (rect.top < bounding.top) {\n                    moveY = -(bounding.top - rect.top + yMargin);\n                    if (side > 0 && rect.bottom > bounding.bottom + moveY)\n                        moveY = rect.bottom - bounding.bottom + moveY + yMargin;\n                }\n                else if (rect.bottom > bounding.bottom) {\n                    moveY = rect.bottom - bounding.bottom + yMargin;\n                    if (side < 0 && (rect.top - moveY) < bounding.top)\n                        moveY = -(bounding.top + moveY - rect.top + yMargin);\n                }\n            }\n            else {\n                let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;\n                let targetTop = y == \"center\" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :\n                    y == \"start\" || y == \"center\" && side < 0 ? rect.top - yMargin :\n                        rect.bottom - boundingHeight + yMargin;\n                moveY = targetTop - bounding.top;\n            }\n            if (x == \"nearest\") {\n                if (rect.left < bounding.left) {\n                    moveX = -(bounding.left - rect.left + xMargin);\n                    if (side > 0 && rect.right > bounding.right + moveX)\n                        moveX = rect.right - bounding.right + moveX + xMargin;\n                }\n                else if (rect.right > bounding.right) {\n                    moveX = rect.right - bounding.right + xMargin;\n                    if (side < 0 && rect.left < bounding.left + moveX)\n                        moveX = -(bounding.left + moveX - rect.left + xMargin);\n                }\n            }\n            else {\n                let targetLeft = x == \"center\" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :\n                    (x == \"start\") == ltr ? rect.left - xMargin :\n                        rect.right - (bounding.right - bounding.left) + xMargin;\n                moveX = targetLeft - bounding.left;\n            }\n            if (moveX || moveY) {\n                if (top) {\n                    win.scrollBy(moveX, moveY);\n                }\n                else {\n                    let movedX = 0, movedY = 0;\n                    if (moveY) {\n                        let start = cur.scrollTop;\n                        cur.scrollTop += moveY / scaleY;\n                        movedY = (cur.scrollTop - start) * scaleY;\n                    }\n                    if (moveX) {\n                        let start = cur.scrollLeft;\n                        cur.scrollLeft += moveX / scaleX;\n                        movedX = (cur.scrollLeft - start) * scaleX;\n                    }\n                    rect = { left: rect.left - movedX, top: rect.top - movedY,\n                        right: rect.right - movedX, bottom: rect.bottom - movedY };\n                    if (movedX && Math.abs(movedX - moveX) < 1)\n                        x = \"nearest\";\n                    if (movedY && Math.abs(movedY - moveY) < 1)\n                        y = \"nearest\";\n                }\n            }\n            if (top)\n                break;\n            cur = cur.assignedSlot || cur.parentNode;\n        }\n        else if (cur.nodeType == 11) { // A shadow root\n            cur = cur.host;\n        }\n        else {\n            break;\n        }\n    }\n}\nfunction scrollableParent(dom) {\n    let doc = dom.ownerDocument;\n    for (let cur = dom.parentNode; cur;) {\n        if (cur == doc.body) {\n            break;\n        }\n        else if (cur.nodeType == 1) {\n            if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)\n                return cur;\n            cur = cur.assignedSlot || cur.parentNode;\n        }\n        else if (cur.nodeType == 11) {\n            cur = cur.host;\n        }\n        else {\n            break;\n        }\n    }\n    return null;\n}\nclass DOMSelectionState {\n    constructor() {\n        this.anchorNode = null;\n        this.anchorOffset = 0;\n        this.focusNode = null;\n        this.focusOffset = 0;\n    }\n    eq(domSel) {\n        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&\n            this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;\n    }\n    setRange(range) {\n        let { anchorNode, focusNode } = range;\n        // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)\n        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));\n    }\n    set(anchorNode, anchorOffset, focusNode, focusOffset) {\n        this.anchorNode = anchorNode;\n        this.anchorOffset = anchorOffset;\n        this.focusNode = focusNode;\n        this.focusOffset = focusOffset;\n    }\n}\nlet preventScrollSupported = null;\n// Feature-detects support for .focus({preventScroll: true}), and uses\n// a fallback kludge when not supported.\nfunction focusPreventScroll(dom) {\n    if (dom.setActive)\n        return dom.setActive(); // in IE\n    if (preventScrollSupported)\n        return dom.focus(preventScrollSupported);\n    let stack = [];\n    for (let cur = dom; cur; cur = cur.parentNode) {\n        stack.push(cur, cur.scrollTop, cur.scrollLeft);\n        if (cur == cur.ownerDocument)\n            break;\n    }\n    dom.focus(preventScrollSupported == null ? {\n        get preventScroll() {\n            preventScrollSupported = { preventScroll: true };\n            return true;\n        }\n    } : undefined);\n    if (!preventScrollSupported) {\n        preventScrollSupported = false;\n        for (let i = 0; i < stack.length;) {\n            let elt = stack[i++], top = stack[i++], left = stack[i++];\n            if (elt.scrollTop != top)\n                elt.scrollTop = top;\n            if (elt.scrollLeft != left)\n                elt.scrollLeft = left;\n        }\n    }\n}\nlet scratchRange;\nfunction textRange(node, from, to = from) {\n    let range = scratchRange || (scratchRange = document.createRange());\n    range.setEnd(node, to);\n    range.setStart(node, from);\n    return range;\n}\nfunction dispatchKey(elt, name, code, mods) {\n    let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };\n    if (mods)\n        ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);\n    let down = new KeyboardEvent(\"keydown\", options);\n    down.synthetic = true;\n    elt.dispatchEvent(down);\n    let up = new KeyboardEvent(\"keyup\", options);\n    up.synthetic = true;\n    elt.dispatchEvent(up);\n    return down.defaultPrevented || up.defaultPrevented;\n}\nfunction getRoot(node) {\n    while (node) {\n        if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))\n            return node;\n        node = node.assignedSlot || node.parentNode;\n    }\n    return null;\n}\nfunction clearAttributes(node) {\n    while (node.attributes.length)\n        node.removeAttributeNode(node.attributes[0]);\n}\nfunction atElementStart(doc, selection) {\n    let node = selection.focusNode, offset = selection.focusOffset;\n    if (!node || selection.anchorNode != node || selection.anchorOffset != offset)\n        return false;\n    // Safari can report bogus offsets (#1152)\n    offset = Math.min(offset, maxOffset(node));\n    for (;;) {\n        if (offset) {\n            if (node.nodeType != 1)\n                return false;\n            let prev = node.childNodes[offset - 1];\n            if (prev.contentEditable == \"false\")\n                offset--;\n            else {\n                node = prev;\n                offset = maxOffset(node);\n            }\n        }\n        else if (node == doc) {\n            return true;\n        }\n        else {\n            offset = domIndex(node);\n            node = node.parentNode;\n        }\n    }\n}\nfunction isScrolledToBottom(elt) {\n    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);\n}\nfunction textNodeBefore(startNode, startOffset) {\n    for (let node = startNode, offset = startOffset;;) {\n        if (node.nodeType == 3 && offset > 0) {\n            return { node: node, offset: offset };\n        }\n        else if (node.nodeType == 1 && offset > 0) {\n            if (node.contentEditable == \"false\")\n                return null;\n            node = node.childNodes[offset - 1];\n            offset = maxOffset(node);\n        }\n        else if (node.parentNode && !isBlockElement(node)) {\n            offset = domIndex(node);\n            node = node.parentNode;\n        }\n        else {\n            return null;\n        }\n    }\n}\nfunction textNodeAfter(startNode, startOffset) {\n    for (let node = startNode, offset = startOffset;;) {\n        if (node.nodeType == 3 && offset < node.nodeValue.length) {\n            return { node: node, offset: offset };\n        }\n        else if (node.nodeType == 1 && offset < node.childNodes.length) {\n            if (node.contentEditable == \"false\")\n                return null;\n            node = node.childNodes[offset];\n            offset = 0;\n        }\n        else if (node.parentNode && !isBlockElement(node)) {\n            offset = domIndex(node) + 1;\n            node = node.parentNode;\n        }\n        else {\n            return null;\n        }\n    }\n}\n\nclass DOMPos {\n    constructor(node, offset, precise = true) {\n        this.node = node;\n        this.offset = offset;\n        this.precise = precise;\n    }\n    static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }\n    static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }\n}\nconst noChildren = [];\nclass ContentView {\n    constructor() {\n        this.parent = null;\n        this.dom = null;\n        this.flags = 2 /* ViewFlag.NodeDirty */;\n    }\n    get overrideDOMText() { return null; }\n    get posAtStart() {\n        return this.parent ? this.parent.posBefore(this) : 0;\n    }\n    get posAtEnd() {\n        return this.posAtStart + this.length;\n    }\n    posBefore(view) {\n        let pos = this.posAtStart;\n        for (let child of this.children) {\n            if (child == view)\n                return pos;\n            pos += child.length + child.breakAfter;\n        }\n        throw new RangeError(\"Invalid child in posBefore\");\n    }\n    posAfter(view) {\n        return this.posBefore(view) + view.length;\n    }\n    sync(view, track) {\n        if (this.flags & 2 /* ViewFlag.NodeDirty */) {\n            let parent = this.dom;\n            let prev = null, next;\n            for (let child of this.children) {\n                if (child.flags & 7 /* ViewFlag.Dirty */) {\n                    if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {\n                        let contentView = ContentView.get(next);\n                        if (!contentView || !contentView.parent && contentView.canReuseDOM(child))\n                            child.reuseDOM(next);\n                    }\n                    child.sync(view, track);\n                    child.flags &= ~7 /* ViewFlag.Dirty */;\n                }\n                next = prev ? prev.nextSibling : parent.firstChild;\n                if (track && !track.written && track.node == parent && next != child.dom)\n                    track.written = true;\n                if (child.dom.parentNode == parent) {\n                    while (next && next != child.dom)\n                        next = rm$1(next);\n                }\n                else {\n                    parent.insertBefore(child.dom, next);\n                }\n                prev = child.dom;\n            }\n            next = prev ? prev.nextSibling : parent.firstChild;\n            if (next && track && track.node == parent)\n                track.written = true;\n            while (next)\n                next = rm$1(next);\n        }\n        else if (this.flags & 1 /* ViewFlag.ChildDirty */) {\n            for (let child of this.children)\n                if (child.flags & 7 /* ViewFlag.Dirty */) {\n                    child.sync(view, track);\n                    child.flags &= ~7 /* ViewFlag.Dirty */;\n                }\n        }\n    }\n    reuseDOM(_dom) { }\n    localPosFromDOM(node, offset) {\n        let after;\n        if (node == this.dom) {\n            after = this.dom.childNodes[offset];\n        }\n        else {\n            let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;\n            for (;;) {\n                let parent = node.parentNode;\n                if (parent == this.dom)\n                    break;\n                if (bias == 0 && parent.firstChild != parent.lastChild) {\n                    if (node == parent.firstChild)\n                        bias = -1;\n                    else\n                        bias = 1;\n                }\n                node = parent;\n            }\n            if (bias < 0)\n                after = node;\n            else\n                after = node.nextSibling;\n        }\n        if (after == this.dom.firstChild)\n            return 0;\n        while (after && !ContentView.get(after))\n            after = after.nextSibling;\n        if (!after)\n            return this.length;\n        for (let i = 0, pos = 0;; i++) {\n            let child = this.children[i];\n            if (child.dom == after)\n                return pos;\n            pos += child.length + child.breakAfter;\n        }\n    }\n    domBoundsAround(from, to, offset = 0) {\n        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;\n        for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (pos < from && end > to)\n                return child.domBoundsAround(from, to, pos);\n            if (end >= from && fromI == -1) {\n                fromI = i;\n                fromStart = pos;\n            }\n            if (pos > to && child.dom.parentNode == this.dom) {\n                toI = i;\n                toEnd = prevEnd;\n                break;\n            }\n            prevEnd = end;\n            pos = end + child.breakAfter;\n        }\n        return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,\n            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,\n            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };\n    }\n    markDirty(andParent = false) {\n        this.flags |= 2 /* ViewFlag.NodeDirty */;\n        this.markParentsDirty(andParent);\n    }\n    markParentsDirty(childList) {\n        for (let parent = this.parent; parent; parent = parent.parent) {\n            if (childList)\n                parent.flags |= 2 /* ViewFlag.NodeDirty */;\n            if (parent.flags & 1 /* ViewFlag.ChildDirty */)\n                return;\n            parent.flags |= 1 /* ViewFlag.ChildDirty */;\n            childList = false;\n        }\n    }\n    setParent(parent) {\n        if (this.parent != parent) {\n            this.parent = parent;\n            if (this.flags & 7 /* ViewFlag.Dirty */)\n                this.markParentsDirty(true);\n        }\n    }\n    setDOM(dom) {\n        if (this.dom == dom)\n            return;\n        if (this.dom)\n            this.dom.cmView = null;\n        this.dom = dom;\n        dom.cmView = this;\n    }\n    get rootView() {\n        for (let v = this;;) {\n            let parent = v.parent;\n            if (!parent)\n                return v;\n            v = parent;\n        }\n    }\n    replaceChildren(from, to, children = noChildren) {\n        this.markDirty();\n        for (let i = from; i < to; i++) {\n            let child = this.children[i];\n            if (child.parent == this && children.indexOf(child) < 0)\n                child.destroy();\n        }\n        this.children.splice(from, to - from, ...children);\n        for (let i = 0; i < children.length; i++)\n            children[i].setParent(this);\n    }\n    ignoreMutation(_rec) { return false; }\n    ignoreEvent(_event) { return false; }\n    childCursor(pos = this.length) {\n        return new ChildCursor(this.children, pos, this.children.length);\n    }\n    childPos(pos, bias = 1) {\n        return this.childCursor().findPos(pos, bias);\n    }\n    toString() {\n        let name = this.constructor.name.replace(\"View\", \"\");\n        return name + (this.children.length ? \"(\" + this.children.join() + \")\" :\n            this.length ? \"[\" + (name == \"Text\" ? this.text : this.length) + \"]\" : \"\") +\n            (this.breakAfter ? \"#\" : \"\");\n    }\n    static get(node) { return node.cmView; }\n    get isEditable() { return true; }\n    get isWidget() { return false; }\n    get isHidden() { return false; }\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        return false;\n    }\n    become(other) { return false; }\n    canReuseDOM(other) {\n        return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);\n    }\n    // When this is a zero-length view with a side, this should return a\n    // number <= 0 to indicate it is before its position, or a\n    // number > 0 when after its position.\n    getSide() { return 0; }\n    destroy() {\n        for (let child of this.children)\n            if (child.parent == this)\n                child.destroy();\n        this.parent = null;\n    }\n}\nContentView.prototype.breakAfter = 0;\n// Remove a DOM node and return its next sibling.\nfunction rm$1(dom) {\n    let next = dom.nextSibling;\n    dom.parentNode.removeChild(dom);\n    return next;\n}\nclass ChildCursor {\n    constructor(children, pos, i) {\n        this.children = children;\n        this.pos = pos;\n        this.i = i;\n        this.off = 0;\n    }\n    findPos(pos, bias = 1) {\n        for (;;) {\n            if (pos > this.pos || pos == this.pos &&\n                (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {\n                this.off = pos - this.pos;\n                return this;\n            }\n            let next = this.children[--this.i];\n            this.pos -= next.length + next.breakAfter;\n        }\n    }\n}\nfunction replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {\n    let { children } = parent;\n    let before = children.length ? children[fromI] : null;\n    let last = insert.length ? insert[insert.length - 1] : null;\n    let breakAtEnd = last ? last.breakAfter : breakAtStart;\n    // Change within a single child\n    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&\n        before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))\n        return;\n    if (toI < children.length) {\n        let after = children[toI];\n        // Make sure the end of the child after the update is preserved in `after`\n        if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {\n            // If we're splitting a child, separate part of it to avoid that\n            // being mangled when updating the child before the update.\n            if (fromI == toI) {\n                after = after.split(toOff);\n                toOff = 0;\n            }\n            // If the element after the replacement should be merged with\n            // the last replacing element, update `content`\n            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {\n                insert[insert.length - 1] = after;\n            }\n            else {\n                // Remove the start of the after element, if necessary, and\n                // add it to `content`.\n                if (toOff || after.children.length && !after.children[0].length)\n                    after.merge(0, toOff, null, false, 0, openEnd);\n                insert.push(after);\n            }\n        }\n        else if (after === null || after === void 0 ? void 0 : after.breakAfter) {\n            // The element at `toI` is entirely covered by this range.\n            // Preserve its line break, if any.\n            if (last)\n                last.breakAfter = 1;\n            else\n                breakAtStart = 1;\n        }\n        // Since we've handled the next element from the current elements\n        // now, make sure `toI` points after that.\n        toI++;\n    }\n    if (before) {\n        before.breakAfter = breakAtStart;\n        if (fromOff > 0) {\n            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {\n                before.breakAfter = insert.shift().breakAfter;\n            }\n            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {\n                before.merge(fromOff, before.length, null, false, openStart, 0);\n            }\n            fromI++;\n        }\n    }\n    // Try to merge widgets on the boundaries of the replacement\n    while (fromI < toI && insert.length) {\n        if (children[toI - 1].become(insert[insert.length - 1])) {\n            toI--;\n            insert.pop();\n            openEnd = insert.length ? 0 : openStart;\n        }\n        else if (children[fromI].become(insert[0])) {\n            fromI++;\n            insert.shift();\n            openStart = insert.length ? 0 : openEnd;\n        }\n        else {\n            break;\n        }\n    }\n    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&\n        children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))\n        fromI--;\n    if (fromI < toI || insert.length)\n        parent.replaceChildren(fromI, toI, insert);\n}\nfunction mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {\n    let cur = parent.childCursor();\n    let { i: toI, off: toOff } = cur.findPos(to, 1);\n    let { i: fromI, off: fromOff } = cur.findPos(from, -1);\n    let dLen = from - to;\n    for (let view of insert)\n        dLen += view.length;\n    parent.length += dLen;\n    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);\n}\n\nlet nav = typeof navigator != \"undefined\" ? navigator : { userAgent: \"\", vendor: \"\", platform: \"\" };\nlet doc = typeof document != \"undefined\" ? document : { documentElement: { style: {} } };\nconst ie_edge = /*@__PURE__*//Edge\\/(\\d+)/.exec(nav.userAgent);\nconst ie_upto10 = /*@__PURE__*//MSIE \\d/.test(nav.userAgent);\nconst ie_11up = /*@__PURE__*//Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(nav.userAgent);\nconst ie = !!(ie_upto10 || ie_11up || ie_edge);\nconst gecko = !ie && /*@__PURE__*//gecko\\/(\\d+)/i.test(nav.userAgent);\nconst chrome = !ie && /*@__PURE__*//Chrome\\/(\\d+)/.exec(nav.userAgent);\nconst webkit = \"webkitFontSmoothing\" in doc.documentElement.style;\nconst safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);\nconst ios = safari && (/*@__PURE__*//Mobile\\/\\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);\nvar browser = {\n    mac: ios || /*@__PURE__*//Mac/.test(nav.platform),\n    windows: /*@__PURE__*//Win/.test(nav.platform),\n    linux: /*@__PURE__*//Linux|X11/.test(nav.platform),\n    ie,\n    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,\n    gecko,\n    gecko_version: gecko ? +(/*@__PURE__*//Firefox\\/(\\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,\n    chrome: !!chrome,\n    chrome_version: chrome ? +chrome[1] : 0,\n    ios,\n    android: /*@__PURE__*//Android\\b/.test(nav.userAgent),\n    webkit,\n    safari,\n    webkit_version: webkit ? +(/*@__PURE__*//\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,\n    tabSize: doc.documentElement.style.tabSize != null ? \"tab-size\" : \"-moz-tab-size\"\n};\n\nconst MaxJoinLen = 256;\nclass TextView extends ContentView {\n    constructor(text) {\n        super();\n        this.text = text;\n    }\n    get length() { return this.text.length; }\n    createDOM(textDOM) {\n        this.setDOM(textDOM || document.createTextNode(this.text));\n    }\n    sync(view, track) {\n        if (!this.dom)\n            this.createDOM();\n        if (this.dom.nodeValue != this.text) {\n            if (track && track.node == this.dom)\n                track.written = true;\n            this.dom.nodeValue = this.text;\n        }\n    }\n    reuseDOM(dom) {\n        if (dom.nodeType == 3)\n            this.createDOM(dom);\n    }\n    merge(from, to, source) {\n        if ((this.flags & 8 /* ViewFlag.Composition */) ||\n            source && (!(source instanceof TextView) ||\n                this.length - (to - from) + source.length > MaxJoinLen ||\n                (source.flags & 8 /* ViewFlag.Composition */)))\n            return false;\n        this.text = this.text.slice(0, from) + (source ? source.text : \"\") + this.text.slice(to);\n        this.markDirty();\n        return true;\n    }\n    split(from) {\n        let result = new TextView(this.text.slice(from));\n        this.text = this.text.slice(0, from);\n        this.markDirty();\n        result.flags |= this.flags & 8 /* ViewFlag.Composition */;\n        return result;\n    }\n    localPosFromDOM(node, offset) {\n        return node == this.dom ? offset : offset ? this.text.length : 0;\n    }\n    domAtPos(pos) { return new DOMPos(this.dom, pos); }\n    domBoundsAround(_from, _to, offset) {\n        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };\n    }\n    coordsAt(pos, side) {\n        return textCoords(this.dom, pos, side);\n    }\n}\nclass MarkView extends ContentView {\n    constructor(mark, children = [], length = 0) {\n        super();\n        this.mark = mark;\n        this.children = children;\n        this.length = length;\n        for (let ch of children)\n            ch.setParent(this);\n    }\n    setAttrs(dom) {\n        clearAttributes(dom);\n        if (this.mark.class)\n            dom.className = this.mark.class;\n        if (this.mark.attrs)\n            for (let name in this.mark.attrs)\n                dom.setAttribute(name, this.mark.attrs[name]);\n        return dom;\n    }\n    canReuseDOM(other) {\n        return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);\n    }\n    reuseDOM(node) {\n        if (node.nodeName == this.mark.tagName.toUpperCase()) {\n            this.setDOM(node);\n            this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;\n        }\n    }\n    sync(view, track) {\n        if (!this.dom)\n            this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));\n        else if (this.flags & 4 /* ViewFlag.AttrsDirty */)\n            this.setAttrs(this.dom);\n        super.sync(view, track);\n    }\n    merge(from, to, source, _hasStart, openStart, openEnd) {\n        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||\n            (from && openStart <= 0) || (to < this.length && openEnd <= 0)))\n            return false;\n        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);\n        this.markDirty();\n        return true;\n    }\n    split(from) {\n        let result = [], off = 0, detachFrom = -1, i = 0;\n        for (let elt of this.children) {\n            let end = off + elt.length;\n            if (end > from)\n                result.push(off < from ? elt.split(from - off) : elt);\n            if (detachFrom < 0 && off >= from)\n                detachFrom = i;\n            off = end;\n            i++;\n        }\n        let length = this.length - from;\n        this.length = from;\n        if (detachFrom > -1) {\n            this.children.length = detachFrom;\n            this.markDirty();\n        }\n        return new MarkView(this.mark, result, length);\n    }\n    domAtPos(pos) {\n        return inlineDOMAtPos(this, pos);\n    }\n    coordsAt(pos, side) {\n        return coordsInChildren(this, pos, side);\n    }\n}\nfunction textCoords(text, pos, side) {\n    let length = text.nodeValue.length;\n    if (pos > length)\n        pos = length;\n    let from = pos, to = pos, flatten = 0;\n    if (pos == 0 && side < 0 || pos == length && side >= 0) {\n        if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges\n            if (pos) {\n                from--;\n                flatten = 1;\n            } // FIXME this is wrong in RTL text\n            else if (to < length) {\n                to++;\n                flatten = -1;\n            }\n        }\n    }\n    else {\n        if (side < 0)\n            from--;\n        else if (to < length)\n            to++;\n    }\n    let rects = textRange(text, from, to).getClientRects();\n    if (!rects.length)\n        return null;\n    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];\n    if (browser.safari && !flatten && rect.width == 0)\n        rect = Array.prototype.find.call(rects, r => r.width) || rect;\n    return flatten ? flattenRect(rect, flatten < 0) : rect || null;\n}\n// Also used for collapsed ranges that don't have a placeholder widget!\nclass WidgetView extends ContentView {\n    static create(widget, length, side) {\n        return new WidgetView(widget, length, side);\n    }\n    constructor(widget, length, side) {\n        super();\n        this.widget = widget;\n        this.length = length;\n        this.side = side;\n        this.prevWidget = null;\n    }\n    split(from) {\n        let result = WidgetView.create(this.widget, this.length - from, this.side);\n        this.length -= from;\n        return result;\n    }\n    sync(view) {\n        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {\n            if (this.dom && this.prevWidget)\n                this.prevWidget.destroy(this.dom);\n            this.prevWidget = null;\n            this.setDOM(this.widget.toDOM(view));\n            if (!this.widget.editable)\n                this.dom.contentEditable = \"false\";\n        }\n    }\n    getSide() { return this.side; }\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\n            return false;\n        this.length = from + (source ? source.length : 0) + (this.length - to);\n        return true;\n    }\n    become(other) {\n        if (other instanceof WidgetView && other.side == this.side &&\n            this.widget.constructor == other.widget.constructor) {\n            if (!this.widget.compare(other.widget))\n                this.markDirty(true);\n            if (this.dom && !this.prevWidget)\n                this.prevWidget = this.widget;\n            this.widget = other.widget;\n            this.length = other.length;\n            return true;\n        }\n        return false;\n    }\n    ignoreMutation() { return true; }\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\n    get overrideDOMText() {\n        if (this.length == 0)\n            return Text.empty;\n        let top = this;\n        while (top.parent)\n            top = top.parent;\n        let { view } = top, text = view && view.state.doc, start = this.posAtStart;\n        return text ? text.slice(start, start + this.length) : Text.empty;\n    }\n    domAtPos(pos) {\n        return (this.length ? pos == 0 : this.side > 0)\n            ? DOMPos.before(this.dom)\n            : DOMPos.after(this.dom, pos == this.length);\n    }\n    domBoundsAround() { return null; }\n    coordsAt(pos, side) {\n        let custom = this.widget.coordsAt(this.dom, pos, side);\n        if (custom)\n            return custom;\n        let rects = this.dom.getClientRects(), rect = null;\n        if (!rects.length)\n            return null;\n        let fromBack = this.side ? this.side < 0 : pos > 0;\n        for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {\n            rect = rects[i];\n            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)\n                break;\n        }\n        return flattenRect(rect, !fromBack);\n    }\n    get isEditable() { return false; }\n    get isWidget() { return true; }\n    get isHidden() { return this.widget.isHidden; }\n    destroy() {\n        super.destroy();\n        if (this.dom)\n            this.widget.destroy(this.dom);\n    }\n}\n// These are drawn around uneditable widgets to avoid a number of\n// browser bugs that show up when the cursor is directly next to\n// uneditable inline content.\nclass WidgetBufferView extends ContentView {\n    constructor(side) {\n        super();\n        this.side = side;\n    }\n    get length() { return 0; }\n    merge() { return false; }\n    become(other) {\n        return other instanceof WidgetBufferView && other.side == this.side;\n    }\n    split() { return new WidgetBufferView(this.side); }\n    sync() {\n        if (!this.dom) {\n            let dom = document.createElement(\"img\");\n            dom.className = \"cm-widgetBuffer\";\n            dom.setAttribute(\"aria-hidden\", \"true\");\n            this.setDOM(dom);\n        }\n    }\n    getSide() { return this.side; }\n    domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }\n    localPosFromDOM() { return 0; }\n    domBoundsAround() { return null; }\n    coordsAt(pos) {\n        return this.dom.getBoundingClientRect();\n    }\n    get overrideDOMText() {\n        return Text.empty;\n    }\n    get isHidden() { return true; }\n}\nTextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;\nfunction inlineDOMAtPos(parent, pos) {\n    let dom = parent.dom, { children } = parent, i = 0;\n    for (let off = 0; i < children.length; i++) {\n        let child = children[i], end = off + child.length;\n        if (end == off && child.getSide() <= 0)\n            continue;\n        if (pos > off && pos < end && child.dom.parentNode == dom)\n            return child.domAtPos(pos - off);\n        if (pos <= off)\n            break;\n        off = end;\n    }\n    for (let j = i; j > 0; j--) {\n        let prev = children[j - 1];\n        if (prev.dom.parentNode == dom)\n            return prev.domAtPos(prev.length);\n    }\n    for (let j = i; j < children.length; j++) {\n        let next = children[j];\n        if (next.dom.parentNode == dom)\n            return next.domAtPos(0);\n    }\n    return new DOMPos(dom, 0);\n}\n// Assumes `view`, if a mark view, has precisely 1 child.\nfunction joinInlineInto(parent, view, open) {\n    let last, { children } = parent;\n    if (open > 0 && view instanceof MarkView && children.length &&\n        (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {\n        joinInlineInto(last, view.children[0], open - 1);\n    }\n    else {\n        children.push(view);\n        view.setParent(parent);\n    }\n    parent.length += view.length;\n}\nfunction coordsInChildren(view, pos, side) {\n    let before = null, beforePos = -1, after = null, afterPos = -1;\n    function scan(view, pos) {\n        for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {\n            let child = view.children[i], end = off + child.length;\n            if (end >= pos) {\n                if (child.children.length) {\n                    scan(child, pos - off);\n                }\n                else if ((!after || after.isHidden && side > 0) &&\n                    (end > pos || off == end && child.getSide() > 0)) {\n                    after = child;\n                    afterPos = pos - off;\n                }\n                else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {\n                    before = child;\n                    beforePos = pos - off;\n                }\n            }\n            off = end;\n        }\n    }\n    scan(view, pos);\n    let target = (side < 0 ? before : after) || before || after;\n    if (target)\n        return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);\n    return fallbackRect(view);\n}\nfunction fallbackRect(view) {\n    let last = view.dom.lastChild;\n    if (!last)\n        return view.dom.getBoundingClientRect();\n    let rects = clientRectsFor(last);\n    return rects[rects.length - 1] || null;\n}\n\nfunction combineAttrs(source, target) {\n    for (let name in source) {\n        if (name == \"class\" && target.class)\n            target.class += \" \" + source.class;\n        else if (name == \"style\" && target.style)\n            target.style += \";\" + source.style;\n        else\n            target[name] = source[name];\n    }\n    return target;\n}\nconst noAttrs = /*@__PURE__*/Object.create(null);\nfunction attrsEq(a, b, ignore) {\n    if (a == b)\n        return true;\n    if (!a)\n        a = noAttrs;\n    if (!b)\n        b = noAttrs;\n    let keysA = Object.keys(a), keysB = Object.keys(b);\n    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=\n        keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))\n        return false;\n    for (let key of keysA) {\n        if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))\n            return false;\n    }\n    return true;\n}\nfunction updateAttrs(dom, prev, attrs) {\n    let changed = false;\n    if (prev)\n        for (let name in prev)\n            if (!(attrs && name in attrs)) {\n                changed = true;\n                if (name == \"style\")\n                    dom.style.cssText = \"\";\n                else\n                    dom.removeAttribute(name);\n            }\n    if (attrs)\n        for (let name in attrs)\n            if (!(prev && prev[name] == attrs[name])) {\n                changed = true;\n                if (name == \"style\")\n                    dom.style.cssText = attrs[name];\n                else\n                    dom.setAttribute(name, attrs[name]);\n            }\n    return changed;\n}\nfunction getAttrs(dom) {\n    let attrs = Object.create(null);\n    for (let i = 0; i < dom.attributes.length; i++) {\n        let attr = dom.attributes[i];\n        attrs[attr.name] = attr.value;\n    }\n    return attrs;\n}\n\nclass LineView extends ContentView {\n    constructor() {\n        super(...arguments);\n        this.children = [];\n        this.length = 0;\n        this.prevAttrs = undefined;\n        this.attrs = null;\n        this.breakAfter = 0;\n    }\n    // Consumes source\n    merge(from, to, source, hasStart, openStart, openEnd) {\n        if (source) {\n            if (!(source instanceof LineView))\n                return false;\n            if (!this.dom)\n                source.transferDOM(this); // Reuse source.dom when appropriate\n        }\n        if (hasStart)\n            this.setDeco(source ? source.attrs : null);\n        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);\n        return true;\n    }\n    split(at) {\n        let end = new LineView;\n        end.breakAfter = this.breakAfter;\n        if (this.length == 0)\n            return end;\n        let { i, off } = this.childPos(at);\n        if (off) {\n            end.append(this.children[i].split(off), 0);\n            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);\n            i++;\n        }\n        for (let j = i; j < this.children.length; j++)\n            end.append(this.children[j], 0);\n        while (i > 0 && this.children[i - 1].length == 0)\n            this.children[--i].destroy();\n        this.children.length = i;\n        this.markDirty();\n        this.length = at;\n        return end;\n    }\n    transferDOM(other) {\n        if (!this.dom)\n            return;\n        this.markDirty();\n        other.setDOM(this.dom);\n        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;\n        this.prevAttrs = undefined;\n        this.dom = null;\n    }\n    setDeco(attrs) {\n        if (!attrsEq(this.attrs, attrs)) {\n            if (this.dom) {\n                this.prevAttrs = this.attrs;\n                this.markDirty();\n            }\n            this.attrs = attrs;\n        }\n    }\n    append(child, openStart) {\n        joinInlineInto(this, child, openStart);\n    }\n    // Only called when building a line view in ContentBuilder\n    addLineDeco(deco) {\n        let attrs = deco.spec.attributes, cls = deco.spec.class;\n        if (attrs)\n            this.attrs = combineAttrs(attrs, this.attrs || {});\n        if (cls)\n            this.attrs = combineAttrs({ class: cls }, this.attrs || {});\n    }\n    domAtPos(pos) {\n        return inlineDOMAtPos(this, pos);\n    }\n    reuseDOM(node) {\n        if (node.nodeName == \"DIV\") {\n            this.setDOM(node);\n            this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;\n        }\n    }\n    sync(view, track) {\n        var _a;\n        if (!this.dom) {\n            this.setDOM(document.createElement(\"div\"));\n            this.dom.className = \"cm-line\";\n            this.prevAttrs = this.attrs ? null : undefined;\n        }\n        else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {\n            clearAttributes(this.dom);\n            this.dom.className = \"cm-line\";\n            this.prevAttrs = this.attrs ? null : undefined;\n        }\n        if (this.prevAttrs !== undefined) {\n            updateAttrs(this.dom, this.prevAttrs, this.attrs);\n            this.dom.classList.add(\"cm-line\");\n            this.prevAttrs = undefined;\n        }\n        super.sync(view, track);\n        let last = this.dom.lastChild;\n        while (last && ContentView.get(last) instanceof MarkView)\n            last = last.lastChild;\n        if (!last || !this.length ||\n            last.nodeName != \"BR\" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&\n                (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {\n            let hack = document.createElement(\"BR\");\n            hack.cmIgnore = true;\n            this.dom.appendChild(hack);\n        }\n    }\n    measureTextSize() {\n        if (this.children.length == 0 || this.length > 20)\n            return null;\n        let totalWidth = 0, textHeight;\n        for (let child of this.children) {\n            if (!(child instanceof TextView) || /[^ -~]/.test(child.text))\n                return null;\n            let rects = clientRectsFor(child.dom);\n            if (rects.length != 1)\n                return null;\n            totalWidth += rects[0].width;\n            textHeight = rects[0].height;\n        }\n        return !totalWidth ? null : {\n            lineHeight: this.dom.getBoundingClientRect().height,\n            charWidth: totalWidth / this.length,\n            textHeight\n        };\n    }\n    coordsAt(pos, side) {\n        let rect = coordsInChildren(this, pos, side);\n        // Correct rectangle height for empty lines when the returned\n        // height is larger than the text height.\n        if (!this.children.length && rect && this.parent) {\n            let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;\n            if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {\n                let dist = (height - heightOracle.textHeight) / 2;\n                return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };\n            }\n        }\n        return rect;\n    }\n    become(_other) { return false; }\n    covers() { return true; }\n    static find(docView, pos) {\n        for (let i = 0, off = 0; i < docView.children.length; i++) {\n            let block = docView.children[i], end = off + block.length;\n            if (end >= pos) {\n                if (block instanceof LineView)\n                    return block;\n                if (end > pos)\n                    break;\n            }\n            off = end + block.breakAfter;\n        }\n        return null;\n    }\n}\nclass BlockWidgetView extends ContentView {\n    constructor(widget, length, deco) {\n        super();\n        this.widget = widget;\n        this.length = length;\n        this.deco = deco;\n        this.breakAfter = 0;\n        this.prevWidget = null;\n    }\n    merge(from, to, source, _takeDeco, openStart, openEnd) {\n        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||\n            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))\n            return false;\n        this.length = from + (source ? source.length : 0) + (this.length - to);\n        return true;\n    }\n    domAtPos(pos) {\n        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);\n    }\n    split(at) {\n        let len = this.length - at;\n        this.length = at;\n        let end = new BlockWidgetView(this.widget, len, this.deco);\n        end.breakAfter = this.breakAfter;\n        return end;\n    }\n    get children() { return noChildren; }\n    sync(view) {\n        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {\n            if (this.dom && this.prevWidget)\n                this.prevWidget.destroy(this.dom);\n            this.prevWidget = null;\n            this.setDOM(this.widget.toDOM(view));\n            if (!this.widget.editable)\n                this.dom.contentEditable = \"false\";\n        }\n    }\n    get overrideDOMText() {\n        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;\n    }\n    domBoundsAround() { return null; }\n    become(other) {\n        if (other instanceof BlockWidgetView &&\n            other.widget.constructor == this.widget.constructor) {\n            if (!other.widget.compare(this.widget))\n                this.markDirty(true);\n            if (this.dom && !this.prevWidget)\n                this.prevWidget = this.widget;\n            this.widget = other.widget;\n            this.length = other.length;\n            this.deco = other.deco;\n            this.breakAfter = other.breakAfter;\n            return true;\n        }\n        return false;\n    }\n    ignoreMutation() { return true; }\n    ignoreEvent(event) { return this.widget.ignoreEvent(event); }\n    get isEditable() { return false; }\n    get isWidget() { return true; }\n    coordsAt(pos, side) {\n        return this.widget.coordsAt(this.dom, pos, side);\n    }\n    destroy() {\n        super.destroy();\n        if (this.dom)\n            this.widget.destroy(this.dom);\n    }\n    covers(side) {\n        let { startSide, endSide } = this.deco;\n        return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;\n    }\n}\n\n/**\nWidgets added to the content are described by subclasses of this\nclass. Using a description object like that makes it possible to\ndelay creating of the DOM structure for a widget until it is\nneeded, and to avoid redrawing widgets even if the decorations\nthat define them are recreated.\n*/\nclass WidgetType {\n    /**\n    Compare this instance to another instance of the same type.\n    (TypeScript can't express this, but only instances of the same\n    specific class will be passed to this method.) This is used to\n    avoid redrawing widgets when they are replaced by a new\n    decoration of the same type. The default implementation just\n    returns `false`, which will cause new instances of the widget to\n    always be redrawn.\n    */\n    eq(widget) { return false; }\n    /**\n    Update a DOM element created by a widget of the same type (but\n    different, non-`eq` content) to reflect this widget. May return\n    true to indicate that it could update, false to indicate it\n    couldn't (in which case the widget will be redrawn). The default\n    implementation just returns false.\n    */\n    updateDOM(dom, view) { return false; }\n    /**\n    @internal\n    */\n    compare(other) {\n        return this == other || this.constructor == other.constructor && this.eq(other);\n    }\n    /**\n    The estimated height this widget will have, to be used when\n    estimating the height of content that hasn't been drawn. May\n    return -1 to indicate you don't know. The default implementation\n    returns -1.\n    */\n    get estimatedHeight() { return -1; }\n    /**\n    For inline widgets that are displayed inline (as opposed to\n    `inline-block`) and introduce line breaks (through `<br>` tags\n    or textual newlines), this must indicate the amount of line\n    breaks they introduce. Defaults to 0.\n    */\n    get lineBreaks() { return 0; }\n    /**\n    Can be used to configure which kinds of events inside the widget\n    should be ignored by the editor. The default is to ignore all\n    events.\n    */\n    ignoreEvent(event) { return true; }\n    /**\n    Override the way screen coordinates for positions at/in the\n    widget are found. `pos` will be the offset into the widget, and\n    `side` the side of the position that is being queried—less than\n    zero for before, greater than zero for after, and zero for\n    directly at that position.\n    */\n    coordsAt(dom, pos, side) { return null; }\n    /**\n    @internal\n    */\n    get isHidden() { return false; }\n    /**\n    @internal\n    */\n    get editable() { return false; }\n    /**\n    This is called when the an instance of the widget is removed\n    from the editor view.\n    */\n    destroy(dom) { }\n}\n/**\nThe different types of blocks that can occur in an editor view.\n*/\nvar BlockType = /*@__PURE__*/(function (BlockType) {\n    /**\n    A line of text.\n    */\n    BlockType[BlockType[\"Text\"] = 0] = \"Text\";\n    /**\n    A block widget associated with the position after it.\n    */\n    BlockType[BlockType[\"WidgetBefore\"] = 1] = \"WidgetBefore\";\n    /**\n    A block widget associated with the position before it.\n    */\n    BlockType[BlockType[\"WidgetAfter\"] = 2] = \"WidgetAfter\";\n    /**\n    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.\n    */\n    BlockType[BlockType[\"WidgetRange\"] = 3] = \"WidgetRange\";\nreturn BlockType})(BlockType || (BlockType = {}));\n/**\nA decoration provides information on how to draw or style a piece\nof content. You'll usually use it wrapped in a\n[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.\n@nonabstract\n*/\nclass Decoration extends RangeValue {\n    constructor(\n    /**\n    @internal\n    */\n    startSide, \n    /**\n    @internal\n    */\n    endSide, \n    /**\n    @internal\n    */\n    widget, \n    /**\n    The config object used to create this decoration. You can\n    include additional properties in there to store metadata about\n    your decoration.\n    */\n    spec) {\n        super();\n        this.startSide = startSide;\n        this.endSide = endSide;\n        this.widget = widget;\n        this.spec = spec;\n    }\n    /**\n    @internal\n    */\n    get heightRelevant() { return false; }\n    /**\n    Create a mark decoration, which influences the styling of the\n    content in its range. Nested mark decorations will cause nested\n    DOM elements to be created. Nesting order is determined by\n    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with\n    the higher-precedence decorations creating the inner DOM nodes.\n    Such elements are split on line boundaries and on the boundaries\n    of lower-precedence decorations.\n    */\n    static mark(spec) {\n        return new MarkDecoration(spec);\n    }\n    /**\n    Create a widget decoration, which displays a DOM element at the\n    given position.\n    */\n    static widget(spec) {\n        let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;\n        side += (block && !spec.inlineOrder)\n            ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */)\n            : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);\n        return new PointDecoration(spec, side, side, block, spec.widget || null, false);\n    }\n    /**\n    Create a replace decoration which replaces the given range with\n    a widget, or simply hides it.\n    */\n    static replace(spec) {\n        let block = !!spec.block, startSide, endSide;\n        if (spec.isBlockGap) {\n            startSide = -500000000 /* Side.GapStart */;\n            endSide = 400000000 /* Side.GapEnd */;\n        }\n        else {\n            let { start, end } = getInclusive(spec, block);\n            startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;\n            endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;\n        }\n        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);\n    }\n    /**\n    Create a line decoration, which can add DOM attributes to the\n    line starting at the given position.\n    */\n    static line(spec) {\n        return new LineDecoration(spec);\n    }\n    /**\n    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given\n    decorated range or ranges. If the ranges aren't already sorted,\n    pass `true` for `sort` to make the library sort them for you.\n    */\n    static set(of, sort = false) {\n        return RangeSet.of(of, sort);\n    }\n    /**\n    @internal\n    */\n    hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }\n}\n/**\nThe empty set of decorations.\n*/\nDecoration.none = RangeSet.empty;\nclass MarkDecoration extends Decoration {\n    constructor(spec) {\n        let { start, end } = getInclusive(spec);\n        super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);\n        this.tagName = spec.tagName || \"span\";\n        this.class = spec.class || \"\";\n        this.attrs = spec.attributes || null;\n    }\n    eq(other) {\n        var _a, _b;\n        return this == other ||\n            other instanceof MarkDecoration &&\n                this.tagName == other.tagName &&\n                (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&\n                attrsEq(this.attrs, other.attrs, \"class\");\n    }\n    range(from, to = from) {\n        if (from >= to)\n            throw new RangeError(\"Mark decorations may not be empty\");\n        return super.range(from, to);\n    }\n}\nMarkDecoration.prototype.point = false;\nclass LineDecoration extends Decoration {\n    constructor(spec) {\n        super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);\n    }\n    eq(other) {\n        return other instanceof LineDecoration &&\n            this.spec.class == other.spec.class &&\n            attrsEq(this.spec.attributes, other.spec.attributes);\n    }\n    range(from, to = from) {\n        if (to != from)\n            throw new RangeError(\"Line decoration ranges must be zero-length\");\n        return super.range(from, to);\n    }\n}\nLineDecoration.prototype.mapMode = MapMode.TrackBefore;\nLineDecoration.prototype.point = true;\nclass PointDecoration extends Decoration {\n    constructor(spec, startSide, endSide, block, widget, isReplace) {\n        super(startSide, endSide, widget, spec);\n        this.block = block;\n        this.isReplace = isReplace;\n        this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;\n    }\n    // Only relevant when this.block == true\n    get type() {\n        return this.startSide != this.endSide ? BlockType.WidgetRange\n            : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;\n    }\n    get heightRelevant() {\n        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);\n    }\n    eq(other) {\n        return other instanceof PointDecoration &&\n            widgetsEq(this.widget, other.widget) &&\n            this.block == other.block &&\n            this.startSide == other.startSide && this.endSide == other.endSide;\n    }\n    range(from, to = from) {\n        if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))\n            throw new RangeError(\"Invalid range for replacement decoration\");\n        if (!this.isReplace && to != from)\n            throw new RangeError(\"Widget decorations can only have zero-length ranges\");\n        return super.range(from, to);\n    }\n}\nPointDecoration.prototype.point = true;\nfunction getInclusive(spec, block = false) {\n    let { inclusiveStart: start, inclusiveEnd: end } = spec;\n    if (start == null)\n        start = spec.inclusive;\n    if (end == null)\n        end = spec.inclusive;\n    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };\n}\nfunction widgetsEq(a, b) {\n    return a == b || !!(a && b && a.compare(b));\n}\nfunction addRange(from, to, ranges, margin = 0) {\n    let last = ranges.length - 1;\n    if (last >= 0 && ranges[last] + margin >= from)\n        ranges[last] = Math.max(ranges[last], to);\n    else\n        ranges.push(from, to);\n}\n\nclass ContentBuilder {\n    constructor(doc, pos, end, disallowBlockEffectsFor) {\n        this.doc = doc;\n        this.pos = pos;\n        this.end = end;\n        this.disallowBlockEffectsFor = disallowBlockEffectsFor;\n        this.content = [];\n        this.curLine = null;\n        this.breakAtStart = 0;\n        this.pendingBuffer = 0 /* Buf.No */;\n        this.bufferMarks = [];\n        // Set to false directly after a widget that covers the position after it\n        this.atCursorPos = true;\n        this.openStart = -1;\n        this.openEnd = -1;\n        this.text = \"\";\n        this.textOff = 0;\n        this.cursor = doc.iter();\n        this.skip = pos;\n    }\n    posCovered() {\n        if (this.content.length == 0)\n            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;\n        let last = this.content[this.content.length - 1];\n        return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);\n    }\n    getLine() {\n        if (!this.curLine) {\n            this.content.push(this.curLine = new LineView);\n            this.atCursorPos = true;\n        }\n        return this.curLine;\n    }\n    flushBuffer(active = this.bufferMarks) {\n        if (this.pendingBuffer) {\n            this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);\n            this.pendingBuffer = 0 /* Buf.No */;\n        }\n    }\n    addBlockWidget(view) {\n        this.flushBuffer();\n        this.curLine = null;\n        this.content.push(view);\n    }\n    finish(openEnd) {\n        if (this.pendingBuffer && openEnd <= this.bufferMarks.length)\n            this.flushBuffer();\n        else\n            this.pendingBuffer = 0 /* Buf.No */;\n        if (!this.posCovered() &&\n            !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))\n            this.getLine();\n    }\n    buildText(length, active, openStart) {\n        while (length > 0) {\n            if (this.textOff == this.text.length) {\n                let { value, lineBreak, done } = this.cursor.next(this.skip);\n                this.skip = 0;\n                if (done)\n                    throw new Error(\"Ran out of text content when drawing inline views\");\n                if (lineBreak) {\n                    if (!this.posCovered())\n                        this.getLine();\n                    if (this.content.length)\n                        this.content[this.content.length - 1].breakAfter = 1;\n                    else\n                        this.breakAtStart = 1;\n                    this.flushBuffer();\n                    this.curLine = null;\n                    this.atCursorPos = true;\n                    length--;\n                    continue;\n                }\n                else {\n                    this.text = value;\n                    this.textOff = 0;\n                }\n            }\n            let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);\n            this.flushBuffer(active.slice(active.length - openStart));\n            this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);\n            this.atCursorPos = true;\n            this.textOff += take;\n            length -= take;\n            openStart = 0;\n        }\n    }\n    span(from, to, active, openStart) {\n        this.buildText(to - from, active, openStart);\n        this.pos = to;\n        if (this.openStart < 0)\n            this.openStart = openStart;\n    }\n    point(from, to, deco, active, openStart, index) {\n        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {\n            if (deco.block)\n                throw new RangeError(\"Block decorations may not be specified via plugins\");\n            if (to > this.doc.lineAt(this.pos).to)\n                throw new RangeError(\"Decorations that replace line breaks may not be specified via plugins\");\n        }\n        let len = to - from;\n        if (deco instanceof PointDecoration) {\n            if (deco.block) {\n                if (deco.startSide > 0 && !this.posCovered())\n                    this.getLine();\n                this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));\n            }\n            else {\n                let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);\n                let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&\n                    (from < to || deco.startSide > 0);\n                let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);\n                let line = this.getLine();\n                if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)\n                    this.pendingBuffer = 0 /* Buf.No */;\n                this.flushBuffer(active);\n                if (cursorBefore) {\n                    line.append(wrapMarks(new WidgetBufferView(1), active), openStart);\n                    openStart = active.length + Math.max(0, openStart - active.length);\n                }\n                line.append(wrapMarks(view, active), openStart);\n                this.atCursorPos = cursorAfter;\n                this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;\n                if (this.pendingBuffer)\n                    this.bufferMarks = active.slice();\n            }\n        }\n        else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration\n            this.getLine().addLineDeco(deco);\n        }\n        if (len) {\n            // Advance the iterator past the replaced content\n            if (this.textOff + len <= this.text.length) {\n                this.textOff += len;\n            }\n            else {\n                this.skip += len - (this.text.length - this.textOff);\n                this.text = \"\";\n                this.textOff = 0;\n            }\n            this.pos = to;\n        }\n        if (this.openStart < 0)\n            this.openStart = openStart;\n    }\n    static build(text, from, to, decorations, dynamicDecorationMap) {\n        let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);\n        builder.openEnd = RangeSet.spans(decorations, from, to, builder);\n        if (builder.openStart < 0)\n            builder.openStart = builder.openEnd;\n        builder.finish(builder.openEnd);\n        return builder;\n    }\n}\nfunction wrapMarks(view, active) {\n    for (let mark of active)\n        view = new MarkView(mark, [view], view.length);\n    return view;\n}\nclass NullWidget extends WidgetType {\n    constructor(tag) {\n        super();\n        this.tag = tag;\n    }\n    eq(other) { return other.tag == this.tag; }\n    toDOM() { return document.createElement(this.tag); }\n    updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }\n    get isHidden() { return true; }\n}\nNullWidget.inline = /*@__PURE__*/new NullWidget(\"span\");\nNullWidget.block = /*@__PURE__*/new NullWidget(\"div\");\n\n/**\nUsed to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n*/\nvar Direction = /*@__PURE__*/(function (Direction) {\n    // (These are chosen to match the base levels, in bidi algorithm\n    // terms, of spans in that direction.)\n    /**\n    Left-to-right.\n    */\n    Direction[Direction[\"LTR\"] = 0] = \"LTR\";\n    /**\n    Right-to-left.\n    */\n    Direction[Direction[\"RTL\"] = 1] = \"RTL\";\nreturn Direction})(Direction || (Direction = {}));\nconst LTR = Direction.LTR, RTL = Direction.RTL;\n// Decode a string with each type encoded as log2(type)\nfunction dec(str) {\n    let result = [];\n    for (let i = 0; i < str.length; i++)\n        result.push(1 << +str[i]);\n    return result;\n}\n// Character types for codepoints 0 to 0xf8\nconst LowTypes = /*@__PURE__*/dec(\"88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008\");\n// Character types for codepoints 0x600 to 0x6f9\nconst ArabicTypes = /*@__PURE__*/dec(\"4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333\");\nconst Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];\n// There's a lot more in\n// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,\n// which are left out to keep code size down.\nfor (let p of [\"()\", \"[]\", \"{}\"]) {\n    let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);\n    Brackets[l] = r;\n    Brackets[r] = -l;\n}\nfunction charType(ch) {\n    return ch <= 0xf7 ? LowTypes[ch] :\n        0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :\n            0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :\n                0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :\n                    0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :\n                        0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;\n}\nconst BidiRE = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/;\n/**\nRepresents a contiguous range of text that has a single direction\n(as in left-to-right or right-to-left).\n*/\nclass BidiSpan {\n    /**\n    The direction of this span.\n    */\n    get dir() { return this.level % 2 ? RTL : LTR; }\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The start of the span (relative to the start of the line).\n    */\n    from, \n    /**\n    The end of the span.\n    */\n    to, \n    /**\n    The [\"bidi\n    level\"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)\n    of the span (in this context, 0 means\n    left-to-right, 1 means right-to-left, 2 means left-to-right\n    number inside right-to-left text).\n    */\n    level) {\n        this.from = from;\n        this.to = to;\n        this.level = level;\n    }\n    /**\n    @internal\n    */\n    side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }\n    /**\n    @internal\n    */\n    forward(forward, dir) { return forward == (this.dir == dir); }\n    /**\n    @internal\n    */\n    static find(order, index, level, assoc) {\n        let maybe = -1;\n        for (let i = 0; i < order.length; i++) {\n            let span = order[i];\n            if (span.from <= index && span.to >= index) {\n                if (span.level == level)\n                    return i;\n                // When multiple spans match, if assoc != 0, take the one that\n                // covers that side, otherwise take the one with the minimum\n                // level.\n                if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))\n                    maybe = i;\n            }\n        }\n        if (maybe < 0)\n            throw new RangeError(\"Index out of range\");\n        return maybe;\n    }\n}\nfunction isolatesEq(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        let iA = a[i], iB = b[i];\n        if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))\n            return false;\n    }\n    return true;\n}\n// Reused array of character types\nconst types = [];\n// Fill in the character types (in `types`) from `from` to `to` and\n// apply W normalization rules.\nfunction computeCharTypes(line, rFrom, rTo, isolates, outerType) {\n    for (let iI = 0; iI <= isolates.length; iI++) {\n        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;\n        let prevType = iI ? 256 /* T.NI */ : outerType;\n        // W1. Examine each non-spacing mark (NSM) in the level run, and\n        // change the type of the NSM to the type of the previous\n        // character. If the NSM is at the start of the level run, it will\n        // get the type of sor.\n        // W2. Search backwards from each instance of a European number\n        // until the first strong type (R, L, AL, or sor) is found. If an\n        // AL is found, change the type of the European number to Arabic\n        // number.\n        // W3. Change all ALs to R.\n        // (Left after this: L, R, EN, AN, ET, CS, NI)\n        for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {\n            let type = charType(line.charCodeAt(i));\n            if (type == 512 /* T.NSM */)\n                type = prev;\n            else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)\n                type = 16 /* T.AN */;\n            types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;\n            if (type & 7 /* T.Strong */)\n                prevStrong = type;\n            prev = type;\n        }\n        // W5. A sequence of European terminators adjacent to European\n        // numbers changes to all European numbers.\n        // W6. Otherwise, separators and terminators change to Other\n        // Neutral.\n        // W7. Search backwards from each instance of a European number\n        // until the first strong type (R, L, or sor) is found. If an L is\n        // found, then change the type of the European number to L.\n        // (Left after this: L, R, EN+AN, NI)\n        for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {\n            let type = types[i];\n            if (type == 128 /* T.CS */) {\n                if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))\n                    type = types[i] = prev;\n                else\n                    types[i] = 256 /* T.NI */;\n            }\n            else if (type == 64 /* T.ET */) {\n                let end = i + 1;\n                while (end < to && types[end] == 64 /* T.ET */)\n                    end++;\n                let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;\n                for (let j = i; j < end; j++)\n                    types[j] = replace;\n                i = end - 1;\n            }\n            else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {\n                types[i] = 1 /* T.L */;\n            }\n            prev = type;\n            if (type & 7 /* T.Strong */)\n                prevStrong = type;\n        }\n    }\n}\n// Process brackets throughout a run sequence.\nfunction processBracketPairs(line, rFrom, rTo, isolates, outerType) {\n    let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;\n    for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {\n        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;\n        // N0. Process bracket pairs in an isolating run sequence\n        // sequentially in the logical order of the text positions of the\n        // opening paired brackets using the logic given below. Within this\n        // scope, bidirectional types EN and AN are treated as R.\n        for (let i = from, ch, br, type; i < to; i++) {\n            // Keeps [startIndex, type, strongSeen] triples for each open\n            // bracket on BracketStack.\n            if (br = Brackets[ch = line.charCodeAt(i)]) {\n                if (br < 0) { // Closing bracket\n                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\n                        if (BracketStack[sJ + 1] == -br) {\n                            let flags = BracketStack[sJ + 2];\n                            let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :\n                                !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :\n                                    (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;\n                            if (type)\n                                types[i] = types[BracketStack[sJ]] = type;\n                            sI = sJ;\n                            break;\n                        }\n                    }\n                }\n                else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {\n                    break;\n                }\n                else {\n                    BracketStack[sI++] = i;\n                    BracketStack[sI++] = ch;\n                    BracketStack[sI++] = context;\n                }\n            }\n            else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {\n                let embed = type == outerType;\n                context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;\n                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {\n                    let cur = BracketStack[sJ + 2];\n                    if (cur & 2 /* Bracketed.EmbedInside */)\n                        break;\n                    if (embed) {\n                        BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;\n                    }\n                    else {\n                        if (cur & 4 /* Bracketed.OppositeInside */)\n                            break;\n                        BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;\n                    }\n                }\n            }\n        }\n    }\n}\nfunction processNeutrals(rFrom, rTo, isolates, outerType) {\n    for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {\n        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;\n        // N1. A sequence of neutrals takes the direction of the\n        // surrounding strong text if the text on both sides has the same\n        // direction. European and Arabic numbers act as if they were R in\n        // terms of their influence on neutrals. Start-of-level-run (sor)\n        // and end-of-level-run (eor) are used at level run boundaries.\n        // N2. Any remaining neutrals take the embedding direction.\n        // (Left after this: L, R, EN+AN)\n        for (let i = from; i < to;) {\n            let type = types[i];\n            if (type == 256 /* T.NI */) {\n                let end = i + 1;\n                for (;;) {\n                    if (end == to) {\n                        if (iI == isolates.length)\n                            break;\n                        end = isolates[iI++].to;\n                        to = iI < isolates.length ? isolates[iI].from : rTo;\n                    }\n                    else if (types[end] == 256 /* T.NI */) {\n                        end++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                let beforeL = prev == 1 /* T.L */;\n                let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;\n                let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;\n                for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {\n                    if (j == fromJ) {\n                        j = isolates[--jI].from;\n                        fromJ = jI ? isolates[jI - 1].to : rFrom;\n                    }\n                    types[--j] = replace;\n                }\n                i = end;\n            }\n            else {\n                prev = type;\n                i++;\n            }\n        }\n    }\n}\n// Find the contiguous ranges of character types in a given range, and\n// emit spans for them. Flip the order of the spans as appropriate\n// based on the level, and call through to compute the spans for\n// isolates at the proper point.\nfunction emitSpans(line, from, to, level, baseLevel, isolates, order) {\n    let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;\n    if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip\n        for (let iCh = from, iI = 0; iCh < to;) {\n            // Scan a section of characters in direction ourType, unless\n            // there's another type of char right after iCh, in which case\n            // we scan a section of other characters (which, if ourType ==\n            // T.L, may contain both T.R and T.AN chars).\n            let sameDir = true, isNum = false;\n            if (iI == isolates.length || iCh < isolates[iI].from) {\n                let next = types[iCh];\n                if (next != ourType) {\n                    sameDir = false;\n                    isNum = next == 16 /* T.AN */;\n                }\n            }\n            // Holds an array of isolates to pass to a recursive call if we\n            // must recurse (to distinguish T.AN inside an RTL section in\n            // LTR text), null if we can emit directly\n            let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;\n            let localLevel = sameDir ? level : level + 1;\n            let iScan = iCh;\n            run: for (;;) {\n                if (iI < isolates.length && iScan == isolates[iI].from) {\n                    if (isNum)\n                        break run;\n                    let iso = isolates[iI];\n                    // Scan ahead to verify that there is another char in this dir after the isolate(s)\n                    if (!sameDir)\n                        for (let upto = iso.to, jI = iI + 1;;) {\n                            if (upto == to)\n                                break run;\n                            if (jI < isolates.length && isolates[jI].from == upto)\n                                upto = isolates[jI++].to;\n                            else if (types[upto] == ourType)\n                                break run;\n                            else\n                                break;\n                        }\n                    iI++;\n                    if (recurse) {\n                        recurse.push(iso);\n                    }\n                    else {\n                        if (iso.from > iCh)\n                            order.push(new BidiSpan(iCh, iso.from, localLevel));\n                        let dirSwap = (iso.direction == LTR) != !(localLevel % 2);\n                        computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);\n                        iCh = iso.to;\n                    }\n                    iScan = iso.to;\n                }\n                else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {\n                    break;\n                }\n                else {\n                    iScan++;\n                }\n            }\n            if (recurse)\n                emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);\n            else if (iCh < iScan)\n                order.push(new BidiSpan(iCh, iScan, localLevel));\n            iCh = iScan;\n        }\n    }\n    else {\n        // Iterate in reverse to flip the span order. Same code again, but\n        // going from the back of the section to the front\n        for (let iCh = to, iI = isolates.length; iCh > from;) {\n            let sameDir = true, isNum = false;\n            if (!iI || iCh > isolates[iI - 1].to) {\n                let next = types[iCh - 1];\n                if (next != ourType) {\n                    sameDir = false;\n                    isNum = next == 16 /* T.AN */;\n                }\n            }\n            let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;\n            let localLevel = sameDir ? level : level + 1;\n            let iScan = iCh;\n            run: for (;;) {\n                if (iI && iScan == isolates[iI - 1].to) {\n                    if (isNum)\n                        break run;\n                    let iso = isolates[--iI];\n                    // Scan ahead to verify that there is another char in this dir after the isolate(s)\n                    if (!sameDir)\n                        for (let upto = iso.from, jI = iI;;) {\n                            if (upto == from)\n                                break run;\n                            if (jI && isolates[jI - 1].to == upto)\n                                upto = isolates[--jI].from;\n                            else if (types[upto - 1] == ourType)\n                                break run;\n                            else\n                                break;\n                        }\n                    if (recurse) {\n                        recurse.push(iso);\n                    }\n                    else {\n                        if (iso.to < iCh)\n                            order.push(new BidiSpan(iso.to, iCh, localLevel));\n                        let dirSwap = (iso.direction == LTR) != !(localLevel % 2);\n                        computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);\n                        iCh = iso.from;\n                    }\n                    iScan = iso.from;\n                }\n                else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {\n                    break;\n                }\n                else {\n                    iScan--;\n                }\n            }\n            if (recurse)\n                emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);\n            else if (iScan < iCh)\n                order.push(new BidiSpan(iScan, iCh, localLevel));\n            iCh = iScan;\n        }\n    }\n}\nfunction computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {\n    let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);\n    computeCharTypes(line, from, to, isolates, outerType);\n    processBracketPairs(line, from, to, isolates, outerType);\n    processNeutrals(from, to, isolates, outerType);\n    emitSpans(line, from, to, level, baseLevel, isolates, order);\n}\nfunction computeOrder(line, direction, isolates) {\n    if (!line)\n        return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];\n    if (direction == LTR && !isolates.length && !BidiRE.test(line))\n        return trivialOrder(line.length);\n    if (isolates.length)\n        while (line.length > types.length)\n            types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps\n    let order = [], level = direction == LTR ? 0 : 1;\n    computeSectionOrder(line, level, level, isolates, 0, line.length, order);\n    return order;\n}\nfunction trivialOrder(length) {\n    return [new BidiSpan(0, length, 0)];\n}\nlet movedOver = \"\";\n// This implementation moves strictly visually, without concern for a\n// traversal visiting every logical position in the string. It will\n// still do so for simple input, but situations like multiple isolates\n// with the same level next to each other, or text going against the\n// main dir at the end of the line, will make some positions\n// unreachable with this motion. Each visible cursor position will\n// correspond to the lower-level bidi span that touches it.\n//\n// The alternative would be to solve an order globally for a given\n// line, making sure that it includes every position, but that would\n// require associating non-canonical (higher bidi span level)\n// positions with a given visual position, which is likely to confuse\n// people. (And would generally be a lot more complicated.)\nfunction moveVisually(line, order, dir, start, forward) {\n    var _a;\n    let startIndex = start.head - line.from;\n    let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);\n    let span = order[spanI], spanEnd = span.side(forward, dir);\n    // End of span\n    if (startIndex == spanEnd) {\n        let nextI = spanI += forward ? 1 : -1;\n        if (nextI < 0 || nextI >= order.length)\n            return null;\n        span = order[spanI = nextI];\n        startIndex = span.side(!forward, dir);\n        spanEnd = span.side(forward, dir);\n    }\n    let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));\n    if (nextIndex < span.from || nextIndex > span.to)\n        nextIndex = spanEnd;\n    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));\n    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];\n    if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)\n        return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);\n    return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);\n}\nfunction autoDirection(text, from, to) {\n    for (let i = from; i < to; i++) {\n        let type = charType(text.charCodeAt(i));\n        if (type == 1 /* T.L */)\n            return LTR;\n        if (type == 2 /* T.R */ || type == 4 /* T.AL */)\n            return RTL;\n    }\n    return LTR;\n}\n\nconst clickAddsSelectionRange = /*@__PURE__*/Facet.define();\nconst dragMovesSelection$1 = /*@__PURE__*/Facet.define();\nconst mouseSelectionStyle = /*@__PURE__*/Facet.define();\nconst exceptionSink = /*@__PURE__*/Facet.define();\nconst updateListener = /*@__PURE__*/Facet.define();\nconst inputHandler = /*@__PURE__*/Facet.define();\nconst focusChangeEffect = /*@__PURE__*/Facet.define();\nconst perLineTextDirection = /*@__PURE__*/Facet.define({\n    combine: values => values.some(x => x)\n});\nconst nativeSelectionHidden = /*@__PURE__*/Facet.define({\n    combine: values => values.some(x => x)\n});\nconst scrollHandler = /*@__PURE__*/Facet.define();\nclass ScrollTarget {\n    constructor(range, y = \"nearest\", x = \"nearest\", yMargin = 5, xMargin = 5, \n    // This data structure is abused to also store precise scroll\n    // snapshots, instead of a `scrollIntoView` request. When this\n    // flag is `true`, `range` points at a position in the reference\n    // line, `yMargin` holds the difference between the top of that\n    // line and the top of the editor, and `xMargin` holds the\n    // editor's `scrollLeft`.\n    isSnapshot = false) {\n        this.range = range;\n        this.y = y;\n        this.x = x;\n        this.yMargin = yMargin;\n        this.xMargin = xMargin;\n        this.isSnapshot = isSnapshot;\n    }\n    map(changes) {\n        return changes.empty ? this :\n            new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);\n    }\n    clip(state) {\n        return this.range.to <= state.doc.length ? this :\n            new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);\n    }\n}\nconst scrollIntoView = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });\n/**\nLog or report an unhandled exception in client code. Should\nprobably only be used by extension code that allows client code to\nprovide functions, and calls those functions in a context where an\nexception can't be propagated to calling code in a reasonable way\n(for example when in an event handler).\n\nEither calls a handler registered with\n[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),\n`window.onerror`, if defined, or `console.error` (in which case\nit'll pass `context`, when given, as first argument).\n*/\nfunction logException(state, exception, context) {\n    let handler = state.facet(exceptionSink);\n    if (handler.length)\n        handler[0](exception);\n    else if (window.onerror)\n        window.onerror(String(exception), context, undefined, undefined, exception);\n    else if (context)\n        console.error(context + \":\", exception);\n    else\n        console.error(exception);\n}\nconst editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });\nlet nextPluginID = 0;\nconst viewPlugin = /*@__PURE__*/Facet.define();\n/**\nView plugins associate stateful values with a view. They can\ninfluence the way the content is drawn, and are notified of things\nthat happen in the view.\n*/\nclass ViewPlugin {\n    constructor(\n    /**\n    @internal\n    */\n    id, \n    /**\n    @internal\n    */\n    create, \n    /**\n    @internal\n    */\n    domEventHandlers, \n    /**\n    @internal\n    */\n    domEventObservers, buildExtensions) {\n        this.id = id;\n        this.create = create;\n        this.domEventHandlers = domEventHandlers;\n        this.domEventObservers = domEventObservers;\n        this.extension = buildExtensions(this);\n    }\n    /**\n    Define a plugin from a constructor function that creates the\n    plugin's value, given an editor view.\n    */\n    static define(create, spec) {\n        const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};\n        return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {\n            let ext = [viewPlugin.of(plugin)];\n            if (deco)\n                ext.push(decorations.of(view => {\n                    let pluginInst = view.plugin(plugin);\n                    return pluginInst ? deco(pluginInst) : Decoration.none;\n                }));\n            if (provide)\n                ext.push(provide(plugin));\n            return ext;\n        });\n    }\n    /**\n    Create a plugin for a class whose constructor takes a single\n    editor view as argument.\n    */\n    static fromClass(cls, spec) {\n        return ViewPlugin.define(view => new cls(view), spec);\n    }\n}\nclass PluginInstance {\n    constructor(spec) {\n        this.spec = spec;\n        // When starting an update, all plugins have this field set to the\n        // update object, indicating they need to be updated. When finished\n        // updating, it is set to `false`. Retrieving a plugin that needs to\n        // be updated with `view.plugin` forces an eager update.\n        this.mustUpdate = null;\n        // This is null when the plugin is initially created, but\n        // initialized on the first update.\n        this.value = null;\n    }\n    update(view) {\n        if (!this.value) {\n            if (this.spec) {\n                try {\n                    this.value = this.spec.create(view);\n                }\n                catch (e) {\n                    logException(view.state, e, \"CodeMirror plugin crashed\");\n                    this.deactivate();\n                }\n            }\n        }\n        else if (this.mustUpdate) {\n            let update = this.mustUpdate;\n            this.mustUpdate = null;\n            if (this.value.update) {\n                try {\n                    this.value.update(update);\n                }\n                catch (e) {\n                    logException(update.state, e, \"CodeMirror plugin crashed\");\n                    if (this.value.destroy)\n                        try {\n                            this.value.destroy();\n                        }\n                        catch (_) { }\n                    this.deactivate();\n                }\n            }\n        }\n        return this;\n    }\n    destroy(view) {\n        var _a;\n        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {\n            try {\n                this.value.destroy();\n            }\n            catch (e) {\n                logException(view.state, e, \"CodeMirror plugin crashed\");\n            }\n        }\n    }\n    deactivate() {\n        this.spec = this.value = null;\n    }\n}\nconst editorAttributes = /*@__PURE__*/Facet.define();\nconst contentAttributes = /*@__PURE__*/Facet.define();\n// Provide decorations\nconst decorations = /*@__PURE__*/Facet.define();\nconst outerDecorations = /*@__PURE__*/Facet.define();\nconst atomicRanges = /*@__PURE__*/Facet.define();\nconst bidiIsolatedRanges = /*@__PURE__*/Facet.define();\nfunction getIsolatedRanges(view, line) {\n    let isolates = view.state.facet(bidiIsolatedRanges);\n    if (!isolates.length)\n        return isolates;\n    let sets = isolates.map(i => i instanceof Function ? i(view) : i);\n    let result = [];\n    RangeSet.spans(sets, line.from, line.to, {\n        point() { },\n        span(fromDoc, toDoc, active, open) {\n            let from = fromDoc - line.from, to = toDoc - line.from;\n            let level = result;\n            for (let i = active.length - 1; i >= 0; i--, open--) {\n                let direction = active[i].spec.bidiIsolate, update;\n                if (direction == null)\n                    direction = autoDirection(line.text, from, to);\n                if (open > 0 && level.length &&\n                    (update = level[level.length - 1]).to == from && update.direction == direction) {\n                    update.to = to;\n                    level = update.inner;\n                }\n                else {\n                    let add = { from, to, direction, inner: [] };\n                    level.push(add);\n                    level = add.inner;\n                }\n            }\n        }\n    });\n    return result;\n}\nconst scrollMargins = /*@__PURE__*/Facet.define();\nfunction getScrollMargins(view) {\n    let left = 0, right = 0, top = 0, bottom = 0;\n    for (let source of view.state.facet(scrollMargins)) {\n        let m = source(view);\n        if (m) {\n            if (m.left != null)\n                left = Math.max(left, m.left);\n            if (m.right != null)\n                right = Math.max(right, m.right);\n            if (m.top != null)\n                top = Math.max(top, m.top);\n            if (m.bottom != null)\n                bottom = Math.max(bottom, m.bottom);\n        }\n    }\n    return { left, right, top, bottom };\n}\nconst styleModule = /*@__PURE__*/Facet.define();\nclass ChangedRange {\n    constructor(fromA, toA, fromB, toB) {\n        this.fromA = fromA;\n        this.toA = toA;\n        this.fromB = fromB;\n        this.toB = toB;\n    }\n    join(other) {\n        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));\n    }\n    addToSet(set) {\n        let i = set.length, me = this;\n        for (; i > 0; i--) {\n            let range = set[i - 1];\n            if (range.fromA > me.toA)\n                continue;\n            if (range.toA < me.fromA)\n                break;\n            me = me.join(range);\n            set.splice(i - 1, 1);\n        }\n        set.splice(i, 0, me);\n        return set;\n    }\n    static extendWithRanges(diff, ranges) {\n        if (ranges.length == 0)\n            return diff;\n        let result = [];\n        for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {\n            let next = dI == diff.length ? null : diff[dI], off = posA - posB;\n            let end = next ? next.fromB : 1e9;\n            while (rI < ranges.length && ranges[rI] < end) {\n                let from = ranges[rI], to = ranges[rI + 1];\n                let fromB = Math.max(posB, from), toB = Math.min(end, to);\n                if (fromB <= toB)\n                    new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);\n                if (to > end)\n                    break;\n                else\n                    rI += 2;\n            }\n            if (!next)\n                return result;\n            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);\n            posA = next.toA;\n            posB = next.toB;\n        }\n    }\n}\n/**\nView [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this\nclass, which describe what happened, whenever the view is updated.\n*/\nclass ViewUpdate {\n    constructor(\n    /**\n    The editor view that the update is associated with.\n    */\n    view, \n    /**\n    The new editor state.\n    */\n    state, \n    /**\n    The transactions involved in the update. May be empty.\n    */\n    transactions) {\n        this.view = view;\n        this.state = state;\n        this.transactions = transactions;\n        /**\n        @internal\n        */\n        this.flags = 0;\n        this.startState = view.state;\n        this.changes = ChangeSet.empty(this.startState.doc.length);\n        for (let tr of transactions)\n            this.changes = this.changes.compose(tr.changes);\n        let changedRanges = [];\n        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));\n        this.changedRanges = changedRanges;\n    }\n    /**\n    @internal\n    */\n    static create(view, state, transactions) {\n        return new ViewUpdate(view, state, transactions);\n    }\n    /**\n    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or\n    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this\n    update.\n    */\n    get viewportChanged() {\n        return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;\n    }\n    /**\n    Indicates whether the height of a block element in the editor\n    changed in this update.\n    */\n    get heightChanged() {\n        return (this.flags & 2 /* UpdateFlag.Height */) > 0;\n    }\n    /**\n    Returns true when the document was modified or the size of the\n    editor, or elements within the editor, changed.\n    */\n    get geometryChanged() {\n        return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;\n    }\n    /**\n    True when this update indicates a focus change.\n    */\n    get focusChanged() {\n        return (this.flags & 1 /* UpdateFlag.Focus */) > 0;\n    }\n    /**\n    Whether the document changed in this update.\n    */\n    get docChanged() {\n        return !this.changes.empty;\n    }\n    /**\n    Whether the selection was explicitly set in this update.\n    */\n    get selectionSet() {\n        return this.transactions.some(tr => tr.selection);\n    }\n    /**\n    @internal\n    */\n    get empty() { return this.flags == 0 && this.transactions.length == 0; }\n}\n\nclass DocView extends ContentView {\n    get length() { return this.view.state.doc.length; }\n    constructor(view) {\n        super();\n        this.view = view;\n        this.decorations = [];\n        this.dynamicDecorationMap = [];\n        this.domChanged = null;\n        this.hasComposition = null;\n        this.markedForComposition = new Set;\n        this.lastCompositionAfterCursor = false;\n        // Track a minimum width for the editor. When measuring sizes in\n        // measureVisibleLineHeights, this is updated to point at the width\n        // of a given element and its extent in the document. When a change\n        // happens in that range, these are reset. That way, once we've seen\n        // a line/element of a given length, we keep the editor wide enough\n        // to fit at least that element, until it is changed, at which point\n        // we forget it again.\n        this.minWidth = 0;\n        this.minWidthFrom = 0;\n        this.minWidthTo = 0;\n        // Track whether the DOM selection was set in a lossy way, so that\n        // we don't mess it up when reading it back it\n        this.impreciseAnchor = null;\n        this.impreciseHead = null;\n        this.forceSelection = false;\n        // Used by the resize observer to ignore resizes that we caused\n        // ourselves\n        this.lastUpdate = Date.now();\n        this.setDOM(view.contentDOM);\n        this.children = [new LineView];\n        this.children[0].setParent(this);\n        this.updateDeco();\n        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);\n    }\n    // Update the document view to a given state.\n    update(update) {\n        var _a;\n        let changedRanges = update.changedRanges;\n        if (this.minWidth > 0 && changedRanges.length) {\n            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {\n                this.minWidth = this.minWidthFrom = this.minWidthTo = 0;\n            }\n            else {\n                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);\n                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);\n            }\n        }\n        let readCompositionAt = -1;\n        if (this.view.inputState.composing >= 0) {\n            if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)\n                readCompositionAt = this.domChanged.newSel.head;\n            else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)\n                readCompositionAt = update.state.selection.main.head;\n        }\n        let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;\n        this.domChanged = null;\n        if (this.hasComposition) {\n            this.markedForComposition.clear();\n            let { from, to } = this.hasComposition;\n            changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))\n                .addToSet(changedRanges.slice());\n        }\n        this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;\n        // When the DOM nodes around the selection are moved to another\n        // parent, Chrome sometimes reports a different selection through\n        // getSelection than the one that it actually shows to the user.\n        // This forces a selection update when lines are joined to work\n        // around that. Issue #54\n        if ((browser.ie || browser.chrome) && !composition && update &&\n            update.state.doc.lines != update.startState.doc.lines)\n            this.forceSelection = true;\n        let prevDeco = this.decorations, deco = this.updateDeco();\n        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);\n        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);\n        if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {\n            return false;\n        }\n        else {\n            this.updateInner(changedRanges, update.startState.doc.length, composition);\n            if (update.transactions.length)\n                this.lastUpdate = Date.now();\n            return true;\n        }\n    }\n    // Used by update and the constructor do perform the actual DOM\n    // update\n    updateInner(changes, oldLength, composition) {\n        this.view.viewState.mustMeasureContent = true;\n        this.updateChildren(changes, oldLength, composition);\n        let { observer } = this.view;\n        observer.ignore(() => {\n            // Lock the height during redrawing, since Chrome sometimes\n            // messes with the scroll position during DOM mutation (though\n            // no relayout is triggered and I cannot imagine how it can\n            // recompute the scroll position without a layout)\n            this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + \"px\";\n            this.dom.style.flexBasis = this.minWidth ? this.minWidth + \"px\" : \"\";\n            // Chrome will sometimes, when DOM mutations occur directly\n            // around the selection, get confused and report a different\n            // selection from the one it displays (issue #218). This tries\n            // to detect that situation.\n            let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;\n            this.sync(this.view, track);\n            this.flags &= ~7 /* ViewFlag.Dirty */;\n            if (track && (track.written || observer.selectionRange.focusNode != track.node))\n                this.forceSelection = true;\n            this.dom.style.height = \"\";\n        });\n        this.markedForComposition.forEach(cView => cView.flags &= ~8 /* ViewFlag.Composition */);\n        let gaps = [];\n        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)\n            for (let child of this.children)\n                if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)\n                    gaps.push(child.dom);\n        observer.updateGaps(gaps);\n    }\n    updateChildren(changes, oldLength, composition) {\n        let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;\n        let cursor = this.childCursor(oldLength);\n        for (let i = ranges.length - 1;; i--) {\n            let next = i >= 0 ? ranges[i] : null;\n            if (!next)\n                break;\n            let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;\n            if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {\n                let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);\n                let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);\n                breakAtStart = before.breakAtStart;\n                openStart = before.openStart;\n                openEnd = after.openEnd;\n                let compLine = this.compositionView(composition);\n                if (after.breakAtStart) {\n                    compLine.breakAfter = 1;\n                }\n                else if (after.content.length &&\n                    compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {\n                    compLine.breakAfter = after.content[0].breakAfter;\n                    after.content.shift();\n                }\n                if (before.content.length &&\n                    compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {\n                    before.content.pop();\n                }\n                content = before.content.concat(compLine).concat(after.content);\n            }\n            else {\n                ({ content, breakAtStart, openStart, openEnd } =\n                    ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));\n            }\n            let { i: toI, off: toOff } = cursor.findPos(toA, 1);\n            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);\n            replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);\n        }\n        if (composition)\n            this.fixCompositionDOM(composition);\n    }\n    compositionView(composition) {\n        let cur = new TextView(composition.text.nodeValue);\n        cur.flags |= 8 /* ViewFlag.Composition */;\n        for (let { deco } of composition.marks)\n            cur = new MarkView(deco, [cur], cur.length);\n        let line = new LineView;\n        line.append(cur, 0);\n        return line;\n    }\n    fixCompositionDOM(composition) {\n        let fix = (dom, cView) => {\n            cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);\n            this.markedForComposition.add(cView);\n            let prev = ContentView.get(dom);\n            if (prev && prev != cView)\n                prev.dom = null;\n            cView.setDOM(dom);\n        };\n        let pos = this.childPos(composition.range.fromB, 1);\n        let cView = this.children[pos.i];\n        fix(composition.line, cView);\n        for (let i = composition.marks.length - 1; i >= -1; i--) {\n            pos = cView.childPos(pos.off, 1);\n            cView = cView.children[pos.i];\n            fix(i >= 0 ? composition.marks[i].node : composition.text, cView);\n        }\n    }\n    // Sync the DOM selection to this.state.selection\n    updateSelection(mustRead = false, fromPointer = false) {\n        if (mustRead || !this.view.observer.selectionRange.focusNode)\n            this.view.observer.readSelectionRange();\n        let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;\n        let selectionNotFocus = !focused &&\n            hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));\n        if (!(focused || fromPointer || selectionNotFocus))\n            return;\n        let force = this.forceSelection;\n        this.forceSelection = false;\n        let main = this.view.state.selection.main;\n        let anchor = this.moveToLine(this.domAtPos(main.anchor));\n        let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));\n        // Always reset on Firefox when next to an uneditable node to\n        // avoid invisible cursor bugs (#111)\n        if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {\n            let dummy = document.createTextNode(\"\");\n            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));\n            anchor = head = new DOMPos(dummy, 0);\n            force = true;\n        }\n        let domSel = this.view.observer.selectionRange;\n        // If the selection is already here, or in an equivalent position, don't touch it\n        if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||\n            !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {\n            this.view.observer.ignore(() => {\n                // Chrome Android will hide the virtual keyboard when tapping\n                // inside an uneditable node, and not bring it back when we\n                // move the cursor to its proper position. This tries to\n                // restore the keyboard by cycling focus.\n                if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&\n                    inUneditable(domSel.focusNode, this.dom)) {\n                    this.dom.blur();\n                    this.dom.focus({ preventScroll: true });\n                }\n                let rawSel = getSelection(this.view.root);\n                if (!rawSel) ;\n                else if (main.empty) {\n                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076\n                    if (browser.gecko) {\n                        let nextTo = nextToUneditable(anchor.node, anchor.offset);\n                        if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {\n                            let text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);\n                            if (text)\n                                anchor = new DOMPos(text.node, text.offset);\n                        }\n                    }\n                    rawSel.collapse(anchor.node, anchor.offset);\n                    if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)\n                        rawSel.caretBidiLevel = main.bidiLevel;\n                }\n                else if (rawSel.extend) {\n                    // Selection.extend can be used to create an 'inverted' selection\n                    // (one where the focus is before the anchor), but not all\n                    // browsers support it yet.\n                    rawSel.collapse(anchor.node, anchor.offset);\n                    // Safari will ignore the call above when the editor is\n                    // hidden, and then raise an error on the call to extend\n                    // (#940).\n                    try {\n                        rawSel.extend(head.node, head.offset);\n                    }\n                    catch (_) { }\n                }\n                else {\n                    // Primitive (IE) way\n                    let range = document.createRange();\n                    if (main.anchor > main.head)\n                        [anchor, head] = [head, anchor];\n                    range.setEnd(head.node, head.offset);\n                    range.setStart(anchor.node, anchor.offset);\n                    rawSel.removeAllRanges();\n                    rawSel.addRange(range);\n                }\n                if (selectionNotFocus && this.view.root.activeElement == this.dom) {\n                    this.dom.blur();\n                    if (activeElt)\n                        activeElt.focus();\n                }\n            });\n            this.view.observer.setSelectionRange(anchor, head);\n        }\n        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);\n        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);\n    }\n    // If a zero-length widget is inserted next to the cursor during\n    // composition, avoid moving it across it and disrupting the\n    // composition.\n    suppressWidgetCursorChange(sel, cursor) {\n        return this.hasComposition && cursor.empty &&\n            isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&\n            this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;\n    }\n    enforceCursorAssoc() {\n        if (this.hasComposition)\n            return;\n        let { view } = this, cursor = view.state.selection.main;\n        let sel = getSelection(view.root);\n        let { anchorNode, anchorOffset } = view.observer.selectionRange;\n        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)\n            return;\n        let line = LineView.find(this, cursor.head);\n        if (!line)\n            return;\n        let lineStart = line.posAtStart;\n        if (cursor.head == lineStart || cursor.head == lineStart + line.length)\n            return;\n        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);\n        if (!before || !after || before.bottom > after.top)\n            return;\n        let dom = this.domAtPos(cursor.head + cursor.assoc);\n        sel.collapse(dom.node, dom.offset);\n        sel.modify(\"move\", cursor.assoc < 0 ? \"forward\" : \"backward\", \"lineboundary\");\n        // This can go wrong in corner cases like single-character lines,\n        // so check and reset if necessary.\n        view.observer.readSelectionRange();\n        let newRange = view.observer.selectionRange;\n        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)\n            sel.collapse(anchorNode, anchorOffset);\n    }\n    // If a position is in/near a block widget, move it to a nearby text\n    // line, since we don't want the cursor inside a block widget.\n    moveToLine(pos) {\n        // Block widgets will return positions before/after them, which\n        // are thus directly in the document DOM element.\n        let dom = this.dom, newPos;\n        if (pos.node != dom)\n            return pos;\n        for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {\n            let view = ContentView.get(dom.childNodes[i]);\n            if (view instanceof LineView)\n                newPos = view.domAtPos(0);\n        }\n        for (let i = pos.offset - 1; !newPos && i >= 0; i--) {\n            let view = ContentView.get(dom.childNodes[i]);\n            if (view instanceof LineView)\n                newPos = view.domAtPos(view.length);\n        }\n        return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;\n    }\n    nearest(dom) {\n        for (let cur = dom; cur;) {\n            let domView = ContentView.get(cur);\n            if (domView && domView.rootView == this)\n                return domView;\n            cur = cur.parentNode;\n        }\n        return null;\n    }\n    posFromDOM(node, offset) {\n        let view = this.nearest(node);\n        if (!view)\n            throw new RangeError(\"Trying to find position for a DOM position outside of the document\");\n        return view.localPosFromDOM(node, offset) + view.posAtStart;\n    }\n    domAtPos(pos) {\n        let { i, off } = this.childCursor().findPos(pos, -1);\n        for (; i < this.children.length - 1;) {\n            let child = this.children[i];\n            if (off < child.length || child instanceof LineView)\n                break;\n            i++;\n            off = 0;\n        }\n        return this.children[i].domAtPos(off);\n    }\n    coordsAt(pos, side) {\n        let best = null, bestPos = 0;\n        for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {\n            let child = this.children[i], end = off - child.breakAfter, start = end - child.length;\n            if (end < pos)\n                break;\n            if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&\n                (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {\n                best = child;\n                bestPos = start;\n            }\n            off = start;\n        }\n        return best ? best.coordsAt(pos - bestPos, side) : null;\n    }\n    coordsForChar(pos) {\n        let { i, off } = this.childPos(pos, 1), child = this.children[i];\n        if (!(child instanceof LineView))\n            return null;\n        while (child.children.length) {\n            let { i, off: childOff } = child.childPos(off, 1);\n            for (;; i++) {\n                if (i == child.children.length)\n                    return null;\n                if ((child = child.children[i]).length)\n                    break;\n            }\n            off = childOff;\n        }\n        if (!(child instanceof TextView))\n            return null;\n        let end = findClusterBreak(child.text, off);\n        if (end == off)\n            return null;\n        let rects = textRange(child.dom, off, end).getClientRects();\n        for (let i = 0; i < rects.length; i++) {\n            let rect = rects[i];\n            if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)\n                return rect;\n        }\n        return null;\n    }\n    measureVisibleLineHeights(viewport) {\n        let result = [], { from, to } = viewport;\n        let contentWidth = this.view.contentDOM.clientWidth;\n        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;\n        let widest = -1, ltr = this.view.textDirection == Direction.LTR;\n        for (let pos = 0, i = 0; i < this.children.length; i++) {\n            let child = this.children[i], end = pos + child.length;\n            if (end > to)\n                break;\n            if (pos >= from) {\n                let childRect = child.dom.getBoundingClientRect();\n                result.push(childRect.height);\n                if (isWider) {\n                    let last = child.dom.lastChild;\n                    let rects = last ? clientRectsFor(last) : [];\n                    if (rects.length) {\n                        let rect = rects[rects.length - 1];\n                        let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;\n                        if (width > widest) {\n                            widest = width;\n                            this.minWidth = contentWidth;\n                            this.minWidthFrom = pos;\n                            this.minWidthTo = end;\n                        }\n                    }\n                }\n            }\n            pos = end + child.breakAfter;\n        }\n        return result;\n    }\n    textDirectionAt(pos) {\n        let { i } = this.childPos(pos, 1);\n        return getComputedStyle(this.children[i].dom).direction == \"rtl\" ? Direction.RTL : Direction.LTR;\n    }\n    measureTextSize() {\n        for (let child of this.children) {\n            if (child instanceof LineView) {\n                let measure = child.measureTextSize();\n                if (measure)\n                    return measure;\n            }\n        }\n        // If no workable line exists, force a layout of a measurable element\n        let dummy = document.createElement(\"div\"), lineHeight, charWidth, textHeight;\n        dummy.className = \"cm-line\";\n        dummy.style.width = \"99999px\";\n        dummy.style.position = \"absolute\";\n        dummy.textContent = \"abc def ghi jkl mno pqr stu\";\n        this.view.observer.ignore(() => {\n            this.dom.appendChild(dummy);\n            let rect = clientRectsFor(dummy.firstChild)[0];\n            lineHeight = dummy.getBoundingClientRect().height;\n            charWidth = rect ? rect.width / 27 : 7;\n            textHeight = rect ? rect.height : lineHeight;\n            dummy.remove();\n        });\n        return { lineHeight, charWidth, textHeight };\n    }\n    childCursor(pos = this.length) {\n        // Move back to start of last element when possible, so that\n        // `ChildCursor.findPos` doesn't have to deal with the edge case\n        // of being after the last element.\n        let i = this.children.length;\n        if (i)\n            pos -= this.children[--i].length;\n        return new ChildCursor(this.children, pos, i);\n    }\n    computeBlockGapDeco() {\n        let deco = [], vs = this.view.viewState;\n        for (let pos = 0, i = 0;; i++) {\n            let next = i == vs.viewports.length ? null : vs.viewports[i];\n            let end = next ? next.from - 1 : this.length;\n            if (end > pos) {\n                let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;\n                deco.push(Decoration.replace({\n                    widget: new BlockGapWidget(height),\n                    block: true,\n                    inclusive: true,\n                    isBlockGap: true,\n                }).range(pos, end));\n            }\n            if (!next)\n                break;\n            pos = next.to + 1;\n        }\n        return Decoration.set(deco);\n    }\n    updateDeco() {\n        let i = 0;\n        let allDeco = this.view.state.facet(decorations).map(d => {\n            let dynamic = this.dynamicDecorationMap[i++] = typeof d == \"function\";\n            return dynamic ? d(this.view) : d;\n        });\n        let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {\n            let dynamic = typeof d == \"function\";\n            if (dynamic)\n                dynamicOuter = true;\n            return dynamic ? d(this.view) : d;\n        });\n        if (outerDeco.length) {\n            this.dynamicDecorationMap[i++] = dynamicOuter;\n            allDeco.push(RangeSet.join(outerDeco));\n        }\n        this.decorations = [\n            ...allDeco,\n            this.computeBlockGapDeco(),\n            this.view.viewState.lineGapDeco\n        ];\n        while (i < this.decorations.length)\n            this.dynamicDecorationMap[i++] = false;\n        return this.decorations;\n    }\n    scrollIntoView(target) {\n        if (target.isSnapshot) {\n            let ref = this.view.viewState.lineBlockAt(target.range.head);\n            this.view.scrollDOM.scrollTop = ref.top - target.yMargin;\n            this.view.scrollDOM.scrollLeft = target.xMargin;\n            return;\n        }\n        for (let handler of this.view.state.facet(scrollHandler)) {\n            try {\n                if (handler(this.view, target.range, target))\n                    return true;\n            }\n            catch (e) {\n                logException(this.view.state, e, \"scroll handler\");\n            }\n        }\n        let { range } = target;\n        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;\n        if (!rect)\n            return;\n        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))\n            rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),\n                right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };\n        let margins = getScrollMargins(this.view);\n        let targetRect = {\n            left: rect.left - margins.left, top: rect.top - margins.top,\n            right: rect.right + margins.right, bottom: rect.bottom + margins.bottom\n        };\n        let { offsetWidth, offsetHeight } = this.view.scrollDOM;\n        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);\n    }\n}\nfunction betweenUneditable(pos) {\n    return pos.node.nodeType == 1 && pos.node.firstChild &&\n        (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == \"false\") &&\n        (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == \"false\");\n}\nclass BlockGapWidget extends WidgetType {\n    constructor(height) {\n        super();\n        this.height = height;\n    }\n    toDOM() {\n        let elt = document.createElement(\"div\");\n        elt.className = \"cm-gap\";\n        this.updateDOM(elt);\n        return elt;\n    }\n    eq(other) { return other.height == this.height; }\n    updateDOM(elt) {\n        elt.style.height = this.height + \"px\";\n        return true;\n    }\n    get editable() { return true; }\n    get estimatedHeight() { return this.height; }\n    ignoreEvent() { return false; }\n}\nfunction findCompositionNode(view, headPos) {\n    let sel = view.observer.selectionRange;\n    if (!sel.focusNode)\n        return null;\n    let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);\n    let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);\n    let textNode = textBefore || textAfter;\n    if (textAfter && textBefore && textAfter.node != textBefore.node) {\n        let descAfter = ContentView.get(textAfter.node);\n        if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {\n            textNode = textAfter;\n        }\n        else if (view.docView.lastCompositionAfterCursor) {\n            let descBefore = ContentView.get(textBefore.node);\n            if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))\n                textNode = textAfter;\n        }\n    }\n    view.docView.lastCompositionAfterCursor = textNode != textBefore;\n    if (!textNode)\n        return null;\n    let from = headPos - textNode.offset;\n    return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };\n}\nfunction findCompositionRange(view, changes, headPos) {\n    let found = findCompositionNode(view, headPos);\n    if (!found)\n        return null;\n    let { node: textNode, from, to } = found, text = textNode.nodeValue;\n    // Don't try to preserve multi-line compositions\n    if (/[\\n\\r]/.test(text))\n        return null;\n    if (view.state.doc.sliceString(found.from, found.to) != text)\n        return null;\n    let inv = changes.invertedDesc;\n    let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);\n    let marks = [];\n    for (let parent = textNode.parentNode;; parent = parent.parentNode) {\n        let parentView = ContentView.get(parent);\n        if (parentView instanceof MarkView)\n            marks.push({ node: parent, deco: parentView.mark });\n        else if (parentView instanceof LineView || parent.nodeName == \"DIV\" && parent.parentNode == view.contentDOM)\n            return { range, text: textNode, marks, line: parent };\n        else if (parent != view.contentDOM)\n            marks.push({ node: parent, deco: new MarkDecoration({\n                    inclusive: true,\n                    attributes: getAttrs(parent),\n                    tagName: parent.tagName.toLowerCase()\n                }) });\n        else\n            return null;\n    }\n}\nfunction nextToUneditable(node, offset) {\n    if (node.nodeType != 1)\n        return 0;\n    return (offset && node.childNodes[offset - 1].contentEditable == \"false\" ? 1 /* NextTo.Before */ : 0) |\n        (offset < node.childNodes.length && node.childNodes[offset].contentEditable == \"false\" ? 2 /* NextTo.After */ : 0);\n}\nlet DecorationComparator$1 = class DecorationComparator {\n    constructor() {\n        this.changes = [];\n    }\n    compareRange(from, to) { addRange(from, to, this.changes); }\n    comparePoint(from, to) { addRange(from, to, this.changes); }\n};\nfunction findChangedDeco(a, b, diff) {\n    let comp = new DecorationComparator$1;\n    RangeSet.compare(a, b, diff, comp);\n    return comp.changes;\n}\nfunction inUneditable(node, inside) {\n    for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {\n        if (cur.nodeType == 1 && cur.contentEditable == 'false') {\n            return true;\n        }\n    }\n    return false;\n}\nfunction touchesComposition(changes, composition) {\n    let touched = false;\n    if (composition)\n        changes.iterChangedRanges((from, to) => {\n            if (from < composition.to && to > composition.from)\n                touched = true;\n        });\n    return touched;\n}\n\nfunction groupAt(state, pos, bias = 1) {\n    let categorize = state.charCategorizer(pos);\n    let line = state.doc.lineAt(pos), linePos = pos - line.from;\n    if (line.length == 0)\n        return EditorSelection.cursor(pos);\n    if (linePos == 0)\n        bias = 1;\n    else if (linePos == line.length)\n        bias = -1;\n    let from = linePos, to = linePos;\n    if (bias < 0)\n        from = findClusterBreak(line.text, linePos, false);\n    else\n        to = findClusterBreak(line.text, linePos);\n    let cat = categorize(line.text.slice(from, to));\n    while (from > 0) {\n        let prev = findClusterBreak(line.text, from, false);\n        if (categorize(line.text.slice(prev, from)) != cat)\n            break;\n        from = prev;\n    }\n    while (to < line.length) {\n        let next = findClusterBreak(line.text, to);\n        if (categorize(line.text.slice(to, next)) != cat)\n            break;\n        to = next;\n    }\n    return EditorSelection.range(from + line.from, to + line.from);\n}\n// Search the DOM for the {node, offset} position closest to the given\n// coordinates. Very inefficient and crude, but can usually be avoided\n// by calling caret(Position|Range)FromPoint instead.\nfunction getdx(x, rect) {\n    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);\n}\nfunction getdy(y, rect) {\n    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);\n}\nfunction yOverlap(a, b) {\n    return a.top < b.bottom - 1 && a.bottom > b.top + 1;\n}\nfunction upTop(rect, top) {\n    return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;\n}\nfunction upBot(rect, bottom) {\n    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;\n}\nfunction domPosAtCoords(parent, x, y) {\n    let closest, closestRect, closestX, closestY, closestOverlap = false;\n    let above, below, aboveRect, belowRect;\n    for (let child = parent.firstChild; child; child = child.nextSibling) {\n        let rects = clientRectsFor(child);\n        for (let i = 0; i < rects.length; i++) {\n            let rect = rects[i];\n            if (closestRect && yOverlap(closestRect, rect))\n                rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);\n            let dx = getdx(x, rect), dy = getdy(y, rect);\n            if (dx == 0 && dy == 0)\n                return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);\n            if (!closest || closestY > dy || closestY == dy && closestX > dx) {\n                closest = child;\n                closestRect = rect;\n                closestX = dx;\n                closestY = dy;\n                let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;\n                closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);\n            }\n            if (dx == 0) {\n                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {\n                    above = child;\n                    aboveRect = rect;\n                }\n                else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {\n                    below = child;\n                    belowRect = rect;\n                }\n            }\n            else if (aboveRect && yOverlap(aboveRect, rect)) {\n                aboveRect = upBot(aboveRect, rect.bottom);\n            }\n            else if (belowRect && yOverlap(belowRect, rect)) {\n                belowRect = upTop(belowRect, rect.top);\n            }\n        }\n    }\n    if (aboveRect && aboveRect.bottom >= y) {\n        closest = above;\n        closestRect = aboveRect;\n    }\n    else if (belowRect && belowRect.top <= y) {\n        closest = below;\n        closestRect = belowRect;\n    }\n    if (!closest)\n        return { node: parent, offset: 0 };\n    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));\n    if (closest.nodeType == 3)\n        return domPosInText(closest, clipX, y);\n    if (closestOverlap && closest.contentEditable != \"false\")\n        return domPosAtCoords(closest, clipX, y);\n    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +\n        (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);\n    return { node: parent, offset };\n}\nfunction domPosInText(node, x, y) {\n    let len = node.nodeValue.length;\n    let closestOffset = -1, closestDY = 1e9, generalSide = 0;\n    for (let i = 0; i < len; i++) {\n        let rects = textRange(node, i, i + 1).getClientRects();\n        for (let j = 0; j < rects.length; j++) {\n            let rect = rects[j];\n            if (rect.top == rect.bottom)\n                continue;\n            if (!generalSide)\n                generalSide = x - rect.left;\n            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;\n            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {\n                let right = x >= (rect.left + rect.right) / 2, after = right;\n                if (browser.chrome || browser.gecko) {\n                    // Check for RTL on browsers that support getting client\n                    // rects for empty ranges.\n                    let rectBefore = textRange(node, i).getBoundingClientRect();\n                    if (rectBefore.left == rect.right)\n                        after = !right;\n                }\n                if (dy <= 0)\n                    return { node, offset: i + (after ? 1 : 0) };\n                closestOffset = i + (after ? 1 : 0);\n                closestDY = dy;\n            }\n        }\n    }\n    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };\n}\nfunction posAtCoords(view, coords, precise, bias = -1) {\n    var _a, _b;\n    let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;\n    let block, { docHeight } = view.viewState;\n    let { x, y } = coords, yOffset = y - docTop;\n    if (yOffset < 0)\n        return 0;\n    if (yOffset > docHeight)\n        return view.state.doc.length;\n    // Scan for a text block near the queried y position\n    for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {\n        block = view.elementAtHeight(yOffset);\n        if (block.type == BlockType.Text)\n            break;\n        for (;;) {\n            // Move the y position out of this block\n            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;\n            if (yOffset >= 0 && yOffset <= docHeight)\n                break;\n            // If the document consists entirely of replaced widgets, we\n            // won't find a text block, so return 0\n            if (bounced)\n                return precise ? null : 0;\n            bounced = true;\n            bias = -bias;\n        }\n    }\n    y = docTop + yOffset;\n    let lineStart = block.from;\n    // If this is outside of the rendered viewport, we can't determine a position\n    if (lineStart < view.viewport.from)\n        return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);\n    if (lineStart > view.viewport.to)\n        return view.viewport.to == view.state.doc.length ? view.state.doc.length :\n            precise ? null : posAtCoordsImprecise(view, content, block, x, y);\n    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not\n    let doc = view.dom.ownerDocument;\n    let root = view.root.elementFromPoint ? view.root : doc;\n    let element = root.elementFromPoint(x, y);\n    if (element && !view.contentDOM.contains(element))\n        element = null;\n    // If the element is unexpected, clip x at the sides of the content area and try again\n    if (!element) {\n        x = Math.max(content.left + 1, Math.min(content.right - 1, x));\n        element = root.elementFromPoint(x, y);\n        if (element && !view.contentDOM.contains(element))\n            element = null;\n    }\n    // There's visible editor content under the point, so we can try\n    // using caret(Position|Range)FromPoint as a shortcut\n    let node, offset = -1;\n    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {\n        if (doc.caretPositionFromPoint) {\n            let pos = doc.caretPositionFromPoint(x, y);\n            if (pos)\n                ({ offsetNode: node, offset } = pos);\n        }\n        else if (doc.caretRangeFromPoint) {\n            let range = doc.caretRangeFromPoint(x, y);\n            if (range) {\n                ({ startContainer: node, startOffset: offset } = range);\n                if (!view.contentDOM.contains(node) ||\n                    browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||\n                    browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))\n                    node = undefined;\n            }\n        }\n    }\n    // No luck, do our own (potentially expensive) search\n    if (!node || !view.docView.dom.contains(node)) {\n        let line = LineView.find(view.docView, lineStart);\n        if (!line)\n            return yOffset > block.top + block.height / 2 ? block.to : block.from;\n        ({ node, offset } = domPosAtCoords(line.dom, x, y));\n    }\n    let nearest = view.docView.nearest(node);\n    if (!nearest)\n        return null;\n    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {\n        let rect = nearest.dom.getBoundingClientRect();\n        return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2\n            ? nearest.posAtStart : nearest.posAtEnd;\n    }\n    else {\n        return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;\n    }\n}\nfunction posAtCoordsImprecise(view, contentRect, block, x, y) {\n    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);\n    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {\n        let textHeight = view.viewState.heightOracle.textHeight;\n        let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);\n        into += line * view.viewState.heightOracle.lineLength;\n    }\n    let content = view.state.sliceDoc(block.from, block.to);\n    return block.from + findColumn(content, into, view.state.tabSize);\n}\n// In case of a high line height, Safari's caretRangeFromPoint treats\n// the space between lines as belonging to the last character of the\n// line before. This is used to detect such a result so that it can be\n// ignored (issue #401).\nfunction isSuspiciousSafariCaretResult(node, offset, x) {\n    let len;\n    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))\n        return false;\n    for (let next = node.nextSibling; next; next = next.nextSibling)\n        if (next.nodeType != 1 || next.nodeName != \"BR\")\n            return false;\n    return textRange(node, len - 1, len).getBoundingClientRect().left > x;\n}\n// Chrome will move positions between lines to the start of the next line\nfunction isSuspiciousChromeCaretResult(node, offset, x) {\n    if (offset != 0)\n        return false;\n    for (let cur = node;;) {\n        let parent = cur.parentNode;\n        if (!parent || parent.nodeType != 1 || parent.firstChild != cur)\n            return false;\n        if (parent.classList.contains(\"cm-line\"))\n            break;\n        cur = parent;\n    }\n    let rect = node.nodeType == 1 ? node.getBoundingClientRect()\n        : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();\n    return x - rect.left > 5;\n}\nfunction blockAt(view, pos) {\n    let line = view.lineBlockAt(pos);\n    if (Array.isArray(line.type))\n        for (let l of line.type) {\n            if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))\n                return l;\n        }\n    return line;\n}\nfunction moveToLineBoundary(view, start, forward, includeWrap) {\n    let line = blockAt(view, start.head);\n    let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null\n        : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);\n    if (coords) {\n        let editorRect = view.dom.getBoundingClientRect();\n        let direction = view.textDirectionAt(line.from);\n        let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,\n            y: (coords.top + coords.bottom) / 2 });\n        if (pos != null)\n            return EditorSelection.cursor(pos, forward ? -1 : 1);\n    }\n    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);\n}\nfunction moveByChar(view, start, forward, by) {\n    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);\n    let direction = view.textDirectionAt(line.from);\n    for (let cur = start, check = null;;) {\n        let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;\n        if (!next) {\n            if (line.number == (forward ? view.state.doc.lines : 1))\n                return cur;\n            char = \"\\n\";\n            line = view.state.doc.line(line.number + (forward ? 1 : -1));\n            spans = view.bidiSpans(line);\n            next = view.visualLineSide(line, !forward);\n        }\n        if (!check) {\n            if (!by)\n                return next;\n            check = by(char);\n        }\n        else if (!check(char)) {\n            return cur;\n        }\n        cur = next;\n    }\n}\nfunction byGroup(view, pos, start) {\n    let categorize = view.state.charCategorizer(pos);\n    let cat = categorize(start);\n    return (next) => {\n        let nextCat = categorize(next);\n        if (cat == CharCategory.Space)\n            cat = nextCat;\n        return cat == nextCat;\n    };\n}\nfunction moveVertically(view, start, forward, distance) {\n    let startPos = start.head, dir = forward ? 1 : -1;\n    if (startPos == (forward ? view.state.doc.length : 0))\n        return EditorSelection.cursor(startPos, start.assoc);\n    let goal = start.goalColumn, startY;\n    let rect = view.contentDOM.getBoundingClientRect();\n    let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;\n    if (startCoords) {\n        if (goal == null)\n            goal = startCoords.left - rect.left;\n        startY = dir < 0 ? startCoords.top : startCoords.bottom;\n    }\n    else {\n        let line = view.viewState.lineBlockAt(startPos);\n        if (goal == null)\n            goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));\n        startY = (dir < 0 ? line.top : line.bottom) + docTop;\n    }\n    let resolvedGoal = rect.left + goal;\n    let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);\n    for (let extra = 0;; extra += 10) {\n        let curY = startY + (dist + extra) * dir;\n        let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);\n        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {\n            let charRect = view.docView.coordsForChar(pos);\n            let assoc = !charRect || curY < charRect.top ? -1 : 1;\n            return EditorSelection.cursor(pos, assoc, undefined, goal);\n        }\n    }\n}\nfunction skipAtomicRanges(atoms, pos, bias) {\n    for (;;) {\n        let moved = 0;\n        for (let set of atoms) {\n            set.between(pos - 1, pos + 1, (from, to, value) => {\n                if (pos > from && pos < to) {\n                    let side = moved || bias || (pos - from < to - pos ? -1 : 1);\n                    pos = side < 0 ? from : to;\n                    moved = side;\n                }\n            });\n        }\n        if (!moved)\n            return pos;\n    }\n}\nfunction skipAtoms(view, oldPos, pos) {\n    let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);\n    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);\n}\n\n// This will also be where dragging info and such goes\nclass InputState {\n    setSelectionOrigin(origin) {\n        this.lastSelectionOrigin = origin;\n        this.lastSelectionTime = Date.now();\n    }\n    constructor(view) {\n        this.view = view;\n        this.lastKeyCode = 0;\n        this.lastKeyTime = 0;\n        this.lastTouchTime = 0;\n        this.lastFocusTime = 0;\n        this.lastScrollTop = 0;\n        this.lastScrollLeft = 0;\n        // On iOS, some keys need to have their default behavior happen\n        // (after which we retroactively handle them and reset the DOM) to\n        // avoid messing up the virtual keyboard state.\n        this.pendingIOSKey = undefined;\n        this.lastSelectionOrigin = null;\n        this.lastSelectionTime = 0;\n        this.lastEscPress = 0;\n        this.lastContextMenu = 0;\n        this.scrollHandlers = [];\n        this.handlers = Object.create(null);\n        // -1 means not in a composition. Otherwise, this counts the number\n        // of changes made during the composition. The count is used to\n        // avoid treating the start state of the composition, before any\n        // changes have been made, as part of the composition.\n        this.composing = -1;\n        // Tracks whether the next change should be marked as starting the\n        // composition (null means no composition, true means next is the\n        // first, false means first has already been marked for this\n        // composition)\n        this.compositionFirstChange = null;\n        // End time of the previous composition\n        this.compositionEndedAt = 0;\n        // Used in a kludge to detect when an Enter keypress should be\n        // considered part of the composition on Safari, which fires events\n        // in the wrong order\n        this.compositionPendingKey = false;\n        // Used to categorize changes as part of a composition, even when\n        // the mutation events fire shortly after the compositionend event\n        this.compositionPendingChange = false;\n        this.mouseSelection = null;\n        // When a drag from the editor is active, this points at the range\n        // being dragged.\n        this.draggedContent = null;\n        this.handleEvent = this.handleEvent.bind(this);\n        this.notifiedFocused = view.hasFocus;\n        // On Safari adding an input event handler somehow prevents an\n        // issue where the composition vanishes when you press enter.\n        if (browser.safari)\n            view.contentDOM.addEventListener(\"input\", () => null);\n        if (browser.gecko)\n            firefoxCopyCutHack(view.contentDOM.ownerDocument);\n    }\n    handleEvent(event) {\n        if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))\n            return;\n        if (event.type == \"keydown\" && this.keydown(event))\n            return;\n        this.runHandlers(event.type, event);\n    }\n    runHandlers(type, event) {\n        let handlers = this.handlers[type];\n        if (handlers) {\n            for (let observer of handlers.observers)\n                observer(this.view, event);\n            for (let handler of handlers.handlers) {\n                if (event.defaultPrevented)\n                    break;\n                if (handler(this.view, event)) {\n                    event.preventDefault();\n                    break;\n                }\n            }\n        }\n    }\n    ensureHandlers(plugins) {\n        let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;\n        for (let type in handlers)\n            if (type != \"scroll\") {\n                let passive = !handlers[type].handlers.length;\n                let exists = prev[type];\n                if (exists && passive != !exists.handlers.length) {\n                    dom.removeEventListener(type, this.handleEvent);\n                    exists = null;\n                }\n                if (!exists)\n                    dom.addEventListener(type, this.handleEvent, { passive });\n            }\n        for (let type in prev)\n            if (type != \"scroll\" && !handlers[type])\n                dom.removeEventListener(type, this.handleEvent);\n        this.handlers = handlers;\n    }\n    keydown(event) {\n        // Must always run, even if a custom handler handled the event\n        this.lastKeyCode = event.keyCode;\n        this.lastKeyTime = Date.now();\n        if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)\n            return true;\n        if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)\n            this.view.inputState.lastEscPress = 0;\n        // Chrome for Android usually doesn't fire proper key events, but\n        // occasionally does, usually surrounded by a bunch of complicated\n        // composition changes. When an enter or backspace key event is\n        // seen, hold off on handling DOM events for a bit, and then\n        // dispatch it.\n        if (browser.android && browser.chrome && !event.synthetic &&\n            (event.keyCode == 13 || event.keyCode == 8)) {\n            this.view.observer.delayAndroidKey(event.key, event.keyCode);\n            return true;\n        }\n        // Preventing the default behavior of Enter on iOS makes the\n        // virtual keyboard get stuck in the wrong (lowercase)\n        // state. So we let it go through, and then, in\n        // applyDOMChange, notify key handlers of it and reset to\n        // the state they produce.\n        let pending;\n        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&\n            ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||\n                EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {\n            this.pendingIOSKey = pending || event;\n            setTimeout(() => this.flushIOSKey(), 250);\n            return true;\n        }\n        if (event.keyCode != 229)\n            this.view.observer.forceFlush();\n        return false;\n    }\n    flushIOSKey(change) {\n        let key = this.pendingIOSKey;\n        if (!key)\n            return false;\n        // This looks like an autocorrection before Enter\n        if (key.key == \"Enter\" && change && change.from < change.to && /^\\S+$/.test(change.insert.toString()))\n            return false;\n        this.pendingIOSKey = undefined;\n        return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);\n    }\n    ignoreDuringComposition(event) {\n        if (!/^key/.test(event.type))\n            return false;\n        if (this.composing > 0)\n            return true;\n        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n        // On some input method editors (IMEs), the Enter key is used to\n        // confirm character selection. On Safari, when Enter is pressed,\n        // compositionend and keydown events are sometimes emitted in the\n        // wrong order. The key event should still be ignored, even when\n        // it happens after the compositionend event.\n        if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {\n            this.compositionPendingKey = false;\n            return true;\n        }\n        return false;\n    }\n    startMouseSelection(mouseSelection) {\n        if (this.mouseSelection)\n            this.mouseSelection.destroy();\n        this.mouseSelection = mouseSelection;\n    }\n    update(update) {\n        if (this.mouseSelection)\n            this.mouseSelection.update(update);\n        if (this.draggedContent && update.docChanged)\n            this.draggedContent = this.draggedContent.map(update.changes);\n        if (update.transactions.length)\n            this.lastKeyCode = this.lastSelectionTime = 0;\n    }\n    destroy() {\n        if (this.mouseSelection)\n            this.mouseSelection.destroy();\n    }\n}\nfunction bindHandler(plugin, handler) {\n    return (view, event) => {\n        try {\n            return handler.call(plugin, event, view);\n        }\n        catch (e) {\n            logException(view.state, e);\n        }\n    };\n}\nfunction computeHandlers(plugins) {\n    let result = Object.create(null);\n    function record(type) {\n        return result[type] || (result[type] = { observers: [], handlers: [] });\n    }\n    for (let plugin of plugins) {\n        let spec = plugin.spec;\n        if (spec && spec.domEventHandlers)\n            for (let type in spec.domEventHandlers) {\n                let f = spec.domEventHandlers[type];\n                if (f)\n                    record(type).handlers.push(bindHandler(plugin.value, f));\n            }\n        if (spec && spec.domEventObservers)\n            for (let type in spec.domEventObservers) {\n                let f = spec.domEventObservers[type];\n                if (f)\n                    record(type).observers.push(bindHandler(plugin.value, f));\n            }\n    }\n    for (let type in handlers)\n        record(type).handlers.push(handlers[type]);\n    for (let type in observers)\n        record(type).observers.push(observers[type]);\n    return result;\n}\nconst PendingKeys = [\n    { key: \"Backspace\", keyCode: 8, inputType: \"deleteContentBackward\" },\n    { key: \"Enter\", keyCode: 13, inputType: \"insertParagraph\" },\n    { key: \"Enter\", keyCode: 13, inputType: \"insertLineBreak\" },\n    { key: \"Delete\", keyCode: 46, inputType: \"deleteContentForward\" }\n];\nconst EmacsyPendingKeys = \"dthko\";\n// Key codes for modifier keys\nconst modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];\nconst dragScrollMargin = 6;\nfunction dragScrollSpeed(dist) {\n    return Math.max(0, dist) * 0.7 + 8;\n}\nfunction dist(a, b) {\n    return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));\n}\nclass MouseSelection {\n    constructor(view, startEvent, style, mustSelect) {\n        this.view = view;\n        this.startEvent = startEvent;\n        this.style = style;\n        this.mustSelect = mustSelect;\n        this.scrollSpeed = { x: 0, y: 0 };\n        this.scrolling = -1;\n        this.lastEvent = startEvent;\n        this.scrollParent = scrollableParent(view.contentDOM);\n        this.atoms = view.state.facet(atomicRanges).map(f => f(view));\n        let doc = view.contentDOM.ownerDocument;\n        doc.addEventListener(\"mousemove\", this.move = this.move.bind(this));\n        doc.addEventListener(\"mouseup\", this.up = this.up.bind(this));\n        this.extend = startEvent.shiftKey;\n        this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);\n        this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;\n    }\n    start(event) {\n        // When clicking outside of the selection, immediately apply the\n        // effect of starting the selection\n        if (this.dragging === false)\n            this.select(event);\n    }\n    move(event) {\n        var _a;\n        if (event.buttons == 0)\n            return this.destroy();\n        if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)\n            return;\n        this.select(this.lastEvent = event);\n        let sx = 0, sy = 0;\n        let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())\n            || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };\n        let margins = getScrollMargins(this.view);\n        if (event.clientX - margins.left <= rect.left + dragScrollMargin)\n            sx = -dragScrollSpeed(rect.left - event.clientX);\n        else if (event.clientX + margins.right >= rect.right - dragScrollMargin)\n            sx = dragScrollSpeed(event.clientX - rect.right);\n        if (event.clientY - margins.top <= rect.top + dragScrollMargin)\n            sy = -dragScrollSpeed(rect.top - event.clientY);\n        else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)\n            sy = dragScrollSpeed(event.clientY - rect.bottom);\n        this.setScrollSpeed(sx, sy);\n    }\n    up(event) {\n        if (this.dragging == null)\n            this.select(this.lastEvent);\n        if (!this.dragging)\n            event.preventDefault();\n        this.destroy();\n    }\n    destroy() {\n        this.setScrollSpeed(0, 0);\n        let doc = this.view.contentDOM.ownerDocument;\n        doc.removeEventListener(\"mousemove\", this.move);\n        doc.removeEventListener(\"mouseup\", this.up);\n        this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;\n    }\n    setScrollSpeed(sx, sy) {\n        this.scrollSpeed = { x: sx, y: sy };\n        if (sx || sy) {\n            if (this.scrolling < 0)\n                this.scrolling = setInterval(() => this.scroll(), 50);\n        }\n        else if (this.scrolling > -1) {\n            clearInterval(this.scrolling);\n            this.scrolling = -1;\n        }\n    }\n    scroll() {\n        if (this.scrollParent) {\n            this.scrollParent.scrollLeft += this.scrollSpeed.x;\n            this.scrollParent.scrollTop += this.scrollSpeed.y;\n        }\n        else {\n            this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);\n        }\n        if (this.dragging === false)\n            this.select(this.lastEvent);\n    }\n    skipAtoms(sel) {\n        let ranges = null;\n        for (let i = 0; i < sel.ranges.length; i++) {\n            let range = sel.ranges[i], updated = null;\n            if (range.empty) {\n                let pos = skipAtomicRanges(this.atoms, range.from, 0);\n                if (pos != range.from)\n                    updated = EditorSelection.cursor(pos, -1);\n            }\n            else {\n                let from = skipAtomicRanges(this.atoms, range.from, -1);\n                let to = skipAtomicRanges(this.atoms, range.to, 1);\n                if (from != range.from || to != range.to)\n                    updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);\n            }\n            if (updated) {\n                if (!ranges)\n                    ranges = sel.ranges.slice();\n                ranges[i] = updated;\n            }\n        }\n        return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;\n    }\n    select(event) {\n        let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));\n        if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))\n            this.view.dispatch({\n                selection,\n                userEvent: \"select.pointer\"\n            });\n        this.mustSelect = false;\n    }\n    update(update) {\n        if (this.style.update(update))\n            setTimeout(() => this.select(this.lastEvent), 20);\n    }\n}\nfunction addsSelectionRange(view, event) {\n    let facet = view.state.facet(clickAddsSelectionRange);\n    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;\n}\nfunction dragMovesSelection(view, event) {\n    let facet = view.state.facet(dragMovesSelection$1);\n    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;\n}\nfunction isInPrimarySelection(view, event) {\n    let { main } = view.state.selection;\n    if (main.empty)\n        return false;\n    // On boundary clicks, check whether the coordinates are inside the\n    // selection's client rectangles\n    let sel = getSelection(view.root);\n    if (!sel || sel.rangeCount == 0)\n        return true;\n    let rects = sel.getRangeAt(0).getClientRects();\n    for (let i = 0; i < rects.length; i++) {\n        let rect = rects[i];\n        if (rect.left <= event.clientX && rect.right >= event.clientX &&\n            rect.top <= event.clientY && rect.bottom >= event.clientY)\n            return true;\n    }\n    return false;\n}\nfunction eventBelongsToEditor(view, event) {\n    if (!event.bubbles)\n        return true;\n    if (event.defaultPrevented)\n        return false;\n    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)\n        if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))\n            return false;\n    return true;\n}\nconst handlers = /*@__PURE__*/Object.create(null);\nconst observers = /*@__PURE__*/Object.create(null);\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API—all the objects and methods are\n// there, they just don't work, and they are hard to test.\nconst brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||\n    (browser.ios && browser.webkit_version < 604);\nfunction capturePaste(view) {\n    let parent = view.dom.parentNode;\n    if (!parent)\n        return;\n    let target = parent.appendChild(document.createElement(\"textarea\"));\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n    target.focus();\n    setTimeout(() => {\n        view.focus();\n        target.remove();\n        doPaste(view, target.value);\n    }, 50);\n}\nfunction doPaste(view, input) {\n    let { state } = view, changes, i = 1, text = state.toText(input);\n    let byLine = text.lines == state.selection.ranges.length;\n    let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();\n    if (linewise) {\n        let lastLine = -1;\n        changes = state.changeByRange(range => {\n            let line = state.doc.lineAt(range.from);\n            if (line.from == lastLine)\n                return { range };\n            lastLine = line.from;\n            let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);\n            return { changes: { from: line.from, insert },\n                range: EditorSelection.cursor(range.from + insert.length) };\n        });\n    }\n    else if (byLine) {\n        changes = state.changeByRange(range => {\n            let line = text.line(i++);\n            return { changes: { from: range.from, to: range.to, insert: line.text },\n                range: EditorSelection.cursor(range.from + line.length) };\n        });\n    }\n    else {\n        changes = state.replaceSelection(text);\n    }\n    view.dispatch(changes, {\n        userEvent: \"input.paste\",\n        scrollIntoView: true\n    });\n}\nobservers.scroll = view => {\n    view.inputState.lastScrollTop = view.scrollDOM.scrollTop;\n    view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;\n};\nhandlers.keydown = (view, event) => {\n    view.inputState.setSelectionOrigin(\"select\");\n    if (event.keyCode == 27)\n        view.inputState.lastEscPress = Date.now();\n    return false;\n};\nobservers.touchstart = (view, e) => {\n    view.inputState.lastTouchTime = Date.now();\n    view.inputState.setSelectionOrigin(\"select.pointer\");\n};\nobservers.touchmove = view => {\n    view.inputState.setSelectionOrigin(\"select.pointer\");\n};\nhandlers.mousedown = (view, event) => {\n    view.observer.flush();\n    if (view.inputState.lastTouchTime > Date.now() - 2000)\n        return false; // Ignore touch interaction\n    let style = null;\n    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {\n        style = makeStyle(view, event);\n        if (style)\n            break;\n    }\n    if (!style && event.button == 0)\n        style = basicMouseSelection(view, event);\n    if (style) {\n        let mustFocus = !view.hasFocus;\n        view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));\n        if (mustFocus)\n            view.observer.ignore(() => focusPreventScroll(view.contentDOM));\n        let mouseSel = view.inputState.mouseSelection;\n        if (mouseSel) {\n            mouseSel.start(event);\n            return mouseSel.dragging === false;\n        }\n    }\n    return false;\n};\nfunction rangeForClick(view, pos, bias, type) {\n    if (type == 1) { // Single click\n        return EditorSelection.cursor(pos, bias);\n    }\n    else if (type == 2) { // Double click\n        return groupAt(view.state, pos, bias);\n    }\n    else { // Triple click\n        let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);\n        let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;\n        if (to < view.state.doc.length && to == line.to)\n            to++;\n        return EditorSelection.range(from, to);\n    }\n}\nlet insideY = (y, rect) => y >= rect.top && y <= rect.bottom;\nlet inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;\n// Try to determine, for the given coordinates, associated with the\n// given position, whether they are related to the element before or\n// the element after the position.\nfunction findPositionSide(view, pos, x, y) {\n    let line = LineView.find(view.docView, pos);\n    if (!line)\n        return 1;\n    let off = pos - line.posAtStart;\n    // Line boundaries point into the line\n    if (off == 0)\n        return 1;\n    if (off == line.length)\n        return -1;\n    // Positions on top of an element point at that element\n    let before = line.coordsAt(off, -1);\n    if (before && inside(x, y, before))\n        return -1;\n    let after = line.coordsAt(off, 1);\n    if (after && inside(x, y, after))\n        return 1;\n    // This is probably a line wrap point. Pick before if the point is\n    // beside it.\n    return before && insideY(y, before) ? -1 : 1;\n}\nfunction queryPos(view, event) {\n    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\n    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };\n}\nconst BadMouseDetail = browser.ie && browser.ie_version <= 11;\nlet lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;\nfunction getClickType(event) {\n    if (!BadMouseDetail)\n        return event.detail;\n    let last = lastMouseDown, lastTime = lastMouseDownTime;\n    lastMouseDown = event;\n    lastMouseDownTime = Date.now();\n    return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&\n        Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;\n}\nfunction basicMouseSelection(view, event) {\n    let start = queryPos(view, event), type = getClickType(event);\n    let startSel = view.state.selection;\n    return {\n        update(update) {\n            if (update.docChanged) {\n                start.pos = update.changes.mapPos(start.pos);\n                startSel = startSel.map(update.changes);\n            }\n        },\n        get(event, extend, multiple) {\n            let cur = queryPos(view, event), removed;\n            let range = rangeForClick(view, cur.pos, cur.bias, type);\n            if (start.pos != cur.pos && !extend) {\n                let startRange = rangeForClick(view, start.pos, start.bias, type);\n                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);\n                range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);\n            }\n            if (extend)\n                return startSel.replaceRange(startSel.main.extend(range.from, range.to));\n            else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))\n                return removed;\n            else if (multiple)\n                return startSel.addRange(range);\n            else\n                return EditorSelection.create([range]);\n        }\n    };\n}\nfunction removeRangeAround(sel, pos) {\n    for (let i = 0; i < sel.ranges.length; i++) {\n        let { from, to } = sel.ranges[i];\n        if (from <= pos && to >= pos)\n            return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));\n    }\n    return null;\n}\nhandlers.dragstart = (view, event) => {\n    let { selection: { main: range } } = view.state;\n    if (event.target.draggable) {\n        let cView = view.docView.nearest(event.target);\n        if (cView && cView.isWidget) {\n            let from = cView.posAtStart, to = from + cView.length;\n            if (from >= range.to || to <= range.from)\n                range = EditorSelection.range(from, to);\n        }\n    }\n    let { inputState } = view;\n    if (inputState.mouseSelection)\n        inputState.mouseSelection.dragging = true;\n    inputState.draggedContent = range;\n    if (event.dataTransfer) {\n        event.dataTransfer.setData(\"Text\", view.state.sliceDoc(range.from, range.to));\n        event.dataTransfer.effectAllowed = \"copyMove\";\n    }\n    return false;\n};\nhandlers.dragend = view => {\n    view.inputState.draggedContent = null;\n    return false;\n};\nfunction dropText(view, event, text, direct) {\n    if (!text)\n        return;\n    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\n    let { draggedContent } = view.inputState;\n    let del = direct && draggedContent && dragMovesSelection(view, event)\n        ? { from: draggedContent.from, to: draggedContent.to } : null;\n    let ins = { from: dropPos, insert: text };\n    let changes = view.state.changes(del ? [del, ins] : ins);\n    view.focus();\n    view.dispatch({\n        changes,\n        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },\n        userEvent: del ? \"move.drop\" : \"input.drop\"\n    });\n    view.inputState.draggedContent = null;\n}\nhandlers.drop = (view, event) => {\n    if (!event.dataTransfer)\n        return false;\n    if (view.state.readOnly)\n        return true;\n    let files = event.dataTransfer.files;\n    if (files && files.length) { // For a file drop, read the file's text.\n        let text = Array(files.length), read = 0;\n        let finishFile = () => {\n            if (++read == files.length)\n                dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);\n        };\n        for (let i = 0; i < files.length; i++) {\n            let reader = new FileReader;\n            reader.onerror = finishFile;\n            reader.onload = () => {\n                if (!/[\\x00-\\x08\\x0e-\\x1f]{2}/.test(reader.result))\n                    text[i] = reader.result;\n                finishFile();\n            };\n            reader.readAsText(files[i]);\n        }\n        return true;\n    }\n    else {\n        let text = event.dataTransfer.getData(\"Text\");\n        if (text) {\n            dropText(view, event, text, true);\n            return true;\n        }\n    }\n    return false;\n};\nhandlers.paste = (view, event) => {\n    if (view.state.readOnly)\n        return true;\n    view.observer.flush();\n    let data = brokenClipboardAPI ? null : event.clipboardData;\n    if (data) {\n        doPaste(view, data.getData(\"text/plain\") || data.getData(\"text/uri-list\"));\n        return true;\n    }\n    else {\n        capturePaste(view);\n        return false;\n    }\n};\nfunction captureCopy(view, text) {\n    // The extra wrapper is somehow necessary on IE/Edge to prevent the\n    // content from being mangled when it is put onto the clipboard\n    let parent = view.dom.parentNode;\n    if (!parent)\n        return;\n    let target = parent.appendChild(document.createElement(\"textarea\"));\n    target.style.cssText = \"position: fixed; left: -10000px; top: 10px\";\n    target.value = text;\n    target.focus();\n    target.selectionEnd = text.length;\n    target.selectionStart = 0;\n    setTimeout(() => {\n        target.remove();\n        view.focus();\n    }, 50);\n}\nfunction copiedRange(state) {\n    let content = [], ranges = [], linewise = false;\n    for (let range of state.selection.ranges)\n        if (!range.empty) {\n            content.push(state.sliceDoc(range.from, range.to));\n            ranges.push(range);\n        }\n    if (!content.length) {\n        // Nothing selected, do a line-wise copy\n        let upto = -1;\n        for (let { from } of state.selection.ranges) {\n            let line = state.doc.lineAt(from);\n            if (line.number > upto) {\n                content.push(line.text);\n                ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });\n            }\n            upto = line.number;\n        }\n        linewise = true;\n    }\n    return { text: content.join(state.lineBreak), ranges, linewise };\n}\nlet lastLinewiseCopy = null;\nhandlers.copy = handlers.cut = (view, event) => {\n    let { text, ranges, linewise } = copiedRange(view.state);\n    if (!text && !linewise)\n        return false;\n    lastLinewiseCopy = linewise ? text : null;\n    if (event.type == \"cut\" && !view.state.readOnly)\n        view.dispatch({\n            changes: ranges,\n            scrollIntoView: true,\n            userEvent: \"delete.cut\"\n        });\n    let data = brokenClipboardAPI ? null : event.clipboardData;\n    if (data) {\n        data.clearData();\n        data.setData(\"text/plain\", text);\n        return true;\n    }\n    else {\n        captureCopy(view, text);\n        return false;\n    }\n};\nconst isFocusChange = /*@__PURE__*/Annotation.define();\nfunction focusChangeTransaction(state, focus) {\n    let effects = [];\n    for (let getEffect of state.facet(focusChangeEffect)) {\n        let effect = getEffect(state, focus);\n        if (effect)\n            effects.push(effect);\n    }\n    return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;\n}\nfunction updateForFocusChange(view) {\n    setTimeout(() => {\n        let focus = view.hasFocus;\n        if (focus != view.inputState.notifiedFocused) {\n            let tr = focusChangeTransaction(view.state, focus);\n            if (tr)\n                view.dispatch(tr);\n            else\n                view.update([]);\n        }\n    }, 10);\n}\nobservers.focus = view => {\n    view.inputState.lastFocusTime = Date.now();\n    // When focusing reset the scroll position, move it back to where it was\n    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {\n        view.scrollDOM.scrollTop = view.inputState.lastScrollTop;\n        view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;\n    }\n    updateForFocusChange(view);\n};\nobservers.blur = view => {\n    view.observer.clearSelectionRange();\n    updateForFocusChange(view);\n};\nobservers.compositionstart = observers.compositionupdate = view => {\n    if (view.inputState.compositionFirstChange == null)\n        view.inputState.compositionFirstChange = true;\n    if (view.inputState.composing < 0) {\n        // FIXME possibly set a timeout to clear it again on Android\n        view.inputState.composing = 0;\n    }\n};\nobservers.compositionend = view => {\n    view.inputState.composing = -1;\n    view.inputState.compositionEndedAt = Date.now();\n    view.inputState.compositionPendingKey = true;\n    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;\n    view.inputState.compositionFirstChange = null;\n    if (browser.chrome && browser.android) {\n        // Delay flushing for a bit on Android because it'll often fire a\n        // bunch of contradictory changes in a row at end of compositon\n        view.observer.flushSoon();\n    }\n    else if (view.inputState.compositionPendingChange) {\n        // If we found pending records, schedule a flush.\n        Promise.resolve().then(() => view.observer.flush());\n    }\n    else {\n        // Otherwise, make sure that, if no changes come in soon, the\n        // composition view is cleared.\n        setTimeout(() => {\n            if (view.inputState.composing < 0 && view.docView.hasComposition)\n                view.update([]);\n        }, 50);\n    }\n};\nobservers.contextmenu = view => {\n    view.inputState.lastContextMenu = Date.now();\n};\nhandlers.beforeinput = (view, event) => {\n    var _a;\n    // Because Chrome Android doesn't fire useful key events, use\n    // beforeinput to detect backspace (and possibly enter and delete,\n    // but those usually don't even seem to fire beforeinput events at\n    // the moment) and fake a key event for it.\n    //\n    // (preventDefault on beforeinput, though supported in the spec,\n    // seems to do nothing at all on Chrome).\n    let pending;\n    if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {\n        view.observer.delayAndroidKey(pending.key, pending.keyCode);\n        if (pending.key == \"Backspace\" || pending.key == \"Delete\") {\n            let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;\n            setTimeout(() => {\n                var _a;\n                // Backspacing near uneditable nodes on Chrome Android sometimes\n                // closes the virtual keyboard. This tries to crudely detect\n                // that and refocus to get it back.\n                if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {\n                    view.contentDOM.blur();\n                    view.focus();\n                }\n            }, 100);\n        }\n    }\n    if (browser.ios && event.inputType == \"deleteContentForward\") {\n        // For some reason, DOM changes (and beforeinput) happen _before_\n        // the key event for ctrl-d on iOS when using an external\n        // keyboard.\n        view.observer.flushSoon();\n    }\n    // Safari will occasionally forget to fire compositionend at the end of a dead-key composition\n    if (browser.safari && event.inputType == \"insertText\" && view.inputState.composing >= 0) {\n        setTimeout(() => observers.compositionend(view, event), 20);\n    }\n    return false;\n};\nconst appliedFirefoxHack = /*@__PURE__*/new Set;\n// In Firefox, when cut/copy handlers are added to the document, that\n// somehow avoids a bug where those events aren't fired when the\n// selection is empty. See https://github.com/codemirror/dev/issues/1082\n// and https://bugzilla.mozilla.org/show_bug.cgi?id=995961\nfunction firefoxCopyCutHack(doc) {\n    if (!appliedFirefoxHack.has(doc)) {\n        appliedFirefoxHack.add(doc);\n        doc.addEventListener(\"copy\", () => { });\n        doc.addEventListener(\"cut\", () => { });\n    }\n}\n\nconst wrappingWhiteSpace = [\"pre-wrap\", \"normal\", \"pre-line\", \"break-spaces\"];\nclass HeightOracle {\n    constructor(lineWrapping) {\n        this.lineWrapping = lineWrapping;\n        this.doc = Text.empty;\n        this.heightSamples = {};\n        this.lineHeight = 14; // The height of an entire line (line-height)\n        this.charWidth = 7;\n        this.textHeight = 14; // The height of the actual font (font-size)\n        this.lineLength = 30;\n        // Used to track, during updateHeight, if any actual heights changed\n        this.heightChanged = false;\n    }\n    heightForGap(from, to) {\n        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;\n        if (this.lineWrapping)\n            lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));\n        return this.lineHeight * lines;\n    }\n    heightForLine(length) {\n        if (!this.lineWrapping)\n            return this.lineHeight;\n        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));\n        return lines * this.lineHeight;\n    }\n    setDoc(doc) { this.doc = doc; return this; }\n    mustRefreshForWrapping(whiteSpace) {\n        return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;\n    }\n    mustRefreshForHeights(lineHeights) {\n        let newHeight = false;\n        for (let i = 0; i < lineHeights.length; i++) {\n            let h = lineHeights[i];\n            if (h < 0) {\n                i++;\n            }\n            else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels\n                newHeight = true;\n                this.heightSamples[Math.floor(h * 10)] = true;\n            }\n        }\n        return newHeight;\n    }\n    refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {\n        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;\n        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;\n        this.lineWrapping = lineWrapping;\n        this.lineHeight = lineHeight;\n        this.charWidth = charWidth;\n        this.textHeight = textHeight;\n        this.lineLength = lineLength;\n        if (changed) {\n            this.heightSamples = {};\n            for (let i = 0; i < knownHeights.length; i++) {\n                let h = knownHeights[i];\n                if (h < 0)\n                    i++;\n                else\n                    this.heightSamples[Math.floor(h * 10)] = true;\n            }\n        }\n        return changed;\n    }\n}\n// This object is used by `updateHeight` to make DOM measurements\n// arrive at the right nides. The `heights` array is a sequence of\n// block heights, starting from position `from`.\nclass MeasuredHeights {\n    constructor(from, heights) {\n        this.from = from;\n        this.heights = heights;\n        this.index = 0;\n    }\n    get more() { return this.index < this.heights.length; }\n}\n/**\nRecord used to represent information about a block-level element\nin the editor view.\n*/\nclass BlockInfo {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The start of the element in the document.\n    */\n    from, \n    /**\n    The length of the element.\n    */\n    length, \n    /**\n    The top position of the element (relative to the top of the\n    document).\n    */\n    top, \n    /**\n    Its height.\n    */\n    height, \n    /**\n    @internal Weird packed field that holds an array of children\n    for composite blocks, a decoration for block widgets, and a\n    number indicating the amount of widget-create line breaks for\n    text blocks.\n    */\n    _content) {\n        this.from = from;\n        this.length = length;\n        this.top = top;\n        this.height = height;\n        this._content = _content;\n    }\n    /**\n    The type of element this is. When querying lines, this may be\n    an array of all the blocks that make up the line.\n    */\n    get type() {\n        return typeof this._content == \"number\" ? BlockType.Text :\n            Array.isArray(this._content) ? this._content : this._content.type;\n    }\n    /**\n    The end of the element as a document position.\n    */\n    get to() { return this.from + this.length; }\n    /**\n    The bottom position of the element.\n    */\n    get bottom() { return this.top + this.height; }\n    /**\n    If this is a widget block, this will return the widget\n    associated with it.\n    */\n    get widget() {\n        return this._content instanceof PointDecoration ? this._content.widget : null;\n    }\n    /**\n    If this is a textblock, this holds the number of line breaks\n    that appear in widgets inside the block.\n    */\n    get widgetLineBreaks() {\n        return typeof this._content == \"number\" ? this._content : 0;\n    }\n    /**\n    @internal\n    */\n    join(other) {\n        let content = (Array.isArray(this._content) ? this._content : [this])\n            .concat(Array.isArray(other._content) ? other._content : [other]);\n        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);\n    }\n}\nvar QueryType = /*@__PURE__*/(function (QueryType) {\n    QueryType[QueryType[\"ByPos\"] = 0] = \"ByPos\";\n    QueryType[QueryType[\"ByHeight\"] = 1] = \"ByHeight\";\n    QueryType[QueryType[\"ByPosNoHeight\"] = 2] = \"ByPosNoHeight\";\nreturn QueryType})(QueryType || (QueryType = {}));\nconst Epsilon = 1e-3;\nclass HeightMap {\n    constructor(length, // The number of characters covered\n    height, // Height of this part of the document\n    flags = 2 /* Flag.Outdated */) {\n        this.length = length;\n        this.height = height;\n        this.flags = flags;\n    }\n    get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }\n    set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }\n    setHeight(oracle, height) {\n        if (this.height != height) {\n            if (Math.abs(this.height - height) > Epsilon)\n                oracle.heightChanged = true;\n            this.height = height;\n        }\n    }\n    // Base case is to replace a leaf node, which simply builds a tree\n    // from the new nodes and returns that (HeightMapBranch and\n    // HeightMapGap override this to actually use from/to)\n    replace(_from, _to, nodes) {\n        return HeightMap.of(nodes);\n    }\n    // Again, these are base cases, and are overridden for branch and gap nodes.\n    decomposeLeft(_to, result) { result.push(this); }\n    decomposeRight(_from, result) { result.push(this); }\n    applyChanges(decorations, oldDoc, oracle, changes) {\n        let me = this, doc = oracle.doc;\n        for (let i = changes.length - 1; i >= 0; i--) {\n            let { fromA, toA, fromB, toB } = changes[i];\n            let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);\n            let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);\n            toB += end.to - toA;\n            toA = end.to;\n            while (i > 0 && start.from <= changes[i - 1].toA) {\n                fromA = changes[i - 1].fromA;\n                fromB = changes[i - 1].fromB;\n                i--;\n                if (fromA < start.from)\n                    start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);\n            }\n            fromB += start.from - fromA;\n            fromA = start.from;\n            let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);\n            me = me.replace(fromA, toA, nodes);\n        }\n        return me.updateHeight(oracle, 0);\n    }\n    static empty() { return new HeightMapText(0, 0); }\n    // nodes uses null values to indicate the position of line breaks.\n    // There are never line breaks at the start or end of the array, or\n    // two line breaks next to each other, and the array isn't allowed\n    // to be empty (same restrictions as return value from the builder).\n    static of(nodes) {\n        if (nodes.length == 1)\n            return nodes[0];\n        let i = 0, j = nodes.length, before = 0, after = 0;\n        for (;;) {\n            if (i == j) {\n                if (before > after * 2) {\n                    let split = nodes[i - 1];\n                    if (split.break)\n                        nodes.splice(--i, 1, split.left, null, split.right);\n                    else\n                        nodes.splice(--i, 1, split.left, split.right);\n                    j += 1 + split.break;\n                    before -= split.size;\n                }\n                else if (after > before * 2) {\n                    let split = nodes[j];\n                    if (split.break)\n                        nodes.splice(j, 1, split.left, null, split.right);\n                    else\n                        nodes.splice(j, 1, split.left, split.right);\n                    j += 2 + split.break;\n                    after -= split.size;\n                }\n                else {\n                    break;\n                }\n            }\n            else if (before < after) {\n                let next = nodes[i++];\n                if (next)\n                    before += next.size;\n            }\n            else {\n                let next = nodes[--j];\n                if (next)\n                    after += next.size;\n            }\n        }\n        let brk = 0;\n        if (nodes[i - 1] == null) {\n            brk = 1;\n            i--;\n        }\n        else if (nodes[i] == null) {\n            brk = 1;\n            j++;\n        }\n        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));\n    }\n}\nHeightMap.prototype.size = 1;\nclass HeightMapBlock extends HeightMap {\n    constructor(length, height, deco) {\n        super(length, height);\n        this.deco = deco;\n    }\n    blockAt(_height, _oracle, top, offset) {\n        return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);\n    }\n    lineAt(_value, _type, oracle, top, offset) {\n        return this.blockAt(0, oracle, top, offset);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        if (from <= offset + this.length && to >= offset)\n            f(this.blockAt(0, oracle, top, offset));\n    }\n    updateHeight(oracle, offset = 0, _force = false, measured) {\n        if (measured && measured.from <= offset && measured.more)\n            this.setHeight(oracle, measured.heights[measured.index++]);\n        this.outdated = false;\n        return this;\n    }\n    toString() { return `block(${this.length})`; }\n}\nclass HeightMapText extends HeightMapBlock {\n    constructor(length, height) {\n        super(length, height, null);\n        this.collapsed = 0; // Amount of collapsed content in the line\n        this.widgetHeight = 0; // Maximum inline widget height\n        this.breaks = 0; // Number of widget-introduced line breaks on the line\n    }\n    blockAt(_height, _oracle, top, offset) {\n        return new BlockInfo(offset, this.length, top, this.height, this.breaks);\n    }\n    replace(_from, _to, nodes) {\n        let node = nodes[0];\n        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&\n            Math.abs(this.length - node.length) < 10) {\n            if (node instanceof HeightMapGap)\n                node = new HeightMapText(node.length, this.height);\n            else\n                node.height = this.height;\n            if (!this.outdated)\n                node.outdated = false;\n            return node;\n        }\n        else {\n            return HeightMap.of(nodes);\n        }\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        if (measured && measured.from <= offset && measured.more)\n            this.setHeight(oracle, measured.heights[measured.index++]);\n        else if (force || this.outdated)\n            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +\n                this.breaks * oracle.lineHeight);\n        this.outdated = false;\n        return this;\n    }\n    toString() {\n        return `line(${this.length}${this.collapsed ? -this.collapsed : \"\"}${this.widgetHeight ? \":\" + this.widgetHeight : \"\"})`;\n    }\n}\nclass HeightMapGap extends HeightMap {\n    constructor(length) { super(length, 0); }\n    heightMetrics(oracle, offset) {\n        let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;\n        let lines = lastLine - firstLine + 1;\n        let perLine, perChar = 0;\n        if (oracle.lineWrapping) {\n            let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);\n            perLine = totalPerLine / lines;\n            if (this.length > lines + 1)\n                perChar = (this.height - totalPerLine) / (this.length - lines - 1);\n        }\n        else {\n            perLine = this.height / lines;\n        }\n        return { firstLine, lastLine, perLine, perChar };\n    }\n    blockAt(height, oracle, top, offset) {\n        let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);\n        if (oracle.lineWrapping) {\n            let guess = offset + (height < oracle.lineHeight ? 0\n                : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));\n            let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;\n            let lineTop = Math.max(top, height - lineHeight / 2);\n            return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);\n        }\n        else {\n            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));\n            let { from, length } = oracle.doc.line(firstLine + line);\n            return new BlockInfo(from, length, top + perLine * line, perLine, 0);\n        }\n    }\n    lineAt(value, type, oracle, top, offset) {\n        if (type == QueryType.ByHeight)\n            return this.blockAt(value, oracle, top, offset);\n        if (type == QueryType.ByPosNoHeight) {\n            let { from, to } = oracle.doc.lineAt(value);\n            return new BlockInfo(from, to - from, 0, 0, 0);\n        }\n        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);\n        let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;\n        let linesAbove = line.number - firstLine;\n        let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);\n        return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        from = Math.max(from, offset);\n        to = Math.min(to, offset + this.length);\n        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);\n        for (let pos = from, lineTop = top; pos <= to;) {\n            let line = oracle.doc.lineAt(pos);\n            if (pos == from) {\n                let linesAbove = line.number - firstLine;\n                lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);\n            }\n            let lineHeight = perLine + perChar * line.length;\n            f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));\n            lineTop += lineHeight;\n            pos = line.to + 1;\n        }\n    }\n    replace(from, to, nodes) {\n        let after = this.length - to;\n        if (after > 0) {\n            let last = nodes[nodes.length - 1];\n            if (last instanceof HeightMapGap)\n                nodes[nodes.length - 1] = new HeightMapGap(last.length + after);\n            else\n                nodes.push(null, new HeightMapGap(after - 1));\n        }\n        if (from > 0) {\n            let first = nodes[0];\n            if (first instanceof HeightMapGap)\n                nodes[0] = new HeightMapGap(from + first.length);\n            else\n                nodes.unshift(new HeightMapGap(from - 1), null);\n        }\n        return HeightMap.of(nodes);\n    }\n    decomposeLeft(to, result) {\n        result.push(new HeightMapGap(to - 1), null);\n    }\n    decomposeRight(from, result) {\n        result.push(null, new HeightMapGap(this.length - from - 1));\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        let end = offset + this.length;\n        if (measured && measured.from <= offset + this.length && measured.more) {\n            // Fill in part of this gap with measured lines. We know there\n            // can't be widgets or collapsed ranges in those lines, because\n            // they would already have been added to the heightmap (gaps\n            // only contain plain text).\n            let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;\n            if (measured.from > offset)\n                nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));\n            while (pos <= end && measured.more) {\n                let len = oracle.doc.lineAt(pos).length;\n                if (nodes.length)\n                    nodes.push(null);\n                let height = measured.heights[measured.index++];\n                if (singleHeight == -1)\n                    singleHeight = height;\n                else if (Math.abs(height - singleHeight) >= Epsilon)\n                    singleHeight = -2;\n                let line = new HeightMapText(len, height);\n                line.outdated = false;\n                nodes.push(line);\n                pos += len + 1;\n            }\n            if (pos <= end)\n                nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));\n            let result = HeightMap.of(nodes);\n            if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||\n                Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)\n                oracle.heightChanged = true;\n            return result;\n        }\n        else if (force || this.outdated) {\n            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));\n            this.outdated = false;\n        }\n        return this;\n    }\n    toString() { return `gap(${this.length})`; }\n}\nclass HeightMapBranch extends HeightMap {\n    constructor(left, brk, right) {\n        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));\n        this.left = left;\n        this.right = right;\n        this.size = left.size + right.size;\n    }\n    get break() { return this.flags & 1 /* Flag.Break */; }\n    blockAt(height, oracle, top, offset) {\n        let mid = top + this.left.height;\n        return height < mid ? this.left.blockAt(height, oracle, top, offset)\n            : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);\n    }\n    lineAt(value, type, oracle, top, offset) {\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\n        let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;\n        let base = left ? this.left.lineAt(value, type, oracle, top, offset)\n            : this.right.lineAt(value, type, oracle, rightTop, rightOffset);\n        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))\n            return base;\n        let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;\n        if (left)\n            return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));\n        else\n            return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);\n    }\n    forEachLine(from, to, oracle, top, offset, f) {\n        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;\n        if (this.break) {\n            if (from < rightOffset)\n                this.left.forEachLine(from, to, oracle, top, offset, f);\n            if (to >= rightOffset)\n                this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);\n        }\n        else {\n            let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);\n            if (from < mid.from)\n                this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);\n            if (mid.to >= from && mid.from <= to)\n                f(mid);\n            if (to > mid.to)\n                this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);\n        }\n    }\n    replace(from, to, nodes) {\n        let rightStart = this.left.length + this.break;\n        if (to < rightStart)\n            return this.balanced(this.left.replace(from, to, nodes), this.right);\n        if (from > this.left.length)\n            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));\n        let result = [];\n        if (from > 0)\n            this.decomposeLeft(from, result);\n        let left = result.length;\n        for (let node of nodes)\n            result.push(node);\n        if (from > 0)\n            mergeGaps(result, left - 1);\n        if (to < this.length) {\n            let right = result.length;\n            this.decomposeRight(to, result);\n            mergeGaps(result, right);\n        }\n        return HeightMap.of(result);\n    }\n    decomposeLeft(to, result) {\n        let left = this.left.length;\n        if (to <= left)\n            return this.left.decomposeLeft(to, result);\n        result.push(this.left);\n        if (this.break) {\n            left++;\n            if (to >= left)\n                result.push(null);\n        }\n        if (to > left)\n            this.right.decomposeLeft(to - left, result);\n    }\n    decomposeRight(from, result) {\n        let left = this.left.length, right = left + this.break;\n        if (from >= right)\n            return this.right.decomposeRight(from - right, result);\n        if (from < left)\n            this.left.decomposeRight(from, result);\n        if (this.break && from < right)\n            result.push(null);\n        result.push(this.right);\n    }\n    balanced(left, right) {\n        if (left.size > 2 * right.size || right.size > 2 * left.size)\n            return HeightMap.of(this.break ? [left, null, right] : [left, right]);\n        this.left = left;\n        this.right = right;\n        this.height = left.height + right.height;\n        this.outdated = left.outdated || right.outdated;\n        this.size = left.size + right.size;\n        this.length = left.length + this.break + right.length;\n        return this;\n    }\n    updateHeight(oracle, offset = 0, force = false, measured) {\n        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;\n        if (measured && measured.from <= offset + left.length && measured.more)\n            rebalance = left = left.updateHeight(oracle, offset, force, measured);\n        else\n            left.updateHeight(oracle, offset, force);\n        if (measured && measured.from <= rightStart + right.length && measured.more)\n            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);\n        else\n            right.updateHeight(oracle, rightStart, force);\n        if (rebalance)\n            return this.balanced(left, right);\n        this.height = this.left.height + this.right.height;\n        this.outdated = false;\n        return this;\n    }\n    toString() { return this.left + (this.break ? \" \" : \"-\") + this.right; }\n}\nfunction mergeGaps(nodes, around) {\n    let before, after;\n    if (nodes[around] == null &&\n        (before = nodes[around - 1]) instanceof HeightMapGap &&\n        (after = nodes[around + 1]) instanceof HeightMapGap)\n        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));\n}\nconst relevantWidgetHeight = 5;\nclass NodeBuilder {\n    constructor(pos, oracle) {\n        this.pos = pos;\n        this.oracle = oracle;\n        this.nodes = [];\n        this.lineStart = -1;\n        this.lineEnd = -1;\n        this.covering = null;\n        this.writtenTo = pos;\n    }\n    get isCovered() {\n        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;\n    }\n    span(_from, to) {\n        if (this.lineStart > -1) {\n            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];\n            if (last instanceof HeightMapText)\n                last.length += end - this.pos;\n            else if (end > this.pos || !this.isCovered)\n                this.nodes.push(new HeightMapText(end - this.pos, -1));\n            this.writtenTo = end;\n            if (to > end) {\n                this.nodes.push(null);\n                this.writtenTo++;\n                this.lineStart = -1;\n            }\n        }\n        this.pos = to;\n    }\n    point(from, to, deco) {\n        if (from < to || deco.heightRelevant) {\n            let height = deco.widget ? deco.widget.estimatedHeight : 0;\n            let breaks = deco.widget ? deco.widget.lineBreaks : 0;\n            if (height < 0)\n                height = this.oracle.lineHeight;\n            let len = to - from;\n            if (deco.block) {\n                this.addBlock(new HeightMapBlock(len, height, deco));\n            }\n            else if (len || breaks || height >= relevantWidgetHeight) {\n                this.addLineDeco(height, breaks, len);\n            }\n        }\n        else if (to > from) {\n            this.span(from, to);\n        }\n        if (this.lineEnd > -1 && this.lineEnd < this.pos)\n            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;\n    }\n    enterLine() {\n        if (this.lineStart > -1)\n            return;\n        let { from, to } = this.oracle.doc.lineAt(this.pos);\n        this.lineStart = from;\n        this.lineEnd = to;\n        if (this.writtenTo < from) {\n            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)\n                this.nodes.push(this.blankContent(this.writtenTo, from - 1));\n            this.nodes.push(null);\n        }\n        if (this.pos > from)\n            this.nodes.push(new HeightMapText(this.pos - from, -1));\n        this.writtenTo = this.pos;\n    }\n    blankContent(from, to) {\n        let gap = new HeightMapGap(to - from);\n        if (this.oracle.doc.lineAt(from).to == to)\n            gap.flags |= 4 /* Flag.SingleLine */;\n        return gap;\n    }\n    ensureLine() {\n        this.enterLine();\n        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;\n        if (last instanceof HeightMapText)\n            return last;\n        let line = new HeightMapText(0, -1);\n        this.nodes.push(line);\n        return line;\n    }\n    addBlock(block) {\n        this.enterLine();\n        let deco = block.deco;\n        if (deco && deco.startSide > 0 && !this.isCovered)\n            this.ensureLine();\n        this.nodes.push(block);\n        this.writtenTo = this.pos = this.pos + block.length;\n        if (deco && deco.endSide > 0)\n            this.covering = block;\n    }\n    addLineDeco(height, breaks, length) {\n        let line = this.ensureLine();\n        line.length += length;\n        line.collapsed += length;\n        line.widgetHeight = Math.max(line.widgetHeight, height);\n        line.breaks += breaks;\n        this.writtenTo = this.pos = this.pos + length;\n    }\n    finish(from) {\n        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];\n        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)\n            this.nodes.push(new HeightMapText(0, -1));\n        else if (this.writtenTo < this.pos || last == null)\n            this.nodes.push(this.blankContent(this.writtenTo, this.pos));\n        let pos = from;\n        for (let node of this.nodes) {\n            if (node instanceof HeightMapText)\n                node.updateHeight(this.oracle, pos);\n            pos += node ? node.length : 1;\n        }\n        return this.nodes;\n    }\n    // Always called with a region that on both sides either stretches\n    // to a line break or the end of the document.\n    // The returned array uses null to indicate line breaks, but never\n    // starts or ends in a line break, or has multiple line breaks next\n    // to each other.\n    static build(oracle, decorations, from, to) {\n        let builder = new NodeBuilder(from, oracle);\n        RangeSet.spans(decorations, from, to, builder, 0);\n        return builder.finish(from);\n    }\n}\nfunction heightRelevantDecoChanges(a, b, diff) {\n    let comp = new DecorationComparator;\n    RangeSet.compare(a, b, diff, comp, 0);\n    return comp.changes;\n}\nclass DecorationComparator {\n    constructor() {\n        this.changes = [];\n    }\n    compareRange() { }\n    comparePoint(from, to, a, b) {\n        if (from < to || a && a.heightRelevant || b && b.heightRelevant)\n            addRange(from, to, this.changes, 5);\n    }\n}\n\nfunction visiblePixelRange(dom, paddingTop) {\n    let rect = dom.getBoundingClientRect();\n    let doc = dom.ownerDocument, win = doc.defaultView || window;\n    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);\n    let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);\n    for (let parent = dom.parentNode; parent && parent != doc.body;) {\n        if (parent.nodeType == 1) {\n            let elt = parent;\n            let style = window.getComputedStyle(elt);\n            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&\n                style.overflow != \"visible\") {\n                let parentRect = elt.getBoundingClientRect();\n                left = Math.max(left, parentRect.left);\n                right = Math.min(right, parentRect.right);\n                top = Math.max(top, parentRect.top);\n                bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);\n            }\n            parent = style.position == \"absolute\" || style.position == \"fixed\" ? elt.offsetParent : elt.parentNode;\n        }\n        else if (parent.nodeType == 11) { // Shadow root\n            parent = parent.host;\n        }\n        else {\n            break;\n        }\n    }\n    return { left: left - rect.left, right: Math.max(left, right) - rect.left,\n        top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };\n}\nfunction fullPixelRange(dom, paddingTop) {\n    let rect = dom.getBoundingClientRect();\n    return { left: 0, right: rect.right - rect.left,\n        top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };\n}\n// Line gaps are placeholder widgets used to hide pieces of overlong\n// lines within the viewport, as a kludge to keep the editor\n// responsive when a ridiculously long line is loaded into it.\nclass LineGap {\n    constructor(from, to, size) {\n        this.from = from;\n        this.to = to;\n        this.size = size;\n    }\n    static same(a, b) {\n        if (a.length != b.length)\n            return false;\n        for (let i = 0; i < a.length; i++) {\n            let gA = a[i], gB = b[i];\n            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)\n                return false;\n        }\n        return true;\n    }\n    draw(viewState, wrapping) {\n        return Decoration.replace({\n            widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)\n        }).range(this.from, this.to);\n    }\n}\nclass LineGapWidget extends WidgetType {\n    constructor(size, vertical) {\n        super();\n        this.size = size;\n        this.vertical = vertical;\n    }\n    eq(other) { return other.size == this.size && other.vertical == this.vertical; }\n    toDOM() {\n        let elt = document.createElement(\"div\");\n        if (this.vertical) {\n            elt.style.height = this.size + \"px\";\n        }\n        else {\n            elt.style.width = this.size + \"px\";\n            elt.style.height = \"2px\";\n            elt.style.display = \"inline-block\";\n        }\n        return elt;\n    }\n    get estimatedHeight() { return this.vertical ? this.size : -1; }\n}\nclass ViewState {\n    constructor(state) {\n        this.state = state;\n        // These are contentDOM-local coordinates\n        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };\n        this.inView = true;\n        this.paddingTop = 0; // Padding above the document, scaled\n        this.paddingBottom = 0; // Padding below the document, scaled\n        this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width\n        this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height\n        this.editorHeight = 0; // scrollDOM.clientHeight, unscaled\n        this.editorWidth = 0; // scrollDOM.clientWidth, unscaled\n        this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled\n        this.scrolledToBottom = false;\n        // The CSS-transformation scale of the editor (transformed size /\n        // concrete size)\n        this.scaleX = 1;\n        this.scaleY = 1;\n        // The vertical position (document-relative) to which to anchor the\n        // scroll position. -1 means anchor to the end of the document.\n        this.scrollAnchorPos = 0;\n        // The height at the anchor position. Set by the DOM update phase.\n        // -1 means no height available.\n        this.scrollAnchorHeight = -1;\n        // See VP.MaxDOMHeight\n        this.scaler = IdScaler;\n        this.scrollTarget = null;\n        // Briefly set to true when printing, to disable viewport limiting\n        this.printing = false;\n        // Flag set when editor content was redrawn, so that the next\n        // measure stage knows it must read DOM layout\n        this.mustMeasureContent = true;\n        this.defaultTextDirection = Direction.LTR;\n        this.visibleRanges = [];\n        // Cursor 'assoc' is only significant when the cursor is on a line\n        // wrap point, where it must stick to the character that it is\n        // associated with. Since browsers don't provide a reasonable\n        // interface to set or query this, when a selection is set that\n        // might cause this to be significant, this flag is set. The next\n        // measure phase will check whether the cursor is on a line-wrapping\n        // boundary and, if so, reset it to make sure it is positioned in\n        // the right place.\n        this.mustEnforceCursorAssoc = false;\n        let guessWrapping = state.facet(contentAttributes).some(v => typeof v != \"function\" && v.class == \"cm-lineWrapping\");\n        this.heightOracle = new HeightOracle(guessWrapping);\n        this.stateDeco = state.facet(decorations).filter(d => typeof d != \"function\");\n        this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);\n        this.viewport = this.getViewport(0, null);\n        this.updateViewportLines();\n        this.updateForViewport();\n        this.lineGaps = this.ensureLineGaps([]);\n        this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));\n        this.computeVisibleRanges();\n    }\n    updateForViewport() {\n        let viewports = [this.viewport], { main } = this.state.selection;\n        for (let i = 0; i <= 1; i++) {\n            let pos = i ? main.head : main.anchor;\n            if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {\n                let { from, to } = this.lineBlockAt(pos);\n                viewports.push(new Viewport(from, to));\n            }\n        }\n        this.viewports = viewports.sort((a, b) => a.from - b.from);\n        this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :\n            new BigScaler(this.heightOracle, this.heightMap, this.viewports);\n    }\n    updateViewportLines() {\n        this.viewportLines = [];\n        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {\n            this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));\n        });\n    }\n    update(update, scrollTarget = null) {\n        this.state = update.state;\n        let prevDeco = this.stateDeco;\n        this.stateDeco = this.state.facet(decorations).filter(d => typeof d != \"function\");\n        let contentChanges = update.changedRanges;\n        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));\n        let prevHeight = this.heightMap.height;\n        let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);\n        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);\n        if (this.heightMap.height != prevHeight)\n            update.flags |= 2 /* UpdateFlag.Height */;\n        if (scrollAnchor) {\n            this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);\n            this.scrollAnchorHeight = scrollAnchor.top;\n        }\n        else {\n            this.scrollAnchorPos = -1;\n            this.scrollAnchorHeight = this.heightMap.height;\n        }\n        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;\n        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||\n            !this.viewportIsAppropriate(viewport))\n            viewport = this.getViewport(0, scrollTarget);\n        let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||\n            viewport.from != this.viewport.from || viewport.to != this.viewport.to;\n        this.viewport = viewport;\n        this.updateForViewport();\n        if (updateLines)\n            this.updateViewportLines();\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))\n            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));\n        update.flags |= this.computeVisibleRanges();\n        if (scrollTarget)\n            this.scrollTarget = scrollTarget;\n        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&\n            update.state.selection.main.empty && update.state.selection.main.assoc &&\n            !update.state.facet(nativeSelectionHidden))\n            this.mustEnforceCursorAssoc = true;\n    }\n    measure(view) {\n        let dom = view.contentDOM, style = window.getComputedStyle(dom);\n        let oracle = this.heightOracle;\n        let whiteSpace = style.whiteSpace;\n        this.defaultTextDirection = style.direction == \"rtl\" ? Direction.RTL : Direction.LTR;\n        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);\n        let domRect = dom.getBoundingClientRect();\n        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;\n        this.contentDOMHeight = domRect.height;\n        this.mustMeasureContent = false;\n        let result = 0, bias = 0;\n        if (domRect.width && domRect.height) {\n            let { scaleX, scaleY } = getScale(dom, domRect);\n            if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 ||\n                scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {\n                this.scaleX = scaleX;\n                this.scaleY = scaleY;\n                result |= 8 /* UpdateFlag.Geometry */;\n                refresh = measureContent = true;\n            }\n        }\n        // Vertical padding\n        let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;\n        let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;\n        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {\n            this.paddingTop = paddingTop;\n            this.paddingBottom = paddingBottom;\n            result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;\n        }\n        if (this.editorWidth != view.scrollDOM.clientWidth) {\n            if (oracle.lineWrapping)\n                measureContent = true;\n            this.editorWidth = view.scrollDOM.clientWidth;\n            result |= 8 /* UpdateFlag.Geometry */;\n        }\n        let scrollTop = view.scrollDOM.scrollTop * this.scaleY;\n        if (this.scrollTop != scrollTop) {\n            this.scrollAnchorHeight = -1;\n            this.scrollTop = scrollTop;\n        }\n        this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);\n        // Pixel viewport\n        let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);\n        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;\n        this.pixelViewport = pixelViewport;\n        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;\n        if (inView != this.inView) {\n            this.inView = inView;\n            if (inView)\n                measureContent = true;\n        }\n        if (!this.inView && !this.scrollTarget)\n            return 0;\n        let contentWidth = domRect.width;\n        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {\n            this.contentDOMWidth = domRect.width;\n            this.editorHeight = view.scrollDOM.clientHeight;\n            result |= 8 /* UpdateFlag.Geometry */;\n        }\n        if (measureContent) {\n            let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);\n            if (oracle.mustRefreshForHeights(lineHeights))\n                refresh = true;\n            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {\n                let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();\n                refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);\n                if (refresh) {\n                    view.docView.minWidth = 0;\n                    result |= 8 /* UpdateFlag.Geometry */;\n                }\n            }\n            if (dTop > 0 && dBottom > 0)\n                bias = Math.max(dTop, dBottom);\n            else if (dTop < 0 && dBottom < 0)\n                bias = Math.min(dTop, dBottom);\n            oracle.heightChanged = false;\n            for (let vp of this.viewports) {\n                let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);\n                this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));\n            }\n            if (oracle.heightChanged)\n                result |= 2 /* UpdateFlag.Height */;\n        }\n        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||\n            this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||\n                this.scrollTarget.range.head > this.viewport.to);\n        if (viewportChange)\n            this.viewport = this.getViewport(bias, this.scrollTarget);\n        this.updateForViewport();\n        if ((result & 2 /* UpdateFlag.Height */) || viewportChange)\n            this.updateViewportLines();\n        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))\n            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));\n        result |= this.computeVisibleRanges();\n        if (this.mustEnforceCursorAssoc) {\n            this.mustEnforceCursorAssoc = false;\n            // This is done in the read stage, because moving the selection\n            // to a line end is going to trigger a layout anyway, so it\n            // can't be a pure write. It should be rare that it does any\n            // writing.\n            view.docView.enforceCursorAssoc();\n        }\n        return result;\n    }\n    get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }\n    get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }\n    getViewport(bias, scrollTarget) {\n        // This will divide VP.Margin between the top and the\n        // bottom, depending on the bias (the change in viewport position\n        // since the last update). It'll hold a number between 0 and 1\n        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));\n        let map = this.heightMap, oracle = this.heightOracle;\n        let { visibleTop, visibleBottom } = this;\n        let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);\n        // If scrollTarget is given, make sure the viewport includes that position\n        if (scrollTarget) {\n            let { head } = scrollTarget.range;\n            if (head < viewport.from || head > viewport.to) {\n                let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);\n                let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;\n                if (scrollTarget.y == \"center\")\n                    topPos = (block.top + block.bottom) / 2 - viewHeight / 2;\n                else if (scrollTarget.y == \"start\" || scrollTarget.y == \"nearest\" && head < viewport.from)\n                    topPos = block.top;\n                else\n                    topPos = block.bottom - viewHeight;\n                viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);\n            }\n        }\n        return viewport;\n    }\n    mapViewport(viewport, changes) {\n        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);\n        return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);\n    }\n    // Checks if a given viewport covers the visible part of the\n    // document and not too much beyond that.\n    viewportIsAppropriate({ from, to }, bias = 0) {\n        if (!this.inView)\n            return true;\n        let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);\n        let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);\n        let { visibleTop, visibleBottom } = this;\n        return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&\n            (to == this.state.doc.length ||\n                bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&\n            (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);\n    }\n    mapLineGaps(gaps, changes) {\n        if (!gaps.length || changes.empty)\n            return gaps;\n        let mapped = [];\n        for (let gap of gaps)\n            if (!changes.touchesRange(gap.from, gap.to))\n                mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));\n        return mapped;\n    }\n    // Computes positions in the viewport where the start or end of a\n    // line should be hidden, trying to reuse existing line gaps when\n    // appropriate to avoid unneccesary redraws.\n    // Uses crude character-counting for the positioning and sizing,\n    // since actual DOM coordinates aren't always available and\n    // predictable. Relies on generous margins (see LG.Margin) to hide\n    // the artifacts this might produce from the user.\n    ensureLineGaps(current, mayMeasure) {\n        let wrapping = this.heightOracle.lineWrapping;\n        let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;\n        // The non-wrapping logic won't work at all in predominantly right-to-left text.\n        if (this.defaultTextDirection != Direction.LTR && !wrapping)\n            return [];\n        let gaps = [];\n        let addGap = (from, to, line, structure) => {\n            if (to - from < halfMargin)\n                return;\n            let sel = this.state.selection.main, avoid = [sel.from];\n            if (!sel.empty)\n                avoid.push(sel.to);\n            for (let pos of avoid) {\n                if (pos > from && pos < to) {\n                    addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);\n                    addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);\n                    return;\n                }\n            }\n            let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&\n                Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&\n                !avoid.some(pos => gap.from < pos && gap.to > pos));\n            if (!gap) {\n                // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping\n                if (to < line.to && mayMeasure && wrapping &&\n                    mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {\n                    let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;\n                    if (lineStart > from)\n                        to = lineStart;\n                }\n                gap = new LineGap(from, to, this.gapSize(line, from, to, structure));\n            }\n            gaps.push(gap);\n        };\n        for (let line of this.viewportLines) {\n            if (line.length < doubleMargin)\n                continue;\n            let structure = lineStructure(line.from, line.to, this.stateDeco);\n            if (structure.total < doubleMargin)\n                continue;\n            let target = this.scrollTarget ? this.scrollTarget.range.head : null;\n            let viewFrom, viewTo;\n            if (wrapping) {\n                let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;\n                let top, bot;\n                if (target != null) {\n                    let targetFrac = findFraction(structure, target);\n                    let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;\n                    top = targetFrac - spaceFrac;\n                    bot = targetFrac + spaceFrac;\n                }\n                else {\n                    top = (this.visibleTop - line.top - marginHeight) / line.height;\n                    bot = (this.visibleBottom - line.top + marginHeight) / line.height;\n                }\n                viewFrom = findPosition(structure, top);\n                viewTo = findPosition(structure, bot);\n            }\n            else {\n                let totalWidth = structure.total * this.heightOracle.charWidth;\n                let marginWidth = margin * this.heightOracle.charWidth;\n                let left, right;\n                if (target != null) {\n                    let targetFrac = findFraction(structure, target);\n                    let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;\n                    left = targetFrac - spaceFrac;\n                    right = targetFrac + spaceFrac;\n                }\n                else {\n                    left = (this.pixelViewport.left - marginWidth) / totalWidth;\n                    right = (this.pixelViewport.right + marginWidth) / totalWidth;\n                }\n                viewFrom = findPosition(structure, left);\n                viewTo = findPosition(structure, right);\n            }\n            if (viewFrom > line.from)\n                addGap(line.from, viewFrom, line, structure);\n            if (viewTo < line.to)\n                addGap(viewTo, line.to, line, structure);\n        }\n        return gaps;\n    }\n    gapSize(line, from, to, structure) {\n        let fraction = findFraction(structure, to) - findFraction(structure, from);\n        if (this.heightOracle.lineWrapping) {\n            return line.height * fraction;\n        }\n        else {\n            return structure.total * this.heightOracle.charWidth * fraction;\n        }\n    }\n    updateLineGaps(gaps) {\n        if (!LineGap.same(gaps, this.lineGaps)) {\n            this.lineGaps = gaps;\n            this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));\n        }\n    }\n    computeVisibleRanges() {\n        let deco = this.stateDeco;\n        if (this.lineGaps.length)\n            deco = deco.concat(this.lineGapDeco);\n        let ranges = [];\n        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {\n            span(from, to) { ranges.push({ from, to }); },\n            point() { }\n        }, 20);\n        let changed = ranges.length != this.visibleRanges.length ||\n            this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);\n        this.visibleRanges = ranges;\n        return changed ? 4 /* UpdateFlag.Viewport */ : 0;\n    }\n    lineBlockAt(pos) {\n        return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||\n            scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);\n    }\n    lineBlockAtHeight(height) {\n        return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);\n    }\n    scrollAnchorAt(scrollTop) {\n        let block = this.lineBlockAtHeight(scrollTop + 8);\n        return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];\n    }\n    elementAtHeight(height) {\n        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);\n    }\n    get docHeight() {\n        return this.scaler.toDOM(this.heightMap.height);\n    }\n    get contentHeight() {\n        return this.docHeight + this.paddingTop + this.paddingBottom;\n    }\n}\nclass Viewport {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\nfunction lineStructure(from, to, stateDeco) {\n    let ranges = [], pos = from, total = 0;\n    RangeSet.spans(stateDeco, from, to, {\n        span() { },\n        point(from, to) {\n            if (from > pos) {\n                ranges.push({ from: pos, to: from });\n                total += from - pos;\n            }\n            pos = to;\n        }\n    }, 20); // We're only interested in collapsed ranges of a significant size\n    if (pos < to) {\n        ranges.push({ from: pos, to });\n        total += to - pos;\n    }\n    return { total, ranges };\n}\nfunction findPosition({ total, ranges }, ratio) {\n    if (ratio <= 0)\n        return ranges[0].from;\n    if (ratio >= 1)\n        return ranges[ranges.length - 1].to;\n    let dist = Math.floor(total * ratio);\n    for (let i = 0;; i++) {\n        let { from, to } = ranges[i], size = to - from;\n        if (dist <= size)\n            return from + dist;\n        dist -= size;\n    }\n}\nfunction findFraction(structure, pos) {\n    let counted = 0;\n    for (let { from, to } of structure.ranges) {\n        if (pos <= to) {\n            counted += pos - from;\n            break;\n        }\n        counted += to - from;\n    }\n    return counted / structure.total;\n}\nfunction find(array, f) {\n    for (let val of array)\n        if (f(val))\n            return val;\n    return undefined;\n}\n// Don't scale when the document height is within the range of what\n// the DOM can handle.\nconst IdScaler = {\n    toDOM(n) { return n; },\n    fromDOM(n) { return n; },\n    scale: 1\n};\n// When the height is too big (> VP.MaxDOMHeight), scale down the\n// regions outside the viewports so that the total height is\n// VP.MaxDOMHeight.\nclass BigScaler {\n    constructor(oracle, heightMap, viewports) {\n        let vpHeight = 0, base = 0, domBase = 0;\n        this.viewports = viewports.map(({ from, to }) => {\n            let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;\n            let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;\n            vpHeight += bottom - top;\n            return { from, to, top, bottom, domTop: 0, domBottom: 0 };\n        });\n        this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);\n        for (let obj of this.viewports) {\n            obj.domTop = domBase + (obj.top - base) * this.scale;\n            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);\n            base = obj.bottom;\n        }\n    }\n    toDOM(n) {\n        for (let i = 0, base = 0, domBase = 0;; i++) {\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\n            if (!vp || n < vp.top)\n                return domBase + (n - base) * this.scale;\n            if (n <= vp.bottom)\n                return vp.domTop + (n - vp.top);\n            base = vp.bottom;\n            domBase = vp.domBottom;\n        }\n    }\n    fromDOM(n) {\n        for (let i = 0, base = 0, domBase = 0;; i++) {\n            let vp = i < this.viewports.length ? this.viewports[i] : null;\n            if (!vp || n < vp.domTop)\n                return base + (n - domBase) / this.scale;\n            if (n <= vp.domBottom)\n                return vp.top + (n - vp.domTop);\n            base = vp.bottom;\n            domBase = vp.domBottom;\n        }\n    }\n}\nfunction scaleBlock(block, scaler) {\n    if (scaler.scale == 1)\n        return block;\n    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);\n    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);\n}\n\nconst theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(\" \") });\nconst darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });\nconst baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();\nconst lightDarkIDs = { \"&light\": \".\" + baseLightID, \"&dark\": \".\" + baseDarkID };\nfunction buildTheme(main, spec, scopes) {\n    return new StyleModule(spec, {\n        finish(sel) {\n            return /&/.test(sel) ? sel.replace(/&\\w*/, m => {\n                if (m == \"&\")\n                    return main;\n                if (!scopes || !scopes[m])\n                    throw new RangeError(`Unsupported selector: ${m}`);\n                return scopes[m];\n            }) : main + \" \" + sel;\n        }\n    });\n}\nconst baseTheme$1 = /*@__PURE__*/buildTheme(\".\" + baseThemeID, {\n    \"&\": {\n        position: \"relative !important\",\n        boxSizing: \"border-box\",\n        \"&.cm-focused\": {\n            // Provide a simple default outline to make sure a focused\n            // editor is visually distinct. Can't leave the default behavior\n            // because that will apply to the content element, which is\n            // inside the scrollable container and doesn't include the\n            // gutters. We also can't use an 'auto' outline, since those\n            // are, for some reason, drawn behind the element content, which\n            // will cause things like the active line background to cover\n            // the outline (#297).\n            outline: \"1px dotted #212121\"\n        },\n        display: \"flex !important\",\n        flexDirection: \"column\"\n    },\n    \".cm-scroller\": {\n        display: \"flex !important\",\n        alignItems: \"flex-start !important\",\n        fontFamily: \"monospace\",\n        lineHeight: 1.4,\n        height: \"100%\",\n        overflowX: \"auto\",\n        position: \"relative\",\n        zIndex: 0\n    },\n    \".cm-content\": {\n        margin: 0,\n        flexGrow: 2,\n        flexShrink: 0,\n        display: \"block\",\n        whiteSpace: \"pre\",\n        wordWrap: \"normal\", // https://github.com/codemirror/dev/issues/456\n        boxSizing: \"border-box\",\n        minHeight: \"100%\",\n        padding: \"4px 0\",\n        outline: \"none\",\n        \"&[contenteditable=true]\": {\n            WebkitUserModify: \"read-write-plaintext-only\",\n        }\n    },\n    \".cm-lineWrapping\": {\n        whiteSpace_fallback: \"pre-wrap\", // For IE\n        whiteSpace: \"break-spaces\",\n        wordBreak: \"break-word\", // For Safari, which doesn't support overflow-wrap: anywhere\n        overflowWrap: \"anywhere\",\n        flexShrink: 1\n    },\n    \"&light .cm-content\": { caretColor: \"black\" },\n    \"&dark .cm-content\": { caretColor: \"white\" },\n    \".cm-line\": {\n        display: \"block\",\n        padding: \"0 2px 0 6px\"\n    },\n    \".cm-layer\": {\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        contain: \"size style\",\n        \"& > *\": {\n            position: \"absolute\"\n        }\n    },\n    \"&light .cm-selectionBackground\": {\n        background: \"#d9d9d9\"\n    },\n    \"&dark .cm-selectionBackground\": {\n        background: \"#222\"\n    },\n    \"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n        background: \"#d7d4f0\"\n    },\n    \"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground\": {\n        background: \"#233\"\n    },\n    \".cm-cursorLayer\": {\n        pointerEvents: \"none\"\n    },\n    \"&.cm-focused > .cm-scroller > .cm-cursorLayer\": {\n        animation: \"steps(1) cm-blink 1.2s infinite\"\n    },\n    // Two animations defined so that we can switch between them to\n    // restart the animation without forcing another style\n    // recomputation.\n    \"@keyframes cm-blink\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\n    \"@keyframes cm-blink2\": { \"0%\": {}, \"50%\": { opacity: 0 }, \"100%\": {} },\n    \".cm-cursor, .cm-dropCursor\": {\n        borderLeft: \"1.2px solid black\",\n        marginLeft: \"-0.6px\",\n        pointerEvents: \"none\",\n    },\n    \".cm-cursor\": {\n        display: \"none\"\n    },\n    \"&dark .cm-cursor\": {\n        borderLeftColor: \"#444\"\n    },\n    \".cm-dropCursor\": {\n        position: \"absolute\"\n    },\n    \"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor\": {\n        display: \"block\"\n    },\n    \".cm-iso\": {\n        unicodeBidi: \"isolate\"\n    },\n    \".cm-announced\": {\n        position: \"fixed\",\n        top: \"-10000px\"\n    },\n    \"@media print\": {\n        \".cm-announced\": { display: \"none\" }\n    },\n    \"&light .cm-activeLine\": { backgroundColor: \"#cceeff44\" },\n    \"&dark .cm-activeLine\": { backgroundColor: \"#99eeff33\" },\n    \"&light .cm-specialChar\": { color: \"red\" },\n    \"&dark .cm-specialChar\": { color: \"#f78\" },\n    \".cm-gutters\": {\n        flexShrink: 0,\n        display: \"flex\",\n        height: \"100%\",\n        boxSizing: \"border-box\",\n        insetInlineStart: 0,\n        zIndex: 200\n    },\n    \"&light .cm-gutters\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"#6c6c6c\",\n        borderRight: \"1px solid #ddd\"\n    },\n    \"&dark .cm-gutters\": {\n        backgroundColor: \"#333338\",\n        color: \"#ccc\"\n    },\n    \".cm-gutter\": {\n        display: \"flex !important\", // Necessary -- prevents margin collapsing\n        flexDirection: \"column\",\n        flexShrink: 0,\n        boxSizing: \"border-box\",\n        minHeight: \"100%\",\n        overflow: \"hidden\"\n    },\n    \".cm-gutterElement\": {\n        boxSizing: \"border-box\"\n    },\n    \".cm-lineNumbers .cm-gutterElement\": {\n        padding: \"0 3px 0 5px\",\n        minWidth: \"20px\",\n        textAlign: \"right\",\n        whiteSpace: \"nowrap\"\n    },\n    \"&light .cm-activeLineGutter\": {\n        backgroundColor: \"#e2f2ff\"\n    },\n    \"&dark .cm-activeLineGutter\": {\n        backgroundColor: \"#222227\"\n    },\n    \".cm-panels\": {\n        boxSizing: \"border-box\",\n        position: \"sticky\",\n        left: 0,\n        right: 0\n    },\n    \"&light .cm-panels\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"black\"\n    },\n    \"&light .cm-panels-top\": {\n        borderBottom: \"1px solid #ddd\"\n    },\n    \"&light .cm-panels-bottom\": {\n        borderTop: \"1px solid #ddd\"\n    },\n    \"&dark .cm-panels\": {\n        backgroundColor: \"#333338\",\n        color: \"white\"\n    },\n    \".cm-tab\": {\n        display: \"inline-block\",\n        overflow: \"hidden\",\n        verticalAlign: \"bottom\"\n    },\n    \".cm-widgetBuffer\": {\n        verticalAlign: \"text-top\",\n        height: \"1em\",\n        width: 0,\n        display: \"inline\"\n    },\n    \".cm-placeholder\": {\n        color: \"#888\",\n        display: \"inline-block\",\n        verticalAlign: \"top\",\n    },\n    \".cm-highlightSpace:before\": {\n        content: \"attr(data-display)\",\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        color: \"#888\"\n    },\n    \".cm-highlightTab\": {\n        backgroundImage: `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"20\"><path stroke=\"%23888\" stroke-width=\"1\" fill=\"none\" d=\"M1 10H196L190 5M190 15L196 10M197 4L197 16\"/></svg>')`,\n        backgroundSize: \"auto 100%\",\n        backgroundPosition: \"right 90%\",\n        backgroundRepeat: \"no-repeat\"\n    },\n    \".cm-trailingSpace\": {\n        backgroundColor: \"#ff332255\"\n    },\n    \".cm-button\": {\n        verticalAlign: \"middle\",\n        color: \"inherit\",\n        fontSize: \"70%\",\n        padding: \".2em 1em\",\n        borderRadius: \"1px\"\n    },\n    \"&light .cm-button\": {\n        backgroundImage: \"linear-gradient(#eff1f5, #d9d9df)\",\n        border: \"1px solid #888\",\n        \"&:active\": {\n            backgroundImage: \"linear-gradient(#b4b4b4, #d0d3d6)\"\n        }\n    },\n    \"&dark .cm-button\": {\n        backgroundImage: \"linear-gradient(#393939, #111)\",\n        border: \"1px solid #888\",\n        \"&:active\": {\n            backgroundImage: \"linear-gradient(#111, #333)\"\n        }\n    },\n    \".cm-textfield\": {\n        verticalAlign: \"middle\",\n        color: \"inherit\",\n        fontSize: \"70%\",\n        border: \"1px solid silver\",\n        padding: \".2em .5em\"\n    },\n    \"&light .cm-textfield\": {\n        backgroundColor: \"white\"\n    },\n    \"&dark .cm-textfield\": {\n        border: \"1px solid #555\",\n        backgroundColor: \"inherit\"\n    }\n}, lightDarkIDs);\n\nconst LineBreakPlaceholder = \"\\uffff\";\nclass DOMReader {\n    constructor(points, state) {\n        this.points = points;\n        this.text = \"\";\n        this.lineSeparator = state.facet(EditorState.lineSeparator);\n    }\n    append(text) {\n        this.text += text;\n    }\n    lineBreak() {\n        this.text += LineBreakPlaceholder;\n    }\n    readRange(start, end) {\n        if (!start)\n            return this;\n        let parent = start.parentNode;\n        for (let cur = start;;) {\n            this.findPointBefore(parent, cur);\n            let oldLen = this.text.length;\n            this.readNode(cur);\n            let next = cur.nextSibling;\n            if (next == end)\n                break;\n            let view = ContentView.get(cur), nextView = ContentView.get(next);\n            if (view && nextView ? view.breakAfter :\n                (view ? view.breakAfter : isBlockElement(cur)) ||\n                    (isBlockElement(next) && (cur.nodeName != \"BR\" || cur.cmIgnore) && this.text.length > oldLen))\n                this.lineBreak();\n            cur = next;\n        }\n        this.findPointBefore(parent, end);\n        return this;\n    }\n    readTextNode(node) {\n        let text = node.nodeValue;\n        for (let point of this.points)\n            if (point.node == node)\n                point.pos = this.text.length + Math.min(point.offset, text.length);\n        for (let off = 0, re = this.lineSeparator ? null : /\\r\\n?|\\n/g;;) {\n            let nextBreak = -1, breakSize = 1, m;\n            if (this.lineSeparator) {\n                nextBreak = text.indexOf(this.lineSeparator, off);\n                breakSize = this.lineSeparator.length;\n            }\n            else if (m = re.exec(text)) {\n                nextBreak = m.index;\n                breakSize = m[0].length;\n            }\n            this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));\n            if (nextBreak < 0)\n                break;\n            this.lineBreak();\n            if (breakSize > 1)\n                for (let point of this.points)\n                    if (point.node == node && point.pos > this.text.length)\n                        point.pos -= breakSize - 1;\n            off = nextBreak + breakSize;\n        }\n    }\n    readNode(node) {\n        if (node.cmIgnore)\n            return;\n        let view = ContentView.get(node);\n        let fromView = view && view.overrideDOMText;\n        if (fromView != null) {\n            this.findPointInside(node, fromView.length);\n            for (let i = fromView.iter(); !i.next().done;) {\n                if (i.lineBreak)\n                    this.lineBreak();\n                else\n                    this.append(i.value);\n            }\n        }\n        else if (node.nodeType == 3) {\n            this.readTextNode(node);\n        }\n        else if (node.nodeName == \"BR\") {\n            if (node.nextSibling)\n                this.lineBreak();\n        }\n        else if (node.nodeType == 1) {\n            this.readRange(node.firstChild, null);\n        }\n    }\n    findPointBefore(node, next) {\n        for (let point of this.points)\n            if (point.node == node && node.childNodes[point.offset] == next)\n                point.pos = this.text.length;\n    }\n    findPointInside(node, length) {\n        for (let point of this.points)\n            if (node.nodeType == 3 ? point.node == node : node.contains(point.node))\n                point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);\n    }\n}\nfunction isAtEnd(parent, node, offset) {\n    for (;;) {\n        if (!node || offset < maxOffset(node))\n            return false;\n        if (node == parent)\n            return true;\n        offset = domIndex(node) + 1;\n        node = node.parentNode;\n    }\n}\nclass DOMPoint {\n    constructor(node, offset) {\n        this.node = node;\n        this.offset = offset;\n        this.pos = -1;\n    }\n}\n\nclass DOMChange {\n    constructor(view, start, end, typeOver) {\n        this.typeOver = typeOver;\n        this.bounds = null;\n        this.text = \"\";\n        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;\n        if (view.state.readOnly && start > -1) {\n            // Ignore changes when the editor is read-only\n            this.newSel = null;\n        }\n        else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {\n            let selPoints = iHead || iAnchor ? [] : selectionPoints(view);\n            let reader = new DOMReader(selPoints, view.state);\n            reader.readRange(this.bounds.startDOM, this.bounds.endDOM);\n            this.text = reader.text;\n            this.newSel = selectionFromPoints(selPoints, this.bounds.from);\n        }\n        else {\n            let domSel = view.observer.selectionRange;\n            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||\n                !contains(view.contentDOM, domSel.focusNode)\n                ? view.state.selection.main.head\n                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);\n            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||\n                !contains(view.contentDOM, domSel.anchorNode)\n                ? view.state.selection.main.anchor\n                : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);\n            // iOS will refuse to select the block gaps when doing\n            // select-all.\n            // Chrome will put the selection *inside* them, confusing\n            // posFromDOM\n            let vp = view.viewport;\n            if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor &&\n                (vp.from > 0 || vp.to < view.state.doc.length)) {\n                let from = Math.min(head, anchor), to = Math.max(head, anchor);\n                let offFrom = vp.from - from, offTo = vp.to - to;\n                if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {\n                    head = 0;\n                    anchor = view.state.doc.length;\n                }\n            }\n            this.newSel = EditorSelection.single(anchor, head);\n        }\n    }\n}\nfunction applyDOMChange(view, domChange) {\n    let change;\n    let { newSel } = domChange, sel = view.state.selection.main;\n    let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;\n    if (domChange.bounds) {\n        let { from, to } = domChange.bounds;\n        let preferredPos = sel.from, preferredSide = null;\n        // Prefer anchoring to end when Backspace is pressed (or, on\n        // Android, when something was deleted)\n        if (lastKey === 8 || browser.android && domChange.text.length < to - from) {\n            preferredPos = sel.to;\n            preferredSide = \"end\";\n        }\n        let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);\n        if (diff) {\n            // Chrome inserts two newlines when pressing shift-enter at the\n            // end of a line. DomChange drops one of those.\n            if (browser.chrome && lastKey == 13 &&\n                diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)\n                diff.toB--;\n            change = { from: from + diff.from, to: from + diff.toA,\n                insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };\n        }\n    }\n    else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {\n        newSel = null;\n    }\n    if (!change && !newSel)\n        return false;\n    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {\n        // Heuristic to notice typing over a selected character\n        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };\n    }\n    else if (change && change.from >= sel.from && change.to <= sel.to &&\n        (change.from != sel.from || change.to != sel.to) &&\n        (sel.to - sel.from) - (change.to - change.from) <= 4) {\n        // If the change is inside the selection and covers most of it,\n        // assume it is a selection replace (with identical characters at\n        // the start/end not included in the diff)\n        change = {\n            from: sel.from, to: sel.to,\n            insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))\n        };\n    }\n    else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&\n        /^\\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute(\"autocorrect\") == \"off\") {\n        // Detect insert-period-on-double-space Mac and Android behavior,\n        // and transform it into a regular space insert.\n        if (newSel && change.insert.length == 2)\n            newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);\n        change = { from: sel.from, to: sel.to, insert: Text.of([\" \"]) };\n    }\n    else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&\n        change.insert.toString() == \"\\n \" && view.lineWrapping) {\n        // In Chrome, if you insert a space at the start of a wrapped\n        // line, it will actually insert a newline and a space, causing a\n        // bogus new line to be created in CodeMirror (#968)\n        if (newSel)\n            newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);\n        change = { from: sel.from, to: sel.to, insert: Text.of([\" \"]) };\n    }\n    if (change) {\n        if (browser.ios && view.inputState.flushIOSKey(change))\n            return true;\n        // Android browsers don't fire reasonable key events for enter,\n        // backspace, or delete. So this detects changes that look like\n        // they're caused by those keys, and reinterprets them as key\n        // events. (Some of these keys are also handled by beforeinput\n        // events and the pendingAndroidKey mechanism, but that's not\n        // reliable in all situations.)\n        if (browser.android &&\n            ((change.to == sel.to &&\n                // GBoard will sometimes remove a space it just inserted\n                // after a completion when you press enter\n                (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == \" \") &&\n                change.insert.length == 1 && change.insert.lines == 2 &&\n                dispatchKey(view.contentDOM, \"Enter\", 13)) ||\n                ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||\n                    lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&\n                    dispatchKey(view.contentDOM, \"Backspace\", 8)) ||\n                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&\n                    dispatchKey(view.contentDOM, \"Delete\", 46))))\n            return true;\n        let text = change.insert.toString();\n        if (view.inputState.composing >= 0)\n            view.inputState.composing++;\n        let defaultTr;\n        let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));\n        if (!view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text, defaultInsert)))\n            view.dispatch(defaultInsert());\n        return true;\n    }\n    else if (newSel && !newSel.main.eq(sel)) {\n        let scrollIntoView = false, userEvent = \"select\";\n        if (view.inputState.lastSelectionTime > Date.now() - 50) {\n            if (view.inputState.lastSelectionOrigin == \"select\")\n                scrollIntoView = true;\n            userEvent = view.inputState.lastSelectionOrigin;\n        }\n        view.dispatch({ selection: newSel, scrollIntoView, userEvent });\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction applyDefaultInsert(view, change, newSel) {\n    let tr, startState = view.state, sel = startState.selection.main;\n    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&\n        (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&\n        view.inputState.composing < 0) {\n        let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : \"\";\n        let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : \"\";\n        tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));\n    }\n    else {\n        let changes = startState.changes(change);\n        let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;\n        // Try to apply a composition change to all cursors\n        if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&\n            change.to <= sel.to && change.to >= sel.to - 10) {\n            let replaced = view.state.sliceDoc(change.from, change.to);\n            let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);\n            if (composition) {\n                let dLen = change.insert.length - (change.to - change.from);\n                compositionRange = { from: composition.from, to: composition.to - dLen };\n            }\n            else {\n                compositionRange = view.state.doc.lineAt(sel.head);\n            }\n            let offset = sel.to - change.to, size = sel.to - sel.from;\n            tr = startState.changeByRange(range => {\n                if (range.from == sel.from && range.to == sel.to)\n                    return { changes, range: mainSel || range.map(changes) };\n                let to = range.to - offset, from = to - replaced.length;\n                if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||\n                    // Unfortunately, there's no way to make multiple\n                    // changes in the same node work without aborting\n                    // composition, so cursors in the composition range are\n                    // ignored.\n                    range.to >= compositionRange.from && range.from <= compositionRange.to)\n                    return { range };\n                let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;\n                return {\n                    changes: rangeChanges,\n                    range: !mainSel ? range.map(rangeChanges) :\n                        EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))\n                };\n            });\n        }\n        else {\n            tr = {\n                changes,\n                selection: mainSel && startState.selection.replaceRange(mainSel)\n            };\n        }\n    }\n    let userEvent = \"input.type\";\n    if (view.composing ||\n        view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {\n        view.inputState.compositionPendingChange = false;\n        userEvent += \".compose\";\n        if (view.inputState.compositionFirstChange) {\n            userEvent += \".start\";\n            view.inputState.compositionFirstChange = false;\n        }\n    }\n    return startState.update(tr, { userEvent, scrollIntoView: true });\n}\nfunction findDiff(a, b, preferredPos, preferredSide) {\n    let minLen = Math.min(a.length, b.length);\n    let from = 0;\n    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))\n        from++;\n    if (from == minLen && a.length == b.length)\n        return null;\n    let toA = a.length, toB = b.length;\n    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {\n        toA--;\n        toB--;\n    }\n    if (preferredSide == \"end\") {\n        let adjust = Math.max(0, from - Math.min(toA, toB));\n        preferredPos -= toA + adjust - from;\n    }\n    if (toA < from && a.length < b.length) {\n        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;\n        from -= move;\n        toB = from + (toB - toA);\n        toA = from;\n    }\n    else if (toB < from) {\n        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;\n        from -= move;\n        toA = from + (toA - toB);\n        toB = from;\n    }\n    return { from, toA, toB };\n}\nfunction selectionPoints(view) {\n    let result = [];\n    if (view.root.activeElement != view.contentDOM)\n        return result;\n    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;\n    if (anchorNode) {\n        result.push(new DOMPoint(anchorNode, anchorOffset));\n        if (focusNode != anchorNode || focusOffset != anchorOffset)\n            result.push(new DOMPoint(focusNode, focusOffset));\n    }\n    return result;\n}\nfunction selectionFromPoints(points, base) {\n    if (points.length == 0)\n        return null;\n    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;\n    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;\n}\n\nconst observeOptions = {\n    childList: true,\n    characterData: true,\n    subtree: true,\n    attributes: true,\n    characterDataOldValue: true\n};\n// IE11 has very broken mutation observers, so we also listen to\n// DOMCharacterDataModified there\nconst useCharData = browser.ie && browser.ie_version <= 11;\nclass DOMObserver {\n    constructor(view) {\n        this.view = view;\n        this.active = false;\n        // The known selection. Kept in our own object, as opposed to just\n        // directly accessing the selection because:\n        //  - Safari doesn't report the right selection in shadow DOM\n        //  - Reading from the selection forces a DOM layout\n        //  - This way, we can ignore selectionchange events if we have\n        //    already seen the 'new' selection\n        this.selectionRange = new DOMSelectionState;\n        // Set when a selection change is detected, cleared on flush\n        this.selectionChanged = false;\n        this.delayedFlush = -1;\n        this.resizeTimeout = -1;\n        this.queue = [];\n        this.delayedAndroidKey = null;\n        this.flushingAndroidKey = -1;\n        this.lastChange = 0;\n        this.scrollTargets = [];\n        this.intersection = null;\n        this.resizeScroll = null;\n        this.intersecting = false;\n        this.gapIntersection = null;\n        this.gaps = [];\n        this.printQuery = null;\n        // Timeout for scheduling check of the parents that need scroll handlers\n        this.parentCheck = -1;\n        this.dom = view.contentDOM;\n        this.observer = new MutationObserver(mutations => {\n            for (let mut of mutations)\n                this.queue.push(mut);\n            // IE11 will sometimes (on typing over a selection or\n            // backspacing out a single character text node) call the\n            // observer callback before actually updating the DOM.\n            //\n            // Unrelatedly, iOS Safari will, when ending a composition,\n            // sometimes first clear it, deliver the mutations, and then\n            // reinsert the finished text. CodeMirror's handling of the\n            // deletion will prevent the reinsertion from happening,\n            // breaking composition.\n            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&\n                mutations.some(m => m.type == \"childList\" && m.removedNodes.length ||\n                    m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length))\n                this.flushSoon();\n            else\n                this.flush();\n        });\n        if (useCharData)\n            this.onCharData = (event) => {\n                this.queue.push({ target: event.target,\n                    type: \"characterData\",\n                    oldValue: event.prevValue });\n                this.flushSoon();\n            };\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n        this.onResize = this.onResize.bind(this);\n        this.onPrint = this.onPrint.bind(this);\n        this.onScroll = this.onScroll.bind(this);\n        if (window.matchMedia)\n            this.printQuery = window.matchMedia(\"print\");\n        if (typeof ResizeObserver == \"function\") {\n            this.resizeScroll = new ResizeObserver(() => {\n                var _a;\n                if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)\n                    this.onResize();\n            });\n            this.resizeScroll.observe(view.scrollDOM);\n        }\n        this.addWindowListeners(this.win = view.win);\n        this.start();\n        if (typeof IntersectionObserver == \"function\") {\n            this.intersection = new IntersectionObserver(entries => {\n                if (this.parentCheck < 0)\n                    this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);\n                if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {\n                    this.intersecting = !this.intersecting;\n                    if (this.intersecting != this.view.inView)\n                        this.onScrollChanged(document.createEvent(\"Event\"));\n                }\n            }, { threshold: [0, .001] });\n            this.intersection.observe(this.dom);\n            this.gapIntersection = new IntersectionObserver(entries => {\n                if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)\n                    this.onScrollChanged(document.createEvent(\"Event\"));\n            }, {});\n        }\n        this.listenForScroll();\n        this.readSelectionRange();\n    }\n    onScrollChanged(e) {\n        this.view.inputState.runHandlers(\"scroll\", e);\n        if (this.intersecting)\n            this.view.measure();\n    }\n    onScroll(e) {\n        if (this.intersecting)\n            this.flush(false);\n        this.onScrollChanged(e);\n    }\n    onResize() {\n        if (this.resizeTimeout < 0)\n            this.resizeTimeout = setTimeout(() => {\n                this.resizeTimeout = -1;\n                this.view.requestMeasure();\n            }, 50);\n    }\n    onPrint(event) {\n        if (event.type == \"change\" && !event.matches)\n            return;\n        this.view.viewState.printing = true;\n        this.view.measure();\n        setTimeout(() => {\n            this.view.viewState.printing = false;\n            this.view.requestMeasure();\n        }, 500);\n    }\n    updateGaps(gaps) {\n        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {\n            this.gapIntersection.disconnect();\n            for (let gap of gaps)\n                this.gapIntersection.observe(gap);\n            this.gaps = gaps;\n        }\n    }\n    onSelectionChange(event) {\n        let wasChanged = this.selectionChanged;\n        if (!this.readSelectionRange() || this.delayedAndroidKey)\n            return;\n        let { view } = this, sel = this.selectionRange;\n        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))\n            return;\n        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);\n        if (context && context.ignoreEvent(event)) {\n            if (!wasChanged)\n                this.selectionChanged = false;\n            return;\n        }\n        // Deletions on IE11 fire their events in the wrong order, giving\n        // us a selection change event before the DOM changes are\n        // reported.\n        // Chrome Android has a similar issue when backspacing out a\n        // selection (#645).\n        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&\n            // (Selection.isCollapsed isn't reliable on IE)\n            sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))\n            this.flushSoon();\n        else\n            this.flush(false);\n    }\n    readSelectionRange() {\n        let { view } = this;\n        // The Selection object is broken in shadow roots in Safari. See\n        // https://github.com/codemirror/dev/issues/414\n        let selection = getSelection(view.root);\n        if (!selection)\n            return false;\n        let range = browser.safari && view.root.nodeType == 11 &&\n            deepActiveElement(this.dom.ownerDocument) == this.dom &&\n            safariSelectionRangeHack(this.view, selection) || selection;\n        if (!range || this.selectionRange.eq(range))\n            return false;\n        let local = hasSelection(this.dom, range);\n        // Detect the situation where the browser has, on focus, moved the\n        // selection to the start of the content element. Reset it to the\n        // position from the editor state.\n        if (local && !this.selectionChanged &&\n            view.inputState.lastFocusTime > Date.now() - 200 &&\n            view.inputState.lastTouchTime < Date.now() - 300 &&\n            atElementStart(this.dom, range)) {\n            this.view.inputState.lastFocusTime = 0;\n            view.docView.updateSelection();\n            return false;\n        }\n        this.selectionRange.setRange(range);\n        if (local)\n            this.selectionChanged = true;\n        return true;\n    }\n    setSelectionRange(anchor, head) {\n        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);\n        this.selectionChanged = false;\n    }\n    clearSelectionRange() {\n        this.selectionRange.set(null, 0, null, 0);\n    }\n    listenForScroll() {\n        this.parentCheck = -1;\n        let i = 0, changed = null;\n        for (let dom = this.dom; dom;) {\n            if (dom.nodeType == 1) {\n                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)\n                    i++;\n                else if (!changed)\n                    changed = this.scrollTargets.slice(0, i);\n                if (changed)\n                    changed.push(dom);\n                dom = dom.assignedSlot || dom.parentNode;\n            }\n            else if (dom.nodeType == 11) { // Shadow root\n                dom = dom.host;\n            }\n            else {\n                break;\n            }\n        }\n        if (i < this.scrollTargets.length && !changed)\n            changed = this.scrollTargets.slice(0, i);\n        if (changed) {\n            for (let dom of this.scrollTargets)\n                dom.removeEventListener(\"scroll\", this.onScroll);\n            for (let dom of this.scrollTargets = changed)\n                dom.addEventListener(\"scroll\", this.onScroll);\n        }\n    }\n    ignore(f) {\n        if (!this.active)\n            return f();\n        try {\n            this.stop();\n            return f();\n        }\n        finally {\n            this.start();\n            this.clear();\n        }\n    }\n    start() {\n        if (this.active)\n            return;\n        this.observer.observe(this.dom, observeOptions);\n        if (useCharData)\n            this.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\n        this.active = true;\n    }\n    stop() {\n        if (!this.active)\n            return;\n        this.active = false;\n        this.observer.disconnect();\n        if (useCharData)\n            this.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\n    }\n    // Throw away any pending changes\n    clear() {\n        this.processRecords();\n        this.queue.length = 0;\n        this.selectionChanged = false;\n    }\n    // Chrome Android, especially in combination with GBoard, not only\n    // doesn't reliably fire regular key events, but also often\n    // surrounds the effect of enter or backspace with a bunch of\n    // composition events that, when interrupted, cause text duplication\n    // or other kinds of corruption. This hack makes the editor back off\n    // from handling DOM changes for a moment when such a key is\n    // detected (via beforeinput or keydown), and then tries to flush\n    // them or, if that has no effect, dispatches the given key.\n    delayAndroidKey(key, keyCode) {\n        var _a;\n        if (!this.delayedAndroidKey) {\n            let flush = () => {\n                let key = this.delayedAndroidKey;\n                if (key) {\n                    this.clearDelayedAndroidKey();\n                    this.view.inputState.lastKeyCode = key.keyCode;\n                    this.view.inputState.lastKeyTime = Date.now();\n                    let flushed = this.flush();\n                    if (!flushed && key.force)\n                        dispatchKey(this.dom, key.key, key.keyCode);\n                }\n            };\n            this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);\n        }\n        // Since backspace beforeinput is sometimes signalled spuriously,\n        // Enter always takes precedence.\n        if (!this.delayedAndroidKey || key == \"Enter\")\n            this.delayedAndroidKey = {\n                key, keyCode,\n                // Only run the key handler when no changes are detected if\n                // this isn't coming right after another change, in which case\n                // it is probably part of a weird chain of updates, and should\n                // be ignored if it returns the DOM to its previous state.\n                force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)\n            };\n    }\n    clearDelayedAndroidKey() {\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\n        this.delayedAndroidKey = null;\n        this.flushingAndroidKey = -1;\n    }\n    flushSoon() {\n        if (this.delayedFlush < 0)\n            this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });\n    }\n    forceFlush() {\n        if (this.delayedFlush >= 0) {\n            this.view.win.cancelAnimationFrame(this.delayedFlush);\n            this.delayedFlush = -1;\n        }\n        this.flush();\n    }\n    pendingRecords() {\n        for (let mut of this.observer.takeRecords())\n            this.queue.push(mut);\n        return this.queue;\n    }\n    processRecords() {\n        let records = this.pendingRecords();\n        if (records.length)\n            this.queue = [];\n        let from = -1, to = -1, typeOver = false;\n        for (let record of records) {\n            let range = this.readMutation(record);\n            if (!range)\n                continue;\n            if (range.typeOver)\n                typeOver = true;\n            if (from == -1) {\n                ({ from, to } = range);\n            }\n            else {\n                from = Math.min(range.from, from);\n                to = Math.max(range.to, to);\n            }\n        }\n        return { from, to, typeOver };\n    }\n    readChange() {\n        let { from, to, typeOver } = this.processRecords();\n        let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);\n        if (from < 0 && !newSel)\n            return null;\n        if (from > -1)\n            this.lastChange = Date.now();\n        this.view.inputState.lastFocusTime = 0;\n        this.selectionChanged = false;\n        let change = new DOMChange(this.view, from, to, typeOver);\n        this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };\n        return change;\n    }\n    // Apply pending changes, if any\n    flush(readSelection = true) {\n        // Completely hold off flushing when pending keys are set—the code\n        // managing those will make sure processRecords is called and the\n        // view is resynchronized after\n        if (this.delayedFlush >= 0 || this.delayedAndroidKey)\n            return false;\n        if (readSelection)\n            this.readSelectionRange();\n        let domChange = this.readChange();\n        if (!domChange) {\n            this.view.requestMeasure();\n            return false;\n        }\n        let startState = this.view.state;\n        let handled = applyDOMChange(this.view, domChange);\n        // The view wasn't updated\n        if (this.view.state == startState)\n            this.view.update([]);\n        return handled;\n    }\n    readMutation(rec) {\n        let cView = this.view.docView.nearest(rec.target);\n        if (!cView || cView.ignoreMutation(rec))\n            return null;\n        cView.markDirty(rec.type == \"attributes\");\n        if (rec.type == \"attributes\")\n            cView.flags |= 4 /* ViewFlag.AttrsDirty */;\n        if (rec.type == \"childList\") {\n            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);\n            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);\n            return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,\n                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };\n        }\n        else if (rec.type == \"characterData\") {\n            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };\n        }\n        else {\n            return null;\n        }\n    }\n    setWindow(win) {\n        if (win != this.win) {\n            this.removeWindowListeners(this.win);\n            this.win = win;\n            this.addWindowListeners(this.win);\n        }\n    }\n    addWindowListeners(win) {\n        win.addEventListener(\"resize\", this.onResize);\n        if (this.printQuery)\n            this.printQuery.addEventListener(\"change\", this.onPrint);\n        else\n            win.addEventListener(\"beforeprint\", this.onPrint);\n        win.addEventListener(\"scroll\", this.onScroll);\n        win.document.addEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n    removeWindowListeners(win) {\n        win.removeEventListener(\"scroll\", this.onScroll);\n        win.removeEventListener(\"resize\", this.onResize);\n        if (this.printQuery)\n            this.printQuery.removeEventListener(\"change\", this.onPrint);\n        else\n            win.removeEventListener(\"beforeprint\", this.onPrint);\n        win.document.removeEventListener(\"selectionchange\", this.onSelectionChange);\n    }\n    destroy() {\n        var _a, _b, _c;\n        this.stop();\n        (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();\n        (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();\n        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();\n        for (let dom of this.scrollTargets)\n            dom.removeEventListener(\"scroll\", this.onScroll);\n        this.removeWindowListeners(this.win);\n        clearTimeout(this.parentCheck);\n        clearTimeout(this.resizeTimeout);\n        this.win.cancelAnimationFrame(this.delayedFlush);\n        this.win.cancelAnimationFrame(this.flushingAndroidKey);\n    }\n}\nfunction findChild(cView, dom, dir) {\n    while (dom) {\n        let curView = ContentView.get(dom);\n        if (curView && curView.parent == cView)\n            return curView;\n        let parent = dom.parentNode;\n        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;\n    }\n    return null;\n}\nfunction buildSelectionRangeFromRange(view, range) {\n    let anchorNode = range.startContainer, anchorOffset = range.startOffset;\n    let focusNode = range.endContainer, focusOffset = range.endOffset;\n    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);\n    // Since such a range doesn't distinguish between anchor and head,\n    // use a heuristic that flips it around if its end matches the\n    // current anchor.\n    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))\n        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];\n    return { anchorNode, anchorOffset, focusNode, focusOffset };\n}\n// Used to work around a Safari Selection/shadow DOM bug (#414)\nfunction safariSelectionRangeHack(view, selection) {\n    if (selection.getComposedRanges) {\n        let range = selection.getComposedRanges(view.root)[0];\n        if (range)\n            return buildSelectionRangeFromRange(view, range);\n    }\n    let found = null;\n    // Because Safari (at least in 2018-2021) doesn't provide regular\n    // access to the selection inside a shadowroot, we have to perform a\n    // ridiculous hack to get at it—using `execCommand` to trigger a\n    // `beforeInput` event so that we can read the target range from the\n    // event.\n    function read(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        found = event.getTargetRanges()[0];\n    }\n    view.contentDOM.addEventListener(\"beforeinput\", read, true);\n    view.dom.ownerDocument.execCommand(\"indent\");\n    view.contentDOM.removeEventListener(\"beforeinput\", read, true);\n    return found ? buildSelectionRangeFromRange(view, found) : null;\n}\n\n// The editor's update state machine looks something like this:\n//\n//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle\n//                                         ↑      ↓\n//                                         Updating (measure)\n//\n// The difference between 'Idle' and 'Idle (unchecked)' lies in\n// whether a layout check has been scheduled. A regular update through\n// the `update` method updates the DOM in a write-only fashion, and\n// relies on a check (scheduled with `requestAnimationFrame`) to make\n// sure everything is where it should be and the viewport covers the\n// visible code. That check continues to measure and then optionally\n// update until it reaches a coherent state.\n/**\nAn editor view represents the editor's user interface. It holds\nthe editable DOM surface, and possibly other elements such as the\nline number gutter. It handles events and dispatches state\ntransactions for editing actions.\n*/\nclass EditorView {\n    /**\n    The current editor state.\n    */\n    get state() { return this.viewState.state; }\n    /**\n    To be able to display large documents without consuming too much\n    memory or overloading the browser, CodeMirror only draws the\n    code that is visible (plus a margin around it) to the DOM. This\n    property tells you the extent of the current drawn viewport, in\n    document positions.\n    */\n    get viewport() { return this.viewState.viewport; }\n    /**\n    When there are, for example, large collapsed ranges in the\n    viewport, its size can be a lot bigger than the actual visible\n    content. Thus, if you are doing something like styling the\n    content in the viewport, it is preferable to only do so for\n    these ranges, which are the subset of the viewport that is\n    actually drawn.\n    */\n    get visibleRanges() { return this.viewState.visibleRanges; }\n    /**\n    Returns false when the editor is entirely scrolled out of view\n    or otherwise hidden.\n    */\n    get inView() { return this.viewState.inView; }\n    /**\n    Indicates whether the user is currently composing text via\n    [IME](https://en.wikipedia.org/wiki/Input_method), and at least\n    one change has been made in the current composition.\n    */\n    get composing() { return this.inputState.composing > 0; }\n    /**\n    Indicates whether the user is currently in composing state. Note\n    that on some platforms, like Android, this will be the case a\n    lot, since just putting the cursor on a word starts a\n    composition there.\n    */\n    get compositionStarted() { return this.inputState.composing >= 0; }\n    /**\n    The document or shadow root that the view lives in.\n    */\n    get root() { return this._root; }\n    /**\n    @internal\n    */\n    get win() { return this.dom.ownerDocument.defaultView || window; }\n    /**\n    Construct a new view. You'll want to either provide a `parent`\n    option, or put `view.dom` into your document after creating a\n    view, so that the user can see the editor.\n    */\n    constructor(config = {}) {\n        this.plugins = [];\n        this.pluginMap = new Map;\n        this.editorAttrs = {};\n        this.contentAttrs = {};\n        this.bidiCache = [];\n        this.destroyed = false;\n        /**\n        @internal\n        */\n        this.updateState = 2 /* UpdateState.Updating */;\n        /**\n        @internal\n        */\n        this.measureScheduled = -1;\n        /**\n        @internal\n        */\n        this.measureRequests = [];\n        this.contentDOM = document.createElement(\"div\");\n        this.scrollDOM = document.createElement(\"div\");\n        this.scrollDOM.tabIndex = -1;\n        this.scrollDOM.className = \"cm-scroller\";\n        this.scrollDOM.appendChild(this.contentDOM);\n        this.announceDOM = document.createElement(\"div\");\n        this.announceDOM.className = \"cm-announced\";\n        this.announceDOM.setAttribute(\"aria-live\", \"polite\");\n        this.dom = document.createElement(\"div\");\n        this.dom.appendChild(this.announceDOM);\n        this.dom.appendChild(this.scrollDOM);\n        if (config.parent)\n            config.parent.appendChild(this.dom);\n        let { dispatch } = config;\n        this.dispatchTransactions = config.dispatchTransactions ||\n            (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||\n            ((trs) => this.update(trs));\n        this.dispatch = this.dispatch.bind(this);\n        this._root = (config.root || getRoot(config.parent) || document);\n        this.viewState = new ViewState(config.state || EditorState.create(config));\n        if (config.scrollTo && config.scrollTo.is(scrollIntoView))\n            this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);\n        this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));\n        for (let plugin of this.plugins)\n            plugin.update(this);\n        this.observer = new DOMObserver(this);\n        this.inputState = new InputState(this);\n        this.inputState.ensureHandlers(this.plugins);\n        this.docView = new DocView(this);\n        this.mountStyles();\n        this.updateAttrs();\n        this.updateState = 0 /* UpdateState.Idle */;\n        this.requestMeasure();\n    }\n    dispatch(...input) {\n        let trs = input.length == 1 && input[0] instanceof Transaction ? input\n            : input.length == 1 && Array.isArray(input[0]) ? input[0]\n                : [this.state.update(...input)];\n        this.dispatchTransactions(trs, this);\n    }\n    /**\n    Update the view for the given array of transactions. This will\n    update the visible document and selection to match the state\n    produced by the transactions, and notify view plugins of the\n    change. You should usually call\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this\n    as a primitive.\n    */\n    update(transactions) {\n        if (this.updateState != 0 /* UpdateState.Idle */)\n            throw new Error(\"Calls to EditorView.update are not allowed while an update is in progress\");\n        let redrawn = false, attrsChanged = false, update;\n        let state = this.state;\n        for (let tr of transactions) {\n            if (tr.startState != state)\n                throw new RangeError(\"Trying to update state with a transaction that doesn't start from the previous state.\");\n            state = tr.state;\n        }\n        if (this.destroyed) {\n            this.viewState.state = state;\n            return;\n        }\n        let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;\n        if (transactions.some(tr => tr.annotation(isFocusChange))) {\n            this.inputState.notifiedFocused = focus;\n            // If a focus-change transaction is being dispatched, set this update flag.\n            focusFlag = 1 /* UpdateFlag.Focus */;\n        }\n        else if (focus != this.inputState.notifiedFocused) {\n            this.inputState.notifiedFocused = focus;\n            // Schedule a separate focus transaction if necessary, otherwise\n            // add a flag to this update\n            dispatchFocus = focusChangeTransaction(state, focus);\n            if (!dispatchFocus)\n                focusFlag = 1 /* UpdateFlag.Focus */;\n        }\n        // If there was a pending DOM change, eagerly read it and try to\n        // apply it after the given transactions.\n        let pendingKey = this.observer.delayedAndroidKey, domChange = null;\n        if (pendingKey) {\n            this.observer.clearDelayedAndroidKey();\n            domChange = this.observer.readChange();\n            // Only try to apply DOM changes if the transactions didn't\n            // change the doc or selection.\n            if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))\n                domChange = null;\n        }\n        else {\n            this.observer.clear();\n        }\n        // When the phrases change, redraw the editor\n        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))\n            return this.setState(state);\n        update = ViewUpdate.create(this, state, transactions);\n        update.flags |= focusFlag;\n        let scrollTarget = this.viewState.scrollTarget;\n        try {\n            this.updateState = 2 /* UpdateState.Updating */;\n            for (let tr of transactions) {\n                if (scrollTarget)\n                    scrollTarget = scrollTarget.map(tr.changes);\n                if (tr.scrollIntoView) {\n                    let { main } = tr.state.selection;\n                    scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));\n                }\n                for (let e of tr.effects)\n                    if (e.is(scrollIntoView))\n                        scrollTarget = e.value.clip(this.state);\n            }\n            this.viewState.update(update, scrollTarget);\n            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);\n            if (!update.empty) {\n                this.updatePlugins(update);\n                this.inputState.update(update);\n            }\n            redrawn = this.docView.update(update);\n            if (this.state.facet(styleModule) != this.styleModules)\n                this.mountStyles();\n            attrsChanged = this.updateAttrs();\n            this.showAnnouncements(transactions);\n            this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent(\"select.pointer\")));\n        }\n        finally {\n            this.updateState = 0 /* UpdateState.Idle */;\n        }\n        if (update.startState.facet(theme) != update.state.facet(theme))\n            this.viewState.mustMeasureContent = true;\n        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)\n            this.requestMeasure();\n        if (redrawn)\n            this.docViewUpdate();\n        if (!update.empty)\n            for (let listener of this.state.facet(updateListener)) {\n                try {\n                    listener(update);\n                }\n                catch (e) {\n                    logException(this.state, e, \"update listener\");\n                }\n            }\n        if (dispatchFocus || domChange)\n            Promise.resolve().then(() => {\n                if (dispatchFocus && this.state == dispatchFocus.startState)\n                    this.dispatch(dispatchFocus);\n                if (domChange) {\n                    if (!applyDOMChange(this, domChange) && pendingKey.force)\n                        dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);\n                }\n            });\n    }\n    /**\n    Reset the view to the given state. (This will cause the entire\n    document to be redrawn and all view plugins to be reinitialized,\n    so you should probably only use it when the new state isn't\n    derived from the old state. Otherwise, use\n    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)\n    */\n    setState(newState) {\n        if (this.updateState != 0 /* UpdateState.Idle */)\n            throw new Error(\"Calls to EditorView.setState are not allowed while an update is in progress\");\n        if (this.destroyed) {\n            this.viewState.state = newState;\n            return;\n        }\n        this.updateState = 2 /* UpdateState.Updating */;\n        let hadFocus = this.hasFocus;\n        try {\n            for (let plugin of this.plugins)\n                plugin.destroy(this);\n            this.viewState = new ViewState(newState);\n            this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));\n            this.pluginMap.clear();\n            for (let plugin of this.plugins)\n                plugin.update(this);\n            this.docView.destroy();\n            this.docView = new DocView(this);\n            this.inputState.ensureHandlers(this.plugins);\n            this.mountStyles();\n            this.updateAttrs();\n            this.bidiCache = [];\n        }\n        finally {\n            this.updateState = 0 /* UpdateState.Idle */;\n        }\n        if (hadFocus)\n            this.focus();\n        this.requestMeasure();\n    }\n    updatePlugins(update) {\n        let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);\n        if (prevSpecs != specs) {\n            let newPlugins = [];\n            for (let spec of specs) {\n                let found = prevSpecs.indexOf(spec);\n                if (found < 0) {\n                    newPlugins.push(new PluginInstance(spec));\n                }\n                else {\n                    let plugin = this.plugins[found];\n                    plugin.mustUpdate = update;\n                    newPlugins.push(plugin);\n                }\n            }\n            for (let plugin of this.plugins)\n                if (plugin.mustUpdate != update)\n                    plugin.destroy(this);\n            this.plugins = newPlugins;\n            this.pluginMap.clear();\n        }\n        else {\n            for (let p of this.plugins)\n                p.mustUpdate = update;\n        }\n        for (let i = 0; i < this.plugins.length; i++)\n            this.plugins[i].update(this);\n        if (prevSpecs != specs)\n            this.inputState.ensureHandlers(this.plugins);\n    }\n    docViewUpdate() {\n        for (let plugin of this.plugins) {\n            let val = plugin.value;\n            if (val && val.docViewUpdate) {\n                try {\n                    val.docViewUpdate(this);\n                }\n                catch (e) {\n                    logException(this.state, e, \"doc view update listener\");\n                }\n            }\n        }\n    }\n    /**\n    @internal\n    */\n    measure(flush = true) {\n        if (this.destroyed)\n            return;\n        if (this.measureScheduled > -1)\n            this.win.cancelAnimationFrame(this.measureScheduled);\n        if (this.observer.delayedAndroidKey) {\n            this.measureScheduled = -1;\n            this.requestMeasure();\n            return;\n        }\n        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame\n        if (flush)\n            this.observer.forceFlush();\n        let updated = null;\n        let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;\n        let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;\n        if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)\n            scrollAnchorHeight = -1;\n        this.viewState.scrollAnchorHeight = -1;\n        try {\n            for (let i = 0;; i++) {\n                if (scrollAnchorHeight < 0) {\n                    if (isScrolledToBottom(sDOM)) {\n                        scrollAnchorPos = -1;\n                        scrollAnchorHeight = this.viewState.heightMap.height;\n                    }\n                    else {\n                        let block = this.viewState.scrollAnchorAt(scrollTop);\n                        scrollAnchorPos = block.from;\n                        scrollAnchorHeight = block.top;\n                    }\n                }\n                this.updateState = 1 /* UpdateState.Measuring */;\n                let changed = this.viewState.measure(this);\n                if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)\n                    break;\n                if (i > 5) {\n                    console.warn(this.measureRequests.length\n                        ? \"Measure loop restarted more than 5 times\"\n                        : \"Viewport failed to stabilize\");\n                    break;\n                }\n                let measuring = [];\n                // Only run measure requests in this cycle when the viewport didn't change\n                if (!(changed & 4 /* UpdateFlag.Viewport */))\n                    [this.measureRequests, measuring] = [measuring, this.measureRequests];\n                let measured = measuring.map(m => {\n                    try {\n                        return m.read(this);\n                    }\n                    catch (e) {\n                        logException(this.state, e);\n                        return BadMeasure;\n                    }\n                });\n                let update = ViewUpdate.create(this, this.state, []), redrawn = false;\n                update.flags |= changed;\n                if (!updated)\n                    updated = update;\n                else\n                    updated.flags |= changed;\n                this.updateState = 2 /* UpdateState.Updating */;\n                if (!update.empty) {\n                    this.updatePlugins(update);\n                    this.inputState.update(update);\n                    this.updateAttrs();\n                    redrawn = this.docView.update(update);\n                    if (redrawn)\n                        this.docViewUpdate();\n                }\n                for (let i = 0; i < measuring.length; i++)\n                    if (measured[i] != BadMeasure) {\n                        try {\n                            let m = measuring[i];\n                            if (m.write)\n                                m.write(measured[i], this);\n                        }\n                        catch (e) {\n                            logException(this.state, e);\n                        }\n                    }\n                if (redrawn)\n                    this.docView.updateSelection(true);\n                if (!update.viewportChanged && this.measureRequests.length == 0) {\n                    if (this.viewState.editorHeight) {\n                        if (this.viewState.scrollTarget) {\n                            this.docView.scrollIntoView(this.viewState.scrollTarget);\n                            this.viewState.scrollTarget = null;\n                            scrollAnchorHeight = -1;\n                            continue;\n                        }\n                        else {\n                            let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :\n                                this.viewState.lineBlockAt(scrollAnchorPos).top;\n                            let diff = newAnchorHeight - scrollAnchorHeight;\n                            if (diff > 1 || diff < -1) {\n                                scrollTop = scrollTop + diff;\n                                sDOM.scrollTop = scrollTop / this.scaleY;\n                                scrollAnchorHeight = -1;\n                                continue;\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        finally {\n            this.updateState = 0 /* UpdateState.Idle */;\n            this.measureScheduled = -1;\n        }\n        if (updated && !updated.empty)\n            for (let listener of this.state.facet(updateListener))\n                listener(updated);\n    }\n    /**\n    Get the CSS classes for the currently active editor themes.\n    */\n    get themeClasses() {\n        return baseThemeID + \" \" +\n            (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + \" \" +\n            this.state.facet(theme);\n    }\n    updateAttrs() {\n        let editorAttrs = attrsFromFacet(this, editorAttributes, {\n            class: \"cm-editor\" + (this.hasFocus ? \" cm-focused \" : \" \") + this.themeClasses\n        });\n        let contentAttrs = {\n            spellcheck: \"false\",\n            autocorrect: \"off\",\n            autocapitalize: \"off\",\n            translate: \"no\",\n            contenteditable: !this.state.facet(editable) ? \"false\" : \"true\",\n            class: \"cm-content\",\n            style: `${browser.tabSize}: ${this.state.tabSize}`,\n            role: \"textbox\",\n            \"aria-multiline\": \"true\"\n        };\n        if (this.state.readOnly)\n            contentAttrs[\"aria-readonly\"] = \"true\";\n        attrsFromFacet(this, contentAttributes, contentAttrs);\n        let changed = this.observer.ignore(() => {\n            let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);\n            let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);\n            return changedContent || changedEditor;\n        });\n        this.editorAttrs = editorAttrs;\n        this.contentAttrs = contentAttrs;\n        return changed;\n    }\n    showAnnouncements(trs) {\n        let first = true;\n        for (let tr of trs)\n            for (let effect of tr.effects)\n                if (effect.is(EditorView.announce)) {\n                    if (first)\n                        this.announceDOM.textContent = \"\";\n                    first = false;\n                    let div = this.announceDOM.appendChild(document.createElement(\"div\"));\n                    div.textContent = effect.value;\n                }\n    }\n    mountStyles() {\n        this.styleModules = this.state.facet(styleModule);\n        let nonce = this.state.facet(EditorView.cspNonce);\n        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : undefined);\n    }\n    readMeasured() {\n        if (this.updateState == 2 /* UpdateState.Updating */)\n            throw new Error(\"Reading the editor layout isn't allowed during an update\");\n        if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)\n            this.measure(false);\n    }\n    /**\n    Schedule a layout measurement, optionally providing callbacks to\n    do custom DOM measuring followed by a DOM write phase. Using\n    this is preferable reading DOM layout directly from, for\n    example, an event handler, because it'll make sure measuring and\n    drawing done by other components is synchronized, avoiding\n    unnecessary DOM layout computations.\n    */\n    requestMeasure(request) {\n        if (this.measureScheduled < 0)\n            this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());\n        if (request) {\n            if (this.measureRequests.indexOf(request) > -1)\n                return;\n            if (request.key != null)\n                for (let i = 0; i < this.measureRequests.length; i++) {\n                    if (this.measureRequests[i].key === request.key) {\n                        this.measureRequests[i] = request;\n                        return;\n                    }\n                }\n            this.measureRequests.push(request);\n        }\n    }\n    /**\n    Get the value of a specific plugin, if present. Note that\n    plugins that crash can be dropped from a view, so even when you\n    know you registered a given plugin, it is recommended to check\n    the return value of this method.\n    */\n    plugin(plugin) {\n        let known = this.pluginMap.get(plugin);\n        if (known === undefined || known && known.spec != plugin)\n            this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);\n        return known && known.update(this).value;\n    }\n    /**\n    The top position of the document, in screen coordinates. This\n    may be negative when the editor is scrolled down. Points\n    directly to the top of the first line, not above the padding.\n    */\n    get documentTop() {\n        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;\n    }\n    /**\n    Reports the padding above and below the document.\n    */\n    get documentPadding() {\n        return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };\n    }\n    /**\n    If the editor is transformed with CSS, this provides the scale\n    along the X axis. Otherwise, it will just be 1. Note that\n    transforms other than translation and scaling are not supported.\n    */\n    get scaleX() { return this.viewState.scaleX; }\n    /**\n    Provide the CSS transformed scale along the Y axis.\n    */\n    get scaleY() { return this.viewState.scaleY; }\n    /**\n    Find the text line or block widget at the given vertical\n    position (which is interpreted as relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).\n    */\n    elementAtHeight(height) {\n        this.readMeasured();\n        return this.viewState.elementAtHeight(height);\n    }\n    /**\n    Find the line block (see\n    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given\n    height, again interpreted relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).\n    */\n    lineBlockAtHeight(height) {\n        this.readMeasured();\n        return this.viewState.lineBlockAtHeight(height);\n    }\n    /**\n    Get the extent and vertical position of all [line\n    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions\n    are relative to the [top of the\n    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);\n    */\n    get viewportLineBlocks() {\n        return this.viewState.viewportLines;\n    }\n    /**\n    Find the line block around the given document position. A line\n    block is a range delimited on both sides by either a\n    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the\n    start/end of the document. It will usually just hold a line of\n    text, but may be broken into multiple textblocks by block\n    widgets.\n    */\n    lineBlockAt(pos) {\n        return this.viewState.lineBlockAt(pos);\n    }\n    /**\n    The editor's total content height.\n    */\n    get contentHeight() {\n        return this.viewState.contentHeight;\n    }\n    /**\n    Move a cursor position by [grapheme\n    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether\n    the motion is away from the line start, or towards it. In\n    bidirectional text, the line is traversed in visual order, using\n    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).\n    When the start position was the last one on the line, the\n    returned position will be across the line break. If there is no\n    further line, the original position is returned.\n    \n    By default, this method moves over a single cluster. The\n    optional `by` argument can be used to move across more. It will\n    be called with the first cluster as argument, and should return\n    a predicate that determines, for each subsequent cluster,\n    whether it should also be moved over.\n    */\n    moveByChar(start, forward, by) {\n        return skipAtoms(this, start, moveByChar(this, start, forward, by));\n    }\n    /**\n    Move a cursor position across the next group of either\n    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter\n    non-whitespace characters.\n    */\n    moveByGroup(start, forward) {\n        return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));\n    }\n    /**\n    Get the cursor position visually at the start or end of a line.\n    Note that this may differ from the _logical_ position at its\n    start or end (which is simply at `line.from`/`line.to`) if text\n    at the start or end goes against the line's base text direction.\n    */\n    visualLineSide(line, end) {\n        let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);\n        let span = order[end ? order.length - 1 : 0];\n        return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);\n    }\n    /**\n    Move to the next line boundary in the given direction. If\n    `includeWrap` is true, line wrapping is on, and there is a\n    further wrap point on the current line, the wrap point will be\n    returned. Otherwise this function will return the start or end\n    of the line.\n    */\n    moveToLineBoundary(start, forward, includeWrap = true) {\n        return moveToLineBoundary(this, start, forward, includeWrap);\n    }\n    /**\n    Move a cursor position vertically. When `distance` isn't given,\n    it defaults to moving to the next line (including wrapped\n    lines). Otherwise, `distance` should provide a positive distance\n    in pixels.\n    \n    When `start` has a\n    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical\n    motion will use that as a target horizontal position. Otherwise,\n    the cursor's own horizontal position is used. The returned\n    cursor will have its goal column set to whichever column was\n    used.\n    */\n    moveVertically(start, forward, distance) {\n        return skipAtoms(this, start, moveVertically(this, start, forward, distance));\n    }\n    /**\n    Find the DOM parent node and offset (child offset if `node` is\n    an element, character offset when it is a text node) at the\n    given document position.\n    \n    Note that for positions that aren't currently in\n    `visibleRanges`, the resulting DOM position isn't necessarily\n    meaningful (it may just point before or after a placeholder\n    element).\n    */\n    domAtPos(pos) {\n        return this.docView.domAtPos(pos);\n    }\n    /**\n    Find the document position at the given DOM node. Can be useful\n    for associating positions with DOM events. Will raise an error\n    when `node` isn't part of the editor content.\n    */\n    posAtDOM(node, offset = 0) {\n        return this.docView.posFromDOM(node, offset);\n    }\n    posAtCoords(coords, precise = true) {\n        this.readMeasured();\n        return posAtCoords(this, coords, precise);\n    }\n    /**\n    Get the screen coordinates at the given document position.\n    `side` determines whether the coordinates are based on the\n    element before (-1) or after (1) the position (if no element is\n    available on the given side, the method will transparently use\n    another strategy to get reasonable coordinates).\n    */\n    coordsAtPos(pos, side = 1) {\n        this.readMeasured();\n        let rect = this.docView.coordsAt(pos, side);\n        if (!rect || rect.left == rect.right)\n            return rect;\n        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);\n        let span = order[BidiSpan.find(order, pos - line.from, -1, side)];\n        return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));\n    }\n    /**\n    Return the rectangle around a given character. If `pos` does not\n    point in front of a character that is in the viewport and\n    rendered (i.e. not replaced, not a line break), this will return\n    null. For space characters that are a line wrap point, this will\n    return the position before the line break.\n    */\n    coordsForChar(pos) {\n        this.readMeasured();\n        return this.docView.coordsForChar(pos);\n    }\n    /**\n    The default width of a character in the editor. May not\n    accurately reflect the width of all characters (given variable\n    width fonts or styling of invididual ranges).\n    */\n    get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }\n    /**\n    The default height of a line in the editor. May not be accurate\n    for all lines.\n    */\n    get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }\n    /**\n    The text direction\n    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)\n    CSS property) of the editor's content element.\n    */\n    get textDirection() { return this.viewState.defaultTextDirection; }\n    /**\n    Find the text direction of the block at the given position, as\n    assigned by CSS. If\n    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)\n    isn't enabled, or the given position is outside of the viewport,\n    this will always return the same as\n    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that\n    this may trigger a DOM layout.\n    */\n    textDirectionAt(pos) {\n        let perLine = this.state.facet(perLineTextDirection);\n        if (!perLine || pos < this.viewport.from || pos > this.viewport.to)\n            return this.textDirection;\n        this.readMeasured();\n        return this.docView.textDirectionAt(pos);\n    }\n    /**\n    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)\n    (as determined by the\n    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)\n    CSS property of its content element).\n    */\n    get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }\n    /**\n    Returns the bidirectional text structure of the given line\n    (which should be in the current document) as an array of span\n    objects. The order of these spans matches the [text\n    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is\n    left-to-right, the leftmost spans come first, otherwise the\n    rightmost spans come first.\n    */\n    bidiSpans(line) {\n        if (line.length > MaxBidiLine)\n            return trivialOrder(line.length);\n        let dir = this.textDirectionAt(line.from), isolates;\n        for (let entry of this.bidiCache) {\n            if (entry.from == line.from && entry.dir == dir &&\n                (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))\n                return entry.order;\n        }\n        if (!isolates)\n            isolates = getIsolatedRanges(this, line);\n        let order = computeOrder(line.text, dir, isolates);\n        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));\n        return order;\n    }\n    /**\n    Check whether the editor has focus.\n    */\n    get hasFocus() {\n        var _a;\n        // Safari return false for hasFocus when the context menu is open\n        // or closing, which leads us to ignore selection changes from the\n        // context menu because it looks like the editor isn't focused.\n        // This kludges around that.\n        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&\n            this.root.activeElement == this.contentDOM;\n    }\n    /**\n    Put focus on the editor.\n    */\n    focus() {\n        this.observer.ignore(() => {\n            focusPreventScroll(this.contentDOM);\n            this.docView.updateSelection();\n        });\n    }\n    /**\n    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only\n    necessary when moving the editor's existing DOM to a new window or shadow root.\n    */\n    setRoot(root) {\n        if (this._root != root) {\n            this._root = root;\n            this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);\n            this.mountStyles();\n        }\n    }\n    /**\n    Clean up this editor view, removing its element from the\n    document, unregistering event handlers, and notifying\n    plugins. The view instance can no longer be used after\n    calling this.\n    */\n    destroy() {\n        for (let plugin of this.plugins)\n            plugin.destroy(this);\n        this.plugins = [];\n        this.inputState.destroy();\n        this.docView.destroy();\n        this.dom.remove();\n        this.observer.destroy();\n        if (this.measureScheduled > -1)\n            this.win.cancelAnimationFrame(this.measureScheduled);\n        this.destroyed = true;\n    }\n    /**\n    Returns an effect that can be\n    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to\n    cause it to scroll the given position or range into view.\n    */\n    static scrollIntoView(pos, options = {}) {\n        return scrollIntoView.of(new ScrollTarget(typeof pos == \"number\" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));\n    }\n    /**\n    Return an effect that resets the editor to its current (at the\n    time this method was called) scroll position. Note that this\n    only affects the editor's own scrollable element, not parents.\n    See also\n    [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).\n    \n    The effect should be used with a document identical to the one\n    it was created for. Failing to do so is not an error, but may\n    not scroll to the expected position. You can\n    [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.\n    */\n    scrollSnapshot() {\n        let { scrollTop, scrollLeft } = this.scrollDOM;\n        let ref = this.viewState.scrollAnchorAt(scrollTop);\n        return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), \"start\", \"start\", ref.top - scrollTop, scrollLeft, true));\n    }\n    /**\n    Returns an extension that can be used to add DOM event handlers.\n    The value should be an object mapping event names to handler\n    functions. For any given event, such functions are ordered by\n    extension precedence, and the first handler to return true will\n    be assumed to have handled that event, and no other handlers or\n    built-in behavior will be activated for it. These are registered\n    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except\n    for `scroll` handlers, which will be called any time the\n    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of\n    its parent nodes is scrolled.\n    */\n    static domEventHandlers(handlers) {\n        return ViewPlugin.define(() => ({}), { eventHandlers: handlers });\n    }\n    /**\n    Create an extension that registers DOM event observers. Contrary\n    to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),\n    observers can't be prevented from running by a higher-precedence\n    handler returning true. They also don't prevent other handlers\n    and observers from running when they return true, and should not\n    call `preventDefault`.\n    */\n    static domEventObservers(observers) {\n        return ViewPlugin.define(() => ({}), { eventObservers: observers });\n    }\n    /**\n    Create a theme extension. The first argument can be a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)\n    style spec providing the styles for the theme. These will be\n    prefixed with a generated class for the style.\n    \n    Because the selectors will be prefixed with a scope class, rule\n    that directly match the editor's [wrapper\n    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be\n    added—need to be explicitly differentiated by adding an `&` to\n    the selector for that element—for example\n    `&.cm-focused`.\n    \n    When `dark` is set to true, the theme will be marked as dark,\n    which will cause the `&dark` rules from [base\n    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to\n    `&light` when a light theme is active).\n    */\n    static theme(spec, options) {\n        let prefix = StyleModule.newName();\n        let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];\n        if (options && options.dark)\n            result.push(darkTheme.of(true));\n        return result;\n    }\n    /**\n    Create an extension that adds styles to the base theme. Like\n    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the\n    place of the editor wrapper element when directly targeting\n    that. You can also use `&dark` or `&light` instead to only\n    target editors with a dark or light theme.\n    */\n    static baseTheme(spec) {\n        return Prec.lowest(styleModule.of(buildTheme(\".\" + baseThemeID, spec, lightDarkIDs)));\n    }\n    /**\n    Retrieve an editor view instance from the view's DOM\n    representation.\n    */\n    static findFromDOM(dom) {\n        var _a;\n        let content = dom.querySelector(\".cm-content\");\n        let cView = content && ContentView.get(content) || ContentView.get(dom);\n        return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;\n    }\n}\n/**\nFacet to add a [style\nmodule](https://github.com/marijnh/style-mod#documentation) to\nan editor view. The view will ensure that the module is\nmounted in its [document\nroot](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).\n*/\nEditorView.styleModule = styleModule;\n/**\nAn input handler can override the way changes to the editable\nDOM content are handled. Handlers are passed the document\npositions between which the change was found, and the new\ncontent. When one returns true, no further input handlers are\ncalled and the default behavior is prevented.\n\nThe `insert` argument can be used to get the default transaction\nthat would be applied for this input. This can be useful when\ndispatching the custom behavior as a separate transaction.\n*/\nEditorView.inputHandler = inputHandler;\n/**\nScroll handlers can override how things are scrolled into view.\nIf they return `true`, no further handling happens for the\nscrolling. If they return false, the default scroll behavior is\napplied. Scroll handlers should never initiate editor updates.\n*/\nEditorView.scrollHandler = scrollHandler;\n/**\nThis facet can be used to provide functions that create effects\nto be dispatched when the editor's focus state changes.\n*/\nEditorView.focusChangeEffect = focusChangeEffect;\n/**\nBy default, the editor assumes all its content has the same\n[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`\nvalue to make it read the text direction of every (rendered)\nline separately.\n*/\nEditorView.perLineTextDirection = perLineTextDirection;\n/**\nAllows you to provide a function that should be called when the\nlibrary catches an exception from an extension (mostly from view\nplugins, but may be used by other extensions to route exceptions\nfrom user-code-provided callbacks). This is mostly useful for\ndebugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).\n*/\nEditorView.exceptionSink = exceptionSink;\n/**\nA facet that can be used to register a function to be called\nevery time the view updates.\n*/\nEditorView.updateListener = updateListener;\n/**\nFacet that controls whether the editor content DOM is editable.\nWhen its highest-precedence value is `false`, the element will\nnot have its `contenteditable` attribute set. (Note that this\ndoesn't affect API calls that change the editor content, even\nwhen those are bound to keys or buttons. See the\n[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)\n*/\nEditorView.editable = editable;\n/**\nAllows you to influence the way mouse selection happens. The\nfunctions in this facet will be called for a `mousedown` event\non the editor, and can return an object that overrides the way a\nselection is computed from that mouse click or drag.\n*/\nEditorView.mouseSelectionStyle = mouseSelectionStyle;\n/**\nFacet used to configure whether a given selection drag event\nshould move or copy the selection. The given predicate will be\ncalled with the `mousedown` event, and can return `true` when\nthe drag should move the content.\n*/\nEditorView.dragMovesSelection = dragMovesSelection$1;\n/**\nFacet used to configure whether a given selecting click adds a\nnew range to the existing selection or replaces it entirely. The\ndefault behavior is to check `event.metaKey` on macOS, and\n`event.ctrlKey` elsewhere.\n*/\nEditorView.clickAddsSelectionRange = clickAddsSelectionRange;\n/**\nA facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)\nare shown in the view. Decorations can be provided in two\nways—directly, or via a function that takes an editor view.\n\nOnly decoration sets provided directly are allowed to influence\nthe editor's vertical layout structure. The ones provided as\nfunctions are called _after_ the new viewport has been computed,\nand thus **must not** introduce block widgets or replacing\ndecorations that cover line breaks.\n\nIf you want decorated ranges to behave like atomic units for\ncursor motion and deletion purposes, also provide the range set\ncontaining the decorations to\n[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).\n*/\nEditorView.decorations = decorations;\n/**\nFacet that works much like\n[`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its\ninputs at the very bottom of the precedence stack, meaning mark\ndecorations provided here will only be split by other, partially\noverlapping \\`outerDecorations\\` ranges, and wrap around all\nregular decorations. Use this for mark elements that should, as\nmuch as possible, remain in one piece.\n*/\nEditorView.outerDecorations = outerDecorations;\n/**\nUsed to provide ranges that should be treated as atoms as far as\ncursor motion is concerned. This causes methods like\n[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and\n[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the\ncommands built on top of them) to skip across such regions when\na selection endpoint would enter them. This does _not_ prevent\ndirect programmatic [selection\nupdates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such\nregions.\n*/\nEditorView.atomicRanges = atomicRanges;\n/**\nWhen range decorations add a `unicode-bidi: isolate` style, they\nshould also include a\n[`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property\nin their decoration spec, and be exposed through this facet, so\nthat the editor can compute the proper text order. (Other values\nfor `unicode-bidi`, except of course `normal`, are not\nsupported.)\n*/\nEditorView.bidiIsolatedRanges = bidiIsolatedRanges;\n/**\nFacet that allows extensions to provide additional scroll\nmargins (space around the sides of the scrolling element that\nshould be considered invisible). This can be useful when the\nplugin introduces elements that cover part of that element (for\nexample a horizontally fixed gutter).\n*/\nEditorView.scrollMargins = scrollMargins;\n/**\nThis facet records whether a dark theme is active. The extension\nreturned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically\nincludes an instance of this when the `dark` option is set to\ntrue.\n*/\nEditorView.darkTheme = darkTheme;\n/**\nProvides a Content Security Policy nonce to use when creating\nthe style sheets for the editor. Holds the empty string when no\nnonce has been provided.\n*/\nEditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : \"\" });\n/**\nFacet that provides additional DOM attributes for the editor's\neditable DOM element.\n*/\nEditorView.contentAttributes = contentAttributes;\n/**\nFacet that provides DOM attributes for the editor's outer\nelement.\n*/\nEditorView.editorAttributes = editorAttributes;\n/**\nAn extension that enables line wrapping in the editor (by\nsetting CSS `white-space` to `pre-wrap` in the content).\n*/\nEditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ \"class\": \"cm-lineWrapping\" });\n/**\nState effect used to include screen reader announcements in a\ntransaction. These will be added to the DOM in a visually hidden\nelement with `aria-live=\"polite\"` set, and should be used to\ndescribe effects that are visually obvious but may not be\nnoticed by screen reader users (such as moving to the next\nsearch match).\n*/\nEditorView.announce = /*@__PURE__*/StateEffect.define();\n// Maximum line length for which we compute accurate bidi info\nconst MaxBidiLine = 4096;\nconst BadMeasure = {};\nclass CachedOrder {\n    constructor(from, to, dir, isolates, fresh, order) {\n        this.from = from;\n        this.to = to;\n        this.dir = dir;\n        this.isolates = isolates;\n        this.fresh = fresh;\n        this.order = order;\n    }\n    static update(cache, changes) {\n        if (changes.empty && !cache.some(c => c.fresh))\n            return cache;\n        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;\n        for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {\n            let entry = cache[i];\n            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))\n                result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));\n        }\n        return result;\n    }\n}\nfunction attrsFromFacet(view, facet, base) {\n    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {\n        let source = sources[i], value = typeof source == \"function\" ? source(view) : source;\n        if (value)\n            combineAttrs(value, base);\n    }\n    return base;\n}\n\nconst currentPlatform = browser.mac ? \"mac\" : browser.windows ? \"win\" : browser.linux ? \"linux\" : \"key\";\nfunction normalizeKeyName(name, platform) {\n    const parts = name.split(/-(?!$)/);\n    let result = parts[parts.length - 1];\n    if (result == \"Space\")\n        result = \" \";\n    let alt, ctrl, shift, meta;\n    for (let i = 0; i < parts.length - 1; ++i) {\n        const mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod))\n            meta = true;\n        else if (/^a(lt)?$/i.test(mod))\n            alt = true;\n        else if (/^(c|ctrl|control)$/i.test(mod))\n            ctrl = true;\n        else if (/^s(hift)?$/i.test(mod))\n            shift = true;\n        else if (/^mod$/i.test(mod)) {\n            if (platform == \"mac\")\n                meta = true;\n            else\n                ctrl = true;\n        }\n        else\n            throw new Error(\"Unrecognized modifier name: \" + mod);\n    }\n    if (alt)\n        result = \"Alt-\" + result;\n    if (ctrl)\n        result = \"Ctrl-\" + result;\n    if (meta)\n        result = \"Meta-\" + result;\n    if (shift)\n        result = \"Shift-\" + result;\n    return result;\n}\nfunction modifiers(name, event, shift) {\n    if (event.altKey)\n        name = \"Alt-\" + name;\n    if (event.ctrlKey)\n        name = \"Ctrl-\" + name;\n    if (event.metaKey)\n        name = \"Meta-\" + name;\n    if (shift !== false && event.shiftKey)\n        name = \"Shift-\" + name;\n    return name;\n}\nconst handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({\n    keydown(event, view) {\n        return runHandlers(getKeymap(view.state), event, view, \"editor\");\n    }\n}));\n/**\nFacet used for registering keymaps.\n\nYou can add multiple keymaps to an editor. Their priorities\ndetermine their precedence (the ones specified early or with high\npriority get checked first). When a handler has returned `true`\nfor a given key, no further handlers are called.\n*/\nconst keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });\nconst Keymaps = /*@__PURE__*/new WeakMap();\n// This is hidden behind an indirection, rather than directly computed\n// by the facet, to keep internal types out of the facet's type.\nfunction getKeymap(state) {\n    let bindings = state.facet(keymap);\n    let map = Keymaps.get(bindings);\n    if (!map)\n        Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));\n    return map;\n}\n/**\nRun the key handlers registered for a given scope. The event\nobject should be a `\"keydown\"` event. Returns true if any of the\nhandlers handled it.\n*/\nfunction runScopeHandlers(view, event, scope) {\n    return runHandlers(getKeymap(view.state), event, view, scope);\n}\nlet storedPrefix = null;\nconst PrefixTimeout = 4000;\nfunction buildKeymap(bindings, platform = currentPlatform) {\n    let bound = Object.create(null);\n    let isPrefix = Object.create(null);\n    let checkPrefix = (name, is) => {\n        let current = isPrefix[name];\n        if (current == null)\n            isPrefix[name] = is;\n        else if (current != is)\n            throw new Error(\"Key binding \" + name + \" is used both as a regular binding and as a multi-stroke prefix\");\n    };\n    let add = (scope, key, command, preventDefault, stopPropagation) => {\n        var _a, _b;\n        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\n        let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));\n        for (let i = 1; i < parts.length; i++) {\n            let prefix = parts.slice(0, i).join(\" \");\n            checkPrefix(prefix, true);\n            if (!scopeObj[prefix])\n                scopeObj[prefix] = {\n                    preventDefault: true,\n                    stopPropagation: false,\n                    run: [(view) => {\n                            let ourObj = storedPrefix = { view, prefix, scope };\n                            setTimeout(() => { if (storedPrefix == ourObj)\n                                storedPrefix = null; }, PrefixTimeout);\n                            return true;\n                        }]\n                };\n        }\n        let full = parts.join(\" \");\n        checkPrefix(full, false);\n        let binding = scopeObj[full] || (scopeObj[full] = {\n            preventDefault: false,\n            stopPropagation: false,\n            run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []\n        });\n        if (command)\n            binding.run.push(command);\n        if (preventDefault)\n            binding.preventDefault = true;\n        if (stopPropagation)\n            binding.stopPropagation = true;\n    };\n    for (let b of bindings) {\n        let scopes = b.scope ? b.scope.split(\" \") : [\"editor\"];\n        if (b.any)\n            for (let scope of scopes) {\n                let scopeObj = bound[scope] || (bound[scope] = Object.create(null));\n                if (!scopeObj._any)\n                    scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };\n                for (let key in scopeObj)\n                    scopeObj[key].run.push(b.any);\n            }\n        let name = b[platform] || b.key;\n        if (!name)\n            continue;\n        for (let scope of scopes) {\n            add(scope, name, b.run, b.preventDefault, b.stopPropagation);\n            if (b.shift)\n                add(scope, \"Shift-\" + name, b.shift, b.preventDefault, b.stopPropagation);\n        }\n    }\n    return bound;\n}\nfunction runHandlers(map, event, view, scope) {\n    let name = keyName(event);\n    let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != \" \";\n    let prefix = \"\", handled = false, prevented = false, stopPropagation = false;\n    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {\n        prefix = storedPrefix.prefix + \" \";\n        if (modifierCodes.indexOf(event.keyCode) < 0) {\n            prevented = true;\n            storedPrefix = null;\n        }\n    }\n    let ran = new Set;\n    let runFor = (binding) => {\n        if (binding) {\n            for (let cmd of binding.run)\n                if (!ran.has(cmd)) {\n                    ran.add(cmd);\n                    if (cmd(view, event)) {\n                        if (binding.stopPropagation)\n                            stopPropagation = true;\n                        return true;\n                    }\n                }\n            if (binding.preventDefault) {\n                if (binding.stopPropagation)\n                    stopPropagation = true;\n                prevented = true;\n            }\n        }\n        return false;\n    };\n    let scopeObj = map[scope], baseName, shiftName;\n    if (scopeObj) {\n        if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {\n            handled = true;\n        }\n        else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&\n            // Ctrl-Alt may be used for AltGr on Windows\n            !(browser.windows && event.ctrlKey && event.altKey) &&\n            (baseName = base[event.keyCode]) && baseName != name) {\n            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {\n                handled = true;\n            }\n            else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&\n                runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {\n                handled = true;\n            }\n        }\n        else if (isChar && event.shiftKey &&\n            runFor(scopeObj[prefix + modifiers(name, event, true)])) {\n            handled = true;\n        }\n        if (!handled && runFor(scopeObj._any))\n            handled = true;\n    }\n    if (prevented)\n        handled = true;\n    if (handled && stopPropagation)\n        event.stopPropagation();\n    return handled;\n}\n\n/**\nImplementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates\na rectangle at a given set of coordinates.\n*/\nclass RectangleMarker {\n    /**\n    Create a marker with the given class and dimensions. If `width`\n    is null, the DOM element will get no width style.\n    */\n    constructor(className, \n    /**\n    The left position of the marker (in pixels, document-relative).\n    */\n    left, \n    /**\n    The top position of the marker.\n    */\n    top, \n    /**\n    The width of the marker, or null if it shouldn't get a width assigned.\n    */\n    width, \n    /**\n    The height of the marker.\n    */\n    height) {\n        this.className = className;\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    draw() {\n        let elt = document.createElement(\"div\");\n        elt.className = this.className;\n        this.adjust(elt);\n        return elt;\n    }\n    update(elt, prev) {\n        if (prev.className != this.className)\n            return false;\n        this.adjust(elt);\n        return true;\n    }\n    adjust(elt) {\n        elt.style.left = this.left + \"px\";\n        elt.style.top = this.top + \"px\";\n        if (this.width != null)\n            elt.style.width = this.width + \"px\";\n        elt.style.height = this.height + \"px\";\n    }\n    eq(p) {\n        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&\n            this.className == p.className;\n    }\n    /**\n    Create a set of rectangles for the given selection range,\n    assigning them theclass`className`. Will create a single\n    rectangle for empty ranges, and a set of selection-style\n    rectangles covering the range's content (in a bidi-aware\n    way) for non-empty ones.\n    */\n    static forRange(view, className, range) {\n        if (range.empty) {\n            let pos = view.coordsAtPos(range.head, range.assoc || 1);\n            if (!pos)\n                return [];\n            let base = getBase(view);\n            return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];\n        }\n        else {\n            return rectanglesForRange(view, className, range);\n        }\n    }\n}\nfunction getBase(view) {\n    let rect = view.scrollDOM.getBoundingClientRect();\n    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;\n    return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };\n}\nfunction wrappedLine(view, pos, inside) {\n    let range = EditorSelection.cursor(pos);\n    return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),\n        to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),\n        type: BlockType.Text };\n}\nfunction rectanglesForRange(view, className, range) {\n    if (range.to <= view.viewport.from || range.from >= view.viewport.to)\n        return [];\n    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);\n    let ltr = view.textDirection == Direction.LTR;\n    let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);\n    let lineElt = content.querySelector(\".cm-line\"), lineStyle = lineElt && window.getComputedStyle(lineElt);\n    let leftSide = contentRect.left +\n        (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);\n    let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);\n    let startBlock = blockAt(view, from), endBlock = blockAt(view, to);\n    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;\n    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;\n    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))\n        visualStart = wrappedLine(view, from, visualStart);\n    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))\n        visualEnd = wrappedLine(view, to, visualEnd);\n    if (visualStart && visualEnd && visualStart.from == visualEnd.from) {\n        return pieces(drawForLine(range.from, range.to, visualStart));\n    }\n    else {\n        let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);\n        let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);\n        let between = [];\n        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||\n            startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)\n            between.push(piece(leftSide, top.bottom, rightSide, bottom.top));\n        else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)\n            top.bottom = bottom.top = (top.bottom + bottom.top) / 2;\n        return pieces(top).concat(between).concat(pieces(bottom));\n    }\n    function piece(left, top, right, bottom) {\n        return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* C.Epsilon */, right - left, bottom - top + 0.01 /* C.Epsilon */);\n    }\n    function pieces({ top, bottom, horizontal }) {\n        let pieces = [];\n        for (let i = 0; i < horizontal.length; i += 2)\n            pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));\n        return pieces;\n    }\n    // Gets passed from/to in line-local positions\n    function drawForLine(from, to, line) {\n        let top = 1e9, bottom = -1e9, horizontal = [];\n        function addSpan(from, fromOpen, to, toOpen, dir) {\n            // Passing 2/-2 is a kludge to force the view to return\n            // coordinates on the proper side of block widgets, since\n            // normalizing the side there, though appropriate for most\n            // coordsAtPos queries, would break selection drawing.\n            let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));\n            let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));\n            if (!fromCoords || !toCoords)\n                return;\n            top = Math.min(fromCoords.top, toCoords.top, top);\n            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);\n            if (dir == Direction.LTR)\n                horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);\n            else\n                horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);\n        }\n        let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;\n        // Split the range by visible range and document line\n        for (let r of view.visibleRanges)\n            if (r.to > start && r.from < end) {\n                for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {\n                    let docLine = view.state.doc.lineAt(pos);\n                    for (let span of view.bidiSpans(docLine)) {\n                        let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;\n                        if (spanFrom >= endPos)\n                            break;\n                        if (spanTo > pos)\n                            addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);\n                    }\n                    pos = docLine.to + 1;\n                    if (pos >= endPos)\n                        break;\n                }\n            }\n        if (horizontal.length == 0)\n            addSpan(start, from == null, end, to == null, view.textDirection);\n        return { top, bottom, horizontal };\n    }\n    function drawForWidget(block, top) {\n        let y = contentRect.top + (top ? block.top : block.bottom);\n        return { top: y, bottom: y, horizontal: [] };\n    }\n}\nfunction sameMarker(a, b) {\n    return a.constructor == b.constructor && a.eq(b);\n}\nclass LayerView {\n    constructor(view, layer) {\n        this.view = view;\n        this.layer = layer;\n        this.drawn = [];\n        this.scaleX = 1;\n        this.scaleY = 1;\n        this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };\n        this.dom = view.scrollDOM.appendChild(document.createElement(\"div\"));\n        this.dom.classList.add(\"cm-layer\");\n        if (layer.above)\n            this.dom.classList.add(\"cm-layer-above\");\n        if (layer.class)\n            this.dom.classList.add(layer.class);\n        this.scale();\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\n        this.setOrder(view.state);\n        view.requestMeasure(this.measureReq);\n        if (layer.mount)\n            layer.mount(this.dom, view);\n    }\n    update(update) {\n        if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))\n            this.setOrder(update.state);\n        if (this.layer.update(update, this.dom) || update.geometryChanged) {\n            this.scale();\n            update.view.requestMeasure(this.measureReq);\n        }\n    }\n    docViewUpdate(view) {\n        if (this.layer.updateOnDocViewUpdate !== false)\n            view.requestMeasure(this.measureReq);\n    }\n    setOrder(state) {\n        let pos = 0, order = state.facet(layerOrder);\n        while (pos < order.length && order[pos] != this.layer)\n            pos++;\n        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);\n    }\n    measure() {\n        return this.layer.markers(this.view);\n    }\n    scale() {\n        let { scaleX, scaleY } = this.view;\n        if (scaleX != this.scaleX || scaleY != this.scaleY) {\n            this.scaleX = scaleX;\n            this.scaleY = scaleY;\n            this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;\n        }\n    }\n    draw(markers) {\n        if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {\n            let old = this.dom.firstChild, oldI = 0;\n            for (let marker of markers) {\n                if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&\n                    marker.update(old, this.drawn[oldI])) {\n                    old = old.nextSibling;\n                    oldI++;\n                }\n                else {\n                    this.dom.insertBefore(marker.draw(), old);\n                }\n            }\n            while (old) {\n                let next = old.nextSibling;\n                old.remove();\n                old = next;\n            }\n            this.drawn = markers;\n        }\n    }\n    destroy() {\n        if (this.layer.destroy)\n            this.layer.destroy(this.dom, this.view);\n        this.dom.remove();\n    }\n}\nconst layerOrder = /*@__PURE__*/Facet.define();\n/**\nDefine a layer.\n*/\nfunction layer(config) {\n    return [\n        ViewPlugin.define(v => new LayerView(v, config)),\n        layerOrder.of(config)\n    ];\n}\n\nconst CanHidePrimary = !browser.ios; // FIXME test IE\nconst selectionConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            cursorBlinkRate: 1200,\n            drawRangeCursor: true\n        }, {\n            cursorBlinkRate: (a, b) => Math.min(a, b),\n            drawRangeCursor: (a, b) => a || b\n        });\n    }\n});\n/**\nReturns an extension that hides the browser's native selection and\ncursor, replacing the selection with a background behind the text\n(with the `cm-selectionBackground` class), and the\ncursors with elements overlaid over the code (using\n`cm-cursor-primary` and `cm-cursor-secondary`).\n\nThis allows the editor to display secondary selection ranges, and\ntends to produce a type of selection more in line with that users\nexpect in a text editor (the native selection styling will often\nleave gaps between lines and won't fill the horizontal space after\na line when the selection continues past it).\n\nIt does have a performance cost, in that it requires an extra DOM\nlayout cycle for many updates (the selection is drawn based on DOM\nlayout information that's only available after laying out the\ncontent).\n*/\nfunction drawSelection(config = {}) {\n    return [\n        selectionConfig.of(config),\n        cursorLayer,\n        selectionLayer,\n        hideNativeSelection,\n        nativeSelectionHidden.of(true)\n    ];\n}\n/**\nRetrieve the [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) configuration\nfor this state. (Note that this will return a set of defaults even\nif `drawSelection` isn't enabled.)\n*/\nfunction getDrawSelectionConfig(state) {\n    return state.facet(selectionConfig);\n}\nfunction configChanged(update) {\n    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);\n}\nconst cursorLayer = /*@__PURE__*/layer({\n    above: true,\n    markers(view) {\n        let { state } = view, conf = state.facet(selectionConfig);\n        let cursors = [];\n        for (let r of state.selection.ranges) {\n            let prim = r == state.selection.main;\n            if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {\n                let className = prim ? \"cm-cursor cm-cursor-primary\" : \"cm-cursor cm-cursor-secondary\";\n                let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);\n                for (let piece of RectangleMarker.forRange(view, className, cursor))\n                    cursors.push(piece);\n            }\n        }\n        return cursors;\n    },\n    update(update, dom) {\n        if (update.transactions.some(tr => tr.selection))\n            dom.style.animationName = dom.style.animationName == \"cm-blink\" ? \"cm-blink2\" : \"cm-blink\";\n        let confChange = configChanged(update);\n        if (confChange)\n            setBlinkRate(update.state, dom);\n        return update.docChanged || update.selectionSet || confChange;\n    },\n    mount(dom, view) {\n        setBlinkRate(view.state, dom);\n    },\n    class: \"cm-cursorLayer\"\n});\nfunction setBlinkRate(state, dom) {\n    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + \"ms\";\n}\nconst selectionLayer = /*@__PURE__*/layer({\n    above: false,\n    markers(view) {\n        return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, \"cm-selectionBackground\", r))\n            .reduce((a, b) => a.concat(b));\n    },\n    update(update, dom) {\n        return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);\n    },\n    class: \"cm-selectionLayer\"\n});\nconst themeSpec = {\n    \".cm-line\": {\n        \"& ::selection\": { backgroundColor: \"transparent !important\" },\n        \"&::selection\": { backgroundColor: \"transparent !important\" }\n    }\n};\nif (CanHidePrimary) {\n    themeSpec[\".cm-line\"].caretColor = \"transparent !important\";\n    themeSpec[\".cm-content\"] = { caretColor: \"transparent !important\" };\n}\nconst hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));\n\nconst setDropCursorPos = /*@__PURE__*/StateEffect.define({\n    map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }\n});\nconst dropCursorPos = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(pos, tr) {\n        if (pos != null)\n            pos = tr.changes.mapPos(pos);\n        return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);\n    }\n});\nconst drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.cursor = null;\n        this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };\n    }\n    update(update) {\n        var _a;\n        let cursorPos = update.state.field(dropCursorPos);\n        if (cursorPos == null) {\n            if (this.cursor != null) {\n                (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();\n                this.cursor = null;\n            }\n        }\n        else {\n            if (!this.cursor) {\n                this.cursor = this.view.scrollDOM.appendChild(document.createElement(\"div\"));\n                this.cursor.className = \"cm-dropCursor\";\n            }\n            if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)\n                this.view.requestMeasure(this.measureReq);\n        }\n    }\n    readPos() {\n        let { view } = this;\n        let pos = view.state.field(dropCursorPos);\n        let rect = pos != null && view.coordsAtPos(pos);\n        if (!rect)\n            return null;\n        let outer = view.scrollDOM.getBoundingClientRect();\n        return {\n            left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,\n            top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,\n            height: rect.bottom - rect.top\n        };\n    }\n    drawCursor(pos) {\n        if (this.cursor) {\n            let { scaleX, scaleY } = this.view;\n            if (pos) {\n                this.cursor.style.left = pos.left / scaleX + \"px\";\n                this.cursor.style.top = pos.top / scaleY + \"px\";\n                this.cursor.style.height = pos.height / scaleY + \"px\";\n            }\n            else {\n                this.cursor.style.left = \"-100000px\";\n            }\n        }\n    }\n    destroy() {\n        if (this.cursor)\n            this.cursor.remove();\n    }\n    setDropPos(pos) {\n        if (this.view.state.field(dropCursorPos) != pos)\n            this.view.dispatch({ effects: setDropCursorPos.of(pos) });\n    }\n}, {\n    eventObservers: {\n        dragover(event) {\n            this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));\n        },\n        dragleave(event) {\n            if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))\n                this.setDropPos(null);\n        },\n        dragend() {\n            this.setDropPos(null);\n        },\n        drop() {\n            this.setDropPos(null);\n        }\n    }\n});\n/**\nDraws a cursor at the current drop position when something is\ndragged over the editor.\n*/\nfunction dropCursor() {\n    return [dropCursorPos, drawDropCursor];\n}\n\nfunction iterMatches(doc, re, from, to, f) {\n    re.lastIndex = 0;\n    for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {\n        if (!cursor.lineBreak)\n            while (m = re.exec(cursor.value))\n                f(pos + m.index, m);\n    }\n}\nfunction matchRanges(view, maxLength) {\n    let visible = view.visibleRanges;\n    if (visible.length == 1 && visible[0].from == view.viewport.from &&\n        visible[0].to == view.viewport.to)\n        return visible;\n    let result = [];\n    for (let { from, to } of visible) {\n        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);\n        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);\n        if (result.length && result[result.length - 1].to >= from)\n            result[result.length - 1].to = to;\n        else\n            result.push({ from, to });\n    }\n    return result;\n}\n/**\nHelper class used to make it easier to maintain decorations on\nvisible code that matches a given regular expression. To be used\nin a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object\nrepresent a matching configuration.\n*/\nclass MatchDecorator {\n    /**\n    Create a decorator.\n    */\n    constructor(config) {\n        const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;\n        if (!regexp.global)\n            throw new RangeError(\"The regular expression given to MatchDecorator should have its 'g' flag set\");\n        this.regexp = regexp;\n        if (decorate) {\n            this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);\n        }\n        else if (typeof decoration == \"function\") {\n            this.addMatch = (match, view, from, add) => {\n                let deco = decoration(match, view, from);\n                if (deco)\n                    add(from, from + match[0].length, deco);\n            };\n        }\n        else if (decoration) {\n            this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);\n        }\n        else {\n            throw new RangeError(\"Either 'decorate' or 'decoration' should be provided to MatchDecorator\");\n        }\n        this.boundary = boundary;\n        this.maxLength = maxLength;\n    }\n    /**\n    Compute the full set of decorations for matches in the given\n    view's viewport. You'll want to call this when initializing your\n    plugin.\n    */\n    createDeco(view) {\n        let build = new RangeSetBuilder(), add = build.add.bind(build);\n        for (let { from, to } of matchRanges(view, this.maxLength))\n            iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));\n        return build.finish();\n    }\n    /**\n    Update a set of decorations for a view update. `deco` _must_ be\n    the set of decorations produced by _this_ `MatchDecorator` for\n    the view state before the update.\n    */\n    updateDeco(update, deco) {\n        let changeFrom = 1e9, changeTo = -1;\n        if (update.docChanged)\n            update.changes.iterChanges((_f, _t, from, to) => {\n                if (to > update.view.viewport.from && from < update.view.viewport.to) {\n                    changeFrom = Math.min(from, changeFrom);\n                    changeTo = Math.max(to, changeTo);\n                }\n            });\n        if (update.viewportChanged || changeTo - changeFrom > 1000)\n            return this.createDeco(update.view);\n        if (changeTo > -1)\n            return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);\n        return deco;\n    }\n    updateRange(view, deco, updateFrom, updateTo) {\n        for (let r of view.visibleRanges) {\n            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);\n            if (to > from) {\n                let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;\n                let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);\n                if (this.boundary) {\n                    for (; from > fromLine.from; from--)\n                        if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {\n                            start = from;\n                            break;\n                        }\n                    for (; to < toLine.to; to++)\n                        if (this.boundary.test(toLine.text[to - toLine.from])) {\n                            end = to;\n                            break;\n                        }\n                }\n                let ranges = [], m;\n                let add = (from, to, deco) => ranges.push(deco.range(from, to));\n                if (fromLine == toLine) {\n                    this.regexp.lastIndex = start - fromLine.from;\n                    while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)\n                        this.addMatch(m, view, m.index + fromLine.from, add);\n                }\n                else {\n                    iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));\n                }\n                deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });\n            }\n        }\n        return deco;\n    }\n}\n\nconst UnicodeRegexpSupport = /x/.unicode != null ? \"gu\" : \"g\";\nconst Specials = /*@__PURE__*/new RegExp(\"[\\u0000-\\u0008\\u000a-\\u001f\\u007f-\\u009f\\u00ad\\u061c\\u200b\\u200e\\u200f\\u2028\\u2029\\u202d\\u202e\\u2066\\u2067\\u2069\\ufeff\\ufff9-\\ufffc]\", UnicodeRegexpSupport);\nconst Names = {\n    0: \"null\",\n    7: \"bell\",\n    8: \"backspace\",\n    10: \"newline\",\n    11: \"vertical tab\",\n    13: \"carriage return\",\n    27: \"escape\",\n    8203: \"zero width space\",\n    8204: \"zero width non-joiner\",\n    8205: \"zero width joiner\",\n    8206: \"left-to-right mark\",\n    8207: \"right-to-left mark\",\n    8232: \"line separator\",\n    8237: \"left-to-right override\",\n    8238: \"right-to-left override\",\n    8294: \"left-to-right isolate\",\n    8295: \"right-to-left isolate\",\n    8297: \"pop directional isolate\",\n    8233: \"paragraph separator\",\n    65279: \"zero width no-break space\",\n    65532: \"object replacement\"\n};\nlet _supportsTabSize = null;\nfunction supportsTabSize() {\n    var _a;\n    if (_supportsTabSize == null && typeof document != \"undefined\" && document.body) {\n        let styles = document.body.style;\n        _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;\n    }\n    return _supportsTabSize || false;\n}\nconst specialCharConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        let config = combineConfig(configs, {\n            render: null,\n            specialChars: Specials,\n            addSpecialChars: null\n        });\n        if (config.replaceTabs = !supportsTabSize())\n            config.specialChars = new RegExp(\"\\t|\" + config.specialChars.source, UnicodeRegexpSupport);\n        if (config.addSpecialChars)\n            config.specialChars = new RegExp(config.specialChars.source + \"|\" + config.addSpecialChars.source, UnicodeRegexpSupport);\n        return config;\n    }\n});\n/**\nReturns an extension that installs highlighting of special\ncharacters.\n*/\nfunction highlightSpecialChars(\n/**\nConfiguration options.\n*/\nconfig = {}) {\n    return [specialCharConfig.of(config), specialCharPlugin()];\n}\nlet _plugin = null;\nfunction specialCharPlugin() {\n    return _plugin || (_plugin = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.view = view;\n            this.decorations = Decoration.none;\n            this.decorationCache = Object.create(null);\n            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));\n            this.decorations = this.decorator.createDeco(view);\n        }\n        makeDecorator(conf) {\n            return new MatchDecorator({\n                regexp: conf.specialChars,\n                decoration: (m, view, pos) => {\n                    let { doc } = view.state;\n                    let code = codePointAt(m[0], 0);\n                    if (code == 9) {\n                        let line = doc.lineAt(pos);\n                        let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);\n                        return Decoration.replace({\n                            widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth / this.view.scaleX)\n                        });\n                    }\n                    return this.decorationCache[code] ||\n                        (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));\n                },\n                boundary: conf.replaceTabs ? undefined : /[^]/\n            });\n        }\n        update(update) {\n            let conf = update.state.facet(specialCharConfig);\n            if (update.startState.facet(specialCharConfig) != conf) {\n                this.decorator = this.makeDecorator(conf);\n                this.decorations = this.decorator.createDeco(update.view);\n            }\n            else {\n                this.decorations = this.decorator.updateDeco(update, this.decorations);\n            }\n        }\n    }, {\n        decorations: v => v.decorations\n    }));\n}\nconst DefaultPlaceholder = \"\\u2022\";\n// Assigns placeholder characters from the Control Pictures block to\n// ASCII control characters\nfunction placeholder$1(code) {\n    if (code >= 32)\n        return DefaultPlaceholder;\n    if (code == 10)\n        return \"\\u2424\";\n    return String.fromCharCode(9216 + code);\n}\nclass SpecialCharWidget extends WidgetType {\n    constructor(options, code) {\n        super();\n        this.options = options;\n        this.code = code;\n    }\n    eq(other) { return other.code == this.code; }\n    toDOM(view) {\n        let ph = placeholder$1(this.code);\n        let desc = view.state.phrase(\"Control character\") + \" \" + (Names[this.code] || \"0x\" + this.code.toString(16));\n        let custom = this.options.render && this.options.render(this.code, desc, ph);\n        if (custom)\n            return custom;\n        let span = document.createElement(\"span\");\n        span.textContent = ph;\n        span.title = desc;\n        span.setAttribute(\"aria-label\", desc);\n        span.className = \"cm-specialChar\";\n        return span;\n    }\n    ignoreEvent() { return false; }\n}\nclass TabWidget extends WidgetType {\n    constructor(width) {\n        super();\n        this.width = width;\n    }\n    eq(other) { return other.width == this.width; }\n    toDOM() {\n        let span = document.createElement(\"span\");\n        span.textContent = \"\\t\";\n        span.className = \"cm-tab\";\n        span.style.width = this.width + \"px\";\n        return span;\n    }\n    ignoreEvent() { return false; }\n}\n\nconst plugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor() {\n        this.height = 1000;\n        this.attrs = { style: \"padding-bottom: 1000px\" };\n    }\n    update(update) {\n        let { view } = update;\n        let height = view.viewState.editorHeight -\n            view.defaultLineHeight - view.documentPadding.top - 0.5;\n        if (height >= 0 && height != this.height) {\n            this.height = height;\n            this.attrs = { style: `padding-bottom: ${height}px` };\n        }\n    }\n});\n/**\nReturns an extension that makes sure the content has a bottom\nmargin equivalent to the height of the editor, minus one line\nheight, so that every line in the document can be scrolled to the\ntop of the editor.\n\nThis is only meaningful when the editor is scrollable, and should\nnot be enabled in editors that take the size of their content.\n*/\nfunction scrollPastEnd() {\n    return [plugin, contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null; })];\n}\n\n/**\nMark lines that have a cursor on them with the `\"cm-activeLine\"`\nDOM class.\n*/\nfunction highlightActiveLine() {\n    return activeLineHighlighter;\n}\nconst lineDeco = /*@__PURE__*/Decoration.line({ class: \"cm-activeLine\" });\nconst activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.docChanged || update.selectionSet)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let lastLineStart = -1, deco = [];\n        for (let r of view.state.selection.ranges) {\n            let line = view.lineBlockAt(r.head);\n            if (line.from > lastLineStart) {\n                deco.push(lineDeco.range(line.from));\n                lastLineStart = line.from;\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\n\nclass Placeholder extends WidgetType {\n    constructor(content) {\n        super();\n        this.content = content;\n    }\n    toDOM() {\n        let wrap = document.createElement(\"span\");\n        wrap.className = \"cm-placeholder\";\n        wrap.style.pointerEvents = \"none\";\n        wrap.appendChild(typeof this.content == \"string\" ? document.createTextNode(this.content) : this.content);\n        if (typeof this.content == \"string\")\n            wrap.setAttribute(\"aria-label\", \"placeholder \" + this.content);\n        else\n            wrap.setAttribute(\"aria-hidden\", \"true\");\n        return wrap;\n    }\n    coordsAt(dom) {\n        let rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];\n        if (!rects.length)\n            return null;\n        let style = window.getComputedStyle(dom.parentNode);\n        let rect = flattenRect(rects[0], style.direction != \"rtl\");\n        let lineHeight = parseInt(style.lineHeight);\n        if (rect.bottom - rect.top > lineHeight * 1.5)\n            return { left: rect.left, right: rect.right, top: rect.top, bottom: rect.top + lineHeight };\n        return rect;\n    }\n    ignoreEvent() { return false; }\n}\n/**\nExtension that enables a placeholder—a piece of example content\nto show when the editor is empty.\n*/\nfunction placeholder(content) {\n    return ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.view = view;\n            this.placeholder = content\n                ? Decoration.set([Decoration.widget({ widget: new Placeholder(content), side: 1 }).range(0)])\n                : Decoration.none;\n        }\n        get decorations() { return this.view.state.doc.length ? Decoration.none : this.placeholder; }\n    }, { decorations: v => v.decorations });\n}\n\n// Don't compute precise column positions for line offsets above this\n// (since it could get expensive). Assume offset==column for them.\nconst MaxOff = 2000;\nfunction rectangleFor(state, a, b) {\n    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);\n    let ranges = [];\n    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {\n        let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);\n        for (let i = startLine; i <= endLine; i++) {\n            let line = state.doc.line(i);\n            if (line.length <= endOff)\n                ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));\n        }\n    }\n    else {\n        let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);\n        for (let i = startLine; i <= endLine; i++) {\n            let line = state.doc.line(i);\n            let start = findColumn(line.text, startCol, state.tabSize, true);\n            if (start < 0) {\n                ranges.push(EditorSelection.cursor(line.to));\n            }\n            else {\n                let end = findColumn(line.text, endCol, state.tabSize);\n                ranges.push(EditorSelection.range(line.from + start, line.from + end));\n            }\n        }\n    }\n    return ranges;\n}\nfunction absoluteColumn(view, x) {\n    let ref = view.coordsAtPos(view.viewport.from);\n    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;\n}\nfunction getPos(view, event) {\n    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);\n    let line = view.state.doc.lineAt(offset), off = offset - line.from;\n    let col = off > MaxOff ? -1\n        : off == line.length ? absoluteColumn(view, event.clientX)\n            : countColumn(line.text, view.state.tabSize, offset - line.from);\n    return { line: line.number, col, off };\n}\nfunction rectangleSelectionStyle(view, event) {\n    let start = getPos(view, event), startSel = view.state.selection;\n    if (!start)\n        return null;\n    return {\n        update(update) {\n            if (update.docChanged) {\n                let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);\n                let newLine = update.state.doc.lineAt(newStart);\n                start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };\n                startSel = startSel.map(update.changes);\n            }\n        },\n        get(event, _extend, multiple) {\n            let cur = getPos(view, event);\n            if (!cur)\n                return startSel;\n            let ranges = rectangleFor(view.state, start, cur);\n            if (!ranges.length)\n                return startSel;\n            if (multiple)\n                return EditorSelection.create(ranges.concat(startSel.ranges));\n            else\n                return EditorSelection.create(ranges);\n        }\n    };\n}\n/**\nCreate an extension that enables rectangular selections. By\ndefault, it will react to left mouse drag with the Alt key held\ndown. When such a selection occurs, the text within the rectangle\nthat was dragged over will be selected, as one selection\n[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.\n*/\nfunction rectangularSelection(options) {\n    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);\n    return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);\n}\nconst keys = {\n    Alt: [18, e => !!e.altKey],\n    Control: [17, e => !!e.ctrlKey],\n    Shift: [16, e => !!e.shiftKey],\n    Meta: [91, e => !!e.metaKey]\n};\nconst showCrosshair = { style: \"cursor: crosshair\" };\n/**\nReturns an extension that turns the pointer cursor into a\ncrosshair when a given modifier key, defaulting to Alt, is held\ndown. Can serve as a visual hint that rectangular selection is\ngoing to happen when paired with\n[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).\n*/\nfunction crosshairCursor(options = {}) {\n    let [code, getter] = keys[options.key || \"Alt\"];\n    let plugin = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.view = view;\n            this.isDown = false;\n        }\n        set(isDown) {\n            if (this.isDown != isDown) {\n                this.isDown = isDown;\n                this.view.update([]);\n            }\n        }\n    }, {\n        eventObservers: {\n            keydown(e) {\n                this.set(e.keyCode == code || getter(e));\n            },\n            keyup(e) {\n                if (e.keyCode == code || !getter(e))\n                    this.set(false);\n            },\n            mousemove(e) {\n                this.set(getter(e));\n            }\n        }\n    });\n    return [\n        plugin,\n        EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })\n    ];\n}\n\nconst Outside = \"-10000px\";\nclass TooltipViewManager {\n    constructor(view, facet, createTooltipView, removeTooltipView) {\n        this.facet = facet;\n        this.createTooltipView = createTooltipView;\n        this.removeTooltipView = removeTooltipView;\n        this.input = view.state.facet(facet);\n        this.tooltips = this.input.filter(t => t);\n        let prev = null;\n        this.tooltipViews = this.tooltips.map(t => prev = createTooltipView(t, prev));\n    }\n    update(update, above) {\n        var _a;\n        let input = update.state.facet(this.facet);\n        let tooltips = input.filter(x => x);\n        if (input === this.input) {\n            for (let t of this.tooltipViews)\n                if (t.update)\n                    t.update(update);\n            return false;\n        }\n        let tooltipViews = [], newAbove = above ? [] : null;\n        for (let i = 0; i < tooltips.length; i++) {\n            let tip = tooltips[i], known = -1;\n            if (!tip)\n                continue;\n            for (let i = 0; i < this.tooltips.length; i++) {\n                let other = this.tooltips[i];\n                if (other && other.create == tip.create)\n                    known = i;\n            }\n            if (known < 0) {\n                tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);\n                if (newAbove)\n                    newAbove[i] = !!tip.above;\n            }\n            else {\n                let tooltipView = tooltipViews[i] = this.tooltipViews[known];\n                if (newAbove)\n                    newAbove[i] = above[known];\n                if (tooltipView.update)\n                    tooltipView.update(update);\n            }\n        }\n        for (let t of this.tooltipViews)\n            if (tooltipViews.indexOf(t) < 0) {\n                this.removeTooltipView(t);\n                (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);\n            }\n        if (above) {\n            newAbove.forEach((val, i) => above[i] = val);\n            above.length = newAbove.length;\n        }\n        this.input = input;\n        this.tooltips = tooltips;\n        this.tooltipViews = tooltipViews;\n        return true;\n    }\n}\n/**\nCreates an extension that configures tooltip behavior.\n*/\nfunction tooltips(config = {}) {\n    return tooltipConfig.of(config);\n}\nfunction windowSpace(view) {\n    let { win } = view;\n    return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };\n}\nconst tooltipConfig = /*@__PURE__*/Facet.define({\n    combine: values => {\n        var _a, _b, _c;\n        return ({\n            position: browser.ios ? \"absolute\" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || \"fixed\",\n            parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,\n            tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,\n        });\n    }\n});\nconst knownHeight = /*@__PURE__*/new WeakMap();\nconst tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.above = [];\n        this.inView = true;\n        this.madeAbsolute = false;\n        this.lastTransaction = 0;\n        this.measureTimeout = -1;\n        let config = view.state.facet(tooltipConfig);\n        this.position = config.position;\n        this.parent = config.parent;\n        this.classes = view.themeClasses;\n        this.createContainer();\n        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };\n        this.resizeObserver = typeof ResizeObserver == \"function\" ? new ResizeObserver(() => this.measureSoon()) : null;\n        this.manager = new TooltipViewManager(view, showTooltip, (t, p) => this.createTooltip(t, p), t => {\n            if (this.resizeObserver)\n                this.resizeObserver.unobserve(t.dom);\n            t.dom.remove();\n        });\n        this.above = this.manager.tooltips.map(t => !!t.above);\n        this.intersectionObserver = typeof IntersectionObserver == \"function\" ? new IntersectionObserver(entries => {\n            if (Date.now() > this.lastTransaction - 50 &&\n                entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)\n                this.measureSoon();\n        }, { threshold: [1] }) : null;\n        this.observeIntersection();\n        view.win.addEventListener(\"resize\", this.measureSoon = this.measureSoon.bind(this));\n        this.maybeMeasure();\n    }\n    createContainer() {\n        if (this.parent) {\n            this.container = document.createElement(\"div\");\n            this.container.style.position = \"relative\";\n            this.container.className = this.view.themeClasses;\n            this.parent.appendChild(this.container);\n        }\n        else {\n            this.container = this.view.dom;\n        }\n    }\n    observeIntersection() {\n        if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect();\n            for (let tooltip of this.manager.tooltipViews)\n                this.intersectionObserver.observe(tooltip.dom);\n        }\n    }\n    measureSoon() {\n        if (this.measureTimeout < 0)\n            this.measureTimeout = setTimeout(() => {\n                this.measureTimeout = -1;\n                this.maybeMeasure();\n            }, 50);\n    }\n    update(update) {\n        if (update.transactions.length)\n            this.lastTransaction = Date.now();\n        let updated = this.manager.update(update, this.above);\n        if (updated)\n            this.observeIntersection();\n        let shouldMeasure = updated || update.geometryChanged;\n        let newConfig = update.state.facet(tooltipConfig);\n        if (newConfig.position != this.position && !this.madeAbsolute) {\n            this.position = newConfig.position;\n            for (let t of this.manager.tooltipViews)\n                t.dom.style.position = this.position;\n            shouldMeasure = true;\n        }\n        if (newConfig.parent != this.parent) {\n            if (this.parent)\n                this.container.remove();\n            this.parent = newConfig.parent;\n            this.createContainer();\n            for (let t of this.manager.tooltipViews)\n                this.container.appendChild(t.dom);\n            shouldMeasure = true;\n        }\n        else if (this.parent && this.view.themeClasses != this.classes) {\n            this.classes = this.container.className = this.view.themeClasses;\n        }\n        if (shouldMeasure)\n            this.maybeMeasure();\n    }\n    createTooltip(tooltip, prev) {\n        let tooltipView = tooltip.create(this.view);\n        let before = prev ? prev.dom : null;\n        tooltipView.dom.classList.add(\"cm-tooltip\");\n        if (tooltip.arrow && !tooltipView.dom.querySelector(\".cm-tooltip > .cm-tooltip-arrow\")) {\n            let arrow = document.createElement(\"div\");\n            arrow.className = \"cm-tooltip-arrow\";\n            tooltipView.dom.appendChild(arrow);\n        }\n        tooltipView.dom.style.position = this.position;\n        tooltipView.dom.style.top = Outside;\n        tooltipView.dom.style.left = \"0px\";\n        this.container.insertBefore(tooltipView.dom, before);\n        if (tooltipView.mount)\n            tooltipView.mount(this.view);\n        if (this.resizeObserver)\n            this.resizeObserver.observe(tooltipView.dom);\n        return tooltipView;\n    }\n    destroy() {\n        var _a, _b, _c;\n        this.view.win.removeEventListener(\"resize\", this.measureSoon);\n        for (let tooltipView of this.manager.tooltipViews) {\n            tooltipView.dom.remove();\n            (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);\n        }\n        if (this.parent)\n            this.container.remove();\n        (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();\n        (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();\n        clearTimeout(this.measureTimeout);\n    }\n    readMeasure() {\n        let editor = this.view.dom.getBoundingClientRect();\n        let scaleX = 1, scaleY = 1, makeAbsolute = false;\n        if (this.position == \"fixed\" && this.manager.tooltipViews.length) {\n            let { dom } = this.manager.tooltipViews[0];\n            if (browser.gecko) {\n                // Firefox sets the element's `offsetParent` to the\n                // transformed element when a transform interferes with fixed\n                // positioning.\n                makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;\n            }\n            else if (dom.style.top == Outside && dom.style.left == \"0px\") {\n                // On other browsers, we have to awkwardly try and use other\n                // information to detect a transform.\n                let rect = dom.getBoundingClientRect();\n                makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;\n            }\n        }\n        if (makeAbsolute || this.position == \"absolute\") {\n            if (this.parent) {\n                let rect = this.parent.getBoundingClientRect();\n                if (rect.width && rect.height) {\n                    scaleX = rect.width / this.parent.offsetWidth;\n                    scaleY = rect.height / this.parent.offsetHeight;\n                }\n            }\n            else {\n                ({ scaleX, scaleY } = this.view.viewState);\n            }\n        }\n        return {\n            editor,\n            parent: this.parent ? this.container.getBoundingClientRect() : editor,\n            pos: this.manager.tooltips.map((t, i) => {\n                let tv = this.manager.tooltipViews[i];\n                return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);\n            }),\n            size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),\n            space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),\n            scaleX, scaleY, makeAbsolute\n        };\n    }\n    writeMeasure(measured) {\n        var _a;\n        if (measured.makeAbsolute) {\n            this.madeAbsolute = true;\n            this.position = \"absolute\";\n            for (let t of this.manager.tooltipViews)\n                t.dom.style.position = \"absolute\";\n        }\n        let { editor, space, scaleX, scaleY } = measured;\n        let others = [];\n        for (let i = 0; i < this.manager.tooltips.length; i++) {\n            let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;\n            let pos = measured.pos[i], size = measured.size[i];\n            // Hide tooltips that are outside of the editor.\n            if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||\n                pos.top >= Math.min(editor.bottom, space.bottom) ||\n                pos.right < Math.max(editor.left, space.left) - .1 ||\n                pos.left > Math.min(editor.right, space.right) + .1) {\n                dom.style.top = Outside;\n                continue;\n            }\n            let arrow = tooltip.arrow ? tView.dom.querySelector(\".cm-tooltip-arrow\") : null;\n            let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;\n            let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;\n            let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;\n            let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)\n                : ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)\n                    : Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);\n            let above = this.above[i];\n            if (!tooltip.strictSide && (above\n                ? pos.top - (size.bottom - size.top) - offset.y < space.top\n                : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&\n                above == (space.bottom - pos.bottom > pos.top - space.top))\n                above = this.above[i] = !above;\n            let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;\n            if (spaceVert < height && tView.resize !== false) {\n                if (spaceVert < this.view.defaultLineHeight) {\n                    dom.style.top = Outside;\n                    continue;\n                }\n                knownHeight.set(tView, height);\n                dom.style.height = (height = spaceVert) / scaleY + \"px\";\n            }\n            else if (dom.style.height) {\n                dom.style.height = \"\";\n            }\n            let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;\n            let right = left + width;\n            if (tView.overlap !== true)\n                for (let r of others)\n                    if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)\n                        top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;\n            if (this.position == \"absolute\") {\n                dom.style.top = (top - measured.parent.top) / scaleY + \"px\";\n                dom.style.left = (left - measured.parent.left) / scaleX + \"px\";\n            }\n            else {\n                dom.style.top = top / scaleY + \"px\";\n                dom.style.left = left / scaleX + \"px\";\n            }\n            if (arrow) {\n                let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);\n                arrow.style.left = arrowLeft / scaleX + \"px\";\n            }\n            if (tView.overlap !== true)\n                others.push({ left, top, right, bottom: top + height });\n            dom.classList.toggle(\"cm-tooltip-above\", above);\n            dom.classList.toggle(\"cm-tooltip-below\", !above);\n            if (tView.positioned)\n                tView.positioned(measured.space);\n        }\n    }\n    maybeMeasure() {\n        if (this.manager.tooltips.length) {\n            if (this.view.inView)\n                this.view.requestMeasure(this.measureReq);\n            if (this.inView != this.view.inView) {\n                this.inView = this.view.inView;\n                if (!this.inView)\n                    for (let tv of this.manager.tooltipViews)\n                        tv.dom.style.top = Outside;\n            }\n        }\n    }\n}, {\n    eventObservers: {\n        scroll() { this.maybeMeasure(); }\n    }\n});\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-tooltip\": {\n        zIndex: 100,\n        boxSizing: \"border-box\"\n    },\n    \"&light .cm-tooltip\": {\n        border: \"1px solid #bbb\",\n        backgroundColor: \"#f5f5f5\"\n    },\n    \"&light .cm-tooltip-section:not(:first-child)\": {\n        borderTop: \"1px solid #bbb\",\n    },\n    \"&dark .cm-tooltip\": {\n        backgroundColor: \"#333338\",\n        color: \"white\"\n    },\n    \".cm-tooltip-arrow\": {\n        height: `${7 /* Arrow.Size */}px`,\n        width: `${7 /* Arrow.Size */ * 2}px`,\n        position: \"absolute\",\n        zIndex: -1,\n        overflow: \"hidden\",\n        \"&:before, &:after\": {\n            content: \"''\",\n            position: \"absolute\",\n            width: 0,\n            height: 0,\n            borderLeft: `${7 /* Arrow.Size */}px solid transparent`,\n            borderRight: `${7 /* Arrow.Size */}px solid transparent`,\n        },\n        \".cm-tooltip-above &\": {\n            bottom: `-${7 /* Arrow.Size */}px`,\n            \"&:before\": {\n                borderTop: `${7 /* Arrow.Size */}px solid #bbb`,\n            },\n            \"&:after\": {\n                borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,\n                bottom: \"1px\"\n            }\n        },\n        \".cm-tooltip-below &\": {\n            top: `-${7 /* Arrow.Size */}px`,\n            \"&:before\": {\n                borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,\n            },\n            \"&:after\": {\n                borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,\n                top: \"1px\"\n            }\n        },\n    },\n    \"&dark .cm-tooltip .cm-tooltip-arrow\": {\n        \"&:before\": {\n            borderTopColor: \"#333338\",\n            borderBottomColor: \"#333338\"\n        },\n        \"&:after\": {\n            borderTopColor: \"transparent\",\n            borderBottomColor: \"transparent\"\n        }\n    }\n});\nconst noOffset = { x: 0, y: 0 };\n/**\nFacet to which an extension can add a value to show a tooltip.\n*/\nconst showTooltip = /*@__PURE__*/Facet.define({\n    enables: [tooltipPlugin, baseTheme]\n});\nconst showHoverTooltip = /*@__PURE__*/Facet.define({\n    combine: inputs => inputs.reduce((a, i) => a.concat(i), [])\n});\nclass HoverTooltipHost {\n    // Needs to be static so that host tooltip instances always match\n    static create(view) {\n        return new HoverTooltipHost(view);\n    }\n    constructor(view) {\n        this.view = view;\n        this.mounted = false;\n        this.dom = document.createElement(\"div\");\n        this.dom.classList.add(\"cm-tooltip-hover\");\n        this.manager = new TooltipViewManager(view, showHoverTooltip, (t, p) => this.createHostedView(t, p), t => t.dom.remove());\n    }\n    createHostedView(tooltip, prev) {\n        let hostedView = tooltip.create(this.view);\n        hostedView.dom.classList.add(\"cm-tooltip-section\");\n        this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);\n        if (this.mounted && hostedView.mount)\n            hostedView.mount(this.view);\n        return hostedView;\n    }\n    mount(view) {\n        for (let hostedView of this.manager.tooltipViews) {\n            if (hostedView.mount)\n                hostedView.mount(view);\n        }\n        this.mounted = true;\n    }\n    positioned(space) {\n        for (let hostedView of this.manager.tooltipViews) {\n            if (hostedView.positioned)\n                hostedView.positioned(space);\n        }\n    }\n    update(update) {\n        this.manager.update(update);\n    }\n    destroy() {\n        var _a;\n        for (let t of this.manager.tooltipViews)\n            (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);\n    }\n    passProp(name) {\n        let value = undefined;\n        for (let view of this.manager.tooltipViews) {\n            let given = view[name];\n            if (given !== undefined) {\n                if (value === undefined)\n                    value = given;\n                else if (value !== given)\n                    return undefined;\n            }\n        }\n        return value;\n    }\n    get offset() { return this.passProp(\"offset\"); }\n    get getCoords() { return this.passProp(\"getCoords\"); }\n    get overlap() { return this.passProp(\"overlap\"); }\n    get resize() { return this.passProp(\"resize\"); }\n}\nconst showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {\n    let tooltips = state.facet(showHoverTooltip);\n    if (tooltips.length === 0)\n        return null;\n    return {\n        pos: Math.min(...tooltips.map(t => t.pos)),\n        end: Math.max(...tooltips.map(t => { var _a; return (_a = t.end) !== null && _a !== void 0 ? _a : t.pos; })),\n        create: HoverTooltipHost.create,\n        above: tooltips[0].above,\n        arrow: tooltips.some(t => t.arrow),\n    };\n});\nclass HoverPlugin {\n    constructor(view, source, field, setHover, hoverTime) {\n        this.view = view;\n        this.source = source;\n        this.field = field;\n        this.setHover = setHover;\n        this.hoverTime = hoverTime;\n        this.hoverTimeout = -1;\n        this.restartTimeout = -1;\n        this.pending = null;\n        this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };\n        this.checkHover = this.checkHover.bind(this);\n        view.dom.addEventListener(\"mouseleave\", this.mouseleave = this.mouseleave.bind(this));\n        view.dom.addEventListener(\"mousemove\", this.mousemove = this.mousemove.bind(this));\n    }\n    update() {\n        if (this.pending) {\n            this.pending = null;\n            clearTimeout(this.restartTimeout);\n            this.restartTimeout = setTimeout(() => this.startHover(), 20);\n        }\n    }\n    get active() {\n        return this.view.state.field(this.field);\n    }\n    checkHover() {\n        this.hoverTimeout = -1;\n        if (this.active.length)\n            return;\n        let hovered = Date.now() - this.lastMove.time;\n        if (hovered < this.hoverTime)\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);\n        else\n            this.startHover();\n    }\n    startHover() {\n        clearTimeout(this.restartTimeout);\n        let { view, lastMove } = this;\n        let desc = view.docView.nearest(lastMove.target);\n        if (!desc)\n            return;\n        let pos, side = 1;\n        if (desc instanceof WidgetView) {\n            pos = desc.posAtStart;\n        }\n        else {\n            pos = view.posAtCoords(lastMove);\n            if (pos == null)\n                return;\n            let posCoords = view.coordsAtPos(pos);\n            if (!posCoords ||\n                lastMove.y < posCoords.top || lastMove.y > posCoords.bottom ||\n                lastMove.x < posCoords.left - view.defaultCharacterWidth ||\n                lastMove.x > posCoords.right + view.defaultCharacterWidth)\n                return;\n            let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);\n            let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;\n            side = (lastMove.x < posCoords.left ? -rtl : rtl);\n        }\n        let open = this.source(view, pos, side);\n        if (open === null || open === void 0 ? void 0 : open.then) {\n            let pending = this.pending = { pos };\n            open.then(result => {\n                if (this.pending == pending) {\n                    this.pending = null;\n                    if (result && !(Array.isArray(result) && !result.length))\n                        view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });\n                }\n            }, e => logException(view.state, e, \"hover tooltip\"));\n        }\n        else if (open && !(Array.isArray(open) && !open.length)) {\n            view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });\n        }\n    }\n    get tooltip() {\n        let plugin = this.view.plugin(tooltipPlugin);\n        let index = plugin ? plugin.manager.tooltips.findIndex(t => t.create == HoverTooltipHost.create) : -1;\n        return index > -1 ? plugin.manager.tooltipViews[index] : null;\n    }\n    mousemove(event) {\n        var _a, _b;\n        this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };\n        if (this.hoverTimeout < 0)\n            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);\n        let { active, tooltip } = this;\n        if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {\n            let { pos } = active[0] || this.pending, end = (_b = (_a = active[0]) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : pos;\n            if ((pos == end ? this.view.posAtCoords(this.lastMove) != pos\n                : !isOverRange(this.view, pos, end, event.clientX, event.clientY))) {\n                this.view.dispatch({ effects: this.setHover.of([]) });\n                this.pending = null;\n            }\n        }\n    }\n    mouseleave(event) {\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = -1;\n        let { active } = this;\n        if (active.length) {\n            let { tooltip } = this;\n            let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);\n            if (!inTooltip)\n                this.view.dispatch({ effects: this.setHover.of([]) });\n            else\n                this.watchTooltipLeave(tooltip.dom);\n        }\n    }\n    watchTooltipLeave(tooltip) {\n        let watch = (event) => {\n            tooltip.removeEventListener(\"mouseleave\", watch);\n            if (this.active.length && !this.view.dom.contains(event.relatedTarget))\n                this.view.dispatch({ effects: this.setHover.of([]) });\n        };\n        tooltip.addEventListener(\"mouseleave\", watch);\n    }\n    destroy() {\n        clearTimeout(this.hoverTimeout);\n        this.view.dom.removeEventListener(\"mouseleave\", this.mouseleave);\n        this.view.dom.removeEventListener(\"mousemove\", this.mousemove);\n    }\n}\nconst tooltipMargin = 4;\nfunction isInTooltip(tooltip, event) {\n    let rect = tooltip.getBoundingClientRect();\n    return event.clientX >= rect.left - tooltipMargin && event.clientX <= rect.right + tooltipMargin &&\n        event.clientY >= rect.top - tooltipMargin && event.clientY <= rect.bottom + tooltipMargin;\n}\nfunction isOverRange(view, from, to, x, y, margin) {\n    let rect = view.scrollDOM.getBoundingClientRect();\n    let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;\n    if (rect.left > x || rect.right < x || rect.top > y || Math.min(rect.bottom, docBottom) < y)\n        return false;\n    let pos = view.posAtCoords({ x, y }, false);\n    return pos >= from && pos <= to;\n}\n/**\nSet up a hover tooltip, which shows up when the pointer hovers\nover ranges of text. The callback is called when the mouse hovers\nover the document text. It should, if there is a tooltip\nassociated with position `pos`, return the tooltip description\n(either directly or in a promise). The `side` argument indicates\non which side of the position the pointer is—it will be -1 if the\npointer is before the position, 1 if after the position.\n\nNote that all hover tooltips are hosted within a single tooltip\ncontainer element. This allows multiple tooltips over the same\nrange to be \"merged\" together without overlapping.\n*/\nfunction hoverTooltip(source, options = {}) {\n    let setHover = StateEffect.define();\n    let hoverState = StateField.define({\n        create() { return []; },\n        update(value, tr) {\n            if (value.length) {\n                if (options.hideOnChange && (tr.docChanged || tr.selection))\n                    value = [];\n                else if (options.hideOn)\n                    value = value.filter(v => !options.hideOn(tr, v));\n                if (tr.docChanged) {\n                    let mapped = [];\n                    for (let tooltip of value) {\n                        let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);\n                        if (newPos != null) {\n                            let copy = Object.assign(Object.create(null), tooltip);\n                            copy.pos = newPos;\n                            if (copy.end != null)\n                                copy.end = tr.changes.mapPos(copy.end);\n                            mapped.push(copy);\n                        }\n                    }\n                    value = mapped;\n                }\n            }\n            for (let effect of tr.effects) {\n                if (effect.is(setHover))\n                    value = effect.value;\n                if (effect.is(closeHoverTooltipEffect))\n                    value = [];\n            }\n            return value;\n        },\n        provide: f => showHoverTooltip.from(f)\n    });\n    return [\n        hoverState,\n        ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, options.hoverTime || 300 /* Hover.Time */)),\n        showHoverTooltipHost\n    ];\n}\n/**\nGet the active tooltip view for a given tooltip, if available.\n*/\nfunction getTooltip(view, tooltip) {\n    let plugin = view.plugin(tooltipPlugin);\n    if (!plugin)\n        return null;\n    let found = plugin.manager.tooltips.indexOf(tooltip);\n    return found < 0 ? null : plugin.manager.tooltipViews[found];\n}\n/**\nReturns true if any hover tooltips are currently active.\n*/\nfunction hasHoverTooltips(state) {\n    return state.facet(showHoverTooltip).some(x => x);\n}\nconst closeHoverTooltipEffect = /*@__PURE__*/StateEffect.define();\n/**\nTransaction effect that closes all hover tooltips.\n*/\nconst closeHoverTooltips = /*@__PURE__*/closeHoverTooltipEffect.of(null);\n/**\nTell the tooltip extension to recompute the position of the active\ntooltips. This can be useful when something happens (such as a\nre-positioning or CSS change affecting the editor) that could\ninvalidate the existing tooltip positions.\n*/\nfunction repositionTooltips(view) {\n    let plugin = view.plugin(tooltipPlugin);\n    if (plugin)\n        plugin.maybeMeasure();\n}\n\nconst panelConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        let topContainer, bottomContainer;\n        for (let c of configs) {\n            topContainer = topContainer || c.topContainer;\n            bottomContainer = bottomContainer || c.bottomContainer;\n        }\n        return { topContainer, bottomContainer };\n    }\n});\n/**\nConfigures the panel-managing extension.\n*/\nfunction panels(config) {\n    return config ? [panelConfig.of(config)] : [];\n}\n/**\nGet the active panel created by the given constructor, if any.\nThis can be useful when you need access to your panels' DOM\nstructure.\n*/\nfunction getPanel(view, panel) {\n    let plugin = view.plugin(panelPlugin);\n    let index = plugin ? plugin.specs.indexOf(panel) : -1;\n    return index > -1 ? plugin.panels[index] : null;\n}\nconst panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.input = view.state.facet(showPanel);\n        this.specs = this.input.filter(s => s);\n        this.panels = this.specs.map(spec => spec(view));\n        let conf = view.state.facet(panelConfig);\n        this.top = new PanelGroup(view, true, conf.topContainer);\n        this.bottom = new PanelGroup(view, false, conf.bottomContainer);\n        this.top.sync(this.panels.filter(p => p.top));\n        this.bottom.sync(this.panels.filter(p => !p.top));\n        for (let p of this.panels) {\n            p.dom.classList.add(\"cm-panel\");\n            if (p.mount)\n                p.mount();\n        }\n    }\n    update(update) {\n        let conf = update.state.facet(panelConfig);\n        if (this.top.container != conf.topContainer) {\n            this.top.sync([]);\n            this.top = new PanelGroup(update.view, true, conf.topContainer);\n        }\n        if (this.bottom.container != conf.bottomContainer) {\n            this.bottom.sync([]);\n            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);\n        }\n        this.top.syncClasses();\n        this.bottom.syncClasses();\n        let input = update.state.facet(showPanel);\n        if (input != this.input) {\n            let specs = input.filter(x => x);\n            let panels = [], top = [], bottom = [], mount = [];\n            for (let spec of specs) {\n                let known = this.specs.indexOf(spec), panel;\n                if (known < 0) {\n                    panel = spec(update.view);\n                    mount.push(panel);\n                }\n                else {\n                    panel = this.panels[known];\n                    if (panel.update)\n                        panel.update(update);\n                }\n                panels.push(panel);\n                (panel.top ? top : bottom).push(panel);\n            }\n            this.specs = specs;\n            this.panels = panels;\n            this.top.sync(top);\n            this.bottom.sync(bottom);\n            for (let p of mount) {\n                p.dom.classList.add(\"cm-panel\");\n                if (p.mount)\n                    p.mount();\n            }\n        }\n        else {\n            for (let p of this.panels)\n                if (p.update)\n                    p.update(update);\n        }\n    }\n    destroy() {\n        this.top.sync([]);\n        this.bottom.sync([]);\n    }\n}, {\n    provide: plugin => EditorView.scrollMargins.of(view => {\n        let value = view.plugin(plugin);\n        return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };\n    })\n});\nclass PanelGroup {\n    constructor(view, top, container) {\n        this.view = view;\n        this.top = top;\n        this.container = container;\n        this.dom = undefined;\n        this.classes = \"\";\n        this.panels = [];\n        this.syncClasses();\n    }\n    sync(panels) {\n        for (let p of this.panels)\n            if (p.destroy && panels.indexOf(p) < 0)\n                p.destroy();\n        this.panels = panels;\n        this.syncDOM();\n    }\n    syncDOM() {\n        if (this.panels.length == 0) {\n            if (this.dom) {\n                this.dom.remove();\n                this.dom = undefined;\n            }\n            return;\n        }\n        if (!this.dom) {\n            this.dom = document.createElement(\"div\");\n            this.dom.className = this.top ? \"cm-panels cm-panels-top\" : \"cm-panels cm-panels-bottom\";\n            this.dom.style[this.top ? \"top\" : \"bottom\"] = \"0\";\n            let parent = this.container || this.view.dom;\n            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);\n        }\n        let curDOM = this.dom.firstChild;\n        for (let panel of this.panels) {\n            if (panel.dom.parentNode == this.dom) {\n                while (curDOM != panel.dom)\n                    curDOM = rm(curDOM);\n                curDOM = curDOM.nextSibling;\n            }\n            else {\n                this.dom.insertBefore(panel.dom, curDOM);\n            }\n        }\n        while (curDOM)\n            curDOM = rm(curDOM);\n    }\n    scrollMargin() {\n        return !this.dom || this.container ? 0\n            : Math.max(0, this.top ?\n                this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :\n                Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);\n    }\n    syncClasses() {\n        if (!this.container || this.classes == this.view.themeClasses)\n            return;\n        for (let cls of this.classes.split(\" \"))\n            if (cls)\n                this.container.classList.remove(cls);\n        for (let cls of (this.classes = this.view.themeClasses).split(\" \"))\n            if (cls)\n                this.container.classList.add(cls);\n    }\n}\nfunction rm(node) {\n    let next = node.nextSibling;\n    node.remove();\n    return next;\n}\n/**\nOpening a panel is done by providing a constructor function for\nthe panel through this facet. (The panel is closed again when its\nconstructor is no longer provided.) Values of `null` are ignored.\n*/\nconst showPanel = /*@__PURE__*/Facet.define({\n    enables: panelPlugin\n});\n\n/**\nA gutter marker represents a bit of information attached to a line\nin a specific gutter. Your own custom markers have to extend this\nclass.\n*/\nclass GutterMarker extends RangeValue {\n    /**\n    @internal\n    */\n    compare(other) {\n        return this == other || this.constructor == other.constructor && this.eq(other);\n    }\n    /**\n    Compare this marker to another marker of the same type.\n    */\n    eq(other) { return false; }\n    /**\n    Called if the marker has a `toDOM` method and its representation\n    was removed from a gutter.\n    */\n    destroy(dom) { }\n}\nGutterMarker.prototype.elementClass = \"\";\nGutterMarker.prototype.toDOM = undefined;\nGutterMarker.prototype.mapMode = MapMode.TrackBefore;\nGutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;\nGutterMarker.prototype.point = true;\n/**\nFacet used to add a class to all gutter elements for a given line.\nMarkers given to this facet should _only_ define an\n[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a\n[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear\nin all gutters for the line).\n*/\nconst gutterLineClass = /*@__PURE__*/Facet.define();\nconst defaults = {\n    class: \"\",\n    renderEmptyElements: false,\n    elementStyle: \"\",\n    markers: () => RangeSet.empty,\n    lineMarker: () => null,\n    widgetMarker: () => null,\n    lineMarkerChange: null,\n    initialSpacer: null,\n    updateSpacer: null,\n    domEventHandlers: {}\n};\nconst activeGutters = /*@__PURE__*/Facet.define();\n/**\nDefine an editor gutter. The order in which the gutters appear is\ndetermined by their extension priority.\n*/\nfunction gutter(config) {\n    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];\n}\nconst unfixGutters = /*@__PURE__*/Facet.define({\n    combine: values => values.some(x => x)\n});\n/**\nThe gutter-drawing plugin is automatically enabled when you add a\ngutter, but you can use this function to explicitly configure it.\n\nUnless `fixed` is explicitly set to `false`, the gutters are\nfixed, meaning they don't scroll along with the content\nhorizontally (except on Internet Explorer, which doesn't support\nCSS [`position:\nsticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).\n*/\nfunction gutters(config) {\n    let result = [\n        gutterView,\n    ];\n    if (config && config.fixed === false)\n        result.push(unfixGutters.of(true));\n    return result;\n}\nconst gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.prevViewport = view.viewport;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutters\";\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\n        this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + \"px\";\n        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));\n        for (let gutter of this.gutters)\n            this.dom.appendChild(gutter.dom);\n        this.fixed = !view.state.facet(unfixGutters);\n        if (this.fixed) {\n            // FIXME IE11 fallback, which doesn't support position: sticky,\n            // by using position: relative + event handlers that realign the\n            // gutter (or just force fixed=false on IE11?)\n            this.dom.style.position = \"sticky\";\n        }\n        this.syncGutters(false);\n        view.scrollDOM.insertBefore(this.dom, view.contentDOM);\n    }\n    update(update) {\n        if (this.updateGutters(update)) {\n            // Detach during sync when the viewport changed significantly\n            // (such as during scrolling), since for large updates that is\n            // faster.\n            let vpA = this.prevViewport, vpB = update.view.viewport;\n            let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);\n            this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);\n        }\n        if (update.geometryChanged) {\n            this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + \"px\";\n        }\n        if (this.view.state.facet(unfixGutters) != !this.fixed) {\n            this.fixed = !this.fixed;\n            this.dom.style.position = this.fixed ? \"sticky\" : \"\";\n        }\n        this.prevViewport = update.view.viewport;\n    }\n    syncGutters(detach) {\n        let after = this.dom.nextSibling;\n        if (detach)\n            this.dom.remove();\n        let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);\n        let classSet = [];\n        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));\n        for (let line of this.view.viewportLineBlocks) {\n            if (classSet.length)\n                classSet = [];\n            if (Array.isArray(line.type)) {\n                let first = true;\n                for (let b of line.type) {\n                    if (b.type == BlockType.Text && first) {\n                        advanceCursor(lineClasses, classSet, b.from);\n                        for (let cx of contexts)\n                            cx.line(this.view, b, classSet);\n                        first = false;\n                    }\n                    else if (b.widget) {\n                        for (let cx of contexts)\n                            cx.widget(this.view, b);\n                    }\n                }\n            }\n            else if (line.type == BlockType.Text) {\n                advanceCursor(lineClasses, classSet, line.from);\n                for (let cx of contexts)\n                    cx.line(this.view, line, classSet);\n            }\n            else if (line.widget) {\n                for (let cx of contexts)\n                    cx.widget(this.view, line);\n            }\n        }\n        for (let cx of contexts)\n            cx.finish();\n        if (detach)\n            this.view.scrollDOM.insertBefore(this.dom, after);\n    }\n    updateGutters(update) {\n        let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);\n        let change = update.docChanged || update.heightChanged || update.viewportChanged ||\n            !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);\n        if (prev == cur) {\n            for (let gutter of this.gutters)\n                if (gutter.update(update))\n                    change = true;\n        }\n        else {\n            change = true;\n            let gutters = [];\n            for (let conf of cur) {\n                let known = prev.indexOf(conf);\n                if (known < 0) {\n                    gutters.push(new SingleGutterView(this.view, conf));\n                }\n                else {\n                    this.gutters[known].update(update);\n                    gutters.push(this.gutters[known]);\n                }\n            }\n            for (let g of this.gutters) {\n                g.dom.remove();\n                if (gutters.indexOf(g) < 0)\n                    g.destroy();\n            }\n            for (let g of gutters)\n                this.dom.appendChild(g.dom);\n            this.gutters = gutters;\n        }\n        return change;\n    }\n    destroy() {\n        for (let view of this.gutters)\n            view.destroy();\n        this.dom.remove();\n    }\n}, {\n    provide: plugin => EditorView.scrollMargins.of(view => {\n        let value = view.plugin(plugin);\n        if (!value || value.gutters.length == 0 || !value.fixed)\n            return null;\n        return view.textDirection == Direction.LTR\n            ? { left: value.dom.offsetWidth * view.scaleX }\n            : { right: value.dom.offsetWidth * view.scaleX };\n    })\n});\nfunction asArray(val) { return (Array.isArray(val) ? val : [val]); }\nfunction advanceCursor(cursor, collect, pos) {\n    while (cursor.value && cursor.from <= pos) {\n        if (cursor.from == pos)\n            collect.push(cursor.value);\n        cursor.next();\n    }\n}\nclass UpdateContext {\n    constructor(gutter, viewport, height) {\n        this.gutter = gutter;\n        this.height = height;\n        this.i = 0;\n        this.cursor = RangeSet.iter(gutter.markers, viewport.from);\n    }\n    addElement(view, block, markers) {\n        let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;\n        if (this.i == gutter.elements.length) {\n            let newElt = new GutterElement(view, height, above, markers);\n            gutter.elements.push(newElt);\n            gutter.dom.appendChild(newElt.dom);\n        }\n        else {\n            gutter.elements[this.i].update(view, height, above, markers);\n        }\n        this.height = block.bottom;\n        this.i++;\n    }\n    line(view, line, extraMarkers) {\n        let localMarkers = [];\n        advanceCursor(this.cursor, localMarkers, line.from);\n        if (extraMarkers.length)\n            localMarkers = localMarkers.concat(extraMarkers);\n        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);\n        if (forLine)\n            localMarkers.unshift(forLine);\n        let gutter = this.gutter;\n        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)\n            return;\n        this.addElement(view, line, localMarkers);\n    }\n    widget(view, block) {\n        let marker = this.gutter.config.widgetMarker(view, block.widget, block);\n        if (marker)\n            this.addElement(view, block, [marker]);\n    }\n    finish() {\n        let gutter = this.gutter;\n        while (gutter.elements.length > this.i) {\n            let last = gutter.elements.pop();\n            gutter.dom.removeChild(last.dom);\n            last.destroy();\n        }\n    }\n}\nclass SingleGutterView {\n    constructor(view, config) {\n        this.view = view;\n        this.config = config;\n        this.elements = [];\n        this.spacer = null;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\n        for (let prop in config.domEventHandlers) {\n            this.dom.addEventListener(prop, (event) => {\n                let target = event.target, y;\n                if (target != this.dom && this.dom.contains(target)) {\n                    while (target.parentNode != this.dom)\n                        target = target.parentNode;\n                    let rect = target.getBoundingClientRect();\n                    y = (rect.top + rect.bottom) / 2;\n                }\n                else {\n                    y = event.clientY;\n                }\n                let line = view.lineBlockAtHeight(y - view.documentTop);\n                if (config.domEventHandlers[prop](view, line, event))\n                    event.preventDefault();\n            });\n        }\n        this.markers = asArray(config.markers(view));\n        if (config.initialSpacer) {\n            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);\n            this.dom.appendChild(this.spacer.dom);\n            this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\";\n        }\n    }\n    update(update) {\n        let prevMarkers = this.markers;\n        this.markers = asArray(this.config.markers(update.view));\n        if (this.spacer && this.config.updateSpacer) {\n            let updated = this.config.updateSpacer(this.spacer.markers[0], update);\n            if (updated != this.spacer.markers[0])\n                this.spacer.update(update.view, 0, 0, [updated]);\n        }\n        let vp = update.view.viewport;\n        return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||\n            (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);\n    }\n    destroy() {\n        for (let elt of this.elements)\n            elt.destroy();\n    }\n}\nclass GutterElement {\n    constructor(view, height, above, markers) {\n        this.height = -1;\n        this.above = 0;\n        this.markers = [];\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutterElement\";\n        this.update(view, height, above, markers);\n    }\n    update(view, height, above, markers) {\n        if (this.height != height) {\n            this.height = height;\n            this.dom.style.height = height + \"px\";\n        }\n        if (this.above != above)\n            this.dom.style.marginTop = (this.above = above) ? above + \"px\" : \"\";\n        if (!sameMarkers(this.markers, markers))\n            this.setMarkers(view, markers);\n    }\n    setMarkers(view, markers) {\n        let cls = \"cm-gutterElement\", domPos = this.dom.firstChild;\n        for (let iNew = 0, iOld = 0;;) {\n            let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;\n            if (marker) {\n                let c = marker.elementClass;\n                if (c)\n                    cls += \" \" + c;\n                for (let i = iOld; i < this.markers.length; i++)\n                    if (this.markers[i].compare(marker)) {\n                        skipTo = i;\n                        matched = true;\n                        break;\n                    }\n            }\n            else {\n                skipTo = this.markers.length;\n            }\n            while (iOld < skipTo) {\n                let next = this.markers[iOld++];\n                if (next.toDOM) {\n                    next.destroy(domPos);\n                    let after = domPos.nextSibling;\n                    domPos.remove();\n                    domPos = after;\n                }\n            }\n            if (!marker)\n                break;\n            if (marker.toDOM) {\n                if (matched)\n                    domPos = domPos.nextSibling;\n                else\n                    this.dom.insertBefore(marker.toDOM(view), domPos);\n            }\n            if (matched)\n                iOld++;\n        }\n        this.dom.className = cls;\n        this.markers = markers;\n    }\n    destroy() {\n        this.setMarkers(null, []); // First argument not used unless creating markers\n    }\n}\nfunction sameMarkers(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!a[i].compare(b[i]))\n            return false;\n    return true;\n}\n/**\nFacet used to provide markers to the line number gutter.\n*/\nconst lineNumberMarkers = /*@__PURE__*/Facet.define();\nconst lineNumberConfig = /*@__PURE__*/Facet.define({\n    combine(values) {\n        return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {\n            domEventHandlers(a, b) {\n                let result = Object.assign({}, a);\n                for (let event in b) {\n                    let exists = result[event], add = b[event];\n                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;\n                }\n                return result;\n            }\n        });\n    }\n});\nclass NumberMarker extends GutterMarker {\n    constructor(number) {\n        super();\n        this.number = number;\n    }\n    eq(other) { return this.number == other.number; }\n    toDOM() { return document.createTextNode(this.number); }\n}\nfunction formatNumber(view, number) {\n    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);\n}\nconst lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({\n    class: \"cm-lineNumbers\",\n    renderEmptyElements: false,\n    markers(view) { return view.state.facet(lineNumberMarkers); },\n    lineMarker(view, line, others) {\n        if (others.some(m => m.toDOM))\n            return null;\n        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));\n    },\n    widgetMarker: () => null,\n    lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),\n    initialSpacer(view) {\n        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));\n    },\n    updateSpacer(spacer, update) {\n        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));\n        return max == spacer.number ? spacer : new NumberMarker(max);\n    },\n    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers\n}));\n/**\nCreate a line number gutter extension.\n*/\nfunction lineNumbers(config = {}) {\n    return [\n        lineNumberConfig.of(config),\n        gutters(),\n        lineNumberGutter\n    ];\n}\nfunction maxLineNumber(lines) {\n    let last = 9;\n    while (last < lines)\n        last = last * 10 + 9;\n    return last;\n}\nconst activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {\n    constructor() {\n        super(...arguments);\n        this.elementClass = \"cm-activeLineGutter\";\n    }\n};\nconst activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute([\"selection\"], state => {\n    let marks = [], last = -1;\n    for (let range of state.selection.ranges) {\n        let linePos = state.doc.lineAt(range.head).from;\n        if (linePos > last) {\n            last = linePos;\n            marks.push(activeLineGutterMarker.range(linePos));\n        }\n    }\n    return RangeSet.of(marks);\n});\n/**\nReturns an extension that adds a `cm-activeLineGutter` class to\nall gutter elements on the [active\nline](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).\n*/\nfunction highlightActiveLineGutter() {\n    return activeLineGutterHighlighter;\n}\n\nconst WhitespaceDeco = /*@__PURE__*/new Map();\nfunction getWhitespaceDeco(space) {\n    let deco = WhitespaceDeco.get(space);\n    if (!deco)\n        WhitespaceDeco.set(space, deco = Decoration.mark({\n            attributes: space === \"\\t\" ? {\n                class: \"cm-highlightTab\",\n            } : {\n                class: \"cm-highlightSpace\",\n                \"data-display\": space.replace(/ /g, \"·\")\n            }\n        }));\n    return deco;\n}\nfunction matcher(decorator) {\n    return ViewPlugin.define(view => ({\n        decorations: decorator.createDeco(view),\n        update(u) {\n            this.decorations = decorator.updateDeco(u, this.decorations);\n        },\n    }), {\n        decorations: v => v.decorations\n    });\n}\nconst whitespaceHighlighter = /*@__PURE__*/matcher(/*@__PURE__*/new MatchDecorator({\n    regexp: /\\t| +/g,\n    decoration: match => getWhitespaceDeco(match[0]),\n    boundary: /\\S/,\n}));\n/**\nReturns an extension that highlights whitespace, adding a\n`cm-highlightSpace` class to stretches of spaces, and a\n`cm-highlightTab` class to individual tab characters. By default,\nthe former are shown as faint dots, and the latter as arrows.\n*/\nfunction highlightWhitespace() {\n    return whitespaceHighlighter;\n}\nconst trailingHighlighter = /*@__PURE__*/matcher(/*@__PURE__*/new MatchDecorator({\n    regexp: /\\s+$/g,\n    decoration: /*@__PURE__*/Decoration.mark({ class: \"cm-trailingSpace\" }),\n    boundary: /\\S/,\n}));\n/**\nReturns an extension that adds a `cm-trailingSpace` class to all\ntrailing whitespace.\n*/\nfunction highlightTrailingWhitespace() {\n    return trailingHighlighter;\n}\n\n/**\n@internal\n*/\nconst __test = { HeightMap, HeightOracle, MeasuredHeights, QueryType, ChangedRange, computeOrder, moveVisually };\n\nexport { BidiSpan, BlockInfo, BlockType, Decoration, Direction, EditorView, GutterMarker, MatchDecorator, RectangleMarker, ViewPlugin, ViewUpdate, WidgetType, __test, closeHoverTooltips, crosshairCursor, drawSelection, dropCursor, getDrawSelectionConfig, getPanel, getTooltip, gutter, gutterLineClass, gutters, hasHoverTooltips, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, highlightTrailingWhitespace, highlightWhitespace, hoverTooltip, keymap, layer, lineNumberMarkers, lineNumbers, logException, panels, placeholder, rectangularSelection, repositionTooltips, runScopeHandlers, scrollPastEnd, showPanel, showTooltip, tooltips };\n","/**\nThe default maximum length of a `TreeBuffer` node.\n*/\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/**\nEach [node type](#common.NodeType) or [individual tree](#common.Tree)\ncan have metadata associated with it in props. Instances of this\nclass represent prop names.\n*/\nclass NodeProp {\n    /**\n    Create a new node prop type.\n    */\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /**\n    This is meant to be used with\n    [`NodeSet.extend`](#common.NodeSet.extend) or\n    [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    prop values for each node type in the set. Takes a [match\n    object](#common.NodeType^match) or function that returns undefined\n    if the node type doesn't get this prop, and the prop's value if\n    it does.\n    */\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/**\nProp that is used to describe matching delimiters. For opening\ndelimiters, this holds an array of node names (written as a\nspace-separated string when declaring this prop in a grammar)\nfor the node types of closing delimiters that match it.\n*/\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nThe inverse of [`closedBy`](#common.NodeProp^closedBy). This is\nattached to closing delimiters, holding an array of node names\nof types of matching opening delimiters.\n*/\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nUsed to assign node types to groups (for example, all node\ntypes that represent an expression could be tagged with an\n`\"Expression\"` group).\n*/\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/**\nAttached to nodes to indicate these should be\n[displayed](https://codemirror.net/docs/ref/#language.syntaxTree)\nin a bidirectional text isolate, so that direction-neutral\ncharacters on their sides don't incorrectly get associated with\nsurrounding text. You'll generally want to set this for nodes\nthat contain arbitrary text, like strings and comments, and for\nnodes that appear _inside_ arbitrary text, like HTML tags. When\nnot given a value, in a grammar declaration, defaults to\n`\"auto\"`.\n*/\nNodeProp.isolate = new NodeProp({ deserialize: value => {\n        if (value && value != \"rtl\" && value != \"ltr\" && value != \"auto\")\n            throw new RangeError(\"Invalid value for isolate: \" + value);\n        return value || \"auto\";\n    } });\n/**\nThe hash of the [context](#lr.ContextTracker.constructor)\nthat the node was parsed in, if any. Used to limit reuse of\ncontextual nodes.\n*/\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/**\nThe distance beyond the end of the node that the tokenizer\nlooked ahead for any of the tokens inside the node. (The LR\nparser only stores this when it is larger than 25, for\nefficiency reasons.)\n*/\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/**\nThis per-node prop is used to replace a given node, or part of a\nnode, with another tree. This is useful to include trees from\ndifferent languages in mixed-language parsers.\n*/\nNodeProp.mounted = new NodeProp({ perNode: true });\n/**\nA mounted tree, which can be [stored](#common.NodeProp^mounted) on\na tree node to indicate that parts of its content are\nrepresented by another tree.\n*/\nclass MountedTree {\n    constructor(\n    /**\n    The inner tree.\n    */\n    tree, \n    /**\n    If this is null, this tree replaces the entire node (it will\n    be included in the regular iteration instead of its host\n    node). If not, only the given ranges are considered to be\n    covered by this tree. This is used for trees that are mixed in\n    a way that isn't strictly hierarchical. Such mounted trees are\n    only entered by [`resolveInner`](#common.Tree.resolveInner)\n    and [`enter`](#common.SyntaxNode.enter).\n    */\n    overlay, \n    /**\n    The parser used to create this subtree.\n    */\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n    /**\n    @internal\n    */\n    static get(tree) {\n        return tree && tree.props && tree.props[NodeProp.mounted.id];\n    }\n}\nconst noProps = Object.create(null);\n/**\nEach node in a syntax tree has a node type associated with it.\n*/\nclass NodeType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name of the node type. Not necessarily unique, but if the\n    grammar was written properly, different node types with the\n    same name within a node set should play the same semantic\n    role.\n    */\n    name, \n    /**\n    @internal\n    */\n    props, \n    /**\n    The id of this node in its set. Corresponds to the term ids\n    used in the parser.\n    */\n    id, \n    /**\n    @internal\n    */\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /**\n    Define a node type.\n    */\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /**\n    Retrieves a node prop for this type. Will return `undefined` if\n    the prop isn't present on this node.\n    */\n    prop(prop) { return this.props[prop.id]; }\n    /**\n    True when this is the top node of a grammar.\n    */\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /**\n    True when this node is produced by a skip rule.\n    */\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /**\n    Indicates whether this is an error node.\n    */\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /**\n    When true, this node type doesn't correspond to a user-declared\n    named node, for example because it is used to cache repetition.\n    */\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /**\n    Returns true when this node's name or one of its\n    [groups](#common.NodeProp^group) matches the given string.\n    */\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /**\n    Create a function from node types to arbitrary values by\n    specifying an object whose property names are node or\n    [group](#common.NodeProp^group) names. Often useful with\n    [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    names, separated by spaces, in a single property name to map\n    multiple node names to a single value.\n    */\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/**\nAn empty dummy node type to use when no actual type is available.\n*/\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/**\nA node set holds a collection of node types. It is used to\ncompactly represent trees by storing their type ids, rather than a\nfull pointer to the type object, in a numeric array. Each parser\n[has](#lr.LRParser.nodeSet) a node set, and [tree\nbuffers](#common.TreeBuffer) can only store collections of nodes\nfrom the same set. A set can have a maximum of 2**16 (65536) node\ntypes in it, so that the ids fit into 16-bit typed array slots.\n*/\nclass NodeSet {\n    /**\n    Create a set with the given types. The `id` property of each\n    type should correspond to its position within the array.\n    */\n    constructor(\n    /**\n    The node types in this set, by id.\n    */\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /**\n    Create a copy of this set with some node properties added. The\n    arguments to this method can be created with\n    [`NodeProp.add`](#common.NodeProp.add).\n    */\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/**\nOptions that control iteration. Can be combined with the `|`\noperator to enable multiple ones.\n*/\nvar IterMode;\n(function (IterMode) {\n    /**\n    When enabled, iteration will only visit [`Tree`](#common.Tree)\n    objects, not nodes packed into\n    [`TreeBuffer`](#common.TreeBuffer)s.\n    */\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /**\n    Enable this to make iteration include anonymous nodes (such as\n    the nodes that wrap repeated grammar constructs into a balanced\n    tree).\n    */\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /**\n    By default, regular [mounted](#common.NodeProp^mounted) nodes\n    replace their base node in iteration. Enable this to ignore them\n    instead.\n    */\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /**\n    This option only applies in\n    [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    library to not enter mounted overlays if one covers the given\n    position.\n    */\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/**\nA piece of syntax tree. There are two ways to approach these\ntrees: the way they are actually stored in memory, and the\nconvenient way.\n\nSyntax trees are stored as a tree of `Tree` and `TreeBuffer`\nobjects. By packing detail information into `TreeBuffer` leaf\nnodes, the representation is made a lot more memory-efficient.\n\nHowever, when you want to actually work with tree nodes, this\nrepresentation is very awkward, so most client code will want to\nuse the [`TreeCursor`](#common.TreeCursor) or\n[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\na view on some part of this data structure, and can be used to\nmove around to adjacent nodes.\n*/\nclass Tree {\n    /**\n    Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    */\n    constructor(\n    /**\n    The type of the top node.\n    */\n    type, \n    /**\n    This node's child nodes.\n    */\n    children, \n    /**\n    The positions (offsets relative to the start of this tree) of\n    the children.\n    */\n    positions, \n    /**\n    The total length of this tree\n    */\n    length, \n    /**\n    Per-node [node props](#common.NodeProp) to associate with this node.\n    */\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /**\n        @internal\n        */\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let mounted = MountedTree.get(this);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    the tree. Mode can be used to [control](#common.IterMode) which\n    nodes the cursor visits.\n    */\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /**\n    Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    at the given position and side (see\n    [`moveTo`](#common.TreeCursor.moveTo).\n    */\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) object for the top of the\n    tree.\n    */\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /**\n    Get the [syntax node](#common.SyntaxNode) at the given position.\n    If `side` is -1, this will move into nodes that end at the\n    position. If 1, it'll move into nodes that start at the\n    position. With 0, it'll only enter nodes that cover the position\n    from both sides.\n    \n    Note that this will not enter\n    [overlays](#common.MountedTree.overlay), and you often want\n    [`resolveInner`](#common.Tree.resolveInner) instead.\n    */\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /**\n    Like [`resolve`](#common.Tree.resolve), but will enter\n    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    pointing into the innermost overlaid tree at the given position\n    (with parent links going through all parent structure, including\n    the host trees).\n    */\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /**\n    In some situations, it can be useful to iterate through all\n    nodes around a position, including those in overlays that don't\n    directly cover the position. This method gives you an iterator\n    that will produce all nodes, from small to big, around the given\n    position.\n    */\n    resolveStack(pos, side = 0) {\n        return stackIterator(this, pos, side);\n    }\n    /**\n    Iterate over the tree and its children, calling `enter` for any\n    node that touches the `from`/`to` region (if given) before\n    running over such a node's children, and `leave` (if given) when\n    leaving the node. When `enter` returns `false`, that node will\n    not have its children iterated over (or `leave` called).\n    */\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;\n        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && (anon || !c.type.isAnonymous))\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /**\n    Get the value of the given [node prop](#common.NodeProp) for this\n    node. Works with both per-node and per-type props.\n    */\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /**\n    Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    format that can be passed to the [`Tree`](#common.Tree)\n    constructor.\n    */\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /**\n    Balance the direct children of this tree, producing a copy of\n    which may have children grouped into subtrees with type\n    [`NodeType.none`](#common.NodeType^none).\n    */\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /**\n    Build a tree from a postfix-ordered buffer of node information,\n    or a cursor over such a buffer.\n    */\n    static build(data) { return buildTree(data); }\n}\n/**\nThe empty tree\n*/\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/**\nTree buffers contain (type, start, end, endIndex) quads for each\nnode. In such a buffer, nodes are stored in prefix order (parents\nbefore children, with the endIndex of the parent indicating which\nchildren belong to it).\n*/\nclass TreeBuffer {\n    /**\n    Create a tree buffer.\n    */\n    constructor(\n    /**\n    The buffer's content.\n    */\n    buffer, \n    /**\n    The total length of the group of nodes in the buffer.\n    */\n    length, \n    /**\n    The node set used in this buffer.\n    */\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /**\n    @internal\n    */\n    get type() { return NodeType.none; }\n    /**\n    @internal\n    */\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /**\n    @internal\n    */\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /**\n    @internal\n    */\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /**\n    @internal\n    */\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass BaseNode {\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    matchContext(context) {\n        return matchNodeContext(this, context);\n    }\n    enterUnfinishedNodesBefore(pos) {\n        let scan = this.childBefore(pos), node = this;\n        while (scan) {\n            let last = scan.lastChild;\n            if (!last || last.to != scan.to)\n                break;\n            if (last.type.isError && last.from == last.to) {\n                node = scan;\n                scan = last.prevSibling;\n            }\n            else {\n                scan = last;\n            }\n        }\n        return node;\n    }\n    get node() { return this; }\n    get next() { return this.parent; }\n}\nclass TreeNode extends BaseNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        super();\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    /**\n    @internal\n    */\n    toString() { return this._tree.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        for (let found = false; !found;) {\n            found = cur.type.is(before);\n            if (!cur.nextSibling())\n                return result;\n        }\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode extends BaseNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        super();\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    /**\n    @internal\n    */\n    toString() { return this.context.buffer.childString(this.index); }\n}\nfunction iterStack(heads) {\n    if (!heads.length)\n        return null;\n    let pick = 0, picked = heads[0];\n    for (let i = 1; i < heads.length; i++) {\n        let node = heads[i];\n        if (node.from > picked.from || node.to < picked.to) {\n            picked = node;\n            pick = i;\n        }\n    }\n    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;\n    let newHeads = heads.slice();\n    if (next)\n        newHeads[pick] = next;\n    else\n        newHeads.splice(pick, 1);\n    return new StackIterator(newHeads, picked);\n}\nclass StackIterator {\n    constructor(heads, node) {\n        this.heads = heads;\n        this.node = node;\n    }\n    get next() { return iterStack(this.heads); }\n}\nfunction stackIterator(tree, pos, side) {\n    let inner = tree.resolveInner(pos, side), layers = null;\n    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {\n        if (scan.index < 0) { // This is an overlay root\n            let parent = scan.parent;\n            (layers || (layers = [inner])).push(parent.resolve(pos, side));\n            scan = parent;\n        }\n        else {\n            let mount = MountedTree.get(scan.tree);\n            // Relevant overlay branching off\n            if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {\n                let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);\n                (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));\n            }\n        }\n    }\n    return layers ? iterStack(layers) : inner;\n}\n/**\nA tree cursor object focuses on a given node in a syntax tree, and\nallows you to move to adjacent nodes.\n*/\nclass TreeCursor {\n    /**\n    Shorthand for `.type.name`.\n    */\n    get name() { return this.type.name; }\n    /**\n    @internal\n    */\n    constructor(node, \n    /**\n    @internal\n    */\n    mode = 0) {\n        this.mode = mode;\n        /**\n        @internal\n        */\n        this.buffer = null;\n        this.stack = [];\n        /**\n        @internal\n        */\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    /**\n    @internal\n    */\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /**\n    @internal\n    */\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /**\n    Move the cursor to this node's first child. When this returns\n    false, the node has no child, and the cursor has not been moved.\n    */\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to this node's last child.\n    */\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /**\n    Move the cursor to the first child that ends after `pos`.\n    */\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /**\n    Move to the last child that starts before `pos`.\n    */\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /**\n    Move the cursor to the child around `pos`. If side is -1 the\n    child may end at that position, when 1 it may start there. This\n    will also enter [overlaid](#common.MountedTree.overlay)\n    [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    set to false.\n    */\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /**\n    Move to the node's parent node, if this isn't the top node.\n    */\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /**\n    @internal\n    */\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /**\n    Move to this node's next sibling, if any.\n    */\n    nextSibling() { return this.sibling(1); }\n    /**\n    Move to this node's previous sibling, if any.\n    */\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /**\n    Move to the next node in a\n    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    traversal, going from a node to its first child or, if the\n    current node is empty or `enter` is false, its next sibling or\n    the next sibling of the first parent node that has one.\n    */\n    next(enter = true) { return this.move(1, enter); }\n    /**\n    Move to the next node in a last-to-first pre-order traveral. A\n    node is followed by its last child or, if it has none, its\n    previous sibling or the previous sibling of the first parent\n    node that has one.\n    */\n    prev(enter = true) { return this.move(-1, enter); }\n    /**\n    Move the cursor to the innermost node that covers `pos`. If\n    `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    it will enter nodes that start at `pos`.\n    */\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /**\n    Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    position.\n    */\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /**\n    Get the [tree](#common.Tree) that represents the current node, if\n    any. Will return null when the node is in a [tree\n    buffer](#common.TreeBuffer).\n    */\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /**\n    Iterate over the current node and all its descendants, calling\n    `enter` when entering a node and `leave`, if given, when leaving\n    one. When `enter` returns `false`, any children of that node are\n    skipped, and `leave` isn't called for it.\n    */\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /**\n    Test whether the current node matches a given context—a sequence\n    of direct parent node names. Empty strings in the context array\n    are treated as wildcards.\n    */\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else if (depth > 2500 /* CutOff.Depth */) {\n                    takeFlatNode(start, endPos, localChildren, localPositions);\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function takeFlatNode(parentStart, minPos, children, positions) {\n        let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions\n        let nodeCount = 0, stopAt = -1;\n        while (cursor.pos > minPos) {\n            let { id, start, end, size } = cursor;\n            if (size > 4) { // Not a leaf\n                cursor.next();\n            }\n            else if (stopAt > -1 && start < stopAt) {\n                break;\n            }\n            else {\n                if (stopAt < 0)\n                    stopAt = end - maxBufferLength;\n                nodes.push(id, start, end);\n                nodeCount++;\n                cursor.next();\n            }\n        }\n        if (nodeCount) {\n            let buffer = new Uint16Array(nodeCount * 4);\n            let start = nodes[nodes.length - 2];\n            for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {\n                buffer[j++] = nodes[i];\n                buffer[j++] = nodes[i + 1] - start;\n                buffer[j++] = nodes[i + 2] - start;\n                buffer[j++] = j;\n            }\n            children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));\n            positions.push(start - parentStart);\n        }\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/**\nProvides a way to associate values with pieces of trees. As long\nas that part of the tree is reused, the associated values can be\nretrieved from an updated tree.\n*/\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /**\n    Set the value for this syntax node.\n    */\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /**\n    Retrieve value for this syntax node, if it exists in the map.\n    */\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /**\n    Set the value for the node that a cursor currently points to.\n    */\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /**\n    Retrieve the value for the node that a cursor currently points\n    to.\n    */\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/**\nTree fragments are used during [incremental\nparsing](#common.Parser.startParse) to track parts of old trees\nthat can be reused in a new parse. An array of fragments is used\nto track regions of an old tree whose nodes might be reused in new\nparses. Use the static\n[`applyChanges`](#common.TreeFragment^applyChanges) method to\nupdate fragments for document changes.\n*/\nclass TreeFragment {\n    /**\n    Construct a tree fragment. You'll usually want to use\n    [`addTree`](#common.TreeFragment^addTree) and\n    [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    calling this directly.\n    */\n    constructor(\n    /**\n    The start of the unchanged range pointed to by this fragment.\n    This refers to an offset in the _updated_ document (as opposed\n    to the original tree).\n    */\n    from, \n    /**\n    The end of the unchanged range.\n    */\n    to, \n    /**\n    The tree that this fragment is based on.\n    */\n    tree, \n    /**\n    The offset between the fragment's tree and the document that\n    this fragment can be used against. Add this when going from\n    document to tree positions, subtract it to go from tree to\n    document positions.\n    */\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /**\n    Whether the start of the fragment represents the start of a\n    parse, or the end of a change. (In the second case, it may not\n    be safe to reuse some nodes at the start, depending on the\n    parsing algorithm.)\n    */\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /**\n    Whether the end of the fragment represents the end of a\n    full-document parse, or the start of a change.\n    */\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /**\n    Create a set of fragments from a freshly parsed tree, or update\n    an existing set of fragments by replacing the ones that overlap\n    with a tree with content from the new tree. When `partial` is\n    true, the parse is treated as incomplete, and the resulting\n    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    true.\n    */\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /**\n    Apply a set of edits to an array of fragments, removing or\n    splitting fragments as necessary to remove edited ranges, and\n    adjusting offsets for fragments that moved.\n    */\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/**\nA superclass that parsers should extend.\n*/\nclass Parser {\n    /**\n    Start a parse, returning a [partial parse](#common.PartialParse)\n    object. [`fragments`](#common.TreeFragment) can be passed in to\n    make the parse incremental.\n    \n    By default, the entire input is parsed. You can pass `ranges`,\n    which should be a sorted array of non-empty, non-overlapping\n    ranges, to parse only those ranges. The tree returned in that\n    case will start at `ranges[0].from`.\n    */\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /**\n    Run a full parse, returning the resulting tree.\n    */\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/**\nCreate a parse wrapper that, after the inner parse completes,\nscans its tree for mixed language regions with the `nest`\nfunction, runs the resulting [inner parses](#common.NestedParse),\nand then [mounts](#common.NodeProp^mounted) their results onto the\ntree.\n*/\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, from) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.from = from;\n    }\n}\nfunction checkRanges(ranges) {\n    if (!ranges.length || ranges.some(r => r.from >= r.to))\n        throw new RangeError(\"Invalid inner parse ranges given: \" + JSON.stringify(ranges));\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered;;) {\n            let enter = true, range;\n            if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {\n                enter = false;\n            }\n            else if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&\n                (cursor.from < cursor.to || !nest.overlay)) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay ||\n                        (cursor.from < cursor.to ? [new Range(cursor.from, cursor.to)] : []));\n                    if (ranges.length)\n                        checkRanges(ranges);\n                    if (ranges.length || !nest.overlay)\n                        this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)\n                            : nest.parser.startParse(\"\"), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length) {\n                            checkRanges(ranges);\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));\n                        }\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, stack = [];\n    let buffer = node.context.buffer;\n    // Scan up to the nearest tree\n    do {\n        stack.push(cursor.index);\n        cursor.parent();\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let base = cursor.tree, i = base.children.indexOf(buffer);\n    let buf = base.children[i], b = buf.buffer, newStack = [i];\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length, stackPos) {\n        let targetI = stack[stackPos];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, targetI, children, positions, innerOffset);\n        let from = b[targetI + 1], to = b[targetI + 2];\n        newStack.push(children.length);\n        let child = stackPos\n            ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)\n            : node.toTree();\n        children.push(child);\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);\n    // Move the cursor back to the target node\n    for (let index of newStack) {\n        let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];\n        cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));\n    }\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n","import { NodeProp } from '@lezer/common';\n\nlet nextTagID = 0;\n/**\nHighlighting tags are markers that denote a highlighting category.\nThey are [associated](#highlight.styleTags) with parts of a syntax\ntree by a language mode, and then mapped to an actual CSS style by\na [highlighter](#highlight.Highlighter).\n\nBecause syntax tree node types and highlight styles have to be\nable to talk the same language, CodeMirror uses a mostly _closed_\n[vocabulary](#highlight.tags) of syntax tags (as opposed to\ntraditional open string-based systems, which make it hard for\nhighlighting themes to cover all the tokens produced by the\nvarious languages).\n\nIt _is_ possible to [define](#highlight.Tag^define) your own\nhighlighting tags for system-internal use (where you control both\nthe language package and the highlighter), but such tags will not\nbe picked up by regular highlighters (though you can derive them\nfrom standard tags to allow highlighters to fall back to those).\n*/\nclass Tag {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The set of this tag and all its parent tags, starting with\n    this one itself and sorted in order of decreasing specificity.\n    */\n    set, \n    /**\n    The base unmodified tag that this one is based on, if it's\n    modified @internal\n    */\n    base, \n    /**\n    The modifiers applied to this.base @internal\n    */\n    modified) {\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /**\n        @internal\n        */\n        this.id = nextTagID++;\n    }\n    /**\n    Define a new tag. If `parent` is given, the tag is treated as a\n    sub-tag of that parent, and\n    [highlighters](#highlight.tagHighlighter) that don't mention\n    this tag will try to fall back to the parent tag (or grandparent\n    tag, etc).\n    */\n    static define(parent) {\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\n            throw new Error(\"Can not derive from a modified tag\");\n        let tag = new Tag([], null, []);\n        tag.set.push(tag);\n        if (parent)\n            for (let t of parent.set)\n                tag.set.push(t);\n        return tag;\n    }\n    /**\n    Define a tag _modifier_, which is a function that, given a tag,\n    will return a tag that is a subtag of the original. Applying the\n    same modifier to a twice tag will return the same value (`m1(t1)\n    == m1(t1)`) and applying multiple modifiers will, regardless or\n    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    \n    When multiple modifiers are applied to a given base tag, each\n    smaller set of modifiers is registered as a parent, so that for\n    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    `m1(m3(t1)`, and so on.\n    */\n    static defineModifier() {\n        let mod = new Modifier;\n        return (tag) => {\n            if (tag.modified.indexOf(mod) > -1)\n                return tag;\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n        };\n    }\n}\nlet nextModifierID = 0;\nclass Modifier {\n    constructor() {\n        this.instances = [];\n        this.id = nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length)\n            return base;\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\n        if (exists)\n            return exists;\n        let set = [], tag = new Tag(set, base, mods);\n        for (let m of mods)\n            m.instances.push(tag);\n        let configs = powerSet(mods);\n        for (let parent of base.set)\n            if (!parent.modified.length)\n                for (let config of configs)\n                    set.push(Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction sameArray(a, b) {\n    return a.length == b.length && a.every((x, i) => x == b[i]);\n}\nfunction powerSet(array) {\n    let sets = [[]];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0, e = sets.length; j < e; j++) {\n            sets.push(sets[j].concat(array[i]));\n        }\n    }\n    return sets.sort((a, b) => b.length - a.length);\n}\n/**\nThis function is used to add a set of tags to a language syntax\nvia [`NodeSet.extend`](#common.NodeSet.extend) or\n[`LRParser.configure`](#lr.LRParser.configure).\n\nThe argument object maps node selectors to [highlighting\ntags](#highlight.Tag) or arrays of tags.\n\nNode selectors may hold one or more (space-separated) node paths.\nSuch a path can be a [node name](#common.NodeType.name), or\nmultiple node names (or `*` wildcards) separated by slash\ncharacters, as in `\"Block/Declaration/VariableName\"`. Such a path\nmatches the final node but only if its direct parent nodes are the\nother nodes mentioned. A `*` in such a path matches any parent,\nbut only a single level—wildcards that match multiple parents\naren't supported, both for efficiency reasons and because Lezer\ntrees make it rather hard to reason about what they would match.)\n\nA path can be ended with `/...` to indicate that the tag assigned\nto the node should also apply to all child nodes, even if they\nmatch their own style (by default, only the innermost style is\nused).\n\nWhen a path ends in `!`, as in `Attribute!`, no further matching\nhappens for the node's child nodes, and the entire node gets the\ngiven style.\n\nIn this notation, node names that contain `/`, `!`, `*`, or `...`\nmust be quoted as JSON strings.\n\nFor example:\n\n```javascript\nparser.withProps(\n  styleTags({\n    // Style Number and BigNumber nodes\n    \"Number BigNumber\": tags.number,\n    // Style Escape nodes whose parent is String\n    \"String/Escape\": tags.escape,\n    // Style anything inside Attributes nodes\n    \"Attributes!\": tags.meta,\n    // Add a style to all content inside Italic nodes\n    \"Italic/...\": tags.emphasis,\n    // Style InvalidString nodes as both `string` and `invalid`\n    \"InvalidString\": [tags.string, tags.invalid],\n    // Style the node named \"/\" as punctuation\n    '\"/\"': tags.punctuation\n  })\n)\n```\n*/\nfunction styleTags(spec) {\n    let byName = Object.create(null);\n    for (let prop in spec) {\n        let tags = spec[prop];\n        if (!Array.isArray(tags))\n            tags = [tags];\n        for (let part of prop.split(\" \"))\n            if (part) {\n                let pieces = [], mode = 2 /* Mode.Normal */, rest = part;\n                for (let pos = 0;;) {\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                        mode = 1 /* Mode.Inherit */;\n                        break;\n                    }\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                    if (!m)\n                        throw new RangeError(\"Invalid path: \" + part);\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                    pos += m[0].length;\n                    if (pos == part.length)\n                        break;\n                    let next = part[pos++];\n                    if (pos == part.length && next == \"!\") {\n                        mode = 0 /* Mode.Opaque */;\n                        break;\n                    }\n                    if (next != \"/\")\n                        throw new RangeError(\"Invalid path: \" + part);\n                    rest = part.slice(pos);\n                }\n                let last = pieces.length - 1, inner = pieces[last];\n                if (!inner)\n                    throw new RangeError(\"Invalid path: \" + part);\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n                byName[inner] = rule.sort(byName[inner]);\n            }\n    }\n    return ruleNodeProp.add(byName);\n}\nconst ruleNodeProp = new NodeProp();\nclass Rule {\n    constructor(tags, mode, context, next) {\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    get opaque() { return this.mode == 0 /* Mode.Opaque */; }\n    get inherit() { return this.mode == 1 /* Mode.Inherit */; }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() { return this.context ? this.context.length : 0; }\n}\nRule.empty = new Rule([], 2 /* Mode.Normal */, null);\n/**\nDefine a [highlighter](#highlight.Highlighter) from an array of\ntag/class pairs. Classes associated with more specific tags will\ntake precedence.\n*/\nfunction tagHighlighter(tags, options) {\n    let map = Object.create(null);\n    for (let style of tags) {\n        if (!Array.isArray(style.tag))\n            map[style.tag.id] = style.class;\n        else\n            for (let tag of style.tag)\n                map[tag.id] = style.class;\n    }\n    let { scope, all = null } = options || {};\n    return {\n        style: (tags) => {\n            let cls = all;\n            for (let tag of tags) {\n                for (let sub of tag.set) {\n                    let tagClass = map[sub.id];\n                    if (tagClass) {\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\n                        break;\n                    }\n                }\n            }\n            return cls;\n        },\n        scope\n    };\n}\nfunction highlightTags(highlighters, tags) {\n    let result = null;\n    for (let highlighter of highlighters) {\n        let value = highlighter.style(tags);\n        if (value)\n            result = result ? result + \" \" + value : value;\n    }\n    return result;\n}\n/**\nHighlight the given [tree](#common.Tree) with the given\n[highlighter](#highlight.Highlighter). Often, the higher-level\n[`highlightCode`](#highlight.highlightCode) function is easier to\nuse.\n*/\nfunction highlightTree(tree, highlighter, \n/**\nAssign styling to a region of the text. Will be called, in order\nof position, for any ranges where more than zero classes apply.\n`classes` is a space separated string of CSS classes.\n*/\nputStyle, \n/**\nThe start of the range to highlight.\n*/\nfrom = 0, \n/**\nThe end of the range.\n*/\nto = tree.length) {\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\n    builder.flush(to);\n}\n/**\nHighlight the given tree with the given highlighter, calling\n`putText` for every piece of text, either with a set of classes or\nwith the empty string when unstyled, and `putBreak` for every line\nbreak.\n*/\nfunction highlightCode(code, tree, highlighter, putText, putBreak, from = 0, to = code.length) {\n    let pos = from;\n    function writeTo(p, classes) {\n        if (p <= pos)\n            return;\n        for (let text = code.slice(pos, p), i = 0;;) {\n            let nextBreak = text.indexOf(\"\\n\", i);\n            let upto = nextBreak < 0 ? text.length : nextBreak;\n            if (upto > i)\n                putText(text.slice(i, upto), classes);\n            if (nextBreak < 0)\n                break;\n            putBreak();\n            i = nextBreak + 1;\n        }\n        pos = p;\n    }\n    highlightTree(tree, highlighter, (from, to, classes) => {\n        writeTo(from, \"\");\n        writeTo(to, classes);\n    }, from, to);\n    writeTo(to, \"\");\n}\nclass HighlightBuilder {\n    constructor(at, highlighters, span) {\n        this.at = at;\n        this.highlighters = highlighters;\n        this.span = span;\n        this.class = \"\";\n    }\n    startSpan(at, cls) {\n        if (cls != this.class) {\n            this.flush(at);\n            if (at > this.at)\n                this.at = at;\n            this.class = cls;\n        }\n    }\n    flush(to) {\n        if (to > this.at && this.class)\n            this.span(this.at, to, this.class);\n    }\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\n        let { type, from: start, to: end } = cursor;\n        if (start >= to || end <= from)\n            return;\n        if (type.isTop)\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\n        let cls = inheritedClass;\n        let rule = getStyleTags(cursor) || Rule.empty;\n        let tagCls = highlightTags(highlighters, rule.tags);\n        if (tagCls) {\n            if (cls)\n                cls += \" \";\n            cls += tagCls;\n            if (rule.mode == 1 /* Mode.Inherit */)\n                inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\n        }\n        this.startSpan(Math.max(from, start), cls);\n        if (rule.opaque)\n            return;\n        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);\n        if (mounted && mounted.overlay) {\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\n            let hasChild = cursor.firstChild();\n            for (let i = 0, pos = start;; i++) {\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\n                let nextPos = next ? next.from + start : end;\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\n                if (rangeFrom < rangeTo && hasChild) {\n                    while (cursor.from < rangeTo) {\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\n                        this.startSpan(Math.min(rangeTo, cursor.to), cls);\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\n                            break;\n                    }\n                }\n                if (!next || nextPos > to)\n                    break;\n                pos = next.to + start;\n                if (pos > from) {\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), \"\", innerHighlighters);\n                    this.startSpan(Math.min(to, pos), cls);\n                }\n            }\n            if (hasChild)\n                cursor.parent();\n        }\n        else if (cursor.firstChild()) {\n            if (mounted)\n                inheritedClass = \"\";\n            do {\n                if (cursor.to <= from)\n                    continue;\n                if (cursor.from >= to)\n                    break;\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\n                this.startSpan(Math.min(to, cursor.to), cls);\n            } while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n}\n/**\nMatch a syntax node's [highlight rules](#highlight.styleTags). If\nthere's a match, return its set of tags, and whether it is\nopaque (uses a `!`) or applies to all child nodes (`/...`).\n*/\nfunction getStyleTags(node) {\n    let rule = node.type.prop(ruleNodeProp);\n    while (rule && rule.context && !node.matchContext(rule.context))\n        rule = rule.next;\n    return rule || null;\n}\nconst t = Tag.define;\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\n/**\nThe default set of highlighting [tags](#highlight.Tag).\n\nThis collection is heavily biased towards programming languages,\nand necessarily incomplete. A full ontology of syntactic\nconstructs would fill a stack of books, and be impractical to\nwrite themes for. So try to make do with this set. If all else\nfails, [open an\nissue](https://github.com/codemirror/codemirror.next) to propose a\nnew tag, or [define](#highlight.Tag^define) a local custom tag for\nyour use case.\n\nNote that it is not obligatory to always attach the most specific\ntag possible to an element—if your grammar can't easily\ndistinguish a certain type of element (such as a local variable),\nit is okay to style it as its more general variant (a variable).\n\nFor tags that extend some parent tag, the documentation links to\nthe parent.\n*/\nconst tags = {\n    /**\n    A comment.\n    */\n    comment,\n    /**\n    A line [comment](#highlight.tags.comment).\n    */\n    lineComment: t(comment),\n    /**\n    A block [comment](#highlight.tags.comment).\n    */\n    blockComment: t(comment),\n    /**\n    A documentation [comment](#highlight.tags.comment).\n    */\n    docComment: t(comment),\n    /**\n    Any kind of identifier.\n    */\n    name,\n    /**\n    The [name](#highlight.tags.name) of a variable.\n    */\n    variableName: t(name),\n    /**\n    A type [name](#highlight.tags.name).\n    */\n    typeName: typeName,\n    /**\n    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    */\n    tagName: t(typeName),\n    /**\n    A property or field [name](#highlight.tags.name).\n    */\n    propertyName: propertyName,\n    /**\n    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n    */\n    attributeName: t(propertyName),\n    /**\n    The [name](#highlight.tags.name) of a class.\n    */\n    className: t(name),\n    /**\n    A label [name](#highlight.tags.name).\n    */\n    labelName: t(name),\n    /**\n    A namespace [name](#highlight.tags.name).\n    */\n    namespace: t(name),\n    /**\n    The [name](#highlight.tags.name) of a macro.\n    */\n    macroName: t(name),\n    /**\n    A literal value.\n    */\n    literal,\n    /**\n    A string [literal](#highlight.tags.literal).\n    */\n    string,\n    /**\n    A documentation [string](#highlight.tags.string).\n    */\n    docString: t(string),\n    /**\n    A character literal (subtag of [string](#highlight.tags.string)).\n    */\n    character: t(string),\n    /**\n    An attribute value (subtag of [string](#highlight.tags.string)).\n    */\n    attributeValue: t(string),\n    /**\n    A number [literal](#highlight.tags.literal).\n    */\n    number,\n    /**\n    An integer [number](#highlight.tags.number) literal.\n    */\n    integer: t(number),\n    /**\n    A floating-point [number](#highlight.tags.number) literal.\n    */\n    float: t(number),\n    /**\n    A boolean [literal](#highlight.tags.literal).\n    */\n    bool: t(literal),\n    /**\n    Regular expression [literal](#highlight.tags.literal).\n    */\n    regexp: t(literal),\n    /**\n    An escape [literal](#highlight.tags.literal), for example a\n    backslash escape in a string.\n    */\n    escape: t(literal),\n    /**\n    A color [literal](#highlight.tags.literal).\n    */\n    color: t(literal),\n    /**\n    A URL [literal](#highlight.tags.literal).\n    */\n    url: t(literal),\n    /**\n    A language keyword.\n    */\n    keyword,\n    /**\n    The [keyword](#highlight.tags.keyword) for the self or this\n    object.\n    */\n    self: t(keyword),\n    /**\n    The [keyword](#highlight.tags.keyword) for null.\n    */\n    null: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    */\n    atom: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that represents a unit.\n    */\n    unit: t(keyword),\n    /**\n    A modifier [keyword](#highlight.tags.keyword).\n    */\n    modifier: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that acts as an operator.\n    */\n    operatorKeyword: t(keyword),\n    /**\n    A control-flow related [keyword](#highlight.tags.keyword).\n    */\n    controlKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that defines something.\n    */\n    definitionKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) related to defining or\n    interfacing with modules.\n    */\n    moduleKeyword: t(keyword),\n    /**\n    An operator.\n    */\n    operator,\n    /**\n    An [operator](#highlight.tags.operator) that dereferences something.\n    */\n    derefOperator: t(operator),\n    /**\n    Arithmetic-related [operator](#highlight.tags.operator).\n    */\n    arithmeticOperator: t(operator),\n    /**\n    Logical [operator](#highlight.tags.operator).\n    */\n    logicOperator: t(operator),\n    /**\n    Bit [operator](#highlight.tags.operator).\n    */\n    bitwiseOperator: t(operator),\n    /**\n    Comparison [operator](#highlight.tags.operator).\n    */\n    compareOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that updates its operand.\n    */\n    updateOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that defines something.\n    */\n    definitionOperator: t(operator),\n    /**\n    Type-related [operator](#highlight.tags.operator).\n    */\n    typeOperator: t(operator),\n    /**\n    Control-flow [operator](#highlight.tags.operator).\n    */\n    controlOperator: t(operator),\n    /**\n    Program or markup punctuation.\n    */\n    punctuation,\n    /**\n    [Punctuation](#highlight.tags.punctuation) that separates\n    things.\n    */\n    separator: t(punctuation),\n    /**\n    Bracket-style [punctuation](#highlight.tags.punctuation).\n    */\n    bracket,\n    /**\n    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    tokens).\n    */\n    angleBracket: t(bracket),\n    /**\n    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    tokens).\n    */\n    squareBracket: t(bracket),\n    /**\n    Parentheses (usually `(` and `)` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    paren: t(bracket),\n    /**\n    Braces (usually `{` and `}` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    brace: t(bracket),\n    /**\n    Content, for example plain text in XML or markup documents.\n    */\n    content,\n    /**\n    [Content](#highlight.tags.content) that represents a heading.\n    */\n    heading,\n    /**\n    A level 1 [heading](#highlight.tags.heading).\n    */\n    heading1: t(heading),\n    /**\n    A level 2 [heading](#highlight.tags.heading).\n    */\n    heading2: t(heading),\n    /**\n    A level 3 [heading](#highlight.tags.heading).\n    */\n    heading3: t(heading),\n    /**\n    A level 4 [heading](#highlight.tags.heading).\n    */\n    heading4: t(heading),\n    /**\n    A level 5 [heading](#highlight.tags.heading).\n    */\n    heading5: t(heading),\n    /**\n    A level 6 [heading](#highlight.tags.heading).\n    */\n    heading6: t(heading),\n    /**\n    A prose separator (such as a horizontal rule).\n    */\n    contentSeparator: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a list.\n    */\n    list: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a quote.\n    */\n    quote: t(content),\n    /**\n    [Content](#highlight.tags.content) that is emphasized.\n    */\n    emphasis: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled strong.\n    */\n    strong: t(content),\n    /**\n    [Content](#highlight.tags.content) that is part of a link.\n    */\n    link: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled as code or\n    monospace.\n    */\n    monospace: t(content),\n    /**\n    [Content](#highlight.tags.content) that has a strike-through\n    style.\n    */\n    strikethrough: t(content),\n    /**\n    Inserted text in a change-tracking format.\n    */\n    inserted: t(),\n    /**\n    Deleted text.\n    */\n    deleted: t(),\n    /**\n    Changed text.\n    */\n    changed: t(),\n    /**\n    An invalid or unsyntactic element.\n    */\n    invalid: t(),\n    /**\n    Metadata or meta-instruction.\n    */\n    meta,\n    /**\n    [Metadata](#highlight.tags.meta) that applies to the entire\n    document.\n    */\n    documentMeta: t(meta),\n    /**\n    [Metadata](#highlight.tags.meta) that annotates or adds\n    attributes to a given syntactic element.\n    */\n    annotation: t(meta),\n    /**\n    Processing instruction or preprocessor directive. Subtag of\n    [meta](#highlight.tags.meta).\n    */\n    processingInstruction: t(meta),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    given element is being defined. Expected to be used with the\n    various [name](#highlight.tags.name) tags.\n    */\n    definition: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that\n    something is constant. Mostly expected to be used with\n    [variable names](#highlight.tags.variableName).\n    */\n    constant: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    a [variable](#highlight.tags.variableName) or [property\n    name](#highlight.tags.propertyName) is being called or defined\n    as a function.\n    */\n    function: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    [names](#highlight.tags.name) to indicate that they belong to\n    the language's standard environment.\n    */\n    standard: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    [names](#highlight.tags.name) is local to some scope.\n    */\n    local: Tag.defineModifier(),\n    /**\n    A generic variant [modifier](#highlight.Tag^defineModifier) that\n    can be used to tag language-specific alternative variants of\n    some common tag. It is recommended for themes to define special\n    forms of at least the [string](#highlight.tags.string) and\n    [variable name](#highlight.tags.variableName) tags, since those\n    come up a lot.\n    */\n    special: Tag.defineModifier()\n};\n/**\nThis is a highlighter that adds stable, predictable classes to\ntokens, for styling with external CSS.\n\nThe following tags are mapped to their name prefixed with `\"tok-\"`\n(for example `\"tok-comment\"`):\n\n* [`link`](#highlight.tags.link)\n* [`heading`](#highlight.tags.heading)\n* [`emphasis`](#highlight.tags.emphasis)\n* [`strong`](#highlight.tags.strong)\n* [`keyword`](#highlight.tags.keyword)\n* [`atom`](#highlight.tags.atom)\n* [`bool`](#highlight.tags.bool)\n* [`url`](#highlight.tags.url)\n* [`labelName`](#highlight.tags.labelName)\n* [`inserted`](#highlight.tags.inserted)\n* [`deleted`](#highlight.tags.deleted)\n* [`literal`](#highlight.tags.literal)\n* [`string`](#highlight.tags.string)\n* [`number`](#highlight.tags.number)\n* [`variableName`](#highlight.tags.variableName)\n* [`typeName`](#highlight.tags.typeName)\n* [`namespace`](#highlight.tags.namespace)\n* [`className`](#highlight.tags.className)\n* [`macroName`](#highlight.tags.macroName)\n* [`propertyName`](#highlight.tags.propertyName)\n* [`operator`](#highlight.tags.operator)\n* [`comment`](#highlight.tags.comment)\n* [`meta`](#highlight.tags.meta)\n* [`punctuation`](#highlight.tags.punctuation)\n* [`invalid`](#highlight.tags.invalid)\n\nIn addition, these mappings are provided:\n\n* [`regexp`](#highlight.tags.regexp),\n  [`escape`](#highlight.tags.escape), and\n  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n  are mapped to `\"tok-string2\"`\n* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName2\"`\n* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-local\"`\n* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-definition\"`\n* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\n  to `\"tok-propertyName tok-definition\"`\n*/\nconst classHighlighter = tagHighlighter([\n    { tag: tags.link, class: \"tok-link\" },\n    { tag: tags.heading, class: \"tok-heading\" },\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\n    { tag: tags.strong, class: \"tok-strong\" },\n    { tag: tags.keyword, class: \"tok-keyword\" },\n    { tag: tags.atom, class: \"tok-atom\" },\n    { tag: tags.bool, class: \"tok-bool\" },\n    { tag: tags.url, class: \"tok-url\" },\n    { tag: tags.labelName, class: \"tok-labelName\" },\n    { tag: tags.inserted, class: \"tok-inserted\" },\n    { tag: tags.deleted, class: \"tok-deleted\" },\n    { tag: tags.literal, class: \"tok-literal\" },\n    { tag: tags.string, class: \"tok-string\" },\n    { tag: tags.number, class: \"tok-number\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\n    { tag: tags.variableName, class: \"tok-variableName\" },\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\n    { tag: tags.typeName, class: \"tok-typeName\" },\n    { tag: tags.namespace, class: \"tok-namespace\" },\n    { tag: tags.className, class: \"tok-className\" },\n    { tag: tags.macroName, class: \"tok-macroName\" },\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\n    { tag: tags.operator, class: \"tok-operator\" },\n    { tag: tags.comment, class: \"tok-comment\" },\n    { tag: tags.meta, class: \"tok-meta\" },\n    { tag: tags.invalid, class: \"tok-invalid\" },\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\n]);\n\nexport { Tag, classHighlighter, getStyleTags, highlightCode, highlightTree, styleTags, tagHighlighter, tags };\n","import { NodeProp, IterMode, Tree, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, EditorView, Decoration, WidgetType, gutter, GutterMarker, Direction } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\n\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n    return Facet.define({\n        combine: baseData ? values => values.concat(baseData) : undefined\n    });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/\nconst sublanguageProp = /*@__PURE__*/new NodeProp();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\nclass Language {\n    /**\n    Construct a language object. If you need to invoke this\n    directly, first define a data facet with\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n    to the language's outer syntax node.\n    */\n    constructor(\n    /**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n    used for this language.\n    */\n    data, parser, extraExtensions = [], \n    /**\n    A language name.\n    */\n    name = \"\") {\n        this.data = data;\n        this.name = name;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n            Object.defineProperty(EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\n        this.parser = parser;\n        this.extension = [\n            language.of(this),\n            EditorState.languageData.of((state, pos, side) => {\n                let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);\n                if (!data)\n                    return [];\n                let base = state.facet(data), sub = top.type.prop(sublanguageProp);\n                if (sub) {\n                    let innerNode = top.resolve(pos - top.from, side);\n                    for (let sublang of sub)\n                        if (sublang.test(innerNode, state)) {\n                            let data = state.facet(sublang.facet);\n                            return sublang.type == \"replace\" ? data : data.concat(base);\n                        }\n                }\n                return base;\n            })\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */\n    isActiveAt(state, pos, side = -1) {\n        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n    findRegions(state) {\n        let lang = state.facet(language);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n            return [{ from: 0, to: state.doc.length }];\n        if (!lang || !lang.allowsNesting)\n            return [];\n        let result = [];\n        let explore = (tree, from) => {\n            if (tree.prop(languageDataProp) == this.data) {\n                result.push({ from, to: from + tree.length });\n                return;\n            }\n            let mount = tree.prop(NodeProp.mounted);\n            if (mount) {\n                if (mount.tree.prop(languageDataProp) == this.data) {\n                    if (mount.overlay)\n                        for (let r of mount.overlay)\n                            result.push({ from: r.from + from, to: r.to + from });\n                    else\n                        result.push({ from: from, to: from + tree.length });\n                    return;\n                }\n                else if (mount.overlay) {\n                    let size = result.length;\n                    explore(mount.tree, mount.overlay[0].from + from);\n                    if (result.length > size)\n                        return;\n                }\n            }\n            for (let i = 0; i < tree.children.length; i++) {\n                let ch = tree.children[i];\n                if (ch instanceof Tree)\n                    explore(ch, tree.positions[i] + from);\n            }\n        };\n        explore(syntaxTree(state), 0);\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n    get allowsNesting() { return true; }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction topNodeAt(state, pos, side) {\n    let topLang = state.facet(language), tree = syntaxTree(state).topNode;\n    if (!topLang || topLang.allowsNesting) {\n        for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))\n            if (node.type.isTop)\n                tree = node;\n    }\n    return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n    constructor(data, parser, name) {\n        super(data, parser, [], name);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */\n    static define(spec) {\n        let data = defineLanguageFacet(spec.languageData);\n        return new LRLanguage(data, spec.parser.configure({\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n        }), spec.name);\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser and optionally a new name.\n    */\n    configure(options, name) {\n        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\n    }\n    get allowsNesting() { return this.parser.hasWrappers(); }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\nfunction syntaxTree(state) {\n    let field = state.field(Language.state, false);\n    return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    if (!parse)\n        return null;\n    let oldVieport = parse.viewport;\n    parse.updateViewport({ from: 0, to: upto });\n    let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n    parse.updateViewport(oldVieport);\n    return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of that—the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n    var _a;\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\n    let success = ensureSyntaxTree(view.state, upto, timeout);\n    if (success != syntaxTree(view.state))\n        view.dispatch({});\n    return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n    var _a;\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/\nclass DocInput {\n    /**\n    Create an input object for the given document.\n    */\n    constructor(doc) {\n        this.doc = doc;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.cursor = doc.iter();\n    }\n    get length() { return this.doc.length; }\n    syncTo(pos) {\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    chunk(pos) {\n        this.syncTo(pos);\n        return this.string;\n    }\n    get lineChunks() { return true; }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos)\n            return this.doc.sliceString(from, to);\n        else\n            return this.string.slice(from - stringStart, to - stringStart);\n    }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n    constructor(parser, \n    /**\n    The current editor state.\n    */\n    state, \n    /**\n    Tree fragments that can be reused by incremental re-parses.\n    */\n    fragments = [], \n    /**\n    @internal\n    */\n    tree, \n    /**\n    @internal\n    */\n    treeLen, \n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport, \n    /**\n    @internal\n    */\n    skipped, \n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn) {\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.treeLen = treeLen;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */\n        this.tempSkipped = [];\n    }\n    /**\n    @internal\n    */\n    static create(parser, state, viewport) {\n        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n    }\n    startParse() {\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n    work(until, upto) {\n        if (upto != null && upto >= this.state.doc.length)\n            upto = undefined;\n        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n            this.takeTree();\n            return true;\n        }\n        return this.withContext(() => {\n            var _a;\n            if (typeof until == \"number\") {\n                let endTime = Date.now() + until;\n                until = () => Date.now() > endTime;\n            }\n            if (!this.parse)\n                this.parse = this.startParse();\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\n                upto < this.state.doc.length)\n                this.parse.stopAt(upto);\n            for (;;) {\n                let done = this.parse.advance();\n                if (done) {\n                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n                    this.tree = done;\n                    this.parse = null;\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\n                        this.parse = this.startParse();\n                    else\n                        return true;\n                }\n                if (until())\n                    return false;\n            }\n        });\n    }\n    /**\n    @internal\n    */\n    takeTree() {\n        let pos, tree;\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\n                this.parse.stopAt(pos);\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\n            this.treeLen = pos;\n            this.tree = tree;\n            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n            this.parse = null;\n        }\n    }\n    withContext(f) {\n        let prev = currentContext;\n        currentContext = this;\n        try {\n            return f();\n        }\n        finally {\n            currentContext = prev;\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for (let r; r = this.tempSkipped.pop();)\n            fragments = cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */\n    changes(changes, newState) {\n        let { fragments, tree, treeLen, viewport, skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n            fragments = TreeFragment.applyChanges(fragments, ranges);\n            tree = Tree.empty;\n            treeLen = 0;\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped) {\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to)\n                        skipped.push({ from, to });\n                }\n            }\n        }\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n    updateViewport(viewport) {\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\n            return false;\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for (let i = 0; i < this.skipped.length; i++) {\n            let { from, to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        if (this.skipped.length >= startLen)\n            return false;\n        this.reset();\n        return true;\n    }\n    /**\n    @internal\n    */\n    reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n    skipUntilInView(from, to) {\n        this.skipped.push({ from, to });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n    static getSkippingParser(until) {\n        return new class extends Parser {\n            createParse(input, fragments, ranges) {\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n                let parser = {\n                    parsedPos: from,\n                    advance() {\n                        let cx = currentContext;\n                        if (cx) {\n                            for (let r of ranges)\n                                cx.tempSkipped.push(r);\n                            if (until)\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                        }\n                        this.parsedPos = to;\n                        return new Tree(NodeType.none, [], [], to - from);\n                    },\n                    stoppedAt: null,\n                    stopAt() { }\n                };\n                return parser;\n            }\n        };\n    }\n    /**\n    @internal\n    */\n    isDone(upto) {\n        upto = Math.min(upto, this.state.doc.length);\n        let frags = this.fragments;\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n    static get() { return currentContext; }\n}\nfunction cutFragments(fragments, from, to) {\n    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\n}\nclass LanguageState {\n    constructor(\n    // A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context) {\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged && this.tree == this.context.tree)\n            return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n        if (!newCx.work(20 /* Work.Apply */, upto))\n            newCx.takeTree();\n        return new LanguageState(newCx);\n    }\n    static init(state) {\n        let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);\n        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });\n        if (!parseState.work(20 /* Work.Apply */, vpTo))\n            parseState.takeTree();\n        return new LanguageState(parseState);\n    }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n    create: LanguageState.init,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(Language.setState))\n                return e.value;\n        if (tr.startState.facet(language) != tr.state.facet(language))\n            return LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet requestIdle = (callback) => {\n    let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);\n    return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\")\n    requestIdle = (callback) => {\n        let idle = -1, timeout = setTimeout(() => {\n            idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });\n        }, 100 /* Work.MinPause */);\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n    };\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\n    ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n    constructor(view) {\n        this.view = view;\n        this.working = null;\n        this.workScheduled = 0;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field(Language.state).context;\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\n            this.scheduleWork();\n        if (update.docChanged || update.selectionSet) {\n            if (this.view.hasFocus)\n                this.chunkBudget += 50 /* Work.ChangeBonus */;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork() {\n        if (this.working)\n            return;\n        let { state } = this.view, field = state.field(Language.state);\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\n            this.working = requestIdle(this.work);\n    }\n    work(deadline) {\n        this.working = null;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\n            this.chunkEnd = now + 30000 /* Work.ChunkTime */;\n            this.chunkBudget = 3000 /* Work.ChunkBudget */;\n        }\n        if (this.chunkBudget <= 0)\n            return; // No more budget\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))\n            return;\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n        let done = field.context.work(() => {\n            return isInputPending && isInputPending() || Date.now() > endTime;\n        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0) {\n            field.context.takeTree();\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\n        }\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\n            this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            this.workScheduled++;\n            cx.scheduleOn\n                .then(() => this.scheduleWork())\n                .catch(err => logException(this.view.state, err))\n                .then(() => this.workScheduled--);\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working)\n            this.working();\n    }\n    isWorking() {\n        return !!(this.working || this.workScheduled > 0);\n    }\n}, {\n    eventHandlers: { focus() { this.scheduleWork(); } }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n    combine(languages) { return languages.length ? languages[0] : null; },\n    enables: language => [\n        Language.state,\n        parseWorker,\n        EditorView.contentAttributes.compute([language], state => {\n            let lang = state.facet(language);\n            return lang && lang.name ? { \"data-language\": lang.name } : {};\n        })\n    ]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n    /**\n    Create a language support object.\n    */\n    constructor(\n    /**\n    The language object.\n    */\n    language, \n    /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */\n    support = []) {\n        this.language = language;\n        this.support = support;\n        this.extension = [language, support];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n    constructor(\n    /**\n    The name of this language.\n    */\n    name, \n    /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */\n    alias, \n    /**\n    File extensions associated with this language.\n    */\n    extensions, \n    /**\n    Optional filename pattern that should be associated with this\n    language.\n    */\n    filename, loadFunc, \n    /**\n    If the language has been loaded, this will hold its value.\n    */\n    support = undefined) {\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        this.support = support;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */\n    load() {\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\n    }\n    /**\n    Create a language description.\n    */\n    static of(spec) {\n        let { load, support } = spec;\n        if (!load) {\n            if (!support)\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n            load = () => Promise.resolve(support);\n        }\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n    static matchFilename(descs, filename) {\n        for (let d of descs)\n            if (d.filename && d.filename.test(filename))\n                return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext)\n            for (let d of descs)\n                if (d.extensions.indexOf(ext[1]) > -1)\n                    return d;\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n    static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)\n            if (d.alias.some(a => a == name))\n                return d;\n        if (fuzzy)\n            for (let d of descs)\n                for (let a of d.alias) {\n                    let found = name.indexOf(a);\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\n                        return d;\n                }\n        return null;\n    }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting either entirely of the same whitespace\ncharacter. When not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n    combine: values => {\n        if (!values.length)\n            return \"  \";\n        let unit = values[0];\n        if (!unit || /\\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return unit;\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n    let unit = state.facet(indentUnit);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n    let result = \"\", ts = state.tabSize, ch = state.facet(indentUnit)[0];\n    if (ch == \"\\t\") {\n        while (cols >= ts) {\n            result += \"\\t\";\n            cols -= ts;\n        }\n        ch = \" \";\n    }\n    for (let i = 0; i < cols; i++)\n        result += ch;\n    return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/\nfunction getIndentation(context, pos) {\n    if (context instanceof EditorState)\n        context = new IndentContext(context);\n    for (let service of context.state.facet(indentService)) {\n        let result = service(context, pos);\n        if (result !== undefined)\n            return result;\n    }\n    let tree = syntaxTree(context.state);\n    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\nfunction indentRange(state, from, to) {\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => { var _a; return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1; } });\n    let changes = [];\n    for (let pos = from; pos <= to;) {\n        let line = state.doc.lineAt(pos);\n        pos = line.to + 1;\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            continue;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    }\n    return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n    /**\n    Create an indent context.\n    */\n    constructor(\n    /**\n    The editor state.\n    */\n    state, \n    /**\n    @internal\n    */\n    options = {}) {\n        this.state = state;\n        this.options = options;\n        this.unit = getIndentUnit(state);\n    }\n    /**\n    Get a description of the line at the given position, taking\n    [simulated line\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    into account. If there is such a break at `pos`, the `bias`\n    argument determines whether the part of the line line before or\n    after the break is used.\n    */\n    lineAt(pos, bias = 1) {\n        let line = this.state.doc.lineAt(pos);\n        let { simulateBreak, simulateDoubleBreak } = this.options;\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n            if (simulateDoubleBreak && simulateBreak == pos)\n                return { text: \"\", from: pos };\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\n            else\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\n        }\n        return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    textAfterPos(pos, bias = 1) {\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\n            return \"\";\n        let { text, from } = this.lineAt(pos, bias);\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n    column(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let result = this.countColumn(text, pos - from);\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n        if (override > -1)\n            result += override - this.countColumn(text, text.search(/\\S|$/));\n        return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n    countColumn(line, pos = line.length) {\n        return countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n    lineIndent(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let override = this.options.overrideIndentation;\n        if (override) {\n            let overriden = override(from);\n            if (overriden > -1)\n                return overriden;\n        }\n        return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n    get simulatedBreak() {\n        return this.options.simulateBreak || null;\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n    let stack = ast.resolveStack(pos);\n    let inner = stack.node.enterUnfinishedNodesBefore(pos);\n    if (inner != stack.node) {\n        let add = [];\n        for (let cur = inner; cur != stack.node; cur = cur.parent)\n            add.push(cur);\n        for (let i = add.length - 1; i >= 0; i--)\n            stack = { node: add[i], next: stack };\n    }\n    return indentFor(stack, cx, pos);\n}\nfunction indentFor(stack, cx, pos) {\n    for (let cur = stack; cur; cur = cur.next) {\n        let strategy = indentStrategy(cur.node);\n        if (strategy)\n            return strategy(TreeIndentContext.create(cx, pos, cur));\n    }\n    return 0;\n}\nfunction ignoreClosed(cx) {\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n    let strategy = tree.type.prop(indentNodeProp);\n    if (strategy)\n        return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop(NodeProp.closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? topIndent : null;\n}\nfunction topIndent() { return 0; }\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\nclass TreeIndentContext extends IndentContext {\n    constructor(base, \n    /**\n    The position at which indentation is being computed.\n    */\n    pos, \n    /**\n    @internal\n    */\n    context) {\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.context = context;\n    }\n    /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */\n    get node() { return this.context.node; }\n    /**\n    @internal\n    */\n    static create(base, pos, context) {\n        return new TreeIndentContext(base, pos, context);\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n    get baseIndent() {\n        return this.baseIndentFor(this.node);\n    }\n    /**\n    Get the indentation for the reference line of the given node\n    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n    */\n    baseIndentFor(node) {\n        let line = this.state.doc.lineAt(node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for (;;) {\n            let atBreak = node.resolve(line.from);\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\n                atBreak = atBreak.parent;\n            if (isParent(atBreak, node))\n                break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    continue() {\n        return indentFor(this.context.next, this.base, this.pos);\n    }\n}\nfunction isParent(parent, of) {\n    for (let cur = of; cur; cur = cur.parent)\n        if (parent == cur)\n            return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken)\n        return null;\n    let sim = context.options.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for (let pos = openToken.to;;) {\n        let next = tree.childAfter(pos);\n        if (!next || next == last)\n            return null;\n        if (!next.type.isSkipped)\n            return next.from < lineEnd ? openToken : null;\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\n    return (context) => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? bracketedAligned(context) : null;\n    if (aligned)\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = (context) => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({ except, units = 1 } = {}) {\n    return (context) => {\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n    return EditorState.transactionFilter.of(tr => {\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\n            return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length)\n            return tr;\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + DontIndentBeyond)\n            return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some(r => r.test(lineStart)))\n            return tr;\n        let { state } = tr, last = -1, changes = [];\n        for (let { head } of state.selection.ranges) {\n            let line = state.doc.lineAt(head);\n            if (line.from == last)\n                continue;\n            last = line.from;\n            let indent = getIndentation(state, line.from);\n            if (indent == null)\n                continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = indentString(state, indent);\n            if (cur != norm)\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\n    });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\n}\nfunction syntaxFolding(state, start, end) {\n    let tree = syntaxTree(state);\n    if (tree.length < end)\n        return null;\n    let stack = tree.resolveStack(end, 1);\n    let found = null;\n    for (let iter = stack; iter; iter = iter.next) {\n        let cur = iter.node;\n        if (cur.to <= end || cur.from > end)\n            continue;\n        if (found && cur.from < start)\n            break;\n        let prop = cur.type.prop(foldNodeProp);\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end)\n                found = value;\n        }\n    }\n    return found;\n}\nfunction isUnfinished(node) {\n    let ch = node.lastChild;\n    return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n    for (let service of state.facet(foldService)) {\n        let result = service(state, lineStart, lineEnd);\n        if (result)\n            return result;\n    }\n    return syntaxFolding(state, lineStart, lineEnd);\n}\nfunction mapRange(range, mapping) {\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\n    return from >= to ? undefined : { from, to };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstances—usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\nconst foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\n/**\nState effect that unfolds the given range (if it was folded).\n*/\nconst unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\nfunction selectedLines(view) {\n    let lines = [];\n    for (let { head } of view.state.selection.ranges) {\n        if (lines.some(l => l.from <= head && l.to >= head))\n            continue;\n        lines.push(view.lineBlockAt(head));\n    }\n    return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\nconst foldState = /*@__PURE__*/StateField.define({\n    create() {\n        return Decoration.none;\n    },\n    update(folded, tr) {\n        folded = folded.map(tr.changes);\n        for (let e of tr.effects) {\n            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {\n                let { preparePlaceholder } = tr.state.facet(foldConfig);\n                let widget = !preparePlaceholder ? foldWidget :\n                    Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });\n                folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });\n            }\n            else if (e.is(unfoldEffect)) {\n                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,\n                    filterFrom: e.value.from, filterTo: e.value.to });\n            }\n        }\n        // Clear folded ranges that cover the selection head\n        if (tr.selection) {\n            let onSelection = false, { head } = tr.selection.main;\n            folded.between(head, head, (a, b) => { if (a < head && b > head)\n                onSelection = true; });\n            if (onSelection)\n                folded = folded.update({\n                    filterFrom: head,\n                    filterTo: head,\n                    filter: (a, b) => b <= head || a >= head\n                });\n        }\n        return folded;\n    },\n    provide: f => EditorView.decorations.from(f),\n    toJSON(folded, state) {\n        let ranges = [];\n        folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });\n        return ranges;\n    },\n    fromJSON(value) {\n        if (!Array.isArray(value) || value.length % 2)\n            throw new RangeError(\"Invalid JSON for fold state\");\n        let ranges = [];\n        for (let i = 0; i < value.length;) {\n            let from = value[i++], to = value[i++];\n            if (typeof from != \"number\" || typeof to != \"number\")\n                throw new RangeError(\"Invalid JSON for fold state\");\n            ranges.push(foldWidget.range(from, to));\n        }\n        return Decoration.set(ranges, true);\n    }\n});\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\nfunction foldedRanges(state) {\n    return state.field(foldState, false) || RangeSet.empty;\n}\nfunction findFold(state, from, to) {\n    var _a;\n    let found = null;\n    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\n        if (!found || found.from > from)\n            found = { from, to };\n    });\n    return found;\n}\nfunction foldExists(folded, from, to) {\n    let found = false;\n    folded.between(from, from, (a, b) => { if (a == from && b == to)\n        found = true; });\n    return found;\n}\nfunction maybeEnable(state, other) {\n    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\nconst foldCode = view => {\n    for (let line of selectedLines(view)) {\n        let range = foldable(view.state, line.from, line.to);\n        if (range) {\n            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });\n            return true;\n        }\n    }\n    return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\nconst unfoldCode = view => {\n    if (!view.state.field(foldState, false))\n        return false;\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    }\n    if (effects.length)\n        view.dispatch({ effects });\n    return effects.length > 0;\n};\nfunction announceFold(view, range, fold = true) {\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\n    return EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\nconst foldAll = view => {\n    let { state } = view, effects = [];\n    for (let pos = 0; pos < state.doc.length;) {\n        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);\n        if (range)\n            effects.push(foldEffect.of(range));\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n    }\n    if (effects.length)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\nconst unfoldAll = view => {\n    let field = view.state.field(foldState, false);\n    if (!field || !field.size)\n        return false;\n    let effects = [];\n    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });\n    view.dispatch({ effects });\n    return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction foldableContainer(view, lineBlock) {\n    // Look backwards through line blocks until we find a foldable region that\n    // intersects with the line\n    for (let line = lineBlock;;) {\n        let foldableRegion = foldable(view.state, line.from, line.to);\n        if (foldableRegion && foldableRegion.to > lineBlock.from)\n            return foldableRegion;\n        if (!line.from)\n            return null;\n        line = view.lineBlockAt(line.from - 1);\n    }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/\nconst toggleFold = (view) => {\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded) {\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n        }\n        else {\n            let foldRange = foldableContainer(view, line);\n            if (foldRange)\n                effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));\n        }\n    }\n    if (effects.length > 0)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\nconst foldKeymap = [\n    { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\n    { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\n    { key: \"Ctrl-Alt-[\", run: foldAll },\n    { key: \"Ctrl-Alt-]\", run: unfoldAll }\n];\nconst defaultConfig = {\n    placeholderDOM: null,\n    preparePlaceholder: null,\n    placeholderText: \"…\"\n};\nconst foldConfig = /*@__PURE__*/Facet.define({\n    combine(values) { return combineConfig(values, defaultConfig); }\n});\n/**\nCreate an extension that configures code folding.\n*/\nfunction codeFolding(config) {\n    let result = [foldState, baseTheme$1];\n    if (config)\n        result.push(foldConfig.of(config));\n    return result;\n}\nfunction widgetToDOM(view, prepared) {\n    let { state } = view, conf = state.facet(foldConfig);\n    let onclick = (event) => {\n        let line = view.lineBlockAt(view.posAtDOM(event.target));\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            view.dispatch({ effects: unfoldEffect.of(folded) });\n        event.preventDefault();\n    };\n    if (conf.placeholderDOM)\n        return conf.placeholderDOM(view, onclick, prepared);\n    let element = document.createElement(\"span\");\n    element.textContent = conf.placeholderText;\n    element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n    element.title = state.phrase(\"unfold\");\n    element.className = \"cm-foldPlaceholder\";\n    element.onclick = onclick;\n    return element;\n}\nconst foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM(view) { return widgetToDOM(view, null); }\n    } });\nclass PreparedFoldWidget extends WidgetType {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    eq(other) { return this.value == other.value; }\n    toDOM(view) { return widgetToDOM(view, this.value); }\n}\nconst foldGutterDefaults = {\n    openText: \"⌄\",\n    closedText: \"›\",\n    markerDOM: null,\n    domEventHandlers: {},\n    foldingChanged: () => false\n};\nclass FoldMarker extends GutterMarker {\n    constructor(config, open) {\n        super();\n        this.config = config;\n        this.open = open;\n    }\n    eq(other) { return this.config == other.config && this.open == other.open; }\n    toDOM(view) {\n        if (this.config.markerDOM)\n            return this.config.markerDOM(this.open);\n        let span = document.createElement(\"span\");\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n        return span;\n    }\n}\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\nfunction foldGutter(config = {}) {\n    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\n    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);\n    let markers = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.from = view.viewport.from;\n            this.markers = this.buildMarkers(view);\n        }\n        update(update) {\n            if (update.docChanged || update.viewportChanged ||\n                update.startState.facet(language) != update.state.facet(language) ||\n                update.startState.field(foldState, false) != update.state.field(foldState, false) ||\n                syntaxTree(update.startState) != syntaxTree(update.state) ||\n                fullConfig.foldingChanged(update))\n                this.markers = this.buildMarkers(update.view);\n        }\n        buildMarkers(view) {\n            let builder = new RangeSetBuilder();\n            for (let line of view.viewportLineBlocks) {\n                let mark = findFold(view.state, line.from, line.to) ? canUnfold\n                    : foldable(view.state, line.from, line.to) ? canFold : null;\n                if (mark)\n                    builder.add(line.from, line.from, mark);\n            }\n            return builder.finish();\n        }\n    });\n    let { domEventHandlers } = fullConfig;\n    return [\n        markers,\n        gutter({\n            class: \"cm-foldGutter\",\n            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },\n            initialSpacer() {\n                return new FoldMarker(fullConfig, false);\n            },\n            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))\n                        return true;\n                    let folded = findFold(view.state, line.from, line.to);\n                    if (folded) {\n                        view.dispatch({ effects: unfoldEffect.of(folded) });\n                        return true;\n                    }\n                    let range = foldable(view.state, line.from, line.to);\n                    if (range) {\n                        view.dispatch({ effects: foldEffect.of(range) });\n                        return true;\n                    }\n                    return false;\n                } })\n        }),\n        codeFolding()\n    ];\n}\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-foldPlaceholder\": {\n        backgroundColor: \"#eee\",\n        border: \"1px solid #ddd\",\n        color: \"#888\",\n        borderRadius: \".2em\",\n        margin: \"0 1px\",\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    },\n    \".cm-foldGutter span\": {\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    }\n});\n\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\nclass HighlightStyle {\n    constructor(\n    /**\n    The tag styles used to create this highlight style.\n    */\n    specs, options) {\n        this.specs = specs;\n        let modSpec;\n        function def(spec) {\n            let cls = StyleModule.newName();\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n            return cls;\n        }\n        const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n        const scopeOpt = options.scope;\n        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data\n            : scopeOpt ? (type) => type == scopeOpt : undefined;\n        this.style = tagHighlighter(specs.map(style => ({\n            tag: style.tag,\n            class: style.class || def(Object.assign({}, style, { tag: null }))\n        })), {\n            all,\n        }).style;\n        this.module = modSpec ? new StyleModule(modSpec) : null;\n        this.themeType = options.themeType;\n    }\n    /**\n    Create a highlighter style that associates the given styles to\n    the given tags. The specs must be objects that hold a style tag\n    or array of tags in their `tag` property, and either a single\n    `class` property providing a static CSS class (for highlighter\n    that rely on external styling), or a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    set of CSS properties (which define the styling for those tags).\n    \n    The CSS rules created for a highlighter will be emitted in the\n    order of the spec's properties. That means that for elements that\n    have multiple tags associated with them, styles defined further\n    down in the list will have a higher CSS precedence than styles\n    defined earlier.\n    */\n    static define(specs, options) {\n        return new HighlightStyle(specs, options || {});\n    }\n}\nconst highlighterFacet = /*@__PURE__*/Facet.define();\nconst fallbackHighlighter = /*@__PURE__*/Facet.define({\n    combine(values) { return values.length ? [values[0]] : null; }\n});\nfunction getHighlighters(state) {\n    let main = state.facet(highlighterFacet);\n    return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\nfunction syntaxHighlighting(highlighter, options) {\n    let ext = [treeHighlighter], themeType;\n    if (highlighter instanceof HighlightStyle) {\n        if (highlighter.module)\n            ext.push(EditorView.styleModule.of(highlighter.module));\n        themeType = highlighter.themeType;\n    }\n    if (options === null || options === void 0 ? void 0 : options.fallback)\n        ext.push(fallbackHighlighter.of(highlighter));\n    else if (themeType)\n        ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {\n            return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n        }));\n    else\n        ext.push(highlighterFacet.of(highlighter));\n    return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\nfunction highlightingFor(state, tags, scope) {\n    let highlighters = getHighlighters(state);\n    let result = null;\n    if (highlighters)\n        for (let highlighter of highlighters) {\n            if (!highlighter.scope || scope && highlighter.scope(scope)) {\n                let cls = highlighter.style(tags);\n                if (cls)\n                    result = result ? result + \" \" + cls : cls;\n            }\n        }\n    return result;\n}\nclass TreeHighlighter {\n    constructor(view) {\n        this.markCache = Object.create(null);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.buildDeco(view, getHighlighters(view.state));\n        this.decoratedTo = view.viewport.to;\n    }\n    update(update) {\n        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);\n        let styleChange = highlighters != getHighlighters(update.startState);\n        let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);\n        if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {\n            this.decorations = this.decorations.map(update.changes);\n            this.decoratedTo = decoratedToMapped;\n        }\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\n            this.tree = tree;\n            this.decorations = this.buildDeco(update.view, highlighters);\n            this.decoratedTo = viewport.to;\n        }\n    }\n    buildDeco(view, highlighters) {\n        if (!highlighters || !this.tree.length)\n            return Decoration.none;\n        let builder = new RangeSetBuilder();\n        for (let { from, to } of view.visibleRanges) {\n            highlightTree(this.tree, highlighters, (from, to, style) => {\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));\n            }, from, to);\n        }\n        return builder.finish();\n    }\n}\nconst treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n    decorations: v => v.decorations\n}));\n/**\nA default highlight style (works well with light themes).\n*/\nconst defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([\n    { tag: tags.meta,\n        color: \"#404740\" },\n    { tag: tags.link,\n        textDecoration: \"underline\" },\n    { tag: tags.heading,\n        textDecoration: \"underline\",\n        fontWeight: \"bold\" },\n    { tag: tags.emphasis,\n        fontStyle: \"italic\" },\n    { tag: tags.strong,\n        fontWeight: \"bold\" },\n    { tag: tags.strikethrough,\n        textDecoration: \"line-through\" },\n    { tag: tags.keyword,\n        color: \"#708\" },\n    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n        color: \"#219\" },\n    { tag: [tags.literal, tags.inserted],\n        color: \"#164\" },\n    { tag: [tags.string, tags.deleted],\n        color: \"#a11\" },\n    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n        color: \"#e40\" },\n    { tag: /*@__PURE__*/tags.definition(tags.variableName),\n        color: \"#00f\" },\n    { tag: /*@__PURE__*/tags.local(tags.variableName),\n        color: \"#30a\" },\n    { tag: [tags.typeName, tags.namespace],\n        color: \"#085\" },\n    { tag: tags.className,\n        color: \"#167\" },\n    { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n        color: \"#256\" },\n    { tag: /*@__PURE__*/tags.definition(tags.propertyName),\n        color: \"#00c\" },\n    { tag: tags.comment,\n        color: \"#940\" },\n    { tag: tags.invalid,\n        color: \"#f00\" }\n]);\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\n    \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\n});\nconst DefaultScanDist = 10000, DefaultBrackets = \"()[]{}\";\nconst bracketMatchingConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            afterCursor: true,\n            brackets: DefaultBrackets,\n            maxScanDistance: DefaultScanDist,\n            renderMatch: defaultRenderMatch\n        });\n    }\n});\nconst matchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-matchingBracket\" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-nonmatchingBracket\" });\nfunction defaultRenderMatch(match) {\n    let decorations = [];\n    let mark = match.matched ? matchingMark : nonmatchingMark;\n    decorations.push(mark.range(match.start.from, match.start.to));\n    if (match.end)\n        decorations.push(mark.range(match.end.from, match.end.to));\n    return decorations;\n}\nconst bracketMatchingState = /*@__PURE__*/StateField.define({\n    create() { return Decoration.none; },\n    update(deco, tr) {\n        if (!tr.docChanged && !tr.selection)\n            return deco;\n        let decorations = [];\n        let config = tr.state.facet(bracketMatchingConfig);\n        for (let range of tr.state.selection.ranges) {\n            if (!range.empty)\n                continue;\n            let match = matchBrackets(tr.state, range.head, -1, config)\n                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))\n                || (config.afterCursor &&\n                    (matchBrackets(tr.state, range.head, 1, config) ||\n                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));\n            if (match)\n                decorations = decorations.concat(config.renderMatch(match, tr.state));\n        }\n        return Decoration.set(decorations, true);\n    },\n    provide: f => EditorView.decorations.from(f)\n});\nconst bracketMatchingUnique = [\n    bracketMatchingState,\n    baseTheme\n];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\nfunction bracketMatching(config = {}) {\n    return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a ‘handle’—the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/\nconst bracketMatchingHandle = /*@__PURE__*/new NodeProp();\nfunction matchingNodes(node, dir, brackets) {\n    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n    if (byProp)\n        return byProp;\n    if (node.name.length == 1) {\n        let index = brackets.indexOf(node.name);\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))\n            return [brackets[index + dir]];\n    }\n    return null;\n}\nfunction findHandle(node) {\n    let hasHandle = node.type.prop(bracketMatchingHandle);\n    return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\nfunction matchBrackets(state, pos, dir, config = {}) {\n    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;\n    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);\n    for (let cur = node; cur; cur = cur.parent) {\n        let matches = matchingNodes(cur.type, dir, brackets);\n        if (matches && cur.from < cur.to) {\n            let handle = findHandle(cur);\n            if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))\n                return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n        }\n    }\n    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))\n        do {\n            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n                    let endHandle = findHandle(cursor);\n                    return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };\n                }\n                else if (matchingNodes(cursor.type, dir, brackets)) {\n                    depth++;\n                }\n                else if (matchingNodes(cursor.type, -dir, brackets)) {\n                    if (depth == 0) {\n                        let endHandle = findHandle(cursor);\n                        return {\n                            start: firstToken,\n                            end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,\n                            matched: false\n                        };\n                    }\n                    depth--;\n                }\n            }\n        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n    return { start: firstToken, matched: false };\n}\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n    let bracket = brackets.indexOf(startCh);\n    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))\n        return null;\n    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\n    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {\n        let text = iter.value;\n        if (dir < 0)\n            distance += text.length;\n        let basePos = pos + distance * dir;\n        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\n            let found = brackets.indexOf(text[pos]);\n            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)\n                continue;\n            if ((found % 2 == 0) == (dir > 0)) {\n                depth++;\n            }\n            else if (depth == 1) { // Closing\n                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };\n            }\n            else {\n                depth--;\n            }\n        }\n        if (dir > 0)\n            distance += text.length;\n    }\n    return iter.done ? { start: startToken, matched: false } : null;\n}\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    Create a stream.\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit, overrideIndent) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        this.overrideIndent = overrideIndent;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        var _a;\n        return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        name: spec.name || \"\",\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\nconst IndentedFrom = /*@__PURE__*/new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);\n        this.topNode = docID(data);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    /**\n    Define a stream language.\n    */\n    static define(spec) { return new StreamLanguage(spec); }\n    getIndent(cx, pos) {\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n        while (at && at.type != this.topNode)\n            at = at.parent;\n        if (!at)\n            return null;\n        let from = undefined;\n        let { overrideIndentation } = cx.options;\n        if (overrideIndentation) {\n            from = IndentedFrom.get(cx.state);\n            if (from != null && from < pos - 1e4)\n                from = undefined;\n        }\n        let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* C.MaxIndentScanDist */)\n            return null;\n        while (statePos < pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let line = cx.lineAt(pos);\n        if (overrideIndentation && from == null)\n            IndentedFrom.set(cx.state, line.from);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for (let i = 0; i < tree.children.length; i++) {\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n        this.moveRangeIndex();\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    moveRangeIndex() {\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\n            this.rangeIndex++;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n                if (stream.start > 10000 /* C.MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        this.moveRangeIndex();\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* C.ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\n// Cache of node types by name and tags\nconst byTag = /*@__PURE__*/Object.create(null);\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"tagName\"],\n    [\"attribute\", \"attributeName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tags$1 = [];\n    for (let name of tagStr.split(\" \")) {\n        let found = [];\n        for (let part of name.split(\".\")) {\n            let value = (extra[part] || tags[part]);\n            if (!value) {\n                warnForPart(part, `Unknown highlighting tag ${part}`);\n            }\n            else if (typeof value == \"function\") {\n                if (!found.length)\n                    warnForPart(part, `Modifier ${part} used at start of tag`);\n                else\n                    found = found.map(value);\n            }\n            else {\n                if (found.length)\n                    warnForPart(part, `Tag ${part} used as modifier`);\n                else\n                    found = Array.isArray(value) ? value : [value];\n            }\n        }\n        for (let tag of found)\n            tags$1.push(tag);\n    }\n    if (!tags$1.length)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), key = name + \" \" + tags$1.map(t => t.id);\n    let known = byTag[key];\n    if (known)\n        return known.id;\n    let type = byTag[key] = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tags$1 })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)], top: true });\n    typeArray.push(type);\n    return type;\n}\n\nfunction buildForLine(line) {\n    return line.length <= 4096 && /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/.test(line);\n}\nfunction textHasRTL(text) {\n    for (let i = text.iter(); !i.next().done;)\n        if (buildForLine(i.value))\n            return true;\n    return false;\n}\nfunction changeAddsRTL(change) {\n    let added = false;\n    change.iterChanges((fA, tA, fB, tB, ins) => {\n        if (!added && textHasRTL(ins))\n            added = true;\n    });\n    return added;\n}\nconst alwaysIsolate = /*@__PURE__*/Facet.define({ combine: values => values.some(x => x) });\n/**\nMake sure nodes\n[marked](https://lezer.codemirror.net/docs/ref/#common.NodeProp^isolate)\nas isolating for bidirectional text are rendered in a way that\nisolates them from the surrounding text.\n*/\nfunction bidiIsolates(options = {}) {\n    let extensions = [isolateMarks];\n    if (options.alwaysIsolate)\n        extensions.push(alwaysIsolate.of(true));\n    return extensions;\n}\nconst isolateMarks = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.always = view.state.facet(alwaysIsolate) ||\n            view.textDirection != Direction.LTR ||\n            view.state.facet(EditorView.perLineTextDirection);\n        this.hasRTL = !this.always && textHasRTL(view.state.doc);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.always || this.hasRTL ? buildDeco(view, this.tree, this.always) : Decoration.none;\n    }\n    update(update) {\n        let always = update.state.facet(alwaysIsolate) ||\n            update.view.textDirection != Direction.LTR ||\n            update.state.facet(EditorView.perLineTextDirection);\n        if (!always && !this.hasRTL && changeAddsRTL(update.changes))\n            this.hasRTL = true;\n        if (!always && !this.hasRTL)\n            return;\n        let tree = syntaxTree(update.state);\n        if (always != this.always || tree != this.tree || update.docChanged || update.viewportChanged) {\n            this.tree = tree;\n            this.always = always;\n            this.decorations = buildDeco(update.view, tree, always);\n        }\n    }\n}, {\n    provide: plugin => {\n        function access(view) {\n            var _a, _b;\n            return (_b = (_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.decorations) !== null && _b !== void 0 ? _b : Decoration.none;\n        }\n        return [EditorView.outerDecorations.of(access),\n            Prec.lowest(EditorView.bidiIsolatedRanges.of(access))];\n    }\n});\nfunction buildDeco(view, tree, always) {\n    let deco = new RangeSetBuilder();\n    let ranges = view.visibleRanges;\n    if (!always)\n        ranges = clipRTLLines(ranges, view.state.doc);\n    for (let { from, to } of ranges) {\n        tree.iterate({\n            enter: node => {\n                let iso = node.type.prop(NodeProp.isolate);\n                if (iso)\n                    deco.add(node.from, node.to, marks[iso]);\n            },\n            from, to\n        });\n    }\n    return deco.finish();\n}\nfunction clipRTLLines(ranges, doc) {\n    let cur = doc.iter(), pos = 0, result = [], last = null;\n    for (let { from, to } of ranges) {\n        if (from != pos) {\n            if (pos < from)\n                cur.next(from - pos);\n            pos = from;\n        }\n        for (;;) {\n            let start = pos, end = pos + cur.value.length;\n            if (!cur.lineBreak && buildForLine(cur.value)) {\n                if (last && last.to > start - 10)\n                    last.to = Math.min(to, end);\n                else\n                    result.push(last = { from: start, to: Math.min(to, end) });\n            }\n            if (pos >= to)\n                break;\n            pos = end;\n            cur.next();\n        }\n    }\n    return result;\n}\nconst marks = {\n    rtl: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"rtl\" }, bidiIsolate: Direction.RTL }),\n    ltr: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"ltr\" }, bidiIsolate: Direction.LTR }),\n    auto: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"auto\" }, bidiIsolate: null })\n};\n\nexport { DocInput, HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bidiIsolates, bracketMatching, bracketMatchingHandle, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, sublanguageProp, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, toggleFold, unfoldAll, unfoldCode, unfoldEffect };\n","import { Annotation, Facet, combineConfig, StateField, Transaction, ChangeSet, ChangeDesc, EditorSelection, StateEffect, Text, findClusterBreak, countColumn, CharCategory } from '@codemirror/state';\nimport { EditorView, Direction } from '@codemirror/view';\nimport { IndentContext, getIndentation, indentString, matchBrackets, syntaxTree, getIndentUnit, indentUnit } from '@codemirror/language';\nimport { NodeProp } from '@lezer/common';\n\n/**\nComment or uncomment the current selection. Will use line comments\nif available, otherwise falling back to block comments.\n*/\nconst toggleComment = target => {\n    let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);\n    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;\n};\nfunction command(f, option) {\n    return ({ state, dispatch }) => {\n        if (state.readOnly)\n            return false;\n        let tr = f(option, state);\n        if (!tr)\n            return false;\n        dispatch(state.update(tr));\n        return true;\n    };\n}\n/**\nComment or uncomment the current selection using line comments.\nThe line comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);\n/**\nComment the current selection using line comments.\n*/\nconst lineComment = /*@__PURE__*/command(changeLineComment, 1 /* CommentOption.Comment */);\n/**\nUncomment the current selection using line comments.\n*/\nconst lineUncomment = /*@__PURE__*/command(changeLineComment, 2 /* CommentOption.Uncomment */);\n/**\nComment or uncomment the current selection using block comments.\nThe block comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);\n/**\nComment the current selection using block comments.\n*/\nconst blockComment = /*@__PURE__*/command(changeBlockComment, 1 /* CommentOption.Comment */);\n/**\nUncomment the current selection using block comments.\n*/\nconst blockUncomment = /*@__PURE__*/command(changeBlockComment, 2 /* CommentOption.Uncomment */);\n/**\nComment or uncomment the lines around the current selection using\nblock comments.\n*/\nconst toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);\nfunction getConfig(state, pos) {\n    let data = state.languageDataAt(\"commentTokens\", pos);\n    return data.length ? data[0] : {};\n}\nconst SearchMargin = 50;\n/**\nDetermines if the given range is block-commented in the given\nstate.\n*/\nfunction findBlockComment(state, { open, close }, from, to) {\n    let textBefore = state.sliceDoc(from - SearchMargin, from);\n    let textAfter = state.sliceDoc(to, to + SearchMargin);\n    let spaceBefore = /\\s*$/.exec(textBefore)[0].length, spaceAfter = /^\\s*/.exec(textAfter)[0].length;\n    let beforeOff = textBefore.length - spaceBefore;\n    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&\n        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {\n        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },\n            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };\n    }\n    let startText, endText;\n    if (to - from <= 2 * SearchMargin) {\n        startText = endText = state.sliceDoc(from, to);\n    }\n    else {\n        startText = state.sliceDoc(from, from + SearchMargin);\n        endText = state.sliceDoc(to - SearchMargin, to);\n    }\n    let startSpace = /^\\s*/.exec(startText)[0].length, endSpace = /\\s*$/.exec(endText)[0].length;\n    let endOff = endText.length - endSpace - close.length;\n    if (startText.slice(startSpace, startSpace + open.length) == open &&\n        endText.slice(endOff, endOff + close.length) == close) {\n        return { open: { pos: from + startSpace + open.length,\n                margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },\n            close: { pos: to - endSpace - close.length,\n                margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };\n    }\n    return null;\n}\nfunction selectedLineRanges(state) {\n    let ranges = [];\n    for (let r of state.selection.ranges) {\n        let fromLine = state.doc.lineAt(r.from);\n        let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);\n        let last = ranges.length - 1;\n        if (last >= 0 && ranges[last].to > fromLine.from)\n            ranges[last].to = toLine.to;\n        else\n            ranges.push({ from: fromLine.from + /^\\s*/.exec(fromLine.text)[0].length, to: toLine.to });\n    }\n    return ranges;\n}\n// Performs toggle, comment and uncomment of block comments in\n// languages that support them.\nfunction changeBlockComment(option, state, ranges = state.selection.ranges) {\n    let tokens = ranges.map(r => getConfig(state, r.from).block);\n    if (!tokens.every(c => c))\n        return null;\n    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));\n    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {\n        return { changes: state.changes(ranges.map((range, i) => {\n                if (comments[i])\n                    return [];\n                return [{ from: range.from, insert: tokens[i].open + \" \" }, { from: range.to, insert: \" \" + tokens[i].close }];\n            })) };\n    }\n    else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {\n        let changes = [];\n        for (let i = 0, comment; i < comments.length; i++)\n            if (comment = comments[i]) {\n                let token = tokens[i], { open, close } = comment;\n                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });\n            }\n        return { changes };\n    }\n    return null;\n}\n// Performs toggle, comment and uncomment of line comments.\nfunction changeLineComment(option, state, ranges = state.selection.ranges) {\n    let lines = [];\n    let prevLine = -1;\n    for (let { from, to } of ranges) {\n        let startI = lines.length, minIndent = 1e9;\n        let token = getConfig(state, from).line;\n        if (!token)\n            continue;\n        for (let pos = from; pos <= to;) {\n            let line = state.doc.lineAt(pos);\n            if (line.from > prevLine && (from == to || to > line.from)) {\n                prevLine = line.from;\n                let indent = /^\\s*/.exec(line.text)[0].length;\n                let empty = indent == line.length;\n                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;\n                if (indent < line.text.length && indent < minIndent)\n                    minIndent = indent;\n                lines.push({ line, comment, token, indent, empty, single: false });\n            }\n            pos = line.to + 1;\n        }\n        if (minIndent < 1e9)\n            for (let i = startI; i < lines.length; i++)\n                if (lines[i].indent < lines[i].line.text.length)\n                    lines[i].indent = minIndent;\n        if (lines.length == startI + 1)\n            lines[startI].single = true;\n    }\n    if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {\n        let changes = [];\n        for (let { line, token, indent, empty, single } of lines)\n            if (single || !empty)\n                changes.push({ from: line.from + indent, insert: token + \" \" });\n        let changeSet = state.changes(changes);\n        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };\n    }\n    else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {\n        let changes = [];\n        for (let { line, comment, token } of lines)\n            if (comment >= 0) {\n                let from = line.from + comment, to = from + token.length;\n                if (line.text[to - line.from] == \" \")\n                    to++;\n                changes.push({ from, to });\n            }\n        return { changes };\n    }\n    return null;\n}\n\nconst fromHistory = /*@__PURE__*/Annotation.define();\n/**\nTransaction annotation that will prevent that transaction from\nbeing combined with other transactions in the undo history. Given\n`\"before\"`, it'll prevent merging with previous transactions. With\n`\"after\"`, subsequent transactions won't be combined with this\none. With `\"full\"`, the transaction is isolated on both sides.\n*/\nconst isolateHistory = /*@__PURE__*/Annotation.define();\n/**\nThis facet provides a way to register functions that, given a\ntransaction, provide a set of effects that the history should\nstore when inverting the transaction. This can be used to\nintegrate some kinds of effects in the history, so that they can\nbe undone (and redone again).\n*/\nconst invertedEffects = /*@__PURE__*/Facet.define();\nconst historyConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            minDepth: 100,\n            newGroupDelay: 500,\n            joinToEvent: (_t, isAdjacent) => isAdjacent,\n        }, {\n            minDepth: Math.max,\n            newGroupDelay: Math.min,\n            joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)\n        });\n    }\n});\nconst historyField_ = /*@__PURE__*/StateField.define({\n    create() {\n        return HistoryState.empty;\n    },\n    update(state, tr) {\n        let config = tr.state.facet(historyConfig);\n        let fromHist = tr.annotation(fromHistory);\n        if (fromHist) {\n            let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;\n            let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;\n            if (item)\n                other = updateBranch(other, other.length, config.minDepth, item);\n            else\n                other = addSelection(other, tr.startState.selection);\n            return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);\n        }\n        let isolate = tr.annotation(isolateHistory);\n        if (isolate == \"full\" || isolate == \"before\")\n            state = state.isolate();\n        if (tr.annotation(Transaction.addToHistory) === false)\n            return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;\n        let event = HistEvent.fromTransaction(tr);\n        let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);\n        if (event)\n            state = state.addChanges(event, time, userEvent, config, tr);\n        else if (tr.selection)\n            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);\n        if (isolate == \"full\" || isolate == \"after\")\n            state = state.isolate();\n        return state;\n    },\n    toJSON(value) {\n        return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };\n    },\n    fromJSON(json) {\n        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));\n    }\n});\n/**\nCreate a history extension with the given configuration.\n*/\nfunction history(config = {}) {\n    return [\n        historyField_,\n        historyConfig.of(config),\n        EditorView.domEventHandlers({\n            beforeinput(e, view) {\n                let command = e.inputType == \"historyUndo\" ? undo : e.inputType == \"historyRedo\" ? redo : null;\n                if (!command)\n                    return false;\n                e.preventDefault();\n                return command(view);\n            }\n        })\n    ];\n}\n/**\nThe state field used to store the history data. Should probably\nonly be used when you want to\n[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or\n[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way\nthat preserves history.\n*/\nconst historyField = historyField_;\nfunction cmd(side, selection) {\n    return function ({ state, dispatch }) {\n        if (!selection && state.readOnly)\n            return false;\n        let historyState = state.field(historyField_, false);\n        if (!historyState)\n            return false;\n        let tr = historyState.pop(side, state, selection);\n        if (!tr)\n            return false;\n        dispatch(tr);\n        return true;\n    };\n}\n/**\nUndo a single group of history events. Returns false if no group\nwas available.\n*/\nconst undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);\n/**\nRedo a group of history events. Returns false if no group was\navailable.\n*/\nconst redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);\n/**\nUndo a change or selection change.\n*/\nconst undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);\n/**\nRedo a change or selection change.\n*/\nconst redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);\nfunction depth(side) {\n    return function (state) {\n        let histState = state.field(historyField_, false);\n        if (!histState)\n            return 0;\n        let branch = side == 0 /* BranchName.Done */ ? histState.done : histState.undone;\n        return branch.length - (branch.length && !branch[0].changes ? 1 : 0);\n    };\n}\n/**\nThe amount of undoable change events available in a given state.\n*/\nconst undoDepth = /*@__PURE__*/depth(0 /* BranchName.Done */);\n/**\nThe amount of redoable change events available in a given state.\n*/\nconst redoDepth = /*@__PURE__*/depth(1 /* BranchName.Undone */);\n// History events store groups of changes or effects that need to be\n// undone/redone together.\nclass HistEvent {\n    constructor(\n    // The changes in this event. Normal events hold at least one\n    // change or effect. But it may be necessary to store selection\n    // events before the first change, in which case a special type of\n    // instance is created which doesn't hold any changes, with\n    // changes == startSelection == undefined\n    changes, \n    // The effects associated with this event\n    effects, \n    // Accumulated mapping (from addToHistory==false) that should be\n    // applied to events below this one.\n    mapped, \n    // The selection before this event\n    startSelection, \n    // Stores selection changes after this event, to be used for\n    // selection undo/redo.\n    selectionsAfter) {\n        this.changes = changes;\n        this.effects = effects;\n        this.mapped = mapped;\n        this.startSelection = startSelection;\n        this.selectionsAfter = selectionsAfter;\n    }\n    setSelAfter(after) {\n        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);\n    }\n    toJSON() {\n        var _a, _b, _c;\n        return {\n            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),\n            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),\n            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),\n            selectionsAfter: this.selectionsAfter.map(s => s.toJSON())\n        };\n    }\n    static fromJSON(json) {\n        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));\n    }\n    // This does not check `addToHistory` and such, it assumes the\n    // transaction needs to be converted to an item. Returns null when\n    // there are no changes or effects in the transaction.\n    static fromTransaction(tr, selection) {\n        let effects = none;\n        for (let invert of tr.startState.facet(invertedEffects)) {\n            let result = invert(tr);\n            if (result.length)\n                effects = effects.concat(result);\n        }\n        if (!effects.length && tr.changes.empty)\n            return null;\n        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);\n    }\n    static selection(selections) {\n        return new HistEvent(undefined, none, undefined, undefined, selections);\n    }\n}\nfunction updateBranch(branch, to, maxLen, newEvent) {\n    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;\n    let newBranch = branch.slice(start, to);\n    newBranch.push(newEvent);\n    return newBranch;\n}\nfunction isAdjacent(a, b) {\n    let ranges = [], isAdjacent = false;\n    a.iterChangedRanges((f, t) => ranges.push(f, t));\n    b.iterChangedRanges((_f, _t, f, t) => {\n        for (let i = 0; i < ranges.length;) {\n            let from = ranges[i++], to = ranges[i++];\n            if (t >= from && f <= to)\n                isAdjacent = true;\n        }\n    });\n    return isAdjacent;\n}\nfunction eqSelectionShape(a, b) {\n    return a.ranges.length == b.ranges.length &&\n        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;\n}\nfunction conc(a, b) {\n    return !a.length ? b : !b.length ? a : a.concat(b);\n}\nconst none = [];\nconst MaxSelectionsPerEvent = 200;\nfunction addSelection(branch, selection) {\n    if (!branch.length) {\n        return [HistEvent.selection([selection])];\n    }\n    else {\n        let lastEvent = branch[branch.length - 1];\n        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));\n        if (sels.length && sels[sels.length - 1].eq(selection))\n            return branch;\n        sels.push(selection);\n        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));\n    }\n}\n// Assumes the top item has one or more selectionAfter values\nfunction popSelection(branch) {\n    let last = branch[branch.length - 1];\n    let newBranch = branch.slice();\n    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));\n    return newBranch;\n}\n// Add a mapping to the top event in the given branch. If this maps\n// away all the changes and effects in that item, drop it and\n// propagate the mapping to the next item.\nfunction addMappingToBranch(branch, mapping) {\n    if (!branch.length)\n        return branch;\n    let length = branch.length, selections = none;\n    while (length) {\n        let event = mapEvent(branch[length - 1], mapping, selections);\n        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping\n            let result = branch.slice(0, length);\n            result[length - 1] = event;\n            return result;\n        }\n        else { // Drop this event, since there's no changes or effects left\n            mapping = event.mapped;\n            length--;\n            selections = event.selectionsAfter;\n        }\n    }\n    return selections.length ? [HistEvent.selection(selections)] : none;\n}\nfunction mapEvent(event, mapping, extraSelections) {\n    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);\n    // Change-less events don't store mappings (they are always the last event in a branch)\n    if (!event.changes)\n        return HistEvent.selection(selections);\n    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);\n    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;\n    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);\n}\nconst joinableUserEvent = /^(input\\.type|delete)($|\\.)/;\nclass HistoryState {\n    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {\n        this.done = done;\n        this.undone = undone;\n        this.prevTime = prevTime;\n        this.prevUserEvent = prevUserEvent;\n    }\n    isolate() {\n        return this.prevTime ? new HistoryState(this.done, this.undone) : this;\n    }\n    addChanges(event, time, userEvent, config, tr) {\n        let done = this.done, lastEvent = done[done.length - 1];\n        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&\n            (!userEvent || joinableUserEvent.test(userEvent)) &&\n            ((!lastEvent.selectionsAfter.length &&\n                time - this.prevTime < config.newGroupDelay &&\n                config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||\n                // For compose (but not compose.start) events, always join with previous event\n                userEvent == \"input.type.compose\")) {\n            done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));\n        }\n        else {\n            done = updateBranch(done, done.length, config.minDepth, event);\n        }\n        return new HistoryState(done, none, time, userEvent);\n    }\n    addSelection(selection, time, userEvent, newGroupDelay) {\n        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;\n        if (last.length > 0 &&\n            time - this.prevTime < newGroupDelay &&\n            userEvent == this.prevUserEvent && userEvent && /^select($|\\.)/.test(userEvent) &&\n            eqSelectionShape(last[last.length - 1], selection))\n            return this;\n        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);\n    }\n    addMapping(mapping) {\n        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);\n    }\n    pop(side, state, onlySelection) {\n        let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;\n        if (branch.length == 0)\n            return null;\n        let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;\n        if (onlySelection && event.selectionsAfter.length) {\n            return state.update({\n                selection: event.selectionsAfter[event.selectionsAfter.length - 1],\n                annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),\n                userEvent: side == 0 /* BranchName.Done */ ? \"select.undo\" : \"select.redo\",\n                scrollIntoView: true\n            });\n        }\n        else if (!event.changes) {\n            return null;\n        }\n        else {\n            let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);\n            if (event.mapped)\n                rest = addMappingToBranch(rest, event.mapped);\n            return state.update({\n                changes: event.changes,\n                selection: event.startSelection,\n                effects: event.effects,\n                annotations: fromHistory.of({ side, rest, selection }),\n                filter: false,\n                userEvent: side == 0 /* BranchName.Done */ ? \"undo\" : \"redo\",\n                scrollIntoView: true\n            });\n        }\n    }\n}\nHistoryState.empty = /*@__PURE__*/new HistoryState(none, none);\n/**\nDefault key bindings for the undo history.\n\n- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).\n- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).\n- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).\n- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).\n*/\nconst historyKeymap = [\n    { key: \"Mod-z\", run: undo, preventDefault: true },\n    { key: \"Mod-y\", mac: \"Mod-Shift-z\", run: redo, preventDefault: true },\n    { linux: \"Ctrl-Shift-z\", run: redo, preventDefault: true },\n    { key: \"Mod-u\", run: undoSelection, preventDefault: true },\n    { key: \"Alt-u\", mac: \"Mod-Shift-u\", run: redoSelection, preventDefault: true }\n];\n\nfunction updateSel(sel, by) {\n    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);\n}\nfunction setSel(state, selection) {\n    return state.update({ selection, scrollIntoView: true, userEvent: \"select\" });\n}\nfunction moveSel({ state, dispatch }, how) {\n    let selection = updateSel(state.selection, how);\n    if (selection.eq(state.selection, true))\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n}\nfunction rangeEnd(range, forward) {\n    return EditorSelection.cursor(forward ? range.to : range.from);\n}\nfunction cursorByChar(view, forward) {\n    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));\n}\nfunction ltrAtCursor(view) {\n    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;\n}\n/**\nMove the selection one character to the left (which is backward in\nleft-to-right text, forward in right-to-left text).\n*/\nconst cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));\n/**\nMove the selection one character to the right.\n*/\nconst cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));\n/**\nMove the selection one character forward.\n*/\nconst cursorCharForward = view => cursorByChar(view, true);\n/**\nMove the selection one character backward.\n*/\nconst cursorCharBackward = view => cursorByChar(view, false);\nfunction cursorByGroup(view, forward) {\n    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));\n}\n/**\nMove the selection to the left across one group of word or\nnon-word (but also non-space) characters.\n*/\nconst cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));\n/**\nMove the selection one group to the right.\n*/\nconst cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));\n/**\nMove the selection one group forward.\n*/\nconst cursorGroupForward = view => cursorByGroup(view, true);\n/**\nMove the selection one group backward.\n*/\nconst cursorGroupBackward = view => cursorByGroup(view, false);\nconst segmenter = typeof Intl != \"undefined\" && Intl.Segmenter ?\n    /*@__PURE__*/new (Intl.Segmenter)(undefined, { granularity: \"word\" }) : null;\nfunction moveBySubword(view, range, forward) {\n    let categorize = view.state.charCategorizer(range.from);\n    let cat = CharCategory.Space, pos = range.from, steps = 0;\n    let done = false, sawUpper = false, sawLower = false;\n    let step = (next) => {\n        if (done)\n            return false;\n        pos += forward ? next.length : -next.length;\n        let nextCat = categorize(next), ahead;\n        if (nextCat == CharCategory.Word && next.charCodeAt(0) < 128 && /[\\W_]/.test(next))\n            nextCat = -1; // Treat word punctuation specially\n        if (cat == CharCategory.Space)\n            cat = nextCat;\n        if (cat != nextCat)\n            return false;\n        if (cat == CharCategory.Word) {\n            if (next.toLowerCase() == next) {\n                if (!forward && sawUpper)\n                    return false;\n                sawLower = true;\n            }\n            else if (sawLower) {\n                if (forward)\n                    return false;\n                done = true;\n            }\n            else {\n                if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == CharCategory.Word &&\n                    ahead.toLowerCase() == ahead)\n                    return false;\n                sawUpper = true;\n            }\n        }\n        steps++;\n        return true;\n    };\n    let end = view.moveByChar(range, forward, start => {\n        step(start);\n        return step;\n    });\n    if (segmenter && cat == CharCategory.Word && end.from == range.from + steps * (forward ? 1 : -1)) {\n        let from = Math.min(range.head, end.head), to = Math.max(range.head, end.head);\n        let skipped = view.state.sliceDoc(from, to);\n        if (skipped.length > 1 && /[\\u4E00-\\uffff]/.test(skipped)) {\n            let segments = Array.from(segmenter.segment(skipped));\n            if (segments.length > 1) {\n                if (forward)\n                    return EditorSelection.cursor(range.head + segments[1].index, -1);\n                return EditorSelection.cursor(end.head + segments[segments.length - 1].index, 1);\n            }\n        }\n    }\n    return end;\n}\nfunction cursorBySubword(view, forward) {\n    return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));\n}\n/**\nMove the selection one group or camel-case subword forward.\n*/\nconst cursorSubwordForward = view => cursorBySubword(view, true);\n/**\nMove the selection one group or camel-case subword backward.\n*/\nconst cursorSubwordBackward = view => cursorBySubword(view, false);\nfunction interestingNode(state, node, bracketProp) {\n    if (node.type.prop(bracketProp))\n        return true;\n    let len = node.to - node.from;\n    return len && (len > 2 || /[^\\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;\n}\nfunction moveBySyntax(state, start, forward) {\n    let pos = syntaxTree(state).resolveInner(start.head);\n    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;\n    // Scan forward through child nodes to see if there's an interesting\n    // node ahead.\n    for (let at = start.head;;) {\n        let next = forward ? pos.childAfter(at) : pos.childBefore(at);\n        if (!next)\n            break;\n        if (interestingNode(state, next, bracketProp))\n            pos = next;\n        else\n            at = forward ? next.to : next.from;\n    }\n    let bracket = pos.type.prop(bracketProp), match, newPos;\n    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)\n        newPos = forward ? match.end.to : match.end.from;\n    else\n        newPos = forward ? pos.to : pos.from;\n    return EditorSelection.cursor(newPos, forward ? -1 : 1);\n}\n/**\nMove the cursor over the next syntactic element to the left.\n*/\nconst cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\n/**\nMove the cursor over the next syntactic element to the right.\n*/\nconst cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\nfunction cursorByLine(view, forward) {\n    return moveSel(view, range => {\n        if (!range.empty)\n            return rangeEnd(range, forward);\n        let moved = view.moveVertically(range, forward);\n        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);\n    });\n}\n/**\nMove the selection one line up.\n*/\nconst cursorLineUp = view => cursorByLine(view, false);\n/**\nMove the selection one line down.\n*/\nconst cursorLineDown = view => cursorByLine(view, true);\nfunction pageInfo(view) {\n    let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;\n    let marginTop = 0, marginBottom = 0, height;\n    if (selfScroll) {\n        for (let source of view.state.facet(EditorView.scrollMargins)) {\n            let margins = source(view);\n            if (margins === null || margins === void 0 ? void 0 : margins.top)\n                marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);\n            if (margins === null || margins === void 0 ? void 0 : margins.bottom)\n                marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);\n        }\n        height = view.scrollDOM.clientHeight - marginTop - marginBottom;\n    }\n    else {\n        height = (view.dom.ownerDocument.defaultView || window).innerHeight;\n    }\n    return { marginTop, marginBottom, selfScroll,\n        height: Math.max(view.defaultLineHeight, height - 5) };\n}\nfunction cursorByPage(view, forward) {\n    let page = pageInfo(view);\n    let { state } = view, selection = updateSel(state.selection, range => {\n        return range.empty ? view.moveVertically(range, forward, page.height)\n            : rangeEnd(range, forward);\n    });\n    if (selection.eq(state.selection))\n        return false;\n    let effect;\n    if (page.selfScroll) {\n        let startPos = view.coordsAtPos(state.selection.main.head);\n        let scrollRect = view.scrollDOM.getBoundingClientRect();\n        let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;\n        if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)\n            effect = EditorView.scrollIntoView(selection.main.head, { y: \"start\", yMargin: startPos.top - scrollTop });\n    }\n    view.dispatch(setSel(state, selection), { effects: effect });\n    return true;\n}\n/**\nMove the selection one page up.\n*/\nconst cursorPageUp = view => cursorByPage(view, false);\n/**\nMove the selection one page down.\n*/\nconst cursorPageDown = view => cursorByPage(view, true);\nfunction moveByLineBoundary(view, start, forward) {\n    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);\n    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))\n        moved = view.moveToLineBoundary(start, forward, false);\n    if (!forward && moved.head == line.from && line.length) {\n        let space = /^\\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;\n        if (space && start.head != line.from + space)\n            moved = EditorSelection.cursor(line.from + space);\n    }\n    return moved;\n}\n/**\nMove the selection to the next line wrap point, or to the end of\nthe line if there isn't one left on this line.\n*/\nconst cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));\n/**\nMove the selection to previous line wrap point, or failing that to\nthe start of the line. If the line is indented, and the cursor\nisn't already at the end of the indentation, this will move to the\nend of the indentation instead of the start of the line.\n*/\nconst cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));\n/**\nMove the selection one line wrap point to the left.\n*/\nconst cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\n/**\nMove the selection one line wrap point to the right.\n*/\nconst cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\n/**\nMove the selection to the start of the line.\n*/\nconst cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));\n/**\nMove the selection to the end of the line.\n*/\nconst cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));\nfunction toMatchingBracket(state, dispatch, extend) {\n    let found = false, selection = updateSel(state.selection, range => {\n        let matching = matchBrackets(state, range.head, -1)\n            || matchBrackets(state, range.head, 1)\n            || (range.head > 0 && matchBrackets(state, range.head - 1, 1))\n            || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));\n        if (!matching || !matching.end)\n            return range;\n        found = true;\n        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;\n        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);\n    });\n    if (!found)\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n}\n/**\nMove the selection to the bracket matching the one it is currently\non, if any.\n*/\nconst cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);\n/**\nExtend the selection to the bracket matching the one the selection\nhead is currently on, if any.\n*/\nconst selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);\nfunction extendSel(view, how) {\n    let selection = updateSel(view.state.selection, range => {\n        let head = how(range);\n        return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);\n    });\n    if (selection.eq(view.state.selection))\n        return false;\n    view.dispatch(setSel(view.state, selection));\n    return true;\n}\nfunction selectByChar(view, forward) {\n    return extendSel(view, range => view.moveByChar(range, forward));\n}\n/**\nMove the selection head one character to the left, while leaving\nthe anchor in place.\n*/\nconst selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));\n/**\nMove the selection head one character to the right.\n*/\nconst selectCharRight = view => selectByChar(view, ltrAtCursor(view));\n/**\nMove the selection head one character forward.\n*/\nconst selectCharForward = view => selectByChar(view, true);\n/**\nMove the selection head one character backward.\n*/\nconst selectCharBackward = view => selectByChar(view, false);\nfunction selectByGroup(view, forward) {\n    return extendSel(view, range => view.moveByGroup(range, forward));\n}\n/**\nMove the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to\nthe left.\n*/\nconst selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));\n/**\nMove the selection head one group to the right.\n*/\nconst selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));\n/**\nMove the selection head one group forward.\n*/\nconst selectGroupForward = view => selectByGroup(view, true);\n/**\nMove the selection head one group backward.\n*/\nconst selectGroupBackward = view => selectByGroup(view, false);\nfunction selectBySubword(view, forward) {\n    return extendSel(view, range => moveBySubword(view, range, forward));\n}\n/**\nMove the selection head one group or camel-case subword forward.\n*/\nconst selectSubwordForward = view => selectBySubword(view, true);\n/**\nMove the selection head one group or subword backward.\n*/\nconst selectSubwordBackward = view => selectBySubword(view, false);\n/**\nMove the selection head over the next syntactic element to the left.\n*/\nconst selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));\n/**\nMove the selection head over the next syntactic element to the right.\n*/\nconst selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));\nfunction selectByLine(view, forward) {\n    return extendSel(view, range => view.moveVertically(range, forward));\n}\n/**\nMove the selection head one line up.\n*/\nconst selectLineUp = view => selectByLine(view, false);\n/**\nMove the selection head one line down.\n*/\nconst selectLineDown = view => selectByLine(view, true);\nfunction selectByPage(view, forward) {\n    return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));\n}\n/**\nMove the selection head one page up.\n*/\nconst selectPageUp = view => selectByPage(view, false);\n/**\nMove the selection head one page down.\n*/\nconst selectPageDown = view => selectByPage(view, true);\n/**\nMove the selection head to the next line boundary.\n*/\nconst selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));\n/**\nMove the selection head to the previous line boundary.\n*/\nconst selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));\n/**\nMove the selection head one line boundary to the left.\n*/\nconst selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));\n/**\nMove the selection head one line boundary to the right.\n*/\nconst selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));\n/**\nMove the selection head to the start of the line.\n*/\nconst selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));\n/**\nMove the selection head to the end of the line.\n*/\nconst selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));\n/**\nMove the selection to the start of the document.\n*/\nconst cursorDocStart = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: 0 }));\n    return true;\n};\n/**\nMove the selection to the end of the document.\n*/\nconst cursorDocEnd = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.doc.length }));\n    return true;\n};\n/**\nMove the selection head to the start of the document.\n*/\nconst selectDocStart = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));\n    return true;\n};\n/**\nMove the selection head to the end of the document.\n*/\nconst selectDocEnd = ({ state, dispatch }) => {\n    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));\n    return true;\n};\n/**\nSelect the entire document.\n*/\nconst selectAll = ({ state, dispatch }) => {\n    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: \"select\" }));\n    return true;\n};\n/**\nExpand the selection to cover entire lines.\n*/\nconst selectLine = ({ state, dispatch }) => {\n    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));\n    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: \"select\" }));\n    return true;\n};\n/**\nSelect the next syntactic construct that is larger than the\nselection. Note that this will only work insofar as the language\n[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full\nsyntax tree.\n*/\nconst selectParentSyntax = ({ state, dispatch }) => {\n    let selection = updateSel(state.selection, range => {\n        var _a;\n        let stack = syntaxTree(state).resolveStack(range.from, 1);\n        for (let cur = stack; cur; cur = cur.next) {\n            let { node } = cur;\n            if (((node.from < range.from && node.to >= range.to) ||\n                (node.to > range.to && node.from <= range.from)) &&\n                ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent))\n                return EditorSelection.range(node.to, node.from);\n        }\n        return range;\n    });\n    dispatch(setSel(state, selection));\n    return true;\n};\n/**\nSimplify the current selection. When multiple ranges are selected,\nreduce it to its main range. Otherwise, if the selection is\nnon-empty, convert it to a cursor selection.\n*/\nconst simplifySelection = ({ state, dispatch }) => {\n    let cur = state.selection, selection = null;\n    if (cur.ranges.length > 1)\n        selection = EditorSelection.create([cur.main]);\n    else if (!cur.main.empty)\n        selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);\n    if (!selection)\n        return false;\n    dispatch(setSel(state, selection));\n    return true;\n};\nfunction deleteBy(target, by) {\n    if (target.state.readOnly)\n        return false;\n    let event = \"delete.selection\", { state } = target;\n    let changes = state.changeByRange(range => {\n        let { from, to } = range;\n        if (from == to) {\n            let towards = by(range);\n            if (towards < from) {\n                event = \"delete.backward\";\n                towards = skipAtomic(target, towards, false);\n            }\n            else if (towards > from) {\n                event = \"delete.forward\";\n                towards = skipAtomic(target, towards, true);\n            }\n            from = Math.min(from, towards);\n            to = Math.max(to, towards);\n        }\n        else {\n            from = skipAtomic(target, from, false);\n            to = skipAtomic(target, to, true);\n        }\n        return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };\n    });\n    if (changes.changes.empty)\n        return false;\n    target.dispatch(state.update(changes, {\n        scrollIntoView: true,\n        userEvent: event,\n        effects: event == \"delete.selection\" ? EditorView.announce.of(state.phrase(\"Selection deleted\")) : undefined\n    }));\n    return true;\n}\nfunction skipAtomic(target, pos, forward) {\n    if (target instanceof EditorView)\n        for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))\n            ranges.between(pos, pos, (from, to) => {\n                if (from < pos && to > pos)\n                    pos = forward ? to : from;\n            });\n    return pos;\n}\nconst deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, range => {\n    let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;\n    if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 &&\n        !/[^ \\t]/.test(before = line.text.slice(0, pos - line.from))) {\n        if (before[before.length - 1] == \"\\t\")\n            return pos - 1;\n        let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);\n        for (let i = 0; i < drop && before[before.length - 1 - i] == \" \"; i++)\n            pos--;\n        targetPos = pos;\n    }\n    else {\n        targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;\n        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))\n            targetPos += forward ? 1 : -1;\n        else if (!forward && /[\\ufe00-\\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))\n            targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;\n    }\n    return targetPos;\n});\n/**\nDelete the selection, or, for cursor selections, the character or\nindentation unit before the cursor.\n*/\nconst deleteCharBackward = view => deleteByChar(view, false, true);\n/**\nDelete the selection or the character before the cursor. Does not\nimplement any extended behavior like deleting whole indentation\nunits in one go.\n*/\nconst deleteCharBackwardStrict = view => deleteByChar(view, false, false);\n/**\nDelete the selection or the character after the cursor.\n*/\nconst deleteCharForward = view => deleteByChar(view, true, false);\nconst deleteByGroup = (target, forward) => deleteBy(target, range => {\n    let pos = range.head, { state } = target, line = state.doc.lineAt(pos);\n    let categorize = state.charCategorizer(pos);\n    for (let cat = null;;) {\n        if (pos == (forward ? line.to : line.from)) {\n            if (pos == range.head && line.number != (forward ? state.doc.lines : 1))\n                pos += forward ? 1 : -1;\n            break;\n        }\n        let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;\n        let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);\n        let nextCat = categorize(nextChar);\n        if (cat != null && nextCat != cat)\n            break;\n        if (nextChar != \" \" || pos != range.head)\n            cat = nextCat;\n        pos = next;\n    }\n    return pos;\n});\n/**\nDelete the selection or backward until the end of the next\n[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of\nwhitespace when they consist of a single space.\n*/\nconst deleteGroupBackward = target => deleteByGroup(target, false);\n/**\nDelete the selection or forward until the end of the next group.\n*/\nconst deleteGroupForward = target => deleteByGroup(target, true);\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe end of the line. If the cursor is directly at the end of the\nline, delete the line break after it.\n*/\nconst deleteToLineEnd = view => deleteBy(view, range => {\n    let lineEnd = view.lineBlockAt(range.head).to;\n    return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);\n});\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe start of the line. If the cursor is directly at the start of the\nline, delete the line break before it.\n*/\nconst deleteToLineStart = view => deleteBy(view, range => {\n    let lineStart = view.lineBlockAt(range.head).from;\n    return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);\n});\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe start of the line or the next line wrap before the cursor.\n*/\nconst deleteLineBoundaryBackward = view => deleteBy(view, range => {\n    let lineStart = view.moveToLineBoundary(range, false).head;\n    return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);\n});\n/**\nDelete the selection, or, if it is a cursor selection, delete to\nthe end of the line or the next line wrap after the cursor.\n*/\nconst deleteLineBoundaryForward = view => deleteBy(view, range => {\n    let lineStart = view.moveToLineBoundary(range, true).head;\n    return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);\n});\n/**\nDelete all whitespace directly before a line end from the\ndocument.\n*/\nconst deleteTrailingWhitespace = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = [];\n    for (let pos = 0, prev = \"\", iter = state.doc.iter();;) {\n        iter.next();\n        if (iter.lineBreak || iter.done) {\n            let trailing = prev.search(/\\s+$/);\n            if (trailing > -1)\n                changes.push({ from: pos - (prev.length - trailing), to: pos });\n            if (iter.done)\n                break;\n            prev = \"\";\n        }\n        else {\n            prev = iter.value;\n        }\n        pos += iter.value.length;\n    }\n    if (!changes.length)\n        return false;\n    dispatch(state.update({ changes, userEvent: \"delete\" }));\n    return true;\n};\n/**\nReplace each selection range with a line break, leaving the cursor\non the line before the break.\n*/\nconst splitLine = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = state.changeByRange(range => {\n        return { changes: { from: range.from, to: range.to, insert: Text.of([\"\", \"\"]) },\n            range: EditorSelection.cursor(range.from) };\n    });\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\n/**\nFlip the characters before and after the cursor(s).\n*/\nconst transposeChars = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let changes = state.changeByRange(range => {\n        if (!range.empty || range.from == 0 || range.from == state.doc.length)\n            return { range };\n        let pos = range.from, line = state.doc.lineAt(pos);\n        let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;\n        let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;\n        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },\n            range: EditorSelection.cursor(to) };\n    });\n    if (changes.changes.empty)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"move.character\" }));\n    return true;\n};\nfunction selectedLineBlocks(state) {\n    let blocks = [], upto = -1;\n    for (let range of state.selection.ranges) {\n        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);\n        if (!range.empty && range.to == endLine.from)\n            endLine = state.doc.lineAt(range.to - 1);\n        if (upto >= startLine.number) {\n            let prev = blocks[blocks.length - 1];\n            prev.to = endLine.to;\n            prev.ranges.push(range);\n        }\n        else {\n            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });\n        }\n        upto = endLine.number + 1;\n    }\n    return blocks;\n}\nfunction moveLine(state, dispatch, forward) {\n    if (state.readOnly)\n        return false;\n    let changes = [], ranges = [];\n    for (let block of selectedLineBlocks(state)) {\n        if (forward ? block.to == state.doc.length : block.from == 0)\n            continue;\n        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);\n        let size = nextLine.length + 1;\n        if (forward) {\n            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });\n            for (let r of block.ranges)\n                ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));\n        }\n        else {\n            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });\n            for (let r of block.ranges)\n                ranges.push(EditorSelection.range(r.anchor - size, r.head - size));\n        }\n    }\n    if (!changes.length)\n        return false;\n    dispatch(state.update({\n        changes,\n        scrollIntoView: true,\n        selection: EditorSelection.create(ranges, state.selection.mainIndex),\n        userEvent: \"move.line\"\n    }));\n    return true;\n}\n/**\nMove the selected lines up one line.\n*/\nconst moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);\n/**\nMove the selected lines down one line.\n*/\nconst moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);\nfunction copyLine(state, dispatch, forward) {\n    if (state.readOnly)\n        return false;\n    let changes = [];\n    for (let block of selectedLineBlocks(state)) {\n        if (forward)\n            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });\n        else\n            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });\n    }\n    dispatch(state.update({ changes, scrollIntoView: true, userEvent: \"input.copyline\" }));\n    return true;\n}\n/**\nCreate a copy of the selected lines. Keep the selection in the top copy.\n*/\nconst copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);\n/**\nCreate a copy of the selected lines. Keep the selection in the bottom copy.\n*/\nconst copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);\n/**\nDelete selected lines.\n*/\nconst deleteLine = view => {\n    if (view.state.readOnly)\n        return false;\n    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {\n        if (from > 0)\n            from--;\n        else if (to < state.doc.length)\n            to++;\n        return { from, to };\n    }));\n    let selection = updateSel(state.selection, range => {\n        let dist = undefined;\n        if (view.lineWrapping) {\n            let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);\n            if (pos)\n                dist = (block.bottom + view.documentTop) - pos.bottom + view.defaultLineHeight / 2;\n        }\n        return view.moveVertically(range, true, dist);\n    }).map(changes);\n    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: \"delete.line\" });\n    return true;\n};\n/**\nReplace the selection with a newline.\n*/\nconst insertNewline = ({ state, dispatch }) => {\n    dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\n/**\nReplace the selection with a newline and the same amount of\nindentation as the line above.\n*/\nconst insertNewlineKeepIndent = ({ state, dispatch }) => {\n    dispatch(state.update(state.changeByRange(range => {\n        let indent = /^\\s*/.exec(state.doc.lineAt(range.from).text)[0];\n        return {\n            changes: { from: range.from, to: range.to, insert: state.lineBreak + indent },\n            range: EditorSelection.cursor(range.from + indent.length + 1)\n        };\n    }), { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isBetweenBrackets(state, pos) {\n    if (/\\(\\)|\\[\\]|\\{\\}/.test(state.sliceDoc(pos - 1, pos + 1)))\n        return { from: pos, to: pos };\n    let context = syntaxTree(state).resolveInner(pos);\n    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;\n    if (before && after && before.to <= pos && after.from >= pos &&\n        (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&\n        state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&\n        !/\\S/.test(state.sliceDoc(before.to, after.from)))\n        return { from: before.to, to: after.from };\n    return null;\n}\n/**\nReplace the selection with a newline and indent the newly created\nline(s). If the current line consists only of whitespace, this\nwill also delete that whitespace. When the cursor is between\nmatching brackets, an additional newline will be inserted after\nthe cursor.\n*/\nconst insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);\n/**\nCreate a blank, indented line below the current line.\n*/\nconst insertBlankLine = /*@__PURE__*/newlineAndIndent(true);\nfunction newlineAndIndent(atEof) {\n    return ({ state, dispatch }) => {\n        if (state.readOnly)\n            return false;\n        let changes = state.changeByRange(range => {\n            let { from, to } = range, line = state.doc.lineAt(from);\n            let explode = !atEof && from == to && isBetweenBrackets(state, from);\n            if (atEof)\n                from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;\n            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });\n            let indent = getIndentation(cx, from);\n            if (indent == null)\n                indent = countColumn(/^\\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);\n            while (to < line.to && /\\s/.test(line.text[to - line.from]))\n                to++;\n            if (explode)\n                ({ from, to } = explode);\n            else if (from > line.from && from < line.from + 100 && !/\\S/.test(line.text.slice(0, from)))\n                from = line.from;\n            let insert = [\"\", indentString(state, indent)];\n            if (explode)\n                insert.push(indentString(state, cx.lineIndent(line.from, -1)));\n            return { changes: { from, to, insert: Text.of(insert) },\n                range: EditorSelection.cursor(from + 1 + insert[1].length) };\n        });\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n        return true;\n    };\n}\nfunction changeBySelectedLine(state, f) {\n    let atLine = -1;\n    return state.changeByRange(range => {\n        let changes = [];\n        for (let pos = range.from; pos <= range.to;) {\n            let line = state.doc.lineAt(pos);\n            if (line.number > atLine && (range.empty || range.to > line.from)) {\n                f(line, changes, range);\n                atLine = line.number;\n            }\n            pos = line.to + 1;\n        }\n        let changeSet = state.changes(changes);\n        return { changes,\n            range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };\n    });\n}\n/**\nAuto-indent the selected lines. This uses the [indentation service\nfacet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent\ninformation.\n*/\nconst indentSelection = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => {\n            let found = updated[start];\n            return found == null ? -1 : found;\n        } });\n    let changes = changeBySelectedLine(state, (line, changes, range) => {\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            return;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm || range.from < line.from + cur.length) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    });\n    if (!changes.changes.empty)\n        dispatch(state.update(changes, { userEvent: \"indent\" }));\n    return true;\n};\n/**\nAdd a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected\nlines.\n*/\nconst indentMore = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\n        changes.push({ from: line.from, insert: state.facet(indentUnit) });\n    }), { userEvent: \"input.indent\" }));\n    return true;\n};\n/**\nRemove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all\nselected lines.\n*/\nconst indentLess = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {\n        let space = /^\\s*/.exec(line.text)[0];\n        if (!space)\n            return;\n        let col = countColumn(space, state.tabSize), keep = 0;\n        let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));\n        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))\n            keep++;\n        changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });\n    }), { userEvent: \"delete.dedent\" }));\n    return true;\n};\n/**\nInsert a tab character at the cursor or, if something is selected,\nuse [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire\nselection.\n*/\nconst insertTab = ({ state, dispatch }) => {\n    if (state.selection.ranges.some(r => !r.empty))\n        return indentMore({ state, dispatch });\n    dispatch(state.update(state.replaceSelection(\"\\t\"), { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\n/**\nArray of key bindings containing the Emacs-style bindings that are\navailable on macOS by default.\n\n - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)\n - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)\n - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)\n - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)\n - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)\n*/\nconst emacsStyleKeymap = [\n    { key: \"Ctrl-b\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\n    { key: \"Ctrl-f\", run: cursorCharRight, shift: selectCharRight },\n    { key: \"Ctrl-p\", run: cursorLineUp, shift: selectLineUp },\n    { key: \"Ctrl-n\", run: cursorLineDown, shift: selectLineDown },\n    { key: \"Ctrl-a\", run: cursorLineStart, shift: selectLineStart },\n    { key: \"Ctrl-e\", run: cursorLineEnd, shift: selectLineEnd },\n    { key: \"Ctrl-d\", run: deleteCharForward },\n    { key: \"Ctrl-h\", run: deleteCharBackward },\n    { key: \"Ctrl-k\", run: deleteToLineEnd },\n    { key: \"Ctrl-Alt-h\", run: deleteGroupBackward },\n    { key: \"Ctrl-o\", run: splitLine },\n    { key: \"Ctrl-t\", run: transposeChars },\n    { key: \"Ctrl-v\", run: cursorPageDown },\n];\n/**\nAn array of key bindings closely sticking to platform-standard or\nwidely used bindings. (This includes the bindings from\n[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`\nproperty changed to `mac`.)\n\n - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)\n - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)\n - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)\n - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)\n - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)\n - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)\n - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)\n - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)\n - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)\n - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)\n - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)\n - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)\n - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)\n - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)\n - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)\n - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)\n - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)\n - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)\n - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)\n - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)\n - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).\n - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).\n*/\nconst standardKeymap = /*@__PURE__*/[\n    { key: \"ArrowLeft\", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },\n    { key: \"Mod-ArrowLeft\", mac: \"Alt-ArrowLeft\", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },\n    { mac: \"Cmd-ArrowLeft\", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },\n    { key: \"ArrowRight\", run: cursorCharRight, shift: selectCharRight, preventDefault: true },\n    { key: \"Mod-ArrowRight\", mac: \"Alt-ArrowRight\", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },\n    { mac: \"Cmd-ArrowRight\", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },\n    { key: \"ArrowUp\", run: cursorLineUp, shift: selectLineUp, preventDefault: true },\n    { mac: \"Cmd-ArrowUp\", run: cursorDocStart, shift: selectDocStart },\n    { mac: \"Ctrl-ArrowUp\", run: cursorPageUp, shift: selectPageUp },\n    { key: \"ArrowDown\", run: cursorLineDown, shift: selectLineDown, preventDefault: true },\n    { mac: \"Cmd-ArrowDown\", run: cursorDocEnd, shift: selectDocEnd },\n    { mac: \"Ctrl-ArrowDown\", run: cursorPageDown, shift: selectPageDown },\n    { key: \"PageUp\", run: cursorPageUp, shift: selectPageUp },\n    { key: \"PageDown\", run: cursorPageDown, shift: selectPageDown },\n    { key: \"Home\", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },\n    { key: \"Mod-Home\", run: cursorDocStart, shift: selectDocStart },\n    { key: \"End\", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },\n    { key: \"Mod-End\", run: cursorDocEnd, shift: selectDocEnd },\n    { key: \"Enter\", run: insertNewlineAndIndent },\n    { key: \"Mod-a\", run: selectAll },\n    { key: \"Backspace\", run: deleteCharBackward, shift: deleteCharBackward },\n    { key: \"Delete\", run: deleteCharForward },\n    { key: \"Mod-Backspace\", mac: \"Alt-Backspace\", run: deleteGroupBackward },\n    { key: \"Mod-Delete\", mac: \"Alt-Delete\", run: deleteGroupForward },\n    { mac: \"Mod-Backspace\", run: deleteLineBoundaryBackward },\n    { mac: \"Mod-Delete\", run: deleteLineBoundaryForward }\n].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));\n/**\nThe default keymap. Includes all bindings from\n[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:\n\n- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)\n- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)\n- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)\n- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)\n- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)\n- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)\n- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)\n- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)\n- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)\n- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)\n- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)\n- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)\n- Ctrl-Alt-\\\\ (Cmd-Alt-\\\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)\n- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)\n- Shift-Ctrl-\\\\ (Shift-Cmd-\\\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)\n- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).\n- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).\n*/\nconst defaultKeymap = /*@__PURE__*/[\n    { key: \"Alt-ArrowLeft\", mac: \"Ctrl-ArrowLeft\", run: cursorSyntaxLeft, shift: selectSyntaxLeft },\n    { key: \"Alt-ArrowRight\", mac: \"Ctrl-ArrowRight\", run: cursorSyntaxRight, shift: selectSyntaxRight },\n    { key: \"Alt-ArrowUp\", run: moveLineUp },\n    { key: \"Shift-Alt-ArrowUp\", run: copyLineUp },\n    { key: \"Alt-ArrowDown\", run: moveLineDown },\n    { key: \"Shift-Alt-ArrowDown\", run: copyLineDown },\n    { key: \"Escape\", run: simplifySelection },\n    { key: \"Mod-Enter\", run: insertBlankLine },\n    { key: \"Alt-l\", mac: \"Ctrl-l\", run: selectLine },\n    { key: \"Mod-i\", run: selectParentSyntax, preventDefault: true },\n    { key: \"Mod-[\", run: indentLess },\n    { key: \"Mod-]\", run: indentMore },\n    { key: \"Mod-Alt-\\\\\", run: indentSelection },\n    { key: \"Shift-Mod-k\", run: deleteLine },\n    { key: \"Shift-Mod-\\\\\", run: cursorMatchingBracket },\n    { key: \"Mod-/\", run: toggleComment },\n    { key: \"Alt-A\", run: toggleBlockComment }\n].concat(standardKeymap);\n/**\nA binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and\nShift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).\nPlease see the [Tab example](../../examples/tab/) before using\nthis.\n*/\nconst indentWithTab = { key: \"Tab\", run: indentMore, shift: indentLess };\n\nexport { blockComment, blockUncomment, copyLineDown, copyLineUp, cursorCharBackward, cursorCharForward, cursorCharLeft, cursorCharRight, cursorDocEnd, cursorDocStart, cursorGroupBackward, cursorGroupForward, cursorGroupLeft, cursorGroupRight, cursorLineBoundaryBackward, cursorLineBoundaryForward, cursorLineBoundaryLeft, cursorLineBoundaryRight, cursorLineDown, cursorLineEnd, cursorLineStart, cursorLineUp, cursorMatchingBracket, cursorPageDown, cursorPageUp, cursorSubwordBackward, cursorSubwordForward, cursorSyntaxLeft, cursorSyntaxRight, defaultKeymap, deleteCharBackward, deleteCharBackwardStrict, deleteCharForward, deleteGroupBackward, deleteGroupForward, deleteLine, deleteLineBoundaryBackward, deleteLineBoundaryForward, deleteToLineEnd, deleteToLineStart, deleteTrailingWhitespace, emacsStyleKeymap, history, historyField, historyKeymap, indentLess, indentMore, indentSelection, indentWithTab, insertBlankLine, insertNewline, insertNewlineAndIndent, insertNewlineKeepIndent, insertTab, invertedEffects, isolateHistory, lineComment, lineUncomment, moveLineDown, moveLineUp, redo, redoDepth, redoSelection, selectAll, selectCharBackward, selectCharForward, selectCharLeft, selectCharRight, selectDocEnd, selectDocStart, selectGroupBackward, selectGroupForward, selectGroupLeft, selectGroupRight, selectLine, selectLineBoundaryBackward, selectLineBoundaryForward, selectLineBoundaryLeft, selectLineBoundaryRight, selectLineDown, selectLineEnd, selectLineStart, selectLineUp, selectMatchingBracket, selectPageDown, selectPageUp, selectParentSyntax, selectSubwordBackward, selectSubwordForward, selectSyntaxLeft, selectSyntaxRight, simplifySelection, splitLine, standardKeymap, toggleBlockComment, toggleBlockCommentByLine, toggleComment, toggleLineComment, transposeChars, undo, undoDepth, undoSelection };\n","export default function crelt() {\n  var elt = arguments[0]\n  if (typeof elt == \"string\") elt = document.createElement(elt)\n  var i = 1, next = arguments[1]\n  if (next && typeof next == \"object\" && next.nodeType == null && !Array.isArray(next)) {\n    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {\n      var value = next[name]\n      if (typeof value == \"string\") elt.setAttribute(name, value)\n      else if (value != null) elt[name] = value\n    }\n    i++\n  }\n  for (; i < arguments.length; i++) add(elt, arguments[i])\n  return elt\n}\n\nfunction add(elt, child) {\n  if (typeof child == \"string\") {\n    elt.appendChild(document.createTextNode(child))\n  } else if (child == null) {\n  } else if (child.nodeType != null) {\n    elt.appendChild(child)\n  } else if (Array.isArray(child)) {\n    for (var i = 0; i < child.length; i++) add(elt, child[i])\n  } else {\n    throw new RangeError(\"Unsupported child node: \" + child)\n  }\n}\n","import { showPanel, EditorView, getPanel, Decoration, ViewPlugin, runScopeHandlers } from '@codemirror/view';\nimport { codePointAt, fromCodePoint, codePointSize, StateEffect, StateField, EditorSelection, Facet, combineConfig, CharCategory, RangeSetBuilder, Prec, EditorState, findClusterBreak } from '@codemirror/state';\nimport elt from 'crelt';\n\nconst basicNormalize = typeof String.prototype.normalize == \"function\"\n    ? x => x.normalize(\"NFKD\") : x => x;\n/**\nA search cursor provides an iterator over text matches in a\ndocument.\n*/\nclass SearchCursor {\n    /**\n    Create a text cursor. The query is the search string, `from` to\n    `to` provides the region to search.\n    \n    When `normalize` is given, it will be called, on both the query\n    string and the content it is matched against, before comparing.\n    You can, for example, create a case-insensitive search by\n    passing `s => s.toLowerCase()`.\n    \n    Text is always normalized with\n    [`.normalize(\"NFKD\")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n    (when supported).\n    */\n    constructor(text, query, from = 0, to = text.length, normalize, test) {\n        this.test = test;\n        /**\n        The current match (only holds a meaningful value after\n        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when\n        `done` is false).\n        */\n        this.value = { from: 0, to: 0 };\n        /**\n        Whether the end of the iterated region has been reached.\n        */\n        this.done = false;\n        this.matches = [];\n        this.buffer = \"\";\n        this.bufferPos = 0;\n        this.iter = text.iterRange(from, to);\n        this.bufferStart = from;\n        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;\n        this.query = this.normalize(query);\n    }\n    peek() {\n        if (this.bufferPos == this.buffer.length) {\n            this.bufferStart += this.buffer.length;\n            this.iter.next();\n            if (this.iter.done)\n                return -1;\n            this.bufferPos = 0;\n            this.buffer = this.iter.value;\n        }\n        return codePointAt(this.buffer, this.bufferPos);\n    }\n    /**\n    Look for the next match. Updates the iterator's\n    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and\n    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called\n    at least once before using the cursor.\n    */\n    next() {\n        while (this.matches.length)\n            this.matches.pop();\n        return this.nextOverlapping();\n    }\n    /**\n    The `next` method will ignore matches that partially overlap a\n    previous match. This method behaves like `next`, but includes\n    such matches.\n    */\n    nextOverlapping() {\n        for (;;) {\n            let next = this.peek();\n            if (next < 0) {\n                this.done = true;\n                return this;\n            }\n            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;\n            this.bufferPos += codePointSize(next);\n            let norm = this.normalize(str);\n            for (let i = 0, pos = start;; i++) {\n                let code = norm.charCodeAt(i);\n                let match = this.match(code, pos, this.bufferPos + this.bufferStart);\n                if (i == norm.length - 1) {\n                    if (match) {\n                        this.value = match;\n                        return this;\n                    }\n                    break;\n                }\n                if (pos == start && i < str.length && str.charCodeAt(i) == code)\n                    pos++;\n            }\n        }\n    }\n    match(code, pos, end) {\n        let match = null;\n        for (let i = 0; i < this.matches.length; i += 2) {\n            let index = this.matches[i], keep = false;\n            if (this.query.charCodeAt(index) == code) {\n                if (index == this.query.length - 1) {\n                    match = { from: this.matches[i + 1], to: end };\n                }\n                else {\n                    this.matches[i]++;\n                    keep = true;\n                }\n            }\n            if (!keep) {\n                this.matches.splice(i, 2);\n                i -= 2;\n            }\n        }\n        if (this.query.charCodeAt(0) == code) {\n            if (this.query.length == 1)\n                match = { from: pos, to: end };\n            else\n                this.matches.push(1, pos);\n        }\n        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))\n            match = null;\n        return match;\n    }\n}\nif (typeof Symbol != \"undefined\")\n    SearchCursor.prototype[Symbol.iterator] = function () { return this; };\n\nconst empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec(\"\") };\nconst baseFlags = \"gm\" + (/x/.unicode == null ? \"\" : \"u\");\n/**\nThis class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)\nbut searches for a regular expression pattern instead of a plain\nstring.\n*/\nclass RegExpCursor {\n    /**\n    Create a cursor that will search the given range in the given\n    document. `query` should be the raw pattern (as you'd pass it to\n    `new RegExp`).\n    */\n    constructor(text, query, options, from = 0, to = text.length) {\n        this.text = text;\n        this.to = to;\n        this.curLine = \"\";\n        /**\n        Set to `true` when the cursor has reached the end of the search\n        range.\n        */\n        this.done = false;\n        /**\n        Will contain an object with the extent of the match and the\n        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)\n        sucessfully finds a match.\n        */\n        this.value = empty;\n        if (/\\\\[sWDnr]|\\n|\\r|\\[\\^/.test(query))\n            return new MultilineRegExpCursor(text, query, options, from, to);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.iter = text.iter();\n        let startLine = text.lineAt(from);\n        this.curLineStart = startLine.from;\n        this.matchPos = toCharEnd(text, from);\n        this.getLine(this.curLineStart);\n    }\n    getLine(skip) {\n        this.iter.next(skip);\n        if (this.iter.lineBreak) {\n            this.curLine = \"\";\n        }\n        else {\n            this.curLine = this.iter.value;\n            if (this.curLineStart + this.curLine.length > this.to)\n                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);\n            this.iter.next();\n        }\n    }\n    nextLine() {\n        this.curLineStart = this.curLineStart + this.curLine.length + 1;\n        if (this.curLineStart > this.to)\n            this.curLine = \"\";\n        else\n            this.getLine(0);\n    }\n    /**\n    Move to the next match, if there is one.\n    */\n    next() {\n        for (let off = this.matchPos - this.curLineStart;;) {\n            this.re.lastIndex = off;\n            let match = this.matchPos <= this.to && this.re.exec(this.curLine);\n            if (match) {\n                let from = this.curLineStart + match.index, to = from + match[0].length;\n                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                if (from == this.curLineStart + this.curLine.length)\n                    this.nextLine();\n                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    return this;\n                }\n                off = this.matchPos - this.curLineStart;\n            }\n            else if (this.curLineStart + this.curLine.length < this.to) {\n                this.nextLine();\n                off = 0;\n            }\n            else {\n                this.done = true;\n                return this;\n            }\n        }\n    }\n}\nconst flattened = /*@__PURE__*/new WeakMap();\n// Reusable (partially) flattened document strings\nclass FlattenedDoc {\n    constructor(from, text) {\n        this.from = from;\n        this.text = text;\n    }\n    get to() { return this.from + this.text.length; }\n    static get(doc, from, to) {\n        let cached = flattened.get(doc);\n        if (!cached || cached.from >= to || cached.to <= from) {\n            let flat = new FlattenedDoc(from, doc.sliceString(from, to));\n            flattened.set(doc, flat);\n            return flat;\n        }\n        if (cached.from == from && cached.to == to)\n            return cached;\n        let { text, from: cachedFrom } = cached;\n        if (cachedFrom > from) {\n            text = doc.sliceString(from, cachedFrom) + text;\n            cachedFrom = from;\n        }\n        if (cached.to < to)\n            text += doc.sliceString(cached.to, to);\n        flattened.set(doc, new FlattenedDoc(cachedFrom, text));\n        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));\n    }\n}\nclass MultilineRegExpCursor {\n    constructor(text, query, options, from, to) {\n        this.text = text;\n        this.to = to;\n        this.done = false;\n        this.value = empty;\n        this.matchPos = toCharEnd(text, from);\n        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? \"i\" : \"\"));\n        this.test = options === null || options === void 0 ? void 0 : options.test;\n        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));\n    }\n    chunkEnd(pos) {\n        return pos >= this.to ? this.to : this.text.lineAt(pos).to;\n    }\n    next() {\n        for (;;) {\n            let off = this.re.lastIndex = this.matchPos - this.flat.from;\n            let match = this.re.exec(this.flat.text);\n            // Skip empty matches directly after the last match\n            if (match && !match[0] && match.index == off) {\n                this.re.lastIndex = off + 1;\n                match = this.re.exec(this.flat.text);\n            }\n            if (match) {\n                let from = this.flat.from + match.index, to = from + match[0].length;\n                // If a match goes almost to the end of a noncomplete chunk, try\n                // again, since it'll likely be able to match more\n                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&\n                    (!this.test || this.test(from, to, match))) {\n                    this.value = { from, to, match };\n                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));\n                    return this;\n                }\n            }\n            if (this.flat.to == this.to) {\n                this.done = true;\n                return this;\n            }\n            // Grow the flattened doc\n            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));\n        }\n    }\n}\nif (typeof Symbol != \"undefined\") {\n    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =\n        function () { return this; };\n}\nfunction validRegExp(source) {\n    try {\n        new RegExp(source, baseFlags);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction toCharEnd(text, pos) {\n    if (pos >= text.length)\n        return pos;\n    let line = text.lineAt(pos), next;\n    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)\n        pos++;\n    return pos;\n}\n\nfunction createLineDialog(view) {\n    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);\n    let input = elt(\"input\", { class: \"cm-textfield\", name: \"line\", value: line });\n    let dom = elt(\"form\", {\n        class: \"cm-gotoLine\",\n        onkeydown: (event) => {\n            if (event.keyCode == 27) { // Escape\n                event.preventDefault();\n                view.dispatch({ effects: dialogEffect.of(false) });\n                view.focus();\n            }\n            else if (event.keyCode == 13) { // Enter\n                event.preventDefault();\n                go();\n            }\n        },\n        onsubmit: (event) => {\n            event.preventDefault();\n            go();\n        }\n    }, elt(\"label\", view.state.phrase(\"Go to line\"), \": \", input), \" \", elt(\"button\", { class: \"cm-button\", type: \"submit\" }, view.state.phrase(\"go\")));\n    function go() {\n        let match = /^([+-])?(\\d+)?(:\\d+)?(%)?$/.exec(input.value);\n        if (!match)\n            return;\n        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);\n        let [, sign, ln, cl, percent] = match;\n        let col = cl ? +cl.slice(1) : 0;\n        let line = ln ? +ln : startLine.number;\n        if (ln && percent) {\n            let pc = line / 100;\n            if (sign)\n                pc = pc * (sign == \"-\" ? -1 : 1) + (startLine.number / state.doc.lines);\n            line = Math.round(state.doc.lines * pc);\n        }\n        else if (ln && sign) {\n            line = line * (sign == \"-\" ? -1 : 1) + startLine.number;\n        }\n        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));\n        let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));\n        view.dispatch({\n            effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],\n            selection,\n        });\n        view.focus();\n    }\n    return { dom };\n}\nconst dialogEffect = /*@__PURE__*/StateEffect.define();\nconst dialogField = /*@__PURE__*/StateField.define({\n    create() { return true; },\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(dialogEffect))\n                value = e.value;\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val ? createLineDialog : null)\n});\n/**\nCommand that shows a dialog asking the user for a line number, and\nwhen a valid position is provided, moves the cursor to that line.\n\nSupports line numbers, relative line offsets prefixed with `+` or\n`-`, document percentages suffixed with `%`, and an optional\ncolumn position by adding `:` and a second number after the line\nnumber.\n*/\nconst gotoLine = view => {\n    let panel = getPanel(view, createLineDialog);\n    if (!panel) {\n        let effects = [dialogEffect.of(true)];\n        if (view.state.field(dialogField, false) == null)\n            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));\n        view.dispatch({ effects });\n        panel = getPanel(view, createLineDialog);\n    }\n    if (panel)\n        panel.dom.querySelector(\"input\").select();\n    return true;\n};\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-gotoLine\": {\n        padding: \"2px 6px 4px\",\n        \"& label\": { fontSize: \"80%\" }\n    }\n});\n\nconst defaultHighlightOptions = {\n    highlightWordAroundCursor: false,\n    minSelectionLength: 1,\n    maxMatches: 100,\n    wholeWords: false\n};\nconst highlightConfig = /*@__PURE__*/Facet.define({\n    combine(options) {\n        return combineConfig(options, defaultHighlightOptions, {\n            highlightWordAroundCursor: (a, b) => a || b,\n            minSelectionLength: Math.min,\n            maxMatches: Math.min\n        });\n    }\n});\n/**\nThis extension highlights text that matches the selection. It uses\nthe `\"cm-selectionMatch\"` class for the highlighting. When\n`highlightWordAroundCursor` is enabled, the word at the cursor\nitself will be highlighted with `\"cm-selectionMatch-main\"`.\n*/\nfunction highlightSelectionMatches(options) {\n    let ext = [defaultTheme, matchHighlighter];\n    if (options)\n        ext.push(highlightConfig.of(options));\n    return ext;\n}\nconst matchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch\" });\nconst mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: \"cm-selectionMatch cm-selectionMatch-main\" });\n// Whether the characters directly outside the given positions are non-word characters\nfunction insideWordBoundaries(check, state, from, to) {\n    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&\n        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);\n}\n// Whether the characters directly at the given positions are word characters\nfunction insideWord(check, state, from, to) {\n    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word\n        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;\n}\nconst matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.decorations = this.getDeco(view);\n    }\n    update(update) {\n        if (update.selectionSet || update.docChanged || update.viewportChanged)\n            this.decorations = this.getDeco(update.view);\n    }\n    getDeco(view) {\n        let conf = view.state.facet(highlightConfig);\n        let { state } = view, sel = state.selection;\n        if (sel.ranges.length > 1)\n            return Decoration.none;\n        let range = sel.main, query, check = null;\n        if (range.empty) {\n            if (!conf.highlightWordAroundCursor)\n                return Decoration.none;\n            let word = state.wordAt(range.head);\n            if (!word)\n                return Decoration.none;\n            check = state.charCategorizer(range.head);\n            query = state.sliceDoc(word.from, word.to);\n        }\n        else {\n            let len = range.to - range.from;\n            if (len < conf.minSelectionLength || len > 200)\n                return Decoration.none;\n            if (conf.wholeWords) {\n                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?\n                check = state.charCategorizer(range.head);\n                if (!(insideWordBoundaries(check, state, range.from, range.to) &&\n                    insideWord(check, state, range.from, range.to)))\n                    return Decoration.none;\n            }\n            else {\n                query = state.sliceDoc(range.from, range.to);\n                if (!query)\n                    return Decoration.none;\n            }\n        }\n        let deco = [];\n        for (let part of view.visibleRanges) {\n            let cursor = new SearchCursor(state.doc, query, part.from, part.to);\n            while (!cursor.next().done) {\n                let { from, to } = cursor.value;\n                if (!check || insideWordBoundaries(check, state, from, to)) {\n                    if (range.empty && from <= range.from && to >= range.to)\n                        deco.push(mainMatchDeco.range(from, to));\n                    else if (from >= range.to || to <= range.from)\n                        deco.push(matchDeco.range(from, to));\n                    if (deco.length > conf.maxMatches)\n                        return Decoration.none;\n                }\n            }\n        }\n        return Decoration.set(deco);\n    }\n}, {\n    decorations: v => v.decorations\n});\nconst defaultTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-selectionMatch\": { backgroundColor: \"#99ff7780\" },\n    \".cm-searchMatch .cm-selectionMatch\": { backgroundColor: \"transparent\" }\n});\n// Select the words around the cursors.\nconst selectWord = ({ state, dispatch }) => {\n    let { selection } = state;\n    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);\n    if (newSel.eq(selection))\n        return false;\n    dispatch(state.update({ selection: newSel }));\n    return true;\n};\n// Find next occurrence of query relative to last cursor. Wrap around\n// the document if there are no more matches.\nfunction findNextOccurrence(state, query) {\n    let { main, ranges } = state.selection;\n    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;\n    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {\n        cursor.next();\n        if (cursor.done) {\n            if (cycled)\n                return null;\n            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));\n            cycled = true;\n        }\n        else {\n            if (cycled && ranges.some(r => r.from == cursor.value.from))\n                continue;\n            if (fullWord) {\n                let word = state.wordAt(cursor.value.from);\n                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)\n                    continue;\n            }\n            return cursor.value;\n        }\n    }\n}\n/**\nSelect next occurrence of the current selection. Expand selection\nto the surrounding word when the selection is empty.\n*/\nconst selectNextOccurrence = ({ state, dispatch }) => {\n    let { ranges } = state.selection;\n    if (ranges.some(sel => sel.from === sel.to))\n        return selectWord({ state, dispatch });\n    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);\n    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))\n        return false;\n    let range = findNextOccurrence(state, searchedText);\n    if (!range)\n        return false;\n    dispatch(state.update({\n        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),\n        effects: EditorView.scrollIntoView(range.to)\n    }));\n    return true;\n};\n\nconst searchConfigFacet = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            top: false,\n            caseSensitive: false,\n            literal: false,\n            regexp: false,\n            wholeWord: false,\n            createPanel: view => new SearchPanel(view),\n            scrollToMatch: range => EditorView.scrollIntoView(range)\n        });\n    }\n});\n/**\nAdd search state to the editor configuration, and optionally\nconfigure the search extension.\n([`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) will automatically\nenable this if it isn't already on).\n*/\nfunction search(config) {\n    return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;\n}\n/**\nA search query. Part of the editor's search state.\n*/\nclass SearchQuery {\n    /**\n    Create a query object.\n    */\n    constructor(config) {\n        this.search = config.search;\n        this.caseSensitive = !!config.caseSensitive;\n        this.literal = !!config.literal;\n        this.regexp = !!config.regexp;\n        this.replace = config.replace || \"\";\n        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));\n        this.unquoted = this.unquote(this.search);\n        this.wholeWord = !!config.wholeWord;\n    }\n    /**\n    @internal\n    */\n    unquote(text) {\n        return this.literal ? text :\n            text.replace(/\\\\([nrt\\\\])/g, (_, ch) => ch == \"n\" ? \"\\n\" : ch == \"r\" ? \"\\r\" : ch == \"t\" ? \"\\t\" : \"\\\\\");\n    }\n    /**\n    Compare this query to another query.\n    */\n    eq(other) {\n        return this.search == other.search && this.replace == other.replace &&\n            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&\n            this.wholeWord == other.wholeWord;\n    }\n    /**\n    @internal\n    */\n    create() {\n        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);\n    }\n    /**\n    Get a search cursor for this query, searching through the given\n    range in the given state.\n    */\n    getCursor(state, from = 0, to) {\n        let st = state.doc ? state : EditorState.create({ doc: state });\n        if (to == null)\n            to = st.doc.length;\n        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);\n    }\n}\nclass QueryType {\n    constructor(spec) {\n        this.spec = spec;\n    }\n}\nfunction stringCursor(spec, state, from, to) {\n    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);\n}\nfunction stringWordTest(doc, categorizer) {\n    return (from, to, buf, bufPos) => {\n        if (bufPos > from || bufPos + buf.length < to) {\n            bufPos = Math.max(0, from - 2);\n            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));\n        }\n        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||\n            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&\n            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||\n                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);\n    };\n}\nclass StringQuery extends QueryType {\n    constructor(spec) {\n        super(spec);\n    }\n    nextMatch(state, curFrom, curTo) {\n        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();\n        if (cursor.done)\n            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();\n        return cursor.done ? null : cursor.value;\n    }\n    // Searching in reverse is, rather than implementing an inverted search\n    // cursor, done by scanning chunk after chunk forward.\n    prevMatchInRange(state, from, to) {\n        for (let pos = to;;) {\n            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);\n            let cursor = stringCursor(this.spec, state, start, pos), range = null;\n            while (!cursor.nextOverlapping().done)\n                range = cursor.value;\n            if (range)\n                return range;\n            if (start == from)\n                return null;\n            pos -= 10000 /* FindPrev.ChunkSize */;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }\n    matchAll(state, limit) {\n        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\nfunction regexpCursor(spec, state, from, to) {\n    return new RegExpCursor(state.doc, spec.search, {\n        ignoreCase: !spec.caseSensitive,\n        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined\n    }, from, to);\n}\nfunction charBefore(str, index) {\n    return str.slice(findClusterBreak(str, index, false), index);\n}\nfunction charAfter(str, index) {\n    return str.slice(index, findClusterBreak(str, index));\n}\nfunction regexpWordTest(categorizer) {\n    return (_from, _to, match) => !match[0].length ||\n        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||\n            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&\n            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||\n                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);\n}\nclass RegExpQuery extends QueryType {\n    nextMatch(state, curFrom, curTo) {\n        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();\n        if (cursor.done)\n            cursor = regexpCursor(this.spec, state, 0, curFrom).next();\n        return cursor.done ? null : cursor.value;\n    }\n    prevMatchInRange(state, from, to) {\n        for (let size = 1;; size++) {\n            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);\n            let cursor = regexpCursor(this.spec, state, start, to), range = null;\n            while (!cursor.next().done)\n                range = cursor.value;\n            if (range && (start == from || range.from > start + 10))\n                return range;\n            if (start == from)\n                return null;\n        }\n    }\n    prevMatch(state, curFrom, curTo) {\n        return this.prevMatchInRange(state, 0, curFrom) ||\n            this.prevMatchInRange(state, curTo, state.doc.length);\n    }\n    getReplacement(result) {\n        return this.spec.unquote(this.spec.replace).replace(/\\$([$&\\d+])/g, (m, i) => i == \"$\" ? \"$\"\n            : i == \"&\" ? result.match[0]\n                : i != \"0\" && +i < result.match.length ? result.match[i]\n                    : m);\n    }\n    matchAll(state, limit) {\n        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];\n        while (!cursor.next().done) {\n            if (ranges.length >= limit)\n                return null;\n            ranges.push(cursor.value);\n        }\n        return ranges;\n    }\n    highlight(state, from, to, add) {\n        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));\n        while (!cursor.next().done)\n            add(cursor.value.from, cursor.value.to);\n    }\n}\n/**\nA state effect that updates the current search query. Note that\nthis only has an effect if the search state has been initialized\n(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or\nby running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least\nonce).\n*/\nconst setSearchQuery = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst searchState = /*@__PURE__*/StateField.define({\n    create(state) {\n        return new SearchState(defaultQuery(state).create(), null);\n    },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setSearchQuery))\n                value = new SearchState(effect.value.create(), value.panel);\n            else if (effect.is(togglePanel))\n                value = new SearchState(value.query, effect.value ? createSearchPanel : null);\n        }\n        return value;\n    },\n    provide: f => showPanel.from(f, val => val.panel)\n});\n/**\nGet the current search query from an editor state.\n*/\nfunction getSearchQuery(state) {\n    let curState = state.field(searchState, false);\n    return curState ? curState.query.spec : defaultQuery(state);\n}\n/**\nQuery whether the search panel is open in the given editor state.\n*/\nfunction searchPanelOpen(state) {\n    var _a;\n    return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;\n}\nclass SearchState {\n    constructor(query, panel) {\n        this.query = query;\n        this.panel = panel;\n    }\n}\nconst matchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch\" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: \"cm-searchMatch cm-searchMatch-selected\" });\nconst searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.decorations = this.highlight(view.state.field(searchState));\n    }\n    update(update) {\n        let state = update.state.field(searchState);\n        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)\n            this.decorations = this.highlight(state);\n    }\n    highlight({ query, panel }) {\n        if (!panel || !query.spec.valid)\n            return Decoration.none;\n        let { view } = this;\n        let builder = new RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);\n                builder.add(from, to, selected ? selectedMatchMark : matchMark);\n            });\n        }\n        return builder.finish();\n    }\n}, {\n    decorations: v => v.decorations\n});\nfunction searchCommand(f) {\n    return view => {\n        let state = view.state.field(searchState, false);\n        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);\n    };\n}\n/**\nOpen the search panel if it isn't already open, and move the\nselection to the first match after the current main selection.\nWill wrap around to the start of the document when it reaches the\nend.\n*/\nconst findNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { to } = view.state.selection.main;\n    let next = query.nextMatch(view.state, to, to);\n    if (!next)\n        return false;\n    let selection = EditorSelection.single(next.from, next.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nMove the selection to the previous instance of the search query,\nbefore the current main selection. Will wrap past the start\nof the document to start searching at the end again.\n*/\nconst findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from } = state.selection.main;\n    let prev = query.prevMatch(state, from, from);\n    if (!prev)\n        return false;\n    let selection = EditorSelection.single(prev.from, prev.to);\n    let config = view.state.facet(searchConfigFacet);\n    view.dispatch({\n        selection,\n        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],\n        userEvent: \"select.search\"\n    });\n    selectSearchInput(view);\n    return true;\n});\n/**\nSelect all instances of the search query.\n*/\nconst selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {\n    let ranges = query.matchAll(view.state, 1000);\n    if (!ranges || !ranges.length)\n        return false;\n    view.dispatch({\n        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),\n        userEvent: \"select.search.matches\"\n    });\n    return true;\n});\n/**\nSelect all instances of the currently selected text.\n*/\nconst selectSelectionMatches = ({ state, dispatch }) => {\n    let sel = state.selection;\n    if (sel.ranges.length > 1 || sel.main.empty)\n        return false;\n    let { from, to } = sel.main;\n    let ranges = [], main = 0;\n    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {\n        if (ranges.length > 1000)\n            return false;\n        if (cur.value.from == from)\n            main = ranges.length;\n        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));\n    }\n    dispatch(state.update({\n        selection: EditorSelection.create(ranges, main),\n        userEvent: \"select.search.matches\"\n    }));\n    return true;\n};\n/**\nReplace the current match of the search query.\n*/\nconst replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {\n    let { state } = view, { from, to } = state.selection.main;\n    if (state.readOnly)\n        return false;\n    let next = query.nextMatch(state, from, from);\n    if (!next)\n        return false;\n    let changes = [], selection, replacement;\n    let effects = [];\n    if (next.from == from && next.to == to) {\n        replacement = state.toText(query.getReplacement(next));\n        changes.push({ from: next.from, to: next.to, insert: replacement });\n        next = query.nextMatch(state, next.from, next.to);\n        effects.push(EditorView.announce.of(state.phrase(\"replaced match on line $\", state.doc.lineAt(from).number) + \".\"));\n    }\n    if (next) {\n        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;\n        selection = EditorSelection.single(next.from - off, next.to - off);\n        effects.push(announceMatch(view, next));\n        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));\n    }\n    view.dispatch({\n        changes, selection, effects,\n        userEvent: \"input.replace\"\n    });\n    return true;\n});\n/**\nReplace all instances of the search query with the given\nreplacement.\n*/\nconst replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {\n    if (view.state.readOnly)\n        return false;\n    let changes = query.matchAll(view.state, 1e9).map(match => {\n        let { from, to } = match;\n        return { from, to, insert: query.getReplacement(match) };\n    });\n    if (!changes.length)\n        return false;\n    let announceText = view.state.phrase(\"replaced $ matches\", changes.length) + \".\";\n    view.dispatch({\n        changes,\n        effects: EditorView.announce.of(announceText),\n        userEvent: \"input.replace.all\"\n    });\n    return true;\n});\nfunction createSearchPanel(view) {\n    return view.state.facet(searchConfigFacet).createPanel(view);\n}\nfunction defaultQuery(state, fallback) {\n    var _a, _b, _c, _d, _e;\n    let sel = state.selection.main;\n    let selText = sel.empty || sel.to > sel.from + 100 ? \"\" : state.sliceDoc(sel.from, sel.to);\n    if (fallback && !selText)\n        return fallback;\n    let config = state.facet(searchConfigFacet);\n    return new SearchQuery({\n        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\\n/g, \"\\\\n\"),\n        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,\n        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,\n        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,\n        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord\n    });\n}\nfunction getSearchInput(view) {\n    let panel = getPanel(view, createSearchPanel);\n    return panel && panel.dom.querySelector(\"[main-field]\");\n}\nfunction selectSearchInput(view) {\n    let input = getSearchInput(view);\n    if (input && input == view.root.activeElement)\n        input.select();\n}\n/**\nMake sure the search panel is open and focused.\n*/\nconst openSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (state && state.panel) {\n        let searchInput = getSearchInput(view);\n        if (searchInput && searchInput != view.root.activeElement) {\n            let query = defaultQuery(view.state, state.query.spec);\n            if (query.valid)\n                view.dispatch({ effects: setSearchQuery.of(query) });\n            searchInput.focus();\n            searchInput.select();\n        }\n    }\n    else {\n        view.dispatch({ effects: [\n                togglePanel.of(true),\n                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)\n            ] });\n    }\n    return true;\n};\n/**\nClose the search panel.\n*/\nconst closeSearchPanel = view => {\n    let state = view.state.field(searchState, false);\n    if (!state || !state.panel)\n        return false;\n    let panel = getPanel(view, createSearchPanel);\n    if (panel && panel.dom.contains(view.root.activeElement))\n        view.focus();\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nDefault search-related key bindings.\n\n - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)\n - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)\n - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)\n - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)\n - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)\n*/\nconst searchKeymap = [\n    { key: \"Mod-f\", run: openSearchPanel, scope: \"editor search-panel\" },\n    { key: \"F3\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Mod-g\", run: findNext, shift: findPrevious, scope: \"editor search-panel\", preventDefault: true },\n    { key: \"Escape\", run: closeSearchPanel, scope: \"editor search-panel\" },\n    { key: \"Mod-Shift-l\", run: selectSelectionMatches },\n    { key: \"Mod-Alt-g\", run: gotoLine },\n    { key: \"Mod-d\", run: selectNextOccurrence, preventDefault: true },\n];\nclass SearchPanel {\n    constructor(view) {\n        this.view = view;\n        let query = this.query = view.state.field(searchState).query.spec;\n        this.commit = this.commit.bind(this);\n        this.searchField = elt(\"input\", {\n            value: query.search,\n            placeholder: phrase(view, \"Find\"),\n            \"aria-label\": phrase(view, \"Find\"),\n            class: \"cm-textfield\",\n            name: \"search\",\n            form: \"\",\n            \"main-field\": \"true\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.replaceField = elt(\"input\", {\n            value: query.replace,\n            placeholder: phrase(view, \"Replace\"),\n            \"aria-label\": phrase(view, \"Replace\"),\n            class: \"cm-textfield\",\n            name: \"replace\",\n            form: \"\",\n            onchange: this.commit,\n            onkeyup: this.commit\n        });\n        this.caseField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"case\",\n            form: \"\",\n            checked: query.caseSensitive,\n            onchange: this.commit\n        });\n        this.reField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"re\",\n            form: \"\",\n            checked: query.regexp,\n            onchange: this.commit\n        });\n        this.wordField = elt(\"input\", {\n            type: \"checkbox\",\n            name: \"word\",\n            form: \"\",\n            checked: query.wholeWord,\n            onchange: this.commit\n        });\n        function button(name, onclick, content) {\n            return elt(\"button\", { class: \"cm-button\", name, onclick, type: \"button\" }, content);\n        }\n        this.dom = elt(\"div\", { onkeydown: (e) => this.keydown(e), class: \"cm-search\" }, [\n            this.searchField,\n            button(\"next\", () => findNext(view), [phrase(view, \"next\")]),\n            button(\"prev\", () => findPrevious(view), [phrase(view, \"previous\")]),\n            button(\"select\", () => selectMatches(view), [phrase(view, \"all\")]),\n            elt(\"label\", null, [this.caseField, phrase(view, \"match case\")]),\n            elt(\"label\", null, [this.reField, phrase(view, \"regexp\")]),\n            elt(\"label\", null, [this.wordField, phrase(view, \"by word\")]),\n            ...view.state.readOnly ? [] : [\n                elt(\"br\"),\n                this.replaceField,\n                button(\"replace\", () => replaceNext(view), [phrase(view, \"replace\")]),\n                button(\"replaceAll\", () => replaceAll(view), [phrase(view, \"replace all\")])\n            ],\n            elt(\"button\", {\n                name: \"close\",\n                onclick: () => closeSearchPanel(view),\n                \"aria-label\": phrase(view, \"close\"),\n                type: \"button\"\n            }, [\"×\"])\n        ]);\n    }\n    commit() {\n        let query = new SearchQuery({\n            search: this.searchField.value,\n            caseSensitive: this.caseField.checked,\n            regexp: this.reField.checked,\n            wholeWord: this.wordField.checked,\n            replace: this.replaceField.value,\n        });\n        if (!query.eq(this.query)) {\n            this.query = query;\n            this.view.dispatch({ effects: setSearchQuery.of(query) });\n        }\n    }\n    keydown(e) {\n        if (runScopeHandlers(this.view, e, \"search-panel\")) {\n            e.preventDefault();\n        }\n        else if (e.keyCode == 13 && e.target == this.searchField) {\n            e.preventDefault();\n            (e.shiftKey ? findPrevious : findNext)(this.view);\n        }\n        else if (e.keyCode == 13 && e.target == this.replaceField) {\n            e.preventDefault();\n            replaceNext(this.view);\n        }\n    }\n    update(update) {\n        for (let tr of update.transactions)\n            for (let effect of tr.effects) {\n                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))\n                    this.setQuery(effect.value);\n            }\n    }\n    setQuery(query) {\n        this.query = query;\n        this.searchField.value = query.search;\n        this.replaceField.value = query.replace;\n        this.caseField.checked = query.caseSensitive;\n        this.reField.checked = query.regexp;\n        this.wordField.checked = query.wholeWord;\n    }\n    mount() {\n        this.searchField.select();\n    }\n    get pos() { return 80; }\n    get top() { return this.view.state.facet(searchConfigFacet).top; }\n}\nfunction phrase(view, phrase) { return view.state.phrase(phrase); }\nconst AnnounceMargin = 30;\nconst Break = /[\\s\\.,:;?!]/;\nfunction announceMatch(view, { from, to }) {\n    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;\n    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);\n    let text = view.state.sliceDoc(start, end);\n    if (start != line.from) {\n        for (let i = 0; i < AnnounceMargin; i++)\n            if (!Break.test(text[i + 1]) && Break.test(text[i])) {\n                text = text.slice(i);\n                break;\n            }\n    }\n    if (end != lineEnd) {\n        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)\n            if (!Break.test(text[i - 1]) && Break.test(text[i])) {\n                text = text.slice(0, i);\n                break;\n            }\n    }\n    return EditorView.announce.of(`${view.state.phrase(\"current match\")}. ${text} ${view.state.phrase(\"on line\")} ${line.number}.`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-panel.cm-search\": {\n        padding: \"2px 6px 4px\",\n        position: \"relative\",\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"4px\",\n            backgroundColor: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        },\n        \"& input, & button, & label\": {\n            margin: \".2em .6em .2em 0\"\n        },\n        \"& input[type=checkbox]\": {\n            marginRight: \".2em\"\n        },\n        \"& label\": {\n            fontSize: \"80%\",\n            whiteSpace: \"pre\"\n        }\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n    \"&light .cm-searchMatch-selected\": { backgroundColor: \"#ff6a0054\" },\n    \"&dark .cm-searchMatch-selected\": { backgroundColor: \"#ff00ff8a\" }\n});\nconst searchExtensions = [\n    searchState,\n    /*@__PURE__*/Prec.low(searchHighlighter),\n    baseTheme\n];\n\nexport { RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, search, searchKeymap, searchPanelOpen, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery };\n","import { Annotation, StateEffect, EditorSelection, codePointAt, codePointSize, fromCodePoint, Facet, combineConfig, StateField, Prec, Text, Transaction, MapMode, RangeValue, RangeSet, CharCategory } from '@codemirror/state';\nimport { Direction, logException, showTooltip, EditorView, ViewPlugin, getTooltip, Decoration, WidgetType, keymap } from '@codemirror/view';\nimport { syntaxTree, indentUnit } from '@codemirror/language';\n\n/**\nAn instance of this is passed to completion source functions.\n*/\nclass CompletionContext {\n    /**\n    Create a new completion context. (Mostly useful for testing\n    completion sources—in the editor, the extension will create\n    these for you.)\n    */\n    constructor(\n    /**\n    The editor state that the completion happens in.\n    */\n    state, \n    /**\n    The position at which the completion is happening.\n    */\n    pos, \n    /**\n    Indicates whether completion was activated explicitly, or\n    implicitly by typing. The usual way to respond to this is to\n    only return completions when either there is part of a\n    completable entity before the cursor, or `explicit` is true.\n    */\n    explicit) {\n        this.state = state;\n        this.pos = pos;\n        this.explicit = explicit;\n        /**\n        @internal\n        */\n        this.abortListeners = [];\n    }\n    /**\n    Get the extent, content, and (if there is a token) type of the\n    token before `this.pos`.\n    */\n    tokenBefore(types) {\n        let token = syntaxTree(this.state).resolveInner(this.pos, -1);\n        while (token && types.indexOf(token.name) < 0)\n            token = token.parent;\n        return token ? { from: token.from, to: this.pos,\n            text: this.state.sliceDoc(token.from, this.pos),\n            type: token.type } : null;\n    }\n    /**\n    Get the match of the given expression directly before the\n    cursor.\n    */\n    matchBefore(expr) {\n        let line = this.state.doc.lineAt(this.pos);\n        let start = Math.max(line.from, this.pos - 250);\n        let str = line.text.slice(start - line.from, this.pos - line.from);\n        let found = str.search(ensureAnchor(expr, false));\n        return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };\n    }\n    /**\n    Yields true when the query has been aborted. Can be useful in\n    asynchronous queries to avoid doing work that will be ignored.\n    */\n    get aborted() { return this.abortListeners == null; }\n    /**\n    Allows you to register abort handlers, which will be called when\n    the query is\n    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n    */\n    addEventListener(type, listener) {\n        if (type == \"abort\" && this.abortListeners)\n            this.abortListeners.push(listener);\n    }\n}\nfunction toSet(chars) {\n    let flat = Object.keys(chars).join(\"\");\n    let words = /\\w/.test(flat);\n    if (words)\n        flat = flat.replace(/\\w/g, \"\");\n    return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction prefixMatch(options) {\n    let first = Object.create(null), rest = Object.create(null);\n    for (let { label } of options) {\n        first[label[0]] = true;\n        for (let i = 1; i < label.length; i++)\n            rest[label[i]] = true;\n    }\n    let source = toSet(first) + toSet(rest) + \"*$\";\n    return [new RegExp(\"^\" + source), new RegExp(source)];\n}\n/**\nGiven a a fixed array of options, return an autocompleter that\ncompletes them.\n*/\nfunction completeFromList(list) {\n    let options = list.map(o => typeof o == \"string\" ? { label: o } : o);\n    let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\n    return (context) => {\n        let token = context.matchBefore(match);\n        return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;\n    };\n}\n/**\nWrap the given completion source so that it will only fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n            if (nodes.indexOf(pos.name) > -1)\n                return source(context);\n            if (pos.type.isTop)\n                break;\n        }\n        return null;\n    };\n}\n/**\nWrap the given completion source so that it will not fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifNotIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {\n            if (nodes.indexOf(pos.name) > -1)\n                return null;\n            if (pos.type.isTop)\n                break;\n        }\n        return source(context);\n    };\n}\nclass Option {\n    constructor(completion, source, match, score) {\n        this.completion = completion;\n        this.source = source;\n        this.match = match;\n        this.score = score;\n    }\n}\nfunction cur(state) { return state.selection.main.from; }\n// Make sure the given regexp has a $ at its end and, if `start` is\n// true, a ^ at its start.\nfunction ensureAnchor(expr, start) {\n    var _a;\n    let { source } = expr;\n    let addStart = start && source[0] != \"^\", addEnd = source[source.length - 1] != \"$\";\n    if (!addStart && !addEnd)\n        return expr;\n    return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? \"i\" : \"\"));\n}\n/**\nThis annotation is added to transactions that are produced by\npicking a completion.\n*/\nconst pickedCompletion = /*@__PURE__*/Annotation.define();\n/**\nHelper function that returns a transaction spec which inserts a\ncompletion's text in the main selection range, and any other\nselection range that has the same text in front of it.\n*/\nfunction insertCompletionText(state, text, from, to) {\n    let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;\n    return Object.assign(Object.assign({}, state.changeByRange(range => {\n        if (range != main && from != to &&\n            state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))\n            return { range };\n        return {\n            changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: text },\n            range: EditorSelection.cursor(range.from + fromOff + text.length)\n        };\n    })), { scrollIntoView: true, userEvent: \"input.complete\" });\n}\nconst SourceCache = /*@__PURE__*/new WeakMap();\nfunction asSource(source) {\n    if (!Array.isArray(source))\n        return source;\n    let known = SourceCache.get(source);\n    if (!known)\n        SourceCache.set(source, known = completeFromList(source));\n    return known;\n}\nconst startCompletionEffect = /*@__PURE__*/StateEffect.define();\nconst closeCompletionEffect = /*@__PURE__*/StateEffect.define();\n\n// A pattern matcher for fuzzy completion matching. Create an instance\n// once for a pattern, and then use that to match any number of\n// completions.\nclass FuzzyMatcher {\n    constructor(pattern) {\n        this.pattern = pattern;\n        this.chars = [];\n        this.folded = [];\n        // Buffers reused by calls to `match` to track matched character\n        // positions.\n        this.any = [];\n        this.precise = [];\n        this.byWord = [];\n        this.score = 0;\n        this.matched = [];\n        for (let p = 0; p < pattern.length;) {\n            let char = codePointAt(pattern, p), size = codePointSize(char);\n            this.chars.push(char);\n            let part = pattern.slice(p, p + size), upper = part.toUpperCase();\n            this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));\n            p += size;\n        }\n        this.astral = pattern.length != this.chars.length;\n    }\n    ret(score, matched) {\n        this.score = score;\n        this.matched = matched;\n        return this;\n    }\n    // Matches a given word (completion) against the pattern (input).\n    // Will return a boolean indicating whether there was a match and,\n    // on success, set `this.score` to the score, `this.matched` to an\n    // array of `from, to` pairs indicating the matched parts of `word`.\n    //\n    // The score is a number that is more negative the worse the match\n    // is. See `Penalty` above.\n    match(word) {\n        if (this.pattern.length == 0)\n            return this.ret(-100 /* Penalty.NotFull */, []);\n        if (word.length < this.pattern.length)\n            return null;\n        let { chars, folded, any, precise, byWord } = this;\n        // For single-character queries, only match when they occur right\n        // at the start\n        if (chars.length == 1) {\n            let first = codePointAt(word, 0), firstSize = codePointSize(first);\n            let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;\n            if (first == chars[0]) ;\n            else if (first == folded[0])\n                score += -200 /* Penalty.CaseFold */;\n            else\n                return null;\n            return this.ret(score, [0, firstSize]);\n        }\n        let direct = word.indexOf(this.pattern);\n        if (direct == 0)\n            return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);\n        let len = chars.length, anyTo = 0;\n        if (direct < 0) {\n            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\n                let next = codePointAt(word, i);\n                if (next == chars[anyTo] || next == folded[anyTo])\n                    any[anyTo++] = i;\n                i += codePointSize(next);\n            }\n            // No match, exit immediately\n            if (anyTo < len)\n                return null;\n        }\n        // This tracks the extent of the precise (non-folded, not\n        // necessarily adjacent) match\n        let preciseTo = 0;\n        // Tracks whether there is a match that hits only characters that\n        // appear to be starting words. `byWordFolded` is set to true when\n        // a case folded character is encountered in such a match\n        let byWordTo = 0, byWordFolded = false;\n        // If we've found a partial adjacent match, these track its state\n        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;\n        let hasLower = /[a-z]/.test(word), wordAdjacent = true;\n        // Go over the option's text, scanning for the various kinds of matches\n        for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {\n            let next = codePointAt(word, i);\n            if (direct < 0) {\n                if (preciseTo < len && next == chars[preciseTo])\n                    precise[preciseTo++] = i;\n                if (adjacentTo < len) {\n                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\n                        if (adjacentTo == 0)\n                            adjacentStart = i;\n                        adjacentEnd = i + 1;\n                        adjacentTo++;\n                    }\n                    else {\n                        adjacentTo = 0;\n                    }\n                }\n            }\n            let ch, type = next < 0xff\n                ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)\n                : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);\n            if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {\n                if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))\n                    byWord[byWordTo++] = i;\n                else if (byWord.length)\n                    wordAdjacent = false;\n            }\n            prevType = type;\n            i += codePointSize(next);\n        }\n        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)\n            return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);\n        if (adjacentTo == len && adjacentStart == 0)\n            return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);\n        if (direct > -1)\n            return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);\n        if (adjacentTo == len)\n            return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);\n        if (byWordTo == len)\n            return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +\n                (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);\n        return chars.length == 2 ? null\n            : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);\n    }\n    result(score, positions, word) {\n        let result = [], i = 0;\n        for (let pos of positions) {\n            let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);\n            if (i && result[i - 1] == pos)\n                result[i - 1] = to;\n            else {\n                result[i++] = pos;\n                result[i++] = to;\n            }\n        }\n        return this.ret(score - word.length, result);\n    }\n}\nclass StrictMatcher {\n    constructor(pattern) {\n        this.pattern = pattern;\n        this.matched = [];\n        this.score = 0;\n        this.folded = pattern.toLowerCase();\n    }\n    match(word) {\n        if (word.length < this.pattern.length)\n            return null;\n        let start = word.slice(0, this.pattern.length);\n        let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;\n        if (match == null)\n            return null;\n        this.matched = [0, start.length];\n        this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);\n        return this;\n    }\n}\n\nconst completionConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            activateOnTyping: true,\n            activateOnCompletion: () => false,\n            activateOnTypingDelay: 100,\n            selectOnOpen: true,\n            override: null,\n            closeOnBlur: true,\n            maxRenderedOptions: 100,\n            defaultKeymap: true,\n            tooltipClass: () => \"\",\n            optionClass: () => \"\",\n            aboveCursor: false,\n            icons: true,\n            addToOptions: [],\n            positionInfo: defaultPositionInfo,\n            filterStrict: false,\n            compareCompletions: (a, b) => a.label.localeCompare(b.label),\n            interactionDelay: 75,\n            updateSyncTime: 100\n        }, {\n            defaultKeymap: (a, b) => a && b,\n            closeOnBlur: (a, b) => a && b,\n            icons: (a, b) => a && b,\n            tooltipClass: (a, b) => c => joinClass(a(c), b(c)),\n            optionClass: (a, b) => c => joinClass(a(c), b(c)),\n            addToOptions: (a, b) => a.concat(b),\n            filterStrict: (a, b) => a || b,\n        });\n    }\n});\nfunction joinClass(a, b) {\n    return a ? b ? a + \" \" + b : a : b;\n}\nfunction defaultPositionInfo(view, list, option, info, space, tooltip) {\n    let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;\n    let side = \"top\", offset, maxWidth;\n    let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;\n    let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;\n    if (left && spaceLeft < Math.min(infoWidth, spaceRight))\n        left = false;\n    else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))\n        left = true;\n    if (infoWidth <= (left ? spaceLeft : spaceRight)) {\n        offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;\n        maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);\n    }\n    else {\n        narrow = true;\n        maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);\n        let spaceBelow = space.bottom - list.bottom;\n        if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion\n            offset = option.bottom - list.top;\n        }\n        else { // Above it\n            side = \"bottom\";\n            offset = list.bottom - option.top;\n        }\n    }\n    let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;\n    let scaleX = (list.right - list.left) / tooltip.offsetWidth;\n    return {\n        style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,\n        class: \"cm-completionInfo-\" + (narrow ? (rtl ? \"left-narrow\" : \"right-narrow\") : left ? \"left\" : \"right\")\n    };\n}\n\nfunction optionContent(config) {\n    let content = config.addToOptions.slice();\n    if (config.icons)\n        content.push({\n            render(completion) {\n                let icon = document.createElement(\"div\");\n                icon.classList.add(\"cm-completionIcon\");\n                if (completion.type)\n                    icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\n                icon.setAttribute(\"aria-hidden\", \"true\");\n                return icon;\n            },\n            position: 20\n        });\n    content.push({\n        render(completion, _s, _v, match) {\n            let labelElt = document.createElement(\"span\");\n            labelElt.className = \"cm-completionLabel\";\n            let label = completion.displayLabel || completion.label, off = 0;\n            for (let j = 0; j < match.length;) {\n                let from = match[j++], to = match[j++];\n                if (from > off)\n                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));\n                let span = labelElt.appendChild(document.createElement(\"span\"));\n                span.appendChild(document.createTextNode(label.slice(from, to)));\n                span.className = \"cm-completionMatchedText\";\n                off = to;\n            }\n            if (off < label.length)\n                labelElt.appendChild(document.createTextNode(label.slice(off)));\n            return labelElt;\n        },\n        position: 50\n    }, {\n        render(completion) {\n            if (!completion.detail)\n                return null;\n            let detailElt = document.createElement(\"span\");\n            detailElt.className = \"cm-completionDetail\";\n            detailElt.textContent = completion.detail;\n            return detailElt;\n        },\n        position: 80\n    });\n    return content.sort((a, b) => a.position - b.position).map(a => a.render);\n}\nfunction rangeAroundSelected(total, selected, max) {\n    if (total <= max)\n        return { from: 0, to: total };\n    if (selected < 0)\n        selected = 0;\n    if (selected <= (total >> 1)) {\n        let off = Math.floor(selected / max);\n        return { from: off * max, to: (off + 1) * max };\n    }\n    let off = Math.floor((total - selected) / max);\n    return { from: total - (off + 1) * max, to: total - off * max };\n}\nclass CompletionTooltip {\n    constructor(view, stateField, applyCompletion) {\n        this.view = view;\n        this.stateField = stateField;\n        this.applyCompletion = applyCompletion;\n        this.info = null;\n        this.infoDestroy = null;\n        this.placeInfoReq = {\n            read: () => this.measureInfo(),\n            write: (pos) => this.placeInfo(pos),\n            key: this\n        };\n        this.space = null;\n        this.currentClass = \"\";\n        let cState = view.state.field(stateField);\n        let { options, selected } = cState.open;\n        let config = view.state.facet(completionConfig);\n        this.optionContent = optionContent(config);\n        this.optionClass = config.optionClass;\n        this.tooltipClass = config.tooltipClass;\n        this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-tooltip-autocomplete\";\n        this.updateTooltipClass(view.state);\n        this.dom.addEventListener(\"mousedown\", (e) => {\n            let { options } = view.state.field(stateField).open;\n            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\n                if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\n                    this.applyCompletion(view, options[+match[1]]);\n                    e.preventDefault();\n                    return;\n                }\n            }\n        });\n        this.dom.addEventListener(\"focusout\", (e) => {\n            let state = view.state.field(this.stateField, false);\n            if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&\n                e.relatedTarget != view.contentDOM)\n                view.dispatch({ effects: closeCompletionEffect.of(null) });\n        });\n        this.showOptions(options, cState.id);\n    }\n    mount() { this.updateSel(); }\n    showOptions(options, id) {\n        if (this.list)\n            this.list.remove();\n        this.list = this.dom.appendChild(this.createListBox(options, id, this.range));\n        this.list.addEventListener(\"scroll\", () => {\n            if (this.info)\n                this.view.requestMeasure(this.placeInfoReq);\n        });\n    }\n    update(update) {\n        var _a;\n        let cState = update.state.field(this.stateField);\n        let prevState = update.startState.field(this.stateField);\n        this.updateTooltipClass(update.state);\n        if (cState != prevState) {\n            let { options, selected, disabled } = cState.open;\n            if (!prevState.open || prevState.open.options != options) {\n                this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);\n                this.showOptions(options, cState.id);\n            }\n            this.updateSel();\n            if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled))\n                this.dom.classList.toggle(\"cm-tooltip-autocomplete-disabled\", !!disabled);\n        }\n    }\n    updateTooltipClass(state) {\n        let cls = this.tooltipClass(state);\n        if (cls != this.currentClass) {\n            for (let c of this.currentClass.split(\" \"))\n                if (c)\n                    this.dom.classList.remove(c);\n            for (let c of cls.split(\" \"))\n                if (c)\n                    this.dom.classList.add(c);\n            this.currentClass = cls;\n        }\n    }\n    positioned(space) {\n        this.space = space;\n        if (this.info)\n            this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSel() {\n        let cState = this.view.state.field(this.stateField), open = cState.open;\n        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {\n            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);\n            this.showOptions(open.options, cState.id);\n        }\n        if (this.updateSelectedOption(open.selected)) {\n            this.destroyInfo();\n            let { completion } = open.options[open.selected];\n            let { info } = completion;\n            if (!info)\n                return;\n            let infoResult = typeof info === \"string\" ? document.createTextNode(info) : info(completion);\n            if (!infoResult)\n                return;\n            if (\"then\" in infoResult) {\n                infoResult.then(obj => {\n                    if (obj && this.view.state.field(this.stateField, false) == cState)\n                        this.addInfoPane(obj, completion);\n                }).catch(e => logException(this.view.state, e, \"completion info\"));\n            }\n            else {\n                this.addInfoPane(infoResult, completion);\n            }\n        }\n    }\n    addInfoPane(content, completion) {\n        this.destroyInfo();\n        let wrap = this.info = document.createElement(\"div\");\n        wrap.className = \"cm-tooltip cm-completionInfo\";\n        if (content.nodeType != null) {\n            wrap.appendChild(content);\n            this.infoDestroy = null;\n        }\n        else {\n            let { dom, destroy } = content;\n            wrap.appendChild(dom);\n            this.infoDestroy = destroy || null;\n        }\n        this.dom.appendChild(wrap);\n        this.view.requestMeasure(this.placeInfoReq);\n    }\n    updateSelectedOption(selected) {\n        let set = null;\n        for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\n            if (opt.nodeName != \"LI\" || !opt.id) {\n                i--; // A section header\n            }\n            else if (i == selected) {\n                if (!opt.hasAttribute(\"aria-selected\")) {\n                    opt.setAttribute(\"aria-selected\", \"true\");\n                    set = opt;\n                }\n            }\n            else {\n                if (opt.hasAttribute(\"aria-selected\"))\n                    opt.removeAttribute(\"aria-selected\");\n            }\n        }\n        if (set)\n            scrollIntoView(this.list, set);\n        return set;\n    }\n    measureInfo() {\n        let sel = this.dom.querySelector(\"[aria-selected]\");\n        if (!sel || !this.info)\n            return null;\n        let listRect = this.dom.getBoundingClientRect();\n        let infoRect = this.info.getBoundingClientRect();\n        let selRect = sel.getBoundingClientRect();\n        let space = this.space;\n        if (!space) {\n            let win = this.dom.ownerDocument.defaultView || window;\n            space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };\n        }\n        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||\n            selRect.bottom < Math.max(space.top, listRect.top) + 10)\n            return null;\n        return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);\n    }\n    placeInfo(pos) {\n        if (this.info) {\n            if (pos) {\n                if (pos.style)\n                    this.info.style.cssText = pos.style;\n                this.info.className = \"cm-tooltip cm-completionInfo \" + (pos.class || \"\");\n            }\n            else {\n                this.info.style.cssText = \"top: -1e6px\";\n            }\n        }\n    }\n    createListBox(options, id, range) {\n        const ul = document.createElement(\"ul\");\n        ul.id = id;\n        ul.setAttribute(\"role\", \"listbox\");\n        ul.setAttribute(\"aria-expanded\", \"true\");\n        ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n        let curSection = null;\n        for (let i = range.from; i < range.to; i++) {\n            let { completion, match } = options[i], { section } = completion;\n            if (section) {\n                let name = typeof section == \"string\" ? section : section.name;\n                if (name != curSection && (i > range.from || range.from == 0)) {\n                    curSection = name;\n                    if (typeof section != \"string\" && section.header) {\n                        ul.appendChild(section.header(section));\n                    }\n                    else {\n                        let header = ul.appendChild(document.createElement(\"completion-section\"));\n                        header.textContent = name;\n                    }\n                }\n            }\n            const li = ul.appendChild(document.createElement(\"li\"));\n            li.id = id + \"-\" + i;\n            li.setAttribute(\"role\", \"option\");\n            let cls = this.optionClass(completion);\n            if (cls)\n                li.className = cls;\n            for (let source of this.optionContent) {\n                let node = source(completion, this.view.state, this.view, match);\n                if (node)\n                    li.appendChild(node);\n            }\n        }\n        if (range.from)\n            ul.classList.add(\"cm-completionListIncompleteTop\");\n        if (range.to < options.length)\n            ul.classList.add(\"cm-completionListIncompleteBottom\");\n        return ul;\n    }\n    destroyInfo() {\n        if (this.info) {\n            if (this.infoDestroy)\n                this.infoDestroy();\n            this.info.remove();\n            this.info = null;\n        }\n    }\n    destroy() {\n        this.destroyInfo();\n    }\n}\nfunction completionTooltip(stateField, applyCompletion) {\n    return (view) => new CompletionTooltip(view, stateField, applyCompletion);\n}\nfunction scrollIntoView(container, element) {\n    let parent = container.getBoundingClientRect();\n    let self = element.getBoundingClientRect();\n    let scaleY = parent.height / container.offsetHeight;\n    if (self.top < parent.top)\n        container.scrollTop -= (parent.top - self.top) / scaleY;\n    else if (self.bottom > parent.bottom)\n        container.scrollTop += (self.bottom - parent.bottom) / scaleY;\n}\n\n// Used to pick a preferred option when two options with the same\n// label occur in the result.\nfunction score(option) {\n    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +\n        (option.type ? 1 : 0);\n}\nfunction sortOptions(active, state) {\n    let options = [];\n    let sections = null;\n    let addOption = (option) => {\n        options.push(option);\n        let { section } = option.completion;\n        if (section) {\n            if (!sections)\n                sections = [];\n            let name = typeof section == \"string\" ? section : section.name;\n            if (!sections.some(s => s.name == name))\n                sections.push(typeof section == \"string\" ? { name } : section);\n        }\n    };\n    let conf = state.facet(completionConfig);\n    for (let a of active)\n        if (a.hasResult()) {\n            let getMatch = a.result.getMatch;\n            if (a.result.filter === false) {\n                for (let option of a.result.options) {\n                    addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));\n                }\n            }\n            else {\n                let pattern = state.sliceDoc(a.from, a.to), match;\n                let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);\n                for (let option of a.result.options)\n                    if (match = matcher.match(option.label)) {\n                        let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];\n                        addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));\n                    }\n            }\n        }\n    if (sections) {\n        let sectionOrder = Object.create(null), pos = 0;\n        let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };\n        for (let s of sections.sort(cmp)) {\n            pos -= 1e5;\n            sectionOrder[s.name] = pos;\n        }\n        for (let option of options) {\n            let { section } = option.completion;\n            if (section)\n                option.score += sectionOrder[typeof section == \"string\" ? section : section.name];\n        }\n    }\n    let result = [], prev = null;\n    let compare = conf.compareCompletions;\n    for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {\n        let cur = opt.completion;\n        if (!prev || prev.label != cur.label || prev.detail != cur.detail ||\n            (prev.type != null && cur.type != null && prev.type != cur.type) ||\n            prev.apply != cur.apply || prev.boost != cur.boost)\n            result.push(opt);\n        else if (score(opt.completion) > score(prev))\n            result[result.length - 1] = opt;\n        prev = opt.completion;\n    }\n    return result;\n}\nclass CompletionDialog {\n    constructor(options, attrs, tooltip, timestamp, selected, disabled) {\n        this.options = options;\n        this.attrs = attrs;\n        this.tooltip = tooltip;\n        this.timestamp = timestamp;\n        this.selected = selected;\n        this.disabled = disabled;\n    }\n    setSelected(selected, id) {\n        return selected == this.selected || selected >= this.options.length ? this\n            : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);\n    }\n    static build(active, state, id, prev, conf) {\n        let options = sortOptions(active, state);\n        if (!options.length) {\n            return prev && active.some(a => a.state == 1 /* State.Pending */) ?\n                new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;\n        }\n        let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;\n        if (prev && prev.selected != selected && prev.selected != -1) {\n            let selectedValue = prev.options[prev.selected].completion;\n            for (let i = 0; i < options.length; i++)\n                if (options[i].completion == selectedValue) {\n                    selected = i;\n                    break;\n                }\n        }\n        return new CompletionDialog(options, makeAttrs(id, selected), {\n            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\n            create: createTooltip,\n            above: conf.aboveCursor,\n        }, prev ? prev.timestamp : Date.now(), selected, false);\n    }\n    map(changes) {\n        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);\n    }\n}\nclass CompletionState {\n    constructor(active, id, open) {\n        this.active = active;\n        this.id = id;\n        this.open = open;\n    }\n    static start() {\n        return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n    }\n    update(tr) {\n        let { state } = tr, conf = state.facet(completionConfig);\n        let sources = conf.override ||\n            state.languageDataAt(\"autocomplete\", cur(state)).map(asSource);\n        let active = sources.map(source => {\n            let value = this.active.find(s => s.source == source) ||\n                new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);\n            return value.update(tr, conf);\n        });\n        if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))\n            active = this.active;\n        let open = this.open;\n        if (open && tr.docChanged)\n            open = open.map(tr.changes);\n        if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||\n            !sameResults(active, this.active))\n            open = CompletionDialog.build(active, state, this.id, open, conf);\n        else if (open && open.disabled && !active.some(a => a.state == 1 /* State.Pending */))\n            open = null;\n        if (!open && active.every(a => a.state != 1 /* State.Pending */) && active.some(a => a.hasResult()))\n            active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);\n        for (let effect of tr.effects)\n            if (effect.is(setSelectedEffect))\n                open = open && open.setSelected(effect.value, this.id);\n        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\n    }\n    get tooltip() { return this.open ? this.open.tooltip : null; }\n    get attrs() { return this.open ? this.open.attrs : baseAttrs; }\n}\nfunction sameResults(a, b) {\n    if (a == b)\n        return true;\n    for (let iA = 0, iB = 0;;) {\n        while (iA < a.length && !a[iA].hasResult)\n            iA++;\n        while (iB < b.length && !b[iB].hasResult)\n            iB++;\n        let endA = iA == a.length, endB = iB == b.length;\n        if (endA || endB)\n            return endA == endB;\n        if (a[iA++].result != b[iB++].result)\n            return false;\n    }\n}\nconst baseAttrs = {\n    \"aria-autocomplete\": \"list\"\n};\nfunction makeAttrs(id, selected) {\n    let result = {\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-controls\": id\n    };\n    if (selected > -1)\n        result[\"aria-activedescendant\"] = id + \"-\" + selected;\n    return result;\n}\nconst none = [];\nfunction getUserEvent(tr, conf) {\n    if (tr.isUserEvent(\"input.complete\")) {\n        let completion = tr.annotation(pickedCompletion);\n        if (completion && conf.activateOnCompletion(completion))\n            return \"input\";\n    }\n    return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass ActiveSource {\n    constructor(source, state, explicitPos = -1) {\n        this.source = source;\n        this.state = state;\n        this.explicitPos = explicitPos;\n    }\n    hasResult() { return false; }\n    update(tr, conf) {\n        let event = getUserEvent(tr, conf), value = this;\n        if (event)\n            value = value.handleUserEvent(tr, event, conf);\n        else if (tr.docChanged)\n            value = value.handleChange(tr);\n        else if (tr.selection && value.state != 0 /* State.Inactive */)\n            value = new ActiveSource(value.source, 0 /* State.Inactive */);\n        for (let effect of tr.effects) {\n            if (effect.is(startCompletionEffect))\n                value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);\n            else if (effect.is(closeCompletionEffect))\n                value = new ActiveSource(value.source, 0 /* State.Inactive */);\n            else if (effect.is(setActiveEffect))\n                for (let active of effect.value)\n                    if (active.source == value.source)\n                        value = active;\n        }\n        return value;\n    }\n    handleUserEvent(tr, type, conf) {\n        return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);\n    }\n    map(changes) {\n        return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\n    }\n}\nclass ActiveResult extends ActiveSource {\n    constructor(source, explicitPos, result, from, to) {\n        super(source, 2 /* State.Result */, explicitPos);\n        this.result = result;\n        this.from = from;\n        this.to = to;\n    }\n    hasResult() { return true; }\n    handleUserEvent(tr, type, conf) {\n        var _a;\n        let result = this.result;\n        if (result.map && !tr.changes.empty)\n            result = result.map(result, tr.changes);\n        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);\n        let pos = cur(tr.state);\n        if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||\n            pos > to || !result ||\n            type == \"delete\" && cur(tr.startState) == this.from)\n            return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);\n        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);\n        if (checkValid(result.validFor, tr.state, from, to))\n            return new ActiveResult(this.source, explicitPos, result, from, to);\n        if (result.update &&\n            (result = result.update(result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))\n            return new ActiveResult(this.source, explicitPos, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));\n        return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);\n    }\n    map(mapping) {\n        if (mapping.empty)\n            return this;\n        let result = this.result.map ? this.result.map(this.result, mapping) : this.result;\n        if (!result)\n            return new ActiveSource(this.source, 0 /* State.Inactive */);\n        return new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\n    }\n}\nfunction checkValid(validFor, state, from, to) {\n    if (!validFor)\n        return false;\n    let text = state.sliceDoc(from, to);\n    return typeof validFor == \"function\" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);\n}\nconst setActiveEffect = /*@__PURE__*/StateEffect.define({\n    map(sources, mapping) { return sources.map(s => s.map(mapping)); }\n});\nconst setSelectedEffect = /*@__PURE__*/StateEffect.define();\nconst completionState = /*@__PURE__*/StateField.define({\n    create() { return CompletionState.start(); },\n    update(value, tr) { return value.update(tr); },\n    provide: f => [\n        showTooltip.from(f, val => val.tooltip),\n        EditorView.contentAttributes.from(f, state => state.attrs)\n    ]\n});\nfunction applyCompletion(view, option) {\n    const apply = option.completion.apply || option.completion.label;\n    let result = view.state.field(completionState).active.find(a => a.source == option.source);\n    if (!(result instanceof ActiveResult))\n        return false;\n    if (typeof apply == \"string\")\n        view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));\n    else\n        apply(view, option.completion, result.from, result.to);\n    return true;\n}\nconst createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);\n\n/**\nReturns a command that moves the completion selection forward or\nbackward by the given amount.\n*/\nfunction moveCompletionSelection(forward, by = \"option\") {\n    return (view) => {\n        let cState = view.state.field(completionState, false);\n        if (!cState || !cState.open || cState.open.disabled ||\n            Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\n            return false;\n        let step = 1, tooltip;\n        if (by == \"page\" && (tooltip = getTooltip(view, cState.open.tooltip)))\n            step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /\n                tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\n        let { length } = cState.open.options;\n        let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;\n        if (selected < 0)\n            selected = by == \"page\" ? 0 : length - 1;\n        else if (selected >= length)\n            selected = by == \"page\" ? length - 1 : 0;\n        view.dispatch({ effects: setSelectedEffect.of(selected) });\n        return true;\n    };\n}\n/**\nAccept the current completion.\n*/\nconst acceptCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||\n        Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)\n        return false;\n    return applyCompletion(view, cState.open.options[cState.open.selected]);\n};\n/**\nExplicitly start autocompletion.\n*/\nconst startCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState)\n        return false;\n    view.dispatch({ effects: startCompletionEffect.of(true) });\n    return true;\n};\n/**\nClose the currently active completion.\n*/\nconst closeCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))\n        return false;\n    view.dispatch({ effects: closeCompletionEffect.of(null) });\n    return true;\n};\nclass RunningQuery {\n    constructor(active, context) {\n        this.active = active;\n        this.context = context;\n        this.time = Date.now();\n        this.updates = [];\n        // Note that 'undefined' means 'not done yet', whereas 'null' means\n        // 'query returned null'.\n        this.done = undefined;\n    }\n}\nconst MaxUpdateCount = 50, MinAbortTime = 1000;\nconst completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.debounceUpdate = -1;\n        this.running = [];\n        this.debounceAccept = -1;\n        this.pendingStart = false;\n        this.composing = 0 /* CompositionState.None */;\n        for (let active of view.state.field(completionState).active)\n            if (active.state == 1 /* State.Pending */)\n                this.startQuery(active);\n    }\n    update(update) {\n        let cState = update.state.field(completionState);\n        let conf = update.state.facet(completionConfig);\n        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)\n            return;\n        let doesReset = update.transactions.some(tr => {\n            return (tr.selection || tr.docChanged) && !getUserEvent(tr, conf);\n        });\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (doesReset ||\n                query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\n                for (let handler of query.context.abortListeners) {\n                    try {\n                        handler();\n                    }\n                    catch (e) {\n                        logException(this.view.state, e);\n                    }\n                }\n                query.context.abortListeners = null;\n                this.running.splice(i--, 1);\n            }\n            else {\n                query.updates.push(...update.transactions);\n            }\n        }\n        if (this.debounceUpdate > -1)\n            clearTimeout(this.debounceUpdate);\n        if (update.transactions.some(tr => tr.effects.some(e => e.is(startCompletionEffect))))\n            this.pendingStart = true;\n        let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;\n        this.debounceUpdate = cState.active.some(a => a.state == 1 /* State.Pending */ && !this.running.some(q => q.active.source == a.source))\n            ? setTimeout(() => this.startUpdate(), delay) : -1;\n        if (this.composing != 0 /* CompositionState.None */)\n            for (let tr of update.transactions) {\n                if (getUserEvent(tr, conf) == \"input\")\n                    this.composing = 2 /* CompositionState.Changed */;\n                else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)\n                    this.composing = 3 /* CompositionState.ChangedAndMoved */;\n            }\n    }\n    startUpdate() {\n        this.debounceUpdate = -1;\n        this.pendingStart = false;\n        let { state } = this.view, cState = state.field(completionState);\n        for (let active of cState.active) {\n            if (active.state == 1 /* State.Pending */ && !this.running.some(r => r.active.source == active.source))\n                this.startQuery(active);\n        }\n    }\n    startQuery(active) {\n        let { state } = this.view, pos = cur(state);\n        let context = new CompletionContext(state, pos, active.explicitPos == pos);\n        let pending = new RunningQuery(active, context);\n        this.running.push(pending);\n        Promise.resolve(active.source(context)).then(result => {\n            if (!pending.context.aborted) {\n                pending.done = result || null;\n                this.scheduleAccept();\n            }\n        }, err => {\n            this.view.dispatch({ effects: closeCompletionEffect.of(null) });\n            logException(this.view.state, err);\n        });\n    }\n    scheduleAccept() {\n        if (this.running.every(q => q.done !== undefined))\n            this.accept();\n        else if (this.debounceAccept < 0)\n            this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);\n    }\n    // For each finished query in this.running, try to create a result\n    // or, if appropriate, restart the query.\n    accept() {\n        var _a;\n        if (this.debounceAccept > -1)\n            clearTimeout(this.debounceAccept);\n        this.debounceAccept = -1;\n        let updated = [];\n        let conf = this.view.state.facet(completionConfig);\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (query.done === undefined)\n                continue;\n            this.running.splice(i--, 1);\n            if (query.done) {\n                let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));\n                // Replay the transactions that happened since the start of\n                // the request and see if that preserves the result\n                for (let tr of query.updates)\n                    active = active.update(tr, conf);\n                if (active.hasResult()) {\n                    updated.push(active);\n                    continue;\n                }\n            }\n            let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);\n            if (current && current.state == 1 /* State.Pending */) {\n                if (query.done == null) {\n                    // Explicitly failed. Should clear the pending status if it\n                    // hasn't been re-set in the meantime.\n                    let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);\n                    for (let tr of query.updates)\n                        active = active.update(tr, conf);\n                    if (active.state != 1 /* State.Pending */)\n                        updated.push(active);\n                }\n                else {\n                    // Cleared by subsequent transactions. Restart.\n                    this.startQuery(current);\n                }\n            }\n        }\n        if (updated.length)\n            this.view.dispatch({ effects: setActiveEffect.of(updated) });\n    }\n}, {\n    eventHandlers: {\n        blur(event) {\n            let state = this.view.state.field(completionState, false);\n            if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {\n                let dialog = state.open && getTooltip(this.view, state.open.tooltip);\n                if (!dialog || !dialog.dom.contains(event.relatedTarget))\n                    setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);\n            }\n        },\n        compositionstart() {\n            this.composing = 1 /* CompositionState.Started */;\n        },\n        compositionend() {\n            if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {\n                // Safari fires compositionend events synchronously, possibly\n                // from inside an update, so dispatch asynchronously to avoid reentrancy\n                setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);\n            }\n            this.composing = 0 /* CompositionState.None */;\n        }\n    }\n});\nconst windows = typeof navigator == \"object\" && /*@__PURE__*//Win/.test(navigator.platform);\nconst commitCharacters = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.domEventHandlers({\n    keydown(event, view) {\n        let field = view.state.field(completionState, false);\n        if (!field || !field.open || field.open.disabled || field.open.selected < 0 ||\n            event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)\n            return false;\n        let option = field.open.options[field.open.selected];\n        let result = field.active.find(a => a.source == option.source);\n        let commitChars = option.completion.commitCharacters || result.result.commitCharacters;\n        if (commitChars && commitChars.indexOf(event.key) > -1)\n            applyCompletion(view, option);\n        return false;\n    }\n}));\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-tooltip.cm-tooltip-autocomplete\": {\n        \"& > ul\": {\n            fontFamily: \"monospace\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden auto\",\n            maxWidth_fallback: \"700px\",\n            maxWidth: \"min(700px, 95vw)\",\n            minWidth: \"250px\",\n            maxHeight: \"10em\",\n            height: \"100%\",\n            listStyle: \"none\",\n            margin: 0,\n            padding: 0,\n            \"& > li, & > completion-section\": {\n                padding: \"1px 3px\",\n                lineHeight: 1.2\n            },\n            \"& > li\": {\n                overflowX: \"hidden\",\n                textOverflow: \"ellipsis\",\n                cursor: \"pointer\"\n            },\n            \"& > completion-section\": {\n                display: \"list-item\",\n                borderBottom: \"1px solid silver\",\n                paddingLeft: \"0.5em\",\n                opacity: 0.7\n            }\n        }\n    },\n    \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#17c\",\n        color: \"white\",\n    },\n    \"&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#777\",\n    },\n    \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#347\",\n        color: \"white\",\n    },\n    \"&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]\": {\n        background: \"#444\",\n    },\n    \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n        content: '\"···\"',\n        opacity: 0.5,\n        display: \"block\",\n        textAlign: \"center\"\n    },\n    \".cm-tooltip.cm-completionInfo\": {\n        position: \"absolute\",\n        padding: \"3px 9px\",\n        width: \"max-content\",\n        maxWidth: `${400 /* Info.Width */}px`,\n        boxSizing: \"border-box\"\n    },\n    \".cm-completionInfo.cm-completionInfo-left\": { right: \"100%\" },\n    \".cm-completionInfo.cm-completionInfo-right\": { left: \"100%\" },\n    \".cm-completionInfo.cm-completionInfo-left-narrow\": { right: `${30 /* Info.Margin */}px` },\n    \".cm-completionInfo.cm-completionInfo-right-narrow\": { left: `${30 /* Info.Margin */}px` },\n    \"&light .cm-snippetField\": { backgroundColor: \"#00000022\" },\n    \"&dark .cm-snippetField\": { backgroundColor: \"#ffffff22\" },\n    \".cm-snippetFieldPosition\": {\n        verticalAlign: \"text-top\",\n        width: 0,\n        height: \"1.15em\",\n        display: \"inline-block\",\n        margin: \"0 -0.7px -.7em\",\n        borderLeft: \"1.4px dotted #888\"\n    },\n    \".cm-completionMatchedText\": {\n        textDecoration: \"underline\"\n    },\n    \".cm-completionDetail\": {\n        marginLeft: \"0.5em\",\n        fontStyle: \"italic\"\n    },\n    \".cm-completionIcon\": {\n        fontSize: \"90%\",\n        width: \".8em\",\n        display: \"inline-block\",\n        textAlign: \"center\",\n        paddingRight: \".6em\",\n        opacity: \"0.6\",\n        boxSizing: \"content-box\"\n    },\n    \".cm-completionIcon-function, .cm-completionIcon-method\": {\n        \"&:after\": { content: \"'ƒ'\" }\n    },\n    \".cm-completionIcon-class\": {\n        \"&:after\": { content: \"'○'\" }\n    },\n    \".cm-completionIcon-interface\": {\n        \"&:after\": { content: \"'◌'\" }\n    },\n    \".cm-completionIcon-variable\": {\n        \"&:after\": { content: \"'𝑥'\" }\n    },\n    \".cm-completionIcon-constant\": {\n        \"&:after\": { content: \"'𝐶'\" }\n    },\n    \".cm-completionIcon-type\": {\n        \"&:after\": { content: \"'𝑡'\" }\n    },\n    \".cm-completionIcon-enum\": {\n        \"&:after\": { content: \"'∪'\" }\n    },\n    \".cm-completionIcon-property\": {\n        \"&:after\": { content: \"'□'\" }\n    },\n    \".cm-completionIcon-keyword\": {\n        \"&:after\": { content: \"'🔑\\uFE0E'\" } // Disable emoji rendering\n    },\n    \".cm-completionIcon-namespace\": {\n        \"&:after\": { content: \"'▢'\" }\n    },\n    \".cm-completionIcon-text\": {\n        \"&:after\": { content: \"'abc'\", fontSize: \"50%\", verticalAlign: \"middle\" }\n    }\n});\n\nclass FieldPos {\n    constructor(field, line, from, to) {\n        this.field = field;\n        this.line = line;\n        this.from = from;\n        this.to = to;\n    }\n}\nclass FieldRange {\n    constructor(field, from, to) {\n        this.field = field;\n        this.from = from;\n        this.to = to;\n    }\n    map(changes) {\n        let from = changes.mapPos(this.from, -1, MapMode.TrackDel);\n        let to = changes.mapPos(this.to, 1, MapMode.TrackDel);\n        return from == null || to == null ? null : new FieldRange(this.field, from, to);\n    }\n}\nclass Snippet {\n    constructor(lines, fieldPositions) {\n        this.lines = lines;\n        this.fieldPositions = fieldPositions;\n    }\n    instantiate(state, pos) {\n        let text = [], lineStart = [pos];\n        let lineObj = state.doc.lineAt(pos), baseIndent = /^\\s*/.exec(lineObj.text)[0];\n        for (let line of this.lines) {\n            if (text.length) {\n                let indent = baseIndent, tabs = /^\\t*/.exec(line)[0].length;\n                for (let i = 0; i < tabs; i++)\n                    indent += state.facet(indentUnit);\n                lineStart.push(pos + indent.length - tabs);\n                line = indent + line.slice(tabs);\n            }\n            text.push(line);\n            pos += line.length + 1;\n        }\n        let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\n        return { text, ranges };\n    }\n    static parse(template) {\n        let fields = [];\n        let lines = [], positions = [], m;\n        for (let line of template.split(/\\r\\n?|\\n/)) {\n            while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)) {\n                let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || \"\", found = -1;\n                for (let i = 0; i < fields.length; i++) {\n                    if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)\n                        found = i;\n                }\n                if (found < 0) {\n                    let i = 0;\n                    while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))\n                        i++;\n                    fields.splice(i, 0, { seq, name });\n                    found = i;\n                    for (let pos of positions)\n                        if (pos.field >= found)\n                            pos.field++;\n                }\n                positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\n                line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\n            }\n            for (let esc; esc = /\\\\([{}])/.exec(line);) {\n                line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);\n                for (let pos of positions)\n                    if (pos.line == lines.length && pos.from > esc.index) {\n                        pos.from--;\n                        pos.to--;\n                    }\n            }\n            lines.push(line);\n        }\n        return new Snippet(lines, positions);\n    }\n}\nlet fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM() {\n            let span = document.createElement(\"span\");\n            span.className = \"cm-snippetFieldPosition\";\n            return span;\n        }\n        ignoreEvent() { return false; }\n    } });\nlet fieldRange = /*@__PURE__*/Decoration.mark({ class: \"cm-snippetField\" });\nclass ActiveSnippet {\n    constructor(ranges, active) {\n        this.ranges = ranges;\n        this.active = active;\n        this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\n    }\n    map(changes) {\n        let ranges = [];\n        for (let r of this.ranges) {\n            let mapped = r.map(changes);\n            if (!mapped)\n                return null;\n            ranges.push(mapped);\n        }\n        return new ActiveSnippet(ranges, this.active);\n    }\n    selectionInsideField(sel) {\n        return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\n    }\n}\nconst setActive = /*@__PURE__*/StateEffect.define({\n    map(value, changes) { return value && value.map(changes); }\n});\nconst moveToField = /*@__PURE__*/StateEffect.define();\nconst snippetState = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setActive))\n                return effect.value;\n            if (effect.is(moveToField) && value)\n                return new ActiveSnippet(value.ranges, effect.value);\n        }\n        if (value && tr.docChanged)\n            value = value.map(tr.changes);\n        if (value && tr.selection && !value.selectionInsideField(tr.selection))\n            value = null;\n        return value;\n    },\n    provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)\n});\nfunction fieldSelection(ranges, field) {\n    return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));\n}\n/**\nConvert a snippet template to a function that can\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\nusing syntax like this:\n\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\n\nEach `${}` placeholder (you may also use `#{}`) indicates a field\nthat the user can fill in. Its name, if any, will be the default\ncontent for the field.\n\nWhen the snippet is activated by calling the returned function,\nthe code is inserted at the given position. Newlines in the\ntemplate are indented by the indentation of the start line, plus\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\nthe newline.\n\nOn activation, (all instances of) the first field are selected.\nThe user can move between fields with Tab and Shift-Tab as long as\nthe fields are active. Moving to the last field or moving the\ncursor out of the current field deactivates the fields.\n\nThe order of fields defaults to textual order, but you can add\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\na custom order.\n\nTo include a literal `{` or `}` in your template, put a backslash\nin front of it. This will be removed and the brace will not be\ninterpreted as indicating a placeholder.\n*/\nfunction snippet(template) {\n    let snippet = Snippet.parse(template);\n    return (editor, completion, from, to) => {\n        let { text, ranges } = snippet.instantiate(editor.state, from);\n        let spec = {\n            changes: { from, to, insert: Text.of(text) },\n            scrollIntoView: true,\n            annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of(\"input.complete\")] : undefined\n        };\n        if (ranges.length)\n            spec.selection = fieldSelection(ranges, 0);\n        if (ranges.some(r => r.field > 0)) {\n            let active = new ActiveSnippet(ranges, 0);\n            let effects = spec.effects = [setActive.of(active)];\n            if (editor.state.field(snippetState, false) === undefined)\n                effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));\n        }\n        editor.dispatch(editor.state.update(spec));\n    };\n}\nfunction moveField(dir) {\n    return ({ state, dispatch }) => {\n        let active = state.field(snippetState, false);\n        if (!active || dir < 0 && active.active == 0)\n            return false;\n        let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\n        dispatch(state.update({\n            selection: fieldSelection(active.ranges, next),\n            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),\n            scrollIntoView: true\n        }));\n        return true;\n    };\n}\n/**\nA command that clears the active snippet, if any.\n*/\nconst clearSnippet = ({ state, dispatch }) => {\n    let active = state.field(snippetState, false);\n    if (!active)\n        return false;\n    dispatch(state.update({ effects: setActive.of(null) }));\n    return true;\n};\n/**\nMove to the next snippet field, if available.\n*/\nconst nextSnippetField = /*@__PURE__*/moveField(1);\n/**\nMove to the previous snippet field, if available.\n*/\nconst prevSnippetField = /*@__PURE__*/moveField(-1);\n/**\nCheck if there is an active snippet with a next field for\n`nextSnippetField` to move to.\n*/\nfunction hasNextSnippetField(state) {\n    let active = state.field(snippetState, false);\n    return !!(active && active.ranges.some(r => r.field == active.active + 1));\n}\n/**\nReturns true if there is an active snippet and a previous field\nfor `prevSnippetField` to move to.\n*/\nfunction hasPrevSnippetField(state) {\n    let active = state.field(snippetState, false);\n    return !!(active && active.active > 0);\n}\nconst defaultSnippetKeymap = [\n    { key: \"Tab\", run: nextSnippetField, shift: prevSnippetField },\n    { key: \"Escape\", run: clearSnippet }\n];\n/**\nA facet that can be used to configure the key bindings used by\nsnippets. The default binds Tab to\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\n*/\nconst snippetKeymap = /*@__PURE__*/Facet.define({\n    combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }\n});\nconst addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\n/**\nCreate a completion from a snippet. Returns an object with the\nproperties from `completion`, plus an `apply` function that\napplies the snippet.\n*/\nfunction snippetCompletion(template, completion) {\n    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });\n}\nconst snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({\n    mousedown(event, view) {\n        let active = view.state.field(snippetState, false), pos;\n        if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)\n            return false;\n        let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\n        if (!match || match.field == active.active)\n            return false;\n        view.dispatch({\n            selection: fieldSelection(active.ranges, match.field),\n            effects: setActive.of(active.ranges.some(r => r.field > match.field)\n                ? new ActiveSnippet(active.ranges, match.field) : null),\n            scrollIntoView: true\n        });\n        return true;\n    }\n});\n\nfunction wordRE(wordChars) {\n    let escaped = wordChars.replace(/[\\]\\-\\\\]/g, \"\\\\$&\");\n    try {\n        return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\n    }\n    catch (_a) {\n        return new RegExp(`[\\w${escaped}]`, \"g\");\n    }\n}\nfunction mapRE(re, f) {\n    return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\n}\nconst wordCaches = /*@__PURE__*/Object.create(null);\nfunction wordCache(wordChars) {\n    return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap);\n}\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\n    for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\n        let { value } = lines, m;\n        wordRE.lastIndex = 0;\n        while (m = wordRE.exec(value)) {\n            if (!seen[m[0]] && pos + m.index != ignoreAt) {\n                result.push({ type: \"text\", label: m[0] });\n                seen[m[0]] = true;\n                if (result.length >= 2000 /* C.MaxList */)\n                    return;\n            }\n        }\n        pos += value.length + 1;\n    }\n}\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\n    let big = doc.length >= 1000 /* C.MinCacheLen */;\n    let cached = big && cache.get(doc);\n    if (cached)\n        return cached;\n    let result = [], seen = Object.create(null);\n    if (doc.children) {\n        let pos = 0;\n        for (let ch of doc.children) {\n            if (ch.length >= 1000 /* C.MinCacheLen */) {\n                for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\n                    if (!seen[c.label]) {\n                        seen[c.label] = true;\n                        result.push(c);\n                    }\n                }\n            }\n            else {\n                storeWords(ch, wordRE, result, seen, ignoreAt - pos);\n            }\n            pos += ch.length + 1;\n        }\n    }\n    else {\n        storeWords(doc, wordRE, result, seen, ignoreAt);\n    }\n    if (big && result.length < 2000 /* C.MaxList */)\n        cache.set(doc, result);\n    return result;\n}\n/**\nA completion source that will scan the document for words (using a\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\nreturn those as completions.\n*/\nconst completeAnyWord = context => {\n    let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\n    let re = wordRE(wordChars);\n    let token = context.matchBefore(mapRE(re, s => s + \"$\"));\n    if (!token && !context.explicit)\n        return null;\n    let from = token ? token.from : context.pos;\n    let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* C.Range */, from);\n    return { from, options, validFor: mapRE(re, s => \"^\" + s) };\n};\n\nconst defaults = {\n    brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n    before: \")]}:;>\",\n    stringPrefixes: []\n};\nconst closeBracketEffect = /*@__PURE__*/StateEffect.define({\n    map(value, mapping) {\n        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);\n        return mapped == null ? undefined : mapped;\n    }\n});\nconst closedBracket = /*@__PURE__*/new class extends RangeValue {\n};\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/StateField.define({\n    create() { return RangeSet.empty; },\n    update(value, tr) {\n        value = value.map(tr.changes);\n        if (tr.selection) {\n            let line = tr.state.doc.lineAt(tr.selection.main.head);\n            value = value.update({ filter: from => from >= line.from && from <= line.to });\n        }\n        for (let effect of tr.effects)\n            if (effect.is(closeBracketEffect))\n                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });\n        return value;\n    }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\nfunction closeBrackets() {\n    return [inputHandler, bracketState];\n}\nconst definedClosing = \"()[]{}<>\";\nfunction closing(ch) {\n    for (let i = 0; i < definedClosing.length; i += 2)\n        if (definedClosing.charCodeAt(i) == ch)\n            return definedClosing.charAt(i + 1);\n    return fromCodePoint(ch < 128 ? ch : ch + 1);\n}\nfunction config(state, pos) {\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\nconst inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)\n        return false;\n    let sel = view.state.selection.main;\n    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||\n        from != sel.from || to != sel.to)\n        return false;\n    let tr = insertBracket(view.state, insert);\n    if (!tr)\n        return false;\n    view.dispatch(tr);\n    return true;\n});\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\nconst deleteBracketPair = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty) {\n            let before = prevChar(state.doc, range.head);\n            for (let token of tokens) {\n                if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))\n                    return { changes: { from: range.head - token.length, to: range.head + token.length },\n                        range: EditorSelection.cursor(range.head - token.length) };\n            }\n        }\n        return { range: dont = range };\n    });\n    if (!dont)\n        dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete.backward\" }));\n    return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\n*/\nconst closeBracketsKeymap = [\n    { key: \"Backspace\", run: deleteBracketPair }\n];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert brackets—the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\ntake care of running this for user input.)\n*/\nfunction insertBracket(state, bracket) {\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    for (let tok of tokens) {\n        let closed = closing(codePointAt(tok, 0));\n        if (bracket == tok)\n            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)\n                : handleOpen(state, tok, closed, conf.before || defaults.before);\n        if (bracket == closed && closedBracketAt(state, state.selection.main.from))\n            return handleClose(state, tok, closed);\n    }\n    return null;\n}\nfunction closedBracketAt(state, pos) {\n    let found = false;\n    state.field(bracketState).between(0, state.doc.length, from => {\n        if (from == pos)\n            found = true;\n    });\n    return found;\n}\nfunction nextChar(doc, pos) {\n    let next = doc.sliceString(pos, pos + 2);\n    return next.slice(0, codePointSize(codePointAt(next, 0)));\n}\nfunction prevChar(doc, pos) {\n    let prev = doc.sliceString(pos - 2, pos);\n    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction handleOpen(state, open, close, closeBefore) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],\n                effects: closeBracketEffect.of(range.to + open.length),\n                range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };\n        let next = nextChar(state.doc, range.head);\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1)\n            return { changes: { insert: open + close, from: range.head },\n                effects: closeBracketEffect.of(range.head + open.length),\n                range: EditorSelection.cursor(range.head + open.length) };\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction handleClose(state, _open, close) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty && nextChar(state.doc, range.head) == close)\n            return { changes: { from: range.head, to: range.head + close.length, insert: close },\n                range: EditorSelection.cursor(range.head + close.length) };\n        return dont = { range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction handleSame(state, token, allowTriple, config) {\n    let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],\n                effects: closeBracketEffect.of(range.to + token.length),\n                range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };\n        let pos = range.head, next = nextChar(state.doc, pos), start;\n        if (next == token) {\n            if (nodeStart(state, pos)) {\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n            }\n            else if (closedBracketAt(state, pos)) {\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n                let content = isTriple ? token + token + token : token;\n                return { changes: { from: pos, to: pos + content.length, insert: content },\n                    range: EditorSelection.cursor(pos + content.length) };\n            }\n        }\n        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&\n            (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&\n            nodeStart(state, start)) {\n            return { changes: { insert: token + token + token + token, from: pos },\n                effects: closeBracketEffect.of(pos + token.length),\n                range: EditorSelection.cursor(pos + token.length) };\n        }\n        else if (state.charCategorizer(pos)(next) != CharCategory.Word) {\n            if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n        }\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction nodeStart(state, pos) {\n    let tree = syntaxTree(state).resolveInner(pos + 1);\n    return tree.parent && tree.from == pos;\n}\nfunction probablyInString(state, pos, quoteToken, prefixes) {\n    let node = syntaxTree(state).resolveInner(pos, -1);\n    let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);\n    for (let i = 0; i < 5; i++) {\n        let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));\n        let quotePos = start.indexOf(quoteToken);\n        if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {\n            let first = node.firstChild;\n            while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {\n                if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)\n                    return false;\n                first = first.firstChild;\n            }\n            return true;\n        }\n        let parent = node.to == pos && node.parent;\n        if (!parent)\n            break;\n        node = parent;\n    }\n    return false;\n}\nfunction canStartStringAt(state, pos, prefixes) {\n    let charCat = state.charCategorizer(pos);\n    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)\n        return pos;\n    for (let prefix of prefixes) {\n        let start = pos - prefix.length;\n        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)\n            return start;\n    }\n    return -1;\n}\n\n/**\nReturns an extension that enables autocompletion.\n*/\nfunction autocompletion(config = {}) {\n    return [\n        commitCharacters,\n        completionState,\n        completionConfig.of(config),\n        completionPlugin,\n        completionKeymapExt,\n        baseTheme\n    ];\n}\n/**\nBasic keybindings for autocompletion.\n\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\n*/\nconst completionKeymap = [\n    { key: \"Ctrl-Space\", run: startCompletion },\n    { key: \"Escape\", run: closeCompletion },\n    { key: \"ArrowDown\", run: /*@__PURE__*/moveCompletionSelection(true) },\n    { key: \"ArrowUp\", run: /*@__PURE__*/moveCompletionSelection(false) },\n    { key: \"PageDown\", run: /*@__PURE__*/moveCompletionSelection(true, \"page\") },\n    { key: \"PageUp\", run: /*@__PURE__*/moveCompletionSelection(false, \"page\") },\n    { key: \"Enter\", run: acceptCompletion }\n];\nconst completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));\n/**\nGet the current completion status. When completions are available,\nthis will return `\"active\"`. When completions are pending (in the\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\nreturns `null`.\n*/\nfunction completionStatus(state) {\n    let cState = state.field(completionState, false);\n    return cState && cState.active.some(a => a.state == 1 /* State.Pending */) ? \"pending\"\n        : cState && cState.active.some(a => a.state != 0 /* State.Inactive */) ? \"active\" : null;\n}\nconst completionArrayCache = /*@__PURE__*/new WeakMap;\n/**\nReturns the available completions as an array.\n*/\nfunction currentCompletions(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    if (!open || open.disabled)\n        return [];\n    let completions = completionArrayCache.get(open.options);\n    if (!completions)\n        completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\n    return completions;\n}\n/**\nReturn the currently selected completion, if any.\n*/\nfunction selectedCompletion(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;\n}\n/**\nReturns the currently selected position in the active completion\nlist, or null if no completions are active.\n*/\nfunction selectedCompletionIndex(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open && !open.disabled && open.selected >= 0 ? open.selected : null;\n}\n/**\nCreate an effect that can be attached to a transaction to change\nthe currently selected completion.\n*/\nfunction setSelectedCompletion(index) {\n    return setSelectedEffect.of(index);\n}\n\nexport { CompletionContext, acceptCompletion, autocompletion, clearSnippet, closeBrackets, closeBracketsKeymap, closeCompletion, completeAnyWord, completeFromList, completionKeymap, completionStatus, currentCompletions, deleteBracketPair, hasNextSnippetField, hasPrevSnippetField, ifIn, ifNotIn, insertBracket, insertCompletionText, moveCompletionSelection, nextSnippetField, pickedCompletion, prevSnippetField, selectedCompletion, selectedCompletionIndex, setSelectedCompletion, snippet, snippetCompletion, snippetKeymap, startCompletion };\n","import { Decoration, showPanel, EditorView, ViewPlugin, logException, gutter, showTooltip, hoverTooltip, getPanel, WidgetType, GutterMarker } from '@codemirror/view';\nimport { StateEffect, StateField, Facet, combineConfig, RangeSet } from '@codemirror/state';\nimport elt from 'crelt';\n\nclass SelectedDiagnostic {\n    constructor(from, to, diagnostic) {\n        this.from = from;\n        this.to = to;\n        this.diagnostic = diagnostic;\n    }\n}\nclass LintState {\n    constructor(diagnostics, panel, selected) {\n        this.diagnostics = diagnostics;\n        this.panel = panel;\n        this.selected = selected;\n    }\n    static init(diagnostics, panel, state) {\n        // Filter the list of diagnostics for which to create markers\n        let markedDiagnostics = diagnostics;\n        let diagnosticFilter = state.facet(lintConfig).markerFilter;\n        if (diagnosticFilter)\n            markedDiagnostics = diagnosticFilter(markedDiagnostics, state);\n        let ranges = Decoration.set(markedDiagnostics.map((d) => {\n            // For zero-length ranges or ranges covering only a line break, create a widget\n            return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)\n                ? Decoration.widget({\n                    widget: new DiagnosticWidget(d),\n                    diagnostic: d\n                }).range(d.from)\n                : Decoration.mark({\n                    attributes: { class: \"cm-lintRange cm-lintRange-\" + d.severity + (d.markClass ? \" \" + d.markClass : \"\") },\n                    diagnostic: d,\n                    inclusive: true\n                }).range(d.from, d.to);\n        }), true);\n        return new LintState(ranges, panel, findDiagnostic(ranges));\n    }\n}\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\n    let found = null;\n    diagnostics.between(after, 1e9, (from, to, { spec }) => {\n        if (diagnostic && spec.diagnostic != diagnostic)\n            return;\n        found = new SelectedDiagnostic(from, to, spec.diagnostic);\n        return false;\n    });\n    return found;\n}\nfunction hideTooltip(tr, tooltip) {\n    let line = tr.startState.doc.lineAt(tooltip.pos);\n    return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, line.to));\n}\nfunction maybeEnableLint(state, effects) {\n    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));\n}\n/**\nReturns a transaction spec which updates the current set of\ndiagnostics, and enables the lint extension if if wasn't already\nactive.\n*/\nfunction setDiagnostics(state, diagnostics) {\n    return {\n        effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\n    };\n}\n/**\nThe state effect that updates the set of active diagnostics. Can\nbe useful when writing an extension that needs to track these.\n*/\nconst setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst movePanelSelection = /*@__PURE__*/StateEffect.define();\nconst lintState = /*@__PURE__*/StateField.define({\n    create() {\n        return new LintState(Decoration.none, null, null);\n    },\n    update(value, tr) {\n        if (tr.docChanged) {\n            let mapped = value.diagnostics.map(tr.changes), selected = null;\n            if (value.selected) {\n                let selPos = tr.changes.mapPos(value.selected.from, 1);\n                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\n            }\n            value = new LintState(mapped, value.panel, selected);\n        }\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                value = LintState.init(effect.value, value.panel, tr.state);\n            }\n            else if (effect.is(togglePanel)) {\n                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\n            }\n            else if (effect.is(movePanelSelection)) {\n                value = new LintState(value.diagnostics, value.panel, effect.value);\n            }\n        }\n        return value;\n    },\n    provide: f => [showPanel.from(f, val => val.panel),\n        EditorView.decorations.from(f, s => s.diagnostics)]\n});\n/**\nReturns the number of active lint diagnostics in the given state.\n*/\nfunction diagnosticCount(state) {\n    let lint = state.field(lintState, false);\n    return lint ? lint.diagnostics.size : 0;\n}\nconst activeMark = /*@__PURE__*/Decoration.mark({ class: \"cm-lintRange cm-lintRange-active\", inclusive: true });\nfunction lintTooltip(view, pos, side) {\n    let { diagnostics } = view.state.field(lintState);\n    let found = [], stackStart = 2e8, stackEnd = 0;\n    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {\n        if (pos >= from && pos <= to &&\n            (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {\n            found.push(spec.diagnostic);\n            stackStart = Math.min(from, stackStart);\n            stackEnd = Math.max(to, stackEnd);\n        }\n    });\n    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;\n    if (diagnosticFilter)\n        found = diagnosticFilter(found, view.state);\n    if (!found.length)\n        return null;\n    return {\n        pos: stackStart,\n        end: stackEnd,\n        above: view.state.doc.lineAt(stackStart).to < stackEnd,\n        create() {\n            return { dom: diagnosticsTooltip(view, found) };\n        }\n    };\n}\nfunction diagnosticsTooltip(view, diagnostics) {\n    return elt(\"ul\", { class: \"cm-tooltip-lint\" }, diagnostics.map(d => renderDiagnostic(view, d, false)));\n}\n/**\nCommand to open and focus the lint panel.\n*/\nconst openLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });\n    let panel = getPanel(view, LintPanel.open);\n    if (panel)\n        panel.dom.querySelector(\".cm-panel-lint ul\").focus();\n    return true;\n};\n/**\nCommand to close the lint panel, when open.\n*/\nconst closeLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        return false;\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nMove the selection to the next diagnostic.\n*/\nconst nextDiagnostic = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\n    if (!next.value) {\n        next = field.diagnostics.iter(0);\n        if (!next.value || next.from == sel.from && next.to == sel.to)\n            return false;\n    }\n    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });\n    return true;\n};\n/**\nMove the selection to the previous diagnostic.\n*/\nconst previousDiagnostic = (view) => {\n    let { state } = view, field = state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = state.selection.main;\n    let prevFrom, prevTo, lastFrom, lastTo;\n    field.diagnostics.between(0, state.doc.length, (from, to) => {\n        if (to < sel.to && (prevFrom == null || prevFrom < from)) {\n            prevFrom = from;\n            prevTo = to;\n        }\n        if (lastFrom == null || from > lastFrom) {\n            lastFrom = from;\n            lastTo = to;\n        }\n    });\n    if (lastFrom == null || prevFrom == null && lastFrom == sel.from)\n        return false;\n    view.dispatch({ selection: { anchor: prevFrom !== null && prevFrom !== void 0 ? prevFrom : lastFrom, head: prevTo !== null && prevTo !== void 0 ? prevTo : lastTo }, scrollIntoView: true });\n    return true;\n};\n/**\nA set of default key bindings for the lint functionality.\n\n- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)\n- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)\n*/\nconst lintKeymap = [\n    { key: \"Mod-Shift-m\", run: openLintPanel, preventDefault: true },\n    { key: \"F8\", run: nextDiagnostic }\n];\nconst lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.timeout = -1;\n        this.set = true;\n        let { delay } = view.state.facet(lintConfig);\n        this.lintTime = Date.now() + delay;\n        this.run = this.run.bind(this);\n        this.timeout = setTimeout(this.run, delay);\n    }\n    run() {\n        let now = Date.now();\n        if (now < this.lintTime - 10) {\n            this.timeout = setTimeout(this.run, this.lintTime - now);\n        }\n        else {\n            this.set = false;\n            let { state } = this.view, { sources } = state.facet(lintConfig);\n            if (sources.length)\n                Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {\n                    let all = annotations.reduce((a, b) => a.concat(b));\n                    if (this.view.state.doc == state.doc)\n                        this.view.dispatch(setDiagnostics(this.view.state, all));\n                }, error => { logException(this.view.state, error); });\n        }\n    }\n    update(update) {\n        let config = update.state.facet(lintConfig);\n        if (update.docChanged || config != update.startState.facet(lintConfig) ||\n            config.needsRefresh && config.needsRefresh(update)) {\n            this.lintTime = Date.now() + config.delay;\n            if (!this.set) {\n                this.set = true;\n                this.timeout = setTimeout(this.run, config.delay);\n            }\n        }\n    }\n    force() {\n        if (this.set) {\n            this.lintTime = Date.now();\n            this.run();\n        }\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n});\nconst lintConfig = /*@__PURE__*/Facet.define({\n    combine(input) {\n        return Object.assign({ sources: input.map(i => i.source).filter(x => x != null) }, combineConfig(input.map(i => i.config), {\n            delay: 750,\n            markerFilter: null,\n            tooltipFilter: null,\n            needsRefresh: null\n        }, {\n            needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)\n        }));\n    }\n});\n/**\nGiven a diagnostic source, this function returns an extension that\nenables linting with that source. It will be called whenever the\neditor is idle (after its content changed). If `null` is given as\nsource, this only configures the lint extension.\n*/\nfunction linter(source, config = {}) {\n    return [\n        lintConfig.of({ source, config }),\n        lintPlugin,\n        lintExtensions\n    ];\n}\n/**\nForces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the\neditor is idle to run right away.\n*/\nfunction forceLinting(view) {\n    let plugin = view.plugin(lintPlugin);\n    if (plugin)\n        plugin.force();\n}\nfunction assignKeys(actions) {\n    let assigned = [];\n    if (actions)\n        actions: for (let { name } of actions) {\n            for (let i = 0; i < name.length; i++) {\n                let ch = name[i];\n                if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\n                    assigned.push(ch);\n                    continue actions;\n                }\n            }\n            assigned.push(\"\");\n        }\n    return assigned;\n}\nfunction renderDiagnostic(view, diagnostic, inPanel) {\n    var _a;\n    let keys = inPanel ? assignKeys(diagnostic.actions) : [];\n    return elt(\"li\", { class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity }, elt(\"span\", { class: \"cm-diagnosticText\" }, diagnostic.renderMessage ? diagnostic.renderMessage() : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\n        let fired = false, click = (e) => {\n            e.preventDefault();\n            if (fired)\n                return;\n            fired = true;\n            let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\n            if (found)\n                action.apply(view, found.from, found.to);\n        };\n        let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\n        let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),\n            elt(\"u\", name.slice(keyIndex, keyIndex + 1)),\n            name.slice(keyIndex + 1)];\n        return elt(\"button\", {\n            type: \"button\",\n            class: \"cm-diagnosticAction\",\n            onclick: click,\n            onmousedown: click,\n            \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\n        }, nameElt);\n    }), diagnostic.source && elt(\"div\", { class: \"cm-diagnosticSource\" }, diagnostic.source));\n}\nclass DiagnosticWidget extends WidgetType {\n    constructor(diagnostic) {\n        super();\n        this.diagnostic = diagnostic;\n    }\n    eq(other) { return other.diagnostic == this.diagnostic; }\n    toDOM() {\n        return elt(\"span\", { class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity });\n    }\n}\nclass PanelItem {\n    constructor(view, diagnostic) {\n        this.diagnostic = diagnostic;\n        this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\n        this.dom = renderDiagnostic(view, diagnostic, true);\n        this.dom.id = this.id;\n        this.dom.setAttribute(\"role\", \"option\");\n    }\n}\nclass LintPanel {\n    constructor(view) {\n        this.view = view;\n        this.items = [];\n        let onkeydown = (event) => {\n            if (event.keyCode == 27) { // Escape\n                closeLintPanel(this.view);\n                this.view.focus();\n            }\n            else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp\n                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\n            }\n            else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown\n                this.moveSelection((this.selectedIndex + 1) % this.items.length);\n            }\n            else if (event.keyCode == 36) { // Home\n                this.moveSelection(0);\n            }\n            else if (event.keyCode == 35) { // End\n                this.moveSelection(this.items.length - 1);\n            }\n            else if (event.keyCode == 13) { // Enter\n                this.view.focus();\n            }\n            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z\n                let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);\n                for (let i = 0; i < keys.length; i++)\n                    if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\n                        let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\n                        if (found)\n                            diagnostic.actions[i].apply(view, found.from, found.to);\n                    }\n            }\n            else {\n                return;\n            }\n            event.preventDefault();\n        };\n        let onclick = (event) => {\n            for (let i = 0; i < this.items.length; i++) {\n                if (this.items[i].dom.contains(event.target))\n                    this.moveSelection(i);\n            }\n        };\n        this.list = elt(\"ul\", {\n            tabIndex: 0,\n            role: \"listbox\",\n            \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\n            onkeydown,\n            onclick\n        });\n        this.dom = elt(\"div\", { class: \"cm-panel-lint\" }, this.list, elt(\"button\", {\n            type: \"button\",\n            name: \"close\",\n            \"aria-label\": this.view.state.phrase(\"close\"),\n            onclick: () => closeLintPanel(this.view)\n        }, \"×\"));\n        this.update();\n    }\n    get selectedIndex() {\n        let selected = this.view.state.field(lintState).selected;\n        if (!selected)\n            return -1;\n        for (let i = 0; i < this.items.length; i++)\n            if (this.items[i].diagnostic == selected.diagnostic)\n                return i;\n        return -1;\n    }\n    update() {\n        let { diagnostics, selected } = this.view.state.field(lintState);\n        let i = 0, needsSync = false, newSelectedItem = null;\n        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {\n            let found = -1, item;\n            for (let j = i; j < this.items.length; j++)\n                if (this.items[j].diagnostic == spec.diagnostic) {\n                    found = j;\n                    break;\n                }\n            if (found < 0) {\n                item = new PanelItem(this.view, spec.diagnostic);\n                this.items.splice(i, 0, item);\n                needsSync = true;\n            }\n            else {\n                item = this.items[found];\n                if (found > i) {\n                    this.items.splice(i, found - i);\n                    needsSync = true;\n                }\n            }\n            if (selected && item.diagnostic == selected.diagnostic) {\n                if (!item.dom.hasAttribute(\"aria-selected\")) {\n                    item.dom.setAttribute(\"aria-selected\", \"true\");\n                    newSelectedItem = item;\n                }\n            }\n            else if (item.dom.hasAttribute(\"aria-selected\")) {\n                item.dom.removeAttribute(\"aria-selected\");\n            }\n            i++;\n        });\n        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\n            needsSync = true;\n            this.items.pop();\n        }\n        if (this.items.length == 0) {\n            this.items.push(new PanelItem(this.view, {\n                from: -1, to: -1,\n                severity: \"info\",\n                message: this.view.state.phrase(\"No diagnostics\")\n            }));\n            needsSync = true;\n        }\n        if (newSelectedItem) {\n            this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\n            this.view.requestMeasure({\n                key: this,\n                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),\n                write: ({ sel, panel }) => {\n                    let scaleY = panel.height / this.list.offsetHeight;\n                    if (sel.top < panel.top)\n                        this.list.scrollTop -= (panel.top - sel.top) / scaleY;\n                    else if (sel.bottom > panel.bottom)\n                        this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;\n                }\n            });\n        }\n        else if (this.selectedIndex < 0) {\n            this.list.removeAttribute(\"aria-activedescendant\");\n        }\n        if (needsSync)\n            this.sync();\n    }\n    sync() {\n        let domPos = this.list.firstChild;\n        function rm() {\n            let prev = domPos;\n            domPos = prev.nextSibling;\n            prev.remove();\n        }\n        for (let item of this.items) {\n            if (item.dom.parentNode == this.list) {\n                while (domPos != item.dom)\n                    rm();\n                domPos = item.dom.nextSibling;\n            }\n            else {\n                this.list.insertBefore(item.dom, domPos);\n            }\n        }\n        while (domPos)\n            rm();\n    }\n    moveSelection(selectedIndex) {\n        if (this.selectedIndex < 0)\n            return;\n        let field = this.view.state.field(lintState);\n        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\n        if (!selection)\n            return;\n        this.view.dispatch({\n            selection: { anchor: selection.from, head: selection.to },\n            scrollIntoView: true,\n            effects: movePanelSelection.of(selection)\n        });\n    }\n    static open(view) { return new LintPanel(view); }\n}\nfunction svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\n    return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\n}\nfunction underline(color) {\n    return svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-diagnostic\": {\n        padding: \"3px 6px 3px 8px\",\n        marginLeft: \"-1px\",\n        display: \"block\",\n        whiteSpace: \"pre-wrap\"\n    },\n    \".cm-diagnostic-error\": { borderLeft: \"5px solid #d11\" },\n    \".cm-diagnostic-warning\": { borderLeft: \"5px solid orange\" },\n    \".cm-diagnostic-info\": { borderLeft: \"5px solid #999\" },\n    \".cm-diagnostic-hint\": { borderLeft: \"5px solid #66d\" },\n    \".cm-diagnosticAction\": {\n        font: \"inherit\",\n        border: \"none\",\n        padding: \"2px 4px\",\n        backgroundColor: \"#444\",\n        color: \"white\",\n        borderRadius: \"3px\",\n        marginLeft: \"8px\",\n        cursor: \"pointer\"\n    },\n    \".cm-diagnosticSource\": {\n        fontSize: \"70%\",\n        opacity: .7\n    },\n    \".cm-lintRange\": {\n        backgroundPosition: \"left bottom\",\n        backgroundRepeat: \"repeat-x\",\n        paddingBottom: \"0.7px\",\n    },\n    \".cm-lintRange-error\": { backgroundImage: /*@__PURE__*/underline(\"#d11\") },\n    \".cm-lintRange-warning\": { backgroundImage: /*@__PURE__*/underline(\"orange\") },\n    \".cm-lintRange-info\": { backgroundImage: /*@__PURE__*/underline(\"#999\") },\n    \".cm-lintRange-hint\": { backgroundImage: /*@__PURE__*/underline(\"#66d\") },\n    \".cm-lintRange-active\": { backgroundColor: \"#ffdd9980\" },\n    \".cm-tooltip-lint\": {\n        padding: 0,\n        margin: 0\n    },\n    \".cm-lintPoint\": {\n        position: \"relative\",\n        \"&:after\": {\n            content: '\"\"',\n            position: \"absolute\",\n            bottom: 0,\n            left: \"-2px\",\n            borderLeft: \"3px solid transparent\",\n            borderRight: \"3px solid transparent\",\n            borderBottom: \"4px solid #d11\"\n        }\n    },\n    \".cm-lintPoint-warning\": {\n        \"&:after\": { borderBottomColor: \"orange\" }\n    },\n    \".cm-lintPoint-info\": {\n        \"&:after\": { borderBottomColor: \"#999\" }\n    },\n    \".cm-lintPoint-hint\": {\n        \"&:after\": { borderBottomColor: \"#66d\" }\n    },\n    \".cm-panel.cm-panel-lint\": {\n        position: \"relative\",\n        \"& ul\": {\n            maxHeight: \"100px\",\n            overflowY: \"auto\",\n            \"& [aria-selected]\": {\n                backgroundColor: \"#ddd\",\n                \"& u\": { textDecoration: \"underline\" }\n            },\n            \"&:focus [aria-selected]\": {\n                background_fallback: \"#bdf\",\n                backgroundColor: \"Highlight\",\n                color_fallback: \"white\",\n                color: \"HighlightText\"\n            },\n            \"& u\": { textDecoration: \"none\" },\n            padding: 0,\n            margin: 0\n        },\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"2px\",\n            background: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        }\n    }\n});\nfunction severityWeight(sev) {\n    return sev == \"error\" ? 4 : sev == \"warning\" ? 3 : sev == \"info\" ? 2 : 1;\n}\nclass LintGutterMarker extends GutterMarker {\n    constructor(diagnostics) {\n        super();\n        this.diagnostics = diagnostics;\n        this.severity = diagnostics.reduce((max, d) => severityWeight(max) < severityWeight(d.severity) ? d.severity : max, \"hint\");\n    }\n    toDOM(view) {\n        let elt = document.createElement(\"div\");\n        elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\n        let diagnostics = this.diagnostics;\n        let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;\n        if (diagnosticsFilter)\n            diagnostics = diagnosticsFilter(diagnostics, view.state);\n        if (diagnostics.length)\n            elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);\n        return elt;\n    }\n}\nfunction trackHoverOn(view, marker) {\n    let mousemove = (event) => {\n        let rect = marker.getBoundingClientRect();\n        if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ &&\n            event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */)\n            return;\n        for (let target = event.target; target; target = target.parentNode) {\n            if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\"))\n                return;\n        }\n        window.removeEventListener(\"mousemove\", mousemove);\n        if (view.state.field(lintGutterTooltip))\n            view.dispatch({ effects: setLintGutterTooltip.of(null) });\n    };\n    window.addEventListener(\"mousemove\", mousemove);\n}\nfunction gutterMarkerMouseOver(view, marker, diagnostics) {\n    function hovered() {\n        let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\n        const linePos = view.coordsAtPos(line.from);\n        if (linePos) {\n            view.dispatch({ effects: setLintGutterTooltip.of({\n                    pos: line.from,\n                    above: false,\n                    create() {\n                        return {\n                            dom: diagnosticsTooltip(view, diagnostics),\n                            getCoords: () => marker.getBoundingClientRect()\n                        };\n                    }\n                }) });\n        }\n        marker.onmouseout = marker.onmousemove = null;\n        trackHoverOn(view, marker);\n    }\n    let { hoverTime } = view.state.facet(lintGutterConfig);\n    let hoverTimeout = setTimeout(hovered, hoverTime);\n    marker.onmouseout = () => {\n        clearTimeout(hoverTimeout);\n        marker.onmouseout = marker.onmousemove = null;\n    };\n    marker.onmousemove = () => {\n        clearTimeout(hoverTimeout);\n        hoverTimeout = setTimeout(hovered, hoverTime);\n    };\n}\nfunction markersForDiagnostics(doc, diagnostics) {\n    let byLine = Object.create(null);\n    for (let diagnostic of diagnostics) {\n        let line = doc.lineAt(diagnostic.from);\n        (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\n    }\n    let markers = [];\n    for (let line in byLine) {\n        markers.push(new LintGutterMarker(byLine[line]).range(+line));\n    }\n    return RangeSet.of(markers, true);\n}\nconst lintGutterExtension = /*@__PURE__*/gutter({\n    class: \"cm-gutter-lint\",\n    markers: view => view.state.field(lintGutterMarkers),\n});\nconst lintGutterMarkers = /*@__PURE__*/StateField.define({\n    create() {\n        return RangeSet.empty;\n    },\n    update(markers, tr) {\n        markers = markers.map(tr.changes);\n        let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                let diagnostics = effect.value;\n                if (diagnosticFilter)\n                    diagnostics = diagnosticFilter(diagnostics || [], tr.state);\n                markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));\n            }\n        }\n        return markers;\n    }\n});\nconst setLintGutterTooltip = /*@__PURE__*/StateEffect.define();\nconst lintGutterTooltip = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(tooltip, tr) {\n        if (tooltip && tr.docChanged)\n            tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });\n        return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);\n    },\n    provide: field => showTooltip.from(field)\n});\nconst lintGutterTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-gutter-lint\": {\n        width: \"1.4em\",\n        \"& .cm-gutterElement\": {\n            padding: \".2em\"\n        }\n    },\n    \".cm-lint-marker\": {\n        width: \"1em\",\n        height: \"1em\"\n    },\n    \".cm-lint-marker-info\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\n    },\n    \".cm-lint-marker-warning\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`),\n    },\n    \".cm-lint-marker-error\": {\n        content: /*@__PURE__*/svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\n    },\n});\nconst lintExtensions = [\n    lintState,\n    /*@__PURE__*/EditorView.decorations.compute([lintState], state => {\n        let { selected, panel } = state.field(lintState);\n        return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([\n            activeMark.range(selected.from, selected.to)\n        ]);\n    }),\n    /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),\n    baseTheme\n];\nconst lintGutterConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            hoverTime: 300 /* Hover.Time */,\n            markerFilter: null,\n            tooltipFilter: null\n        });\n    }\n});\n/**\nReturns an extension that installs a gutter showing markers for\neach line that has diagnostics, which can be hovered over to see\nthe diagnostics.\n*/\nfunction lintGutter(config = {}) {\n    return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];\n}\n/**\nIterate over the marked diagnostics for the given editor state,\ncalling `f` for each of them. Note that, if the document changed\nsince the diagnostics were created, the `Diagnostic` object will\nhold the original outdated position, whereas the `to` and `from`\narguments hold the diagnostic's current position.\n*/\nfunction forEachDiagnostic(state, f) {\n    let lState = state.field(lintState, false);\n    if (lState && lState.diagnostics.size)\n        for (let iter = RangeSet.iter([lState.diagnostics]); iter.value; iter.next())\n            f(iter.value.spec.diagnostic, iter.from, iter.to);\n}\n\nexport { closeLintPanel, diagnosticCount, forEachDiagnostic, forceLinting, lintGutter, lintKeymap, linter, nextDiagnostic, openLintPanel, previousDiagnostic, setDiagnostics, setDiagnosticsEffect };\n","import { lineNumbers, highlightActiveLineGutter, highlightSpecialChars, drawSelection, dropCursor, rectangularSelection, crosshairCursor, highlightActiveLine, keymap } from '@codemirror/view';\nexport { EditorView } from '@codemirror/view';\nimport { EditorState } from '@codemirror/state';\nimport { foldGutter, indentOnInput, syntaxHighlighting, defaultHighlightStyle, bracketMatching, foldKeymap } from '@codemirror/language';\nimport { history, defaultKeymap, historyKeymap } from '@codemirror/commands';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { closeBrackets, autocompletion, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { lintKeymap } from '@codemirror/lint';\n\n// (The superfluous function calls around the list of extensions work\n// around current limitations in tree-shaking software.)\n/**\nThis is an extension value that just pulls together a number of\nextensions that you might want in a basic editor. It is meant as a\nconvenient helper to quickly set up CodeMirror without installing\nand importing a lot of separate packages.\n\nSpecifically, it includes...\n\n - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)\n - [line numbers](https://codemirror.net/6/docs/ref/#view.lineNumbers)\n - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)\n - [the undo history](https://codemirror.net/6/docs/ref/#commands.history)\n - [a fold gutter](https://codemirror.net/6/docs/ref/#language.foldGutter)\n - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)\n - [drop cursor](https://codemirror.net/6/docs/ref/#view.dropCursor)\n - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\n - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)\n - [the default highlight style](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle) (as fallback)\n - [bracket matching](https://codemirror.net/6/docs/ref/#language.bracketMatching)\n - [bracket closing](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets)\n - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)\n - [rectangular selection](https://codemirror.net/6/docs/ref/#view.rectangularSelection) and [crosshair cursor](https://codemirror.net/6/docs/ref/#view.crosshairCursor)\n - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)\n - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLineGutter)\n - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)\n - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)\n - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)\n\n(You'll probably want to add some language package to your setup\ntoo.)\n\nThis extension does not allow customization. The idea is that,\nonce you decide you want to configure your editor more precisely,\nyou take this package's source (which is just a bunch of imports\nand an array literal), copy it into your own code, and adjust it\nas desired.\n*/\nconst basicSetup = /*@__PURE__*/(() => [\n    lineNumbers(),\n    highlightActiveLineGutter(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    dropCursor(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    crosshairCursor(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...completionKeymap,\n        ...lintKeymap\n    ])\n])();\n/**\nA minimal set of extensions to create a functional editor. Only\nincludes [the default keymap](https://codemirror.net/6/docs/ref/#commands.defaultKeymap), [undo\nhistory](https://codemirror.net/6/docs/ref/#commands.history), [special character\nhighlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars), [custom selection\ndrawing](https://codemirror.net/6/docs/ref/#view.drawSelection), and [default highlight\nstyle](https://codemirror.net/6/docs/ref/#language.defaultHighlightStyle).\n*/\nconst minimalSetup = /*@__PURE__*/(() => [\n    highlightSpecialChars(),\n    history(),\n    drawSelection(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    keymap.of([\n        ...defaultKeymap,\n        ...historyKeymap,\n    ])\n])();\n\nexport { basicSetup, minimalSetup };\n","import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/**\nA parse stack. These are used internally by the parser to track\nparsing progress. They also provide some properties and methods\nthat external code such as a tokenizer can use to get information\nabout the parse state.\n*/\nclass Stack {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The parse that this stack is part of @internal\n    */\n    p, \n    /**\n    Holds state, input pos, buffer index triplets for all but the\n    top state @internal\n    */\n    stack, \n    /**\n    The current parse state @internal\n    */\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /**\n    @internal\n    */\n    reducePos, \n    /**\n    The input position up to which this stack has parsed.\n    */\n    pos, \n    /**\n    The dynamic score of the stack, including dynamic precedence\n    and error-recovery penalties\n    @internal\n    */\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /**\n    @internal\n    */\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /**\n    @internal\n    */\n    bufferBase, \n    /**\n    @internal\n    */\n    curContext, \n    /**\n    @internal\n    */\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /**\n    @internal\n    */\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /**\n    @internal\n    */\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /**\n    The stack's current [context](#lr.ContextTracker) value, if\n    any. Its type will depend on the context tracker's type\n    parameter, or it will be `null` if there is no context\n    tracker.\n    */\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /**\n    @internal\n    */\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /**\n    @internal\n    */\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /**\n    @internal\n    */\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /**\n    @internal\n    */\n    shift(action, type, start, end) {\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (end > this.pos || type <= parser.maxNode) {\n                this.pos = end;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = end;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(type, start);\n            if (type <= parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = end;\n            this.shiftContext(type, start);\n            if (type <= this.p.parser.maxNode)\n                this.buffer.push(type, start, end, 4);\n        }\n    }\n    // Apply an action\n    /**\n    @internal\n    */\n    apply(action, next, nextStart, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextStart, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /**\n    @internal\n    */\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /**\n    @internal\n    */\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /**\n    @internal\n    */\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /**\n    Check if the given term would be able to be shifted (optionally\n    after some reductions) on this stack. This can be useful for\n    external tokenizers that want to make sure they only provide a\n    given token when it applies.\n    */\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /**\n    @internal\n    */\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.reducePos = this.pos;\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /**\n    @internal\n    */\n    forceReduce() {\n        let { parser } = this.p;\n        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {\n                let backup = this.findForcedReduction();\n                if (backup == null)\n                    return false;\n                reduce = backup;\n            }\n            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /**\n    Try to scan through the automaton to find some kind of reduction\n    that can be applied. Used when the regular ForcedReduce field\n    isn't a valid action. @internal\n    */\n    findForcedReduction() {\n        let { parser } = this.p, seen = [];\n        let explore = (state, depth) => {\n            if (seen.includes(state))\n                return;\n            seen.push(state);\n            return parser.allActions(state, (action) => {\n                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;\n                else if (action & 65536 /* Action.ReduceFlag */) {\n                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;\n                    if (rDepth > 1) {\n                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;\n                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)\n                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;\n                    }\n                }\n                else {\n                    let found = explore(action, depth + 1);\n                    if (found != null)\n                        return found;\n                }\n            });\n        };\n        return explore(this.state, 0);\n    }\n    /**\n    @internal\n    */\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /**\n    Check whether this state has no further actions (assumed to be a direct descendant of the\n    top state, since any other states must be able to continue\n    somehow). @internal\n    */\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /**\n    Restart the stack (put it back in its start state). Only safe\n    when this.stack.length == 3 (state is directly below the top\n    state). @internal\n    */\n    restart() {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /**\n    @internal\n    */\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /**\n    Get the parser used by this stack.\n    */\n    get parser() { return this.p.parser; }\n    /**\n    Test whether a given dialect (by numeric ID, as exported from\n    the terms file) is enabled.\n    */\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /**\n    @internal\n    */\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);\n    }\n    /**\n    @internal\n    */\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /**\n    @internal\n    */\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /**\n    @internal\n    */\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/**\n[Tokenizers](#lr.ExternalTokenizer) interact with the input\nthrough this interface. It presents the input as a stream of\ncharacters, tracking lookahead and hiding the complexity of\n[ranges](#common.Parser.parse^ranges) from tokenizer code.\n*/\nclass InputStream {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    input, \n    /**\n    @internal\n    */\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /**\n        @internal\n        */\n        this.chunk = \"\";\n        /**\n        @internal\n        */\n        this.chunkOff = 0;\n        /**\n        Backup chunk\n        */\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /**\n        The character code of the next code unit in the input, or -1\n        when the stream is at the end of the input.\n        */\n        this.next = -1;\n        /**\n        @internal\n        */\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /**\n    @internal\n    */\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /**\n    @internal\n    */\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /**\n    Look at a code unit near the stream position. `.peek(0)` equals\n    `.next`, `.peek(-1)` gives you the previous character, and so\n    on.\n    \n    Note that looking around during tokenizing creates dependencies\n    on potentially far-away content, which may reduce the\n    effectiveness incremental parsing—when looking forward—or even\n    cause invalid reparses when looking backward more than 25 code\n    units, since the library does not track lookbehind.\n    */\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /**\n    Accept a token. By default, the end of the token is set to the\n    current stream position, but you can pass an offset (relative to\n    the stream position) to change that.\n    */\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    /**\n    Accept a token ending at a specific given position.\n    */\n    acceptTokenTo(token, endPos) {\n        this.token.value = token;\n        this.token.end = endPos;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /**\n    Move the stream forward N (defaults to 1) code units. Returns\n    the new value of [`next`](#lr.InputStream.next).\n    */\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /**\n    @internal\n    */\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /**\n    @internal\n    */\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/**\n@internal\n*/\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n@hide\n*/\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, skipped = 0;\n        for (;;) {\n            let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (!atEof)\n                skipped++;\n            if (nextPos == null)\n                break;\n            input.reset(nextPos, input.token);\n        }\n        if (skipped) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, skipped);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/**\n`@external tokens` declarations in the grammar should resolve to\nan instance of this class.\n*/\nclass ExternalTokenizer {\n    /**\n    Create a tokenizer. The first argument is the function that,\n    given an input stream, scans for the types of tokens it\n    recognizes at the stream's position, and calls\n    [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    one.\n    */\n    constructor(\n    /**\n    @internal\n    */\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Finish with \" + this.stackID(finished));\n                return this.stackToTree(finished);\n            }\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished) {\n                if (verbose)\n                    console.log(\"Force-finish \" + this.stackID(finished));\n                return this.stackToTree(finished.forceAll());\n            }\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {\n            while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            let main = this.tokens.mainToken;\n            localStack.apply(action, term, main ? main.start : localStack.pos, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/**\nContext trackers are used to track stateful context (such as\nindentation in the Python grammar, or parent elements in the XML\ngrammar) needed by external tokenizers. You declare them in a\ngrammar file as `@context exportName from \"module\"`.\n\nContext values should be immutable, and can be updated (replaced)\non shift or reduce actions.\n\nThe export used in a `@context` declaration should be of this\ntype.\n*/\nclass ContextTracker {\n    /**\n    Define a context tracker.\n    */\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/**\nHolds the parse tables for a given grammar, as generated by\n`lezer-generator`, and provides [methods](#common.Parser) to parse\ncontent with.\n*/\nclass LRParser extends Parser {\n    /**\n    @internal\n    */\n    constructor(spec) {\n        super();\n        /**\n        @internal\n        */\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /**\n    Get a goto table entry @internal\n    */\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /**\n    Check if this state has an action for a given terminal @internal\n    */\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /**\n    @internal\n    */\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /**\n    @internal\n    */\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /**\n    @internal\n    */\n    validAction(state, action) {\n        return !!this.allActions(state, a => a == action ? true : null);\n    }\n    /**\n    @internal\n    */\n    allActions(state, action) {\n        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);\n        let result = deflt ? action(deflt) : undefined;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            result = action(pair(this.data, i + 1));\n        }\n        return result;\n    }\n    /**\n    Get the states that can follow this one through shift actions or\n    goto jumps. @internal\n    */\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /**\n    Configure the parser. Returns a new parser instance that has the\n    given settings modified. Settings not provided in `config` are\n    kept from the original parser.\n    */\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /**\n    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    are registered for this parser.\n    */\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /**\n    Returns the name associated with a given term. This will only\n    work for all terms when the parser was generated with the\n    `--names` option. By default, only the names of tagged terms are\n    stored.\n    */\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /**\n    The eof term id is always allocated directly after the node\n    types. @internal\n    */\n    get eofTerm() { return this.maxNode + 1; }\n    /**\n    The type of top node produced by the parser.\n    */\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /**\n    @internal\n    */\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /**\n    @internal\n    */\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /**\n    Used by the output of the parser generator. Not available to\n    user code. @hide\n    */\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n","import { ContextTracker, ExternalTokenizer, LRParser, LocalTokenGroup } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst noSemi = 310,\n  incdec = 1,\n  incdecPrefix = 2,\n  JSXStartTag = 3,\n  insertSemi = 311,\n  spaces = 313,\n  newline = 314,\n  LineComment = 4,\n  BlockComment = 5,\n  Dialect_jsx = 0;\n\n/* Hand-written tokenizers for JavaScript tokens that can't be\n   expressed by lezer's built-in tokenizer. */\n\nconst space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,\n               8201, 8202, 8232, 8233, 8239, 8287, 12288];\n\nconst braceR = 125, semicolon = 59, slash = 47, star = 42, plus = 43, minus = 45, lt = 60, comma = 44;\n\nconst trackNewline = new ContextTracker({\n  start: false,\n  shift(context, term) {\n    return term == LineComment || term == BlockComment || term == spaces ? context : term == newline\n  },\n  strict: false\n});\n\nconst insertSemicolon = new ExternalTokenizer((input, stack) => {\n  let {next} = input;\n  if (next == braceR || next == -1 || stack.context)\n    input.acceptToken(insertSemi);\n}, {contextual: true, fallback: true});\n\nconst noSemicolon = new ExternalTokenizer((input, stack) => {\n  let {next} = input, after;\n  if (space.indexOf(next) > -1) return\n  if (next == slash && ((after = input.peek(1)) == slash || after == star)) return\n  if (next != braceR && next != semicolon && next != -1 && !stack.context)\n    input.acceptToken(noSemi);\n}, {contextual: true});\n\nconst incdecToken = new ExternalTokenizer((input, stack) => {\n  let {next} = input;\n  if (next == plus || next == minus) {\n    input.advance();\n    if (next == input.next) {\n      input.advance();\n      let mayPostfix = !stack.context && stack.canShift(incdec);\n      input.acceptToken(mayPostfix ? incdec : incdecPrefix);\n    }\n  }\n}, {contextual: true});\n\nfunction identifierChar(ch, start) {\n  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 ||\n    !start && ch >= 48 && ch <= 57\n}\n\nconst jsx = new ExternalTokenizer((input, stack) => {\n  if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return\n  input.advance();\n  if (input.next == slash) return\n  // Scan for an identifier followed by a comma or 'extends', don't\n  // treat this as a start tag if present.\n  let back = 0;\n  while (space.indexOf(input.next) > -1) { input.advance(); back++; }\n  if (identifierChar(input.next, true)) {\n    input.advance();\n    back++;\n    while (identifierChar(input.next, false)) { input.advance(); back++; }\n    while (space.indexOf(input.next) > -1) { input.advance(); back++; }\n    if (input.next == comma) return\n    for (let i = 0;; i++) {\n      if (i == 7) {\n        if (!identifierChar(input.next, true)) return\n        break\n      }\n      if (input.next != \"extends\".charCodeAt(i)) break\n      input.advance();\n      back++;\n    }\n  }\n  input.acceptToken(JSXStartTag, -back);\n});\n\nconst jsHighlight = styleTags({\n  \"get set async static\": tags.modifier,\n  \"for while do if else switch try catch finally return throw break continue default case\": tags.controlKeyword,\n  \"in of await yield void typeof delete instanceof\": tags.operatorKeyword,\n  \"let var const using function class extends\": tags.definitionKeyword,\n  \"import export from\": tags.moduleKeyword,\n  \"with debugger as new\": tags.keyword,\n  TemplateString: tags.special(tags.string),\n  super: tags.atom,\n  BooleanLiteral: tags.bool,\n  this: tags.self,\n  null: tags.null,\n  Star: tags.modifier,\n  VariableName: tags.variableName,\n  \"CallExpression/VariableName TaggedTemplateExpression/VariableName\": tags.function(tags.variableName),\n  VariableDefinition: tags.definition(tags.variableName),\n  Label: tags.labelName,\n  PropertyName: tags.propertyName,\n  PrivatePropertyName: tags.special(tags.propertyName),\n  \"CallExpression/MemberExpression/PropertyName\": tags.function(tags.propertyName),\n  \"FunctionDeclaration/VariableDefinition\": tags.function(tags.definition(tags.variableName)),\n  \"ClassDeclaration/VariableDefinition\": tags.definition(tags.className),\n  PropertyDefinition: tags.definition(tags.propertyName),\n  PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),\n  UpdateOp: tags.updateOperator,\n  \"LineComment Hashbang\": tags.lineComment,\n  BlockComment: tags.blockComment,\n  Number: tags.number,\n  String: tags.string,\n  Escape: tags.escape,\n  ArithOp: tags.arithmeticOperator,\n  LogicOp: tags.logicOperator,\n  BitOp: tags.bitwiseOperator,\n  CompareOp: tags.compareOperator,\n  RegExp: tags.regexp,\n  Equals: tags.definitionOperator,\n  Arrow: tags.function(tags.punctuation),\n  \": Spread\": tags.punctuation,\n  \"( )\": tags.paren,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace,\n  \"InterpolationStart InterpolationEnd\": tags.special(tags.brace),\n  \".\": tags.derefOperator,\n  \", ;\": tags.separator,\n  \"@\": tags.meta,\n\n  TypeName: tags.typeName,\n  TypeDefinition: tags.definition(tags.typeName),\n  \"type enum interface implements namespace module declare\": tags.definitionKeyword,\n  \"abstract global Privacy readonly override\": tags.modifier,\n  \"is keyof unique infer\": tags.operatorKeyword,\n\n  JSXAttributeValue: tags.attributeValue,\n  JSXText: tags.content,\n  \"JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag\": tags.angleBracket,\n  \"JSXIdentifier JSXNameSpacedName\": tags.tagName,\n  \"JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName\": tags.attributeName,\n  \"JSXBuiltin/JSXIdentifier\": tags.standard(tags.tagName)\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_identifier = {__proto__:null,export:18, as:23, from:31, default:34, async:39, function:40, extends:52, this:56, true:64, false:64, null:76, void:80, typeof:84, super:102, new:136, delete:154, yield:163, await:167, class:172, public:229, private:229, protected:229, readonly:231, instanceof:250, satisfies:253, in:254, const:256, import:288, keyof:341, unique:345, infer:351, is:387, abstract:407, implements:409, type:411, let:414, var:416, using:419, interface:425, enum:429, namespace:435, module:437, declare:441, global:445, for:464, of:473, while:476, with:480, do:484, if:488, else:490, switch:494, case:500, try:506, catch:510, finally:514, return:518, throw:522, break:526, continue:530, debugger:534};\nconst spec_word = {__proto__:null,async:123, get:125, set:127, declare:189, public:191, private:191, protected:191, static:193, abstract:195, override:197, readonly:203, accessor:205, new:391};\nconst spec_LessThan = {__proto__:null,\"<\":145};\nconst parser = LRParser.deserialize({\n  version: 14,\n  states: \"$=dO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ?NdO'#ChO+RO!bO'#CiO+aO#tO'#CiO+oO!0LbO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DzO0fQ^O'#ESOOQ?Mr'#E['#E[O1PQWO'#EXOOQO'#Em'#EmOOQO'#If'#IfO1XQWO'#GnO1dQWO'#ElO1iQWO'#ElO3kQ?NdO'#JjO6[Q?NdO'#JkO6xQWO'#F[O6}Q&jO'#FrOOQ?Mr'#Fd'#FdO7YO,YO'#FdO7hQ7[O'#FyO9UQWO'#FxOOQ?Mr'#Jk'#JkOOQ?Mp'#Jj'#JjO9ZQWO'#GrOOQU'#KW'#KWO9fQWO'#ISO9kQ?MxO'#ITOOQU'#JX'#JXOOQU'#IX'#IXQ`Q^OOO`Q^OOO9sQMnO'#DsO9zQ^O'#EOO:RQ^O'#EQO9aQWO'#GnO:YQ7[O'#CnO:hQWO'#EkO:sQWO'#EvO:xQ7[O'#FcO;gQWO'#GnOOQO'#KX'#KXO;lQWO'#KXO;zQWO'#GvO;zQWO'#GwO;zQWO'#GyO9aQWO'#G|O<qQWO'#HPO>YQWO'#CdO>jQWO'#H]O>rQWO'#HcO>rQWO'#HeO`Q^O'#HgO>rQWO'#HiO>rQWO'#HlO>wQWO'#HrO>|Q?MyO'#HxO%[Q^O'#HzO?XQ?MyO'#H|O?dQ?MyO'#IOO9kQ?MxO'#IQO?oQ?NdO'#ChO@qQ`O'#DiQOQWOOO%[Q^O'#EQOAXQWO'#ETO:YQ7[O'#EkOAdQWO'#EkOAoQpO'#FcOOQU'#Cf'#CfOOQ?Mp'#Dn'#DnOOQ?Mp'#Jn'#JnO%[Q^O'#JnOOQO'#Jr'#JrOOQO'#Ic'#IcOBoQ`O'#EdOOQ?Mp'#Ec'#EcOOQ?Mp'#Ju'#JuOCkQ?NQO'#EdOCuQ`O'#EWOOQO'#Jq'#JqODZQ`O'#JrOEhQ`O'#EWOCuQ`O'#EdPEuO#@ItO'#CaPOOO)CDv)CDvOOOO'#IY'#IYOFQO!bO,59TOOQ?Mr,59T,59TOOOO'#IZ'#IZOF`O#tO,59TO%[Q^O'#D`OOOO'#I]'#I]OFnO!0LbO,59xOOQ?Mr,59x,59xOF|Q^O'#I^OGaQWO'#JlOIcQrO'#JlO+}Q^O'#JlOIjQWO,5:OOJQQWO'#EmOJ_QWO'#J{OJjQWO'#JzOJjQWO'#JzOJrQWO,5;ZOJwQWO'#JyOOQ?Mv,5:Z,5:ZOKOQ^O,5:ZOMPQ?NdO,5:fOMpQWO,5:nONZQ?MxO'#JxONbQWO'#JwO9ZQWO'#JwONvQWO'#JwO! OQWO,5;YO! TQWO'#JwO!#]QrO'#JkOOQ?Mr'#Ch'#ChO%[Q^O'#ESO!#{QpO,5:sOOQO'#Js'#JsOOQO-E<d-E<dO9aQWO,5=YO!$cQWO,5=YO!$hQ^O,5;WO!&kQ7[O'#EhO!(UQWO,5;WO!)tQ7[O'#DtO!){Q^O'#DyO!*VQ`O,5;aO!*_Q`O,5;aO%[Q^O,5;aOOQU'#FS'#FSOOQU'#FU'#FUO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bOOQU'#FY'#FYO!*mQ^O,5;sOOQ?Mr,5;x,5;xOOQ?Mr,5;y,5;yO!,pQWO,5;yOOQ?Mr,5;z,5;zO%[Q^O'#IjO!,xQ?MxO,5<fO!&kQ7[O,5;bO!-gQ7[O,5;bO%[Q^O,5;vO!-nQ&jO'#FhO!.kQ&jO'#KPO!.VQ&jO'#KPO!.rQ&jO'#KPOOQO'#KP'#KPO!/WQ&jO,5<QOOOS,5<^,5<^O!/iQ^O'#FtOOOS'#Ii'#IiO7YO,YO,5<OO!/pQ&jO'#FvOOQ?Mr,5<O,5<OO!0aQ!LQO'#CuOOQ?Mr'#Cy'#CyO!0tQWO'#CyO!0yO!0LbO'#C}O!1gQ7[O,5<cO!1nQWO,5<eO!3ZQ$ISO'#GTO!3hQWO'#GUO!3mQWO'#GUO!5]Q$ISO'#GYO!6XQ`O'#G^OOQO'#Gi'#GiO!(ZQ7[O'#GhOOQO'#Gk'#GkO!(ZQ7[O'#GjO!6zQ!LQO'#JeOOQ?Mr'#Je'#JeO!7UQWO'#JdO!7dQWO'#JcO!7lQWO'#CtOOQ?Mr'#Cw'#CwOOQ?Mr'#DR'#DROOQ?Mr'#DT'#DTO1SQWO'#DVO!(ZQ7[O'#F{O!(ZQ7[O'#F}O!7tQWO'#GPO!7yQWO'#GQO!3mQWO'#GWO!(ZQ7[O'#G]O!8OQWO'#EnO!8mQWO,5<dOOQ?Mp'#Cq'#CqO!8uQWO'#EoO!9oQ`O'#EpOOQ?Mp'#Jy'#JyO!9vQ?MxO'#KYO9kQ?MxO,5=^O`Q^O,5>nOOQU'#Ja'#JaOOQU,5>o,5>oOOQU-E<V-E<VO!;xQ?NdO,5:_O!9jQ`O,5:]O!>fQ?NdO,5:jO%[Q^O,5:jO!APQ?NdO,5:lOOQO,5@s,5@sO!ApQ7[O,5=YO!BOQ?MxO'#JbO9UQWO'#JbO!BaQ?MxO,59YO!BlQ`O,59YO!BtQ7[O,59YO:YQ7[O,59YO!CPQWO,5;WO!CXQWO'#H[O!CmQWO'#K]O%[Q^O,5;{O!9jQ`O,5;}O!CuQWO,5=uO!CzQWO,5=uO!DPQWO,5=uO9kQ?MxO,5=uO;zQWO,5=eOOQO'#Cu'#CuO!D_Q`O,5=bO!DgQ7[O,5=cO!DrQWO,5=eO!DwQpO,5=hO!EPQWO'#KXO>wQWO'#HRO9aQWO'#HTO!EUQWO'#HTO:YQ7[O'#HVO!EZQWO'#HVOOQU,5=k,5=kO!E`QWO'#HWO!EqQWO'#CnO!EvQWO,59OO!FQQWO,59OO!HVQ^O,59OOOQU,59O,59OO!HgQ?MxO,59OO%[Q^O,59OO!JrQ^O'#H_OOQU'#H`'#H`OOQU'#Ha'#HaO`Q^O,5=wO!KYQWO,5=wO`Q^O,5=}O`Q^O,5>PO!K_QWO,5>RO`Q^O,5>TO!KdQWO,5>WO!KiQ^O,5>^OOQU,5>d,5>dO%[Q^O,5>dO9kQ?MxO,5>fOOQU,5>h,5>hO# sQWO,5>hOOQU,5>j,5>jO# sQWO,5>jOOQU,5>l,5>lO#!aQ`O'#D[O%[Q^O'#JnO#!kQ`O'#JnO##YQ`O'#DjO##kQ`O'#DjO#%|Q^O'#DjO#&TQWO'#JmO#&]QWO,5:TO#&bQWO'#EqO#&pQWO'#J|O#&xQWO,5;[O#&}Q`O'#DjO#'[Q`O'#EVOOQ?Mr,5:o,5:oO%[Q^O,5:oO#'cQWO,5:oO>wQWO,5;VO!BlQ`O,5;VO!BtQ7[O,5;VO:YQ7[O,5;VO#'kQWO,5@YO#'pQ(CWO,5:sOOQO-E<a-E<aO#(vQ?NQO,5;OOCuQ`O,5:rO#)QQ`O,5:rOCuQ`O,5;OO!BaQ?MxO,5:rOOQ?Mp'#Eg'#EgOOQO,5;O,5;OO%[Q^O,5;OO#)_Q?MxO,5;OO#)jQ?MxO,5;OO!BlQ`O,5:rOOQO,5;U,5;UO#)xQ?MxO,5;OPOOO'#IW'#IWP#*^O#@ItO,58{POOO,58{,58{OOOO-E<W-E<WOOQ?Mr1G.o1G.oOOOO-E<X-E<XO#*iQpO,59zOOOO-E<Z-E<ZOOQ?Mr1G/d1G/dO#*nQrO,5>xO+}Q^O,5>xOOQO,5?O,5?OO#*xQ^O'#I^OOQO-E<[-E<[O#+VQWO,5@WO#+_QrO,5@WO#+fQWO,5@fOOQ?Mr1G/j1G/jO%[Q^O,5@gO#+nQWO'#IdOOQO-E<b-E<bO#+fQWO,5@fOOQ?Mp1G0u1G0uOOQ?Mv1G/u1G/uOOQ?Mv1G0Y1G0YO%[Q^O,5@dO#,SQ?MxO,5@dO#,eQ?MxO,5@dO#,lQWO,5@cO9ZQWO,5@cO#,tQWO,5@cO#-SQWO'#IgO#,lQWO,5@cOOQ?Mp1G0t1G0tO!*VQ`O,5:uO!*bQ`O,5:uOOQO,5:w,5:wO#-tQWO,5:wO#-|Q7[O1G2tO9aQWO1G2tOOQ?Mr1G0r1G0rO#.[Q?NdO1G0rO#/aQ?NbO,5;SOOQ?Mr'#GS'#GSO#/}Q?NdO'#JeO!$hQ^O1G0rO#2VQ7[O'#JoO#2aQWO,5:`O#2fQrO'#JpO%[Q^O'#JpO#2pQWO,5:eOOQ?Mr'#D['#D[OOQ?Mr1G0{1G0{O%[Q^O1G0{OOQ?Mr1G1e1G1eO#2uQWO1G0{O#5^Q?NdO1G0|O#5eQ?NdO1G0|O#8OQ?NdO1G0|O#8VQ?NdO1G0|O#:aQ?NdO1G0|O#:wQ?NdO1G0|O#=qQ?NdO1G0|O#=xQ?NdO1G0|O#@]Q?NdO1G0|O#@jQ?NdO1G0|O#BhQ?NdO1G0|O#EhQ07bO'#ChO#GfQ07bO1G1_O#GmQ07bO'#JkO!,sQWO1G1eO#G}Q?NdO,5?UOOQ?Mp-E<h-E<hO#HqQ?NdO1G0|OOQ?Mr1G0|1G0|O#J|Q?NdO1G1bO#KpQ&jO,5<UO#KxQ&jO,5<VO#LQQ&jO'#FmO#LiQWO'#FlOOQO'#KQ'#KQOOQO'#Ih'#IhO#LnQ&jO1G1lOOQ?Mr1G1l1G1lOOOS1G1w1G1wO#MPQ07bO'#JjO#MZQWO,5<`O!*mQ^O,5<`OOOS-E<g-E<gOOQ?Mr1G1j1G1jO#M`Q`O'#KPOOQ?Mr,5<b,5<bO#MhQ`O,5<bOOQ?Mr,59e,59eO!&kQ7[O'#DPOOOO'#I['#I[O#MmO!0LbO,59iOOQ?Mr,59i,59iO%[Q^O1G1}O!7yQWO'#IlO#MxQ7[O,5<vOOQ?Mr,5<s,5<sO!(ZQ7[O'#IoO#NhQ7[O,5=SO!(ZQ7[O'#IqO$ ZQ7[O,5=UO!&kQ7[O,5=WOOQO1G2P1G2PO$ eQpO'#CqO$ xQ$ISO'#EoO$!wQ`O'#G^O$#eQpO,5<oO$#lQWO'#KTO9ZQWO'#KTO$#zQWO,5<qO!(ZQ7[O,5<pO$$PQWO'#GVO$$bQWO,5<pO$$gQpO'#GSO$$tQpO'#KUO$%OQWO'#KUO!&kQ7[O'#KUO$%TQWO,5<tO$%YQ`O'#G_O!6SQ`O'#G_O$%kQWO'#GaO$%pQWO'#GcO!3mQWO'#GfO$%uQ?MxO'#InO$&QQ`O,5<xOOQ?Mv,5<x,5<xO$&XQ`O'#G_O$&gQ`O'#G`O$&oQ`O'#G`O$&tQ7[O,5=SO$'UQ7[O,5=UOOQ?Mr,5=X,5=XO!(ZQ7[O,5@OO!(ZQ7[O,5@OO$'fQWO'#IsO$'qQWO,5?}O$'yQWO,59`O$(jQ7[O,59qOOQ?Mr,59q,59qO$)]Q7[O,5<gO$*OQ7[O,5<iO@iQWO,5<kOOQ?Mr,5<l,5<lO$*YQWO,5<rO$*_Q7[O,5<wO$*oQWO'#JwO!$hQ^O1G2OO$*tQWO1G2OO9ZQWO'#JzO9ZQWO'#EqO%[Q^O'#EqO9ZQWO'#IuO$*yQ?MxO,5@tOOQU1G2x1G2xOOQU1G4Y1G4YOOQ?Mr1G/y1G/yO!,pQWO1G/yOOQ?Mr1G/w1G/wO$-OQ?NdO1G0UOOQU1G2t1G2tO!&kQ7[O1G2tO%[Q^O1G2tO#.PQWO1G2tO$/SQ7[O'#EhOOQ?Mp,5?|,5?|O$/^Q?MxO,5?|OOQU1G.t1G.tO!BaQ?MxO1G.tO!BlQ`O1G.tO!BtQ7[O1G.tO$/oQWO1G0rO$/tQWO'#ChO$0PQWO'#K^O$0XQWO,5=vO$0^QWO'#K^O$0cQWO'#K^O$0qQWO'#I{O$1PQWO,5@wO$1XQrO1G1gOOQ?Mr1G1i1G1iO9aQWO1G3aO@iQWO1G3aO$1`QWO1G3aO$1eQWO1G3aOOQU1G3a1G3aO!DrQWO1G3PO!&kQ7[O1G2|O$1jQWO1G2|OOQU1G2}1G2}O!&kQ7[O1G2}O$1oQWO1G2}O$1wQ`O'#G{OOQU1G3P1G3PO!6SQ`O'#IwO!DwQpO1G3SOOQU1G3S1G3SOOQU,5=m,5=mO$2PQ7[O,5=oO9aQWO,5=oO$%pQWO,5=qO9UQWO,5=qO!BlQ`O,5=qO!BtQ7[O,5=qO:YQ7[O,5=qO$2_QWO'#K[O$2jQWO,5=rOOQU1G.j1G.jO$2oQ?MxO1G.jO@iQWO1G.jO$2zQWO1G.jO9kQ?MxO1G.jO$5PQrO,5@yO$5aQWO,5@yO9ZQWO,5@yO$5lQ^O,5=yO$5sQWO,5=yOOQU1G3c1G3cO`Q^O1G3cOOQU1G3i1G3iOOQU1G3k1G3kO>rQWO1G3mO$5xQ^O1G3oO$9|Q^O'#HnOOQU1G3r1G3rO$:ZQWO'#HtO>wQWO'#HvOOQU1G3x1G3xO$:cQ^O1G3xO9kQ?MxO1G4OOOQU1G4Q1G4QOOQ?Mp'#GZ'#GZO9kQ?MxO1G4SO9kQ?MxO1G4UO$>jQWO,5@YO!*mQ^O,5;]O9ZQWO,5;]O>wQWO,5:UO!*mQ^O,5:UO!BlQ`O,5:UO$>oQ07bO,5:UOOQO,5;],5;]O$>yQ`O'#I_O$?aQWO,5@XOOQ?Mr1G/o1G/oO$?iQ`O'#IeO$?sQWO,5@hOOQ?Mp1G0v1G0vO##kQ`O,5:UOOQO'#Ib'#IbO$?{Q`O,5:qOOQ?Mv,5:q,5:qO#'fQWO1G0ZOOQ?Mr1G0Z1G0ZO%[Q^O1G0ZOOQ?Mr1G0q1G0qO>wQWO1G0qO!BlQ`O1G0qO!BtQ7[O1G0qOOQ?Mp1G5t1G5tO!BaQ?MxO1G0^OOQO1G0j1G0jO%[Q^O1G0jO$@SQ?MxO1G0jO$@_Q?MxO1G0jO!BlQ`O1G0^OCuQ`O1G0^O$@mQ?MxO1G0jOOQO1G0^1G0^O$ARQ?NdO1G0jPOOO-E<U-E<UPOOO1G.g1G.gOOOO1G/f1G/fO$A]QpO,5<fO$AeQrO1G4dOOQO1G4j1G4jO%[Q^O,5>xO$AoQWO1G5rO$AwQWO1G6QO$BPQrO1G6RO9ZQWO,5?OO$BZQ?NdO1G6OO%[Q^O1G6OO$BkQ?MxO1G6OO$B|QWO1G5}O$B|QWO1G5}O9ZQWO1G5}O$CUQWO,5?RO9ZQWO,5?ROOQO,5?R,5?RO$CjQWO,5?RO$*oQWO,5?ROOQO-E<e-E<eOOQO1G0a1G0aOOQO1G0c1G0cO!,sQWO1G0cOOQU7+(`7+(`O!&kQ7[O7+(`O%[Q^O7+(`O$CxQWO7+(`O$DTQ7[O7+(`O$DcQ?NdO,5=SO$FnQ?NdO,5=UO$HyQ?NdO,5=SO$K[Q?NdO,5=UO$MmQ?NdO,59qO% uQ?NdO,5<gO%$QQ?NdO,5<iO%&]Q?NdO,5<wOOQ?Mr7+&^7+&^O%(nQ?NdO7+&^O%)bQ7[O'#I`O%)lQWO,5@ZOOQ?Mr1G/z1G/zO%)tQ^O'#IaO%*RQWO,5@[O%*ZQrO,5@[OOQ?Mr1G0P1G0PO%*eQWO7+&gOOQ?Mr7+&g7+&gO%*jQ07bO,5:fO%[Q^O7+&yO%*tQ07bO,5:_O%+RQ07bO,5:jO%+]Q07bO,5:lOOQ?Mr7+'P7+'POOQO1G1p1G1pOOQO1G1q1G1qO%+gQtO,5<XO!*mQ^O,5<WOOQO-E<f-E<fOOQ?Mr7+'W7+'WOOOS7+'c7+'cOOOS1G1z1G1zO%+rQWO1G1zOOQ?Mr1G1|1G1|O%+wQpO,59kOOOO-E<Y-E<YOOQ?Mr1G/T1G/TO%,OQ?NdO7+'iOOQ?Mr,5?W,5?WO%,rQpO,5?WOOQ?Mr1G2b1G2bP!&kQ7[O'#IlPOQ?Mr-E<j-E<jO%-bQ7[O,5?ZOOQ?Mr-E<m-E<mO%.TQ7[O,5?]OOQ?Mr-E<o-E<oO%._QpO1G2rO%.fQpO'#CqO%.|Q7[O'#JzO%/TQ^O'#EqOOQ?Mr1G2Z1G2ZO%/_QWO'#IkO%/sQWO,5@oO%/sQWO,5@oO%/{QWO,5@oO%0WQWO,5@oOOQO1G2]1G2]O%0fQ7[O1G2[O!(ZQ7[O1G2[O%0vQ$ISO'#ImO%1TQWO,5@pO!&kQ7[O,5@pO%1]QpO,5@pOOQ?Mr1G2`1G2`OOQ?Mp,5<y,5<yOOQ?Mp,5<z,5<zO$*oQWO,5<zOCfQWO,5<zO!BlQ`O,5<yOOQO'#Gb'#GbO%1gQWO,5<{OOQ?Mp,5<},5<}O$*oQWO,5=QOOQO,5?Y,5?YOOQO-E<l-E<lOOQ?Mv1G2d1G2dO!6SQ`O,5<yO%1oQWO,5<zO$%kQWO,5<{O!6SQ`O,5<zO!(ZQ7[O'#IoO%2cQ7[O1G2nO!(ZQ7[O'#IqO%3UQ7[O1G2pO%3`Q7[O1G5jO%3jQ7[O1G5jOOQO,5?_,5?_OOQO-E<q-E<qOOQO1G.z1G.zO!9jQ`O,59sO%[Q^O,59sO%3wQWO1G2VO!(ZQ7[O1G2^O%3|Q?NdO7+'jOOQ?Mr7+'j7+'jO!$hQ^O7+'jO%4pQWO,5;]OOQ?Mp,5?a,5?aOOQ?Mp-E<s-E<sOOQ?Mr7+%e7+%eO%4uQpO'#KVO#'fQWO7+(`O%5PQrO7+(`O$C{QWO7+(`O%5WQ?NbO'#ChO%5kQ?NbO,5=OO%6]QWO,5=OOOQ?Mp1G5h1G5hOOQU7+$`7+$`O!BaQ?MxO7+$`O!BlQ`O7+$`O!$hQ^O7+&^O%6bQWO'#IzO%6yQWO,5@xOOQO1G3b1G3bO9aQWO,5@xO%6yQWO,5@xO%7RQWO,5@xOOQO,5?g,5?gOOQO-E<y-E<yOOQ?Mr7+'R7+'RO%7WQWO7+({O9kQ?MxO7+({O9aQWO7+({O@iQWO7+({OOQU7+(k7+(kO%7]Q?NbO7+(hO!&kQ7[O7+(hO%7gQpO7+(iOOQU7+(i7+(iO!&kQ7[O7+(iO%7nQWO'#KZO%7yQWO,5=gOOQO,5?c,5?cOOQO-E<u-E<uOOQU7+(n7+(nO%9YQ`O'#HUOOQU1G3Z1G3ZO!&kQ7[O1G3ZO%[Q^O1G3ZO%9aQWO1G3ZO%9lQ7[O1G3ZO9kQ?MxO1G3]O$%pQWO1G3]O9UQWO1G3]O!BlQ`O1G3]O!BtQ7[O1G3]O%9zQWO'#IyO%:`QWO,5@vO%:hQ`O,5@vOOQ?Mp1G3^1G3^OOQU7+$U7+$UO@iQWO7+$UO9kQ?MxO7+$UO%:sQWO7+$UO%[Q^O1G6eO%[Q^O1G6fO%:xQ?MxO1G6eO%;SQ^O1G3eO%;ZQWO1G3eO%;`Q^O1G3eOOQU7+(}7+(}O9kQ?MxO7+)XO`Q^O7+)ZOOQU'#Ka'#KaOOQU'#I|'#I|O%;gQ^O,5>YOOQU,5>Y,5>YO%[Q^O'#HoO%;tQWO'#HqOOQU,5>`,5>`O9ZQWO,5>`OOQU,5>b,5>bOOQU7+)d7+)dOOQU7+)j7+)jOOQU7+)n7+)nOOQU7+)p7+)pO%;yQ`O1G5tO%<_Q07bO1G0wO%<iQWO1G0wOOQO1G/p1G/pO%<tQ07bO1G/pO>wQWO1G/pO!*mQ^O'#DjOOQO,5>y,5>yOOQO-E<]-E<]OOQO,5?P,5?POOQO-E<c-E<cO!BlQ`O1G/pOOQO-E<`-E<`OOQ?Mv1G0]1G0]OOQ?Mr7+%u7+%uO#'fQWO7+%uOOQ?Mr7+&]7+&]O>wQWO7+&]O!BlQ`O7+&]OOQO7+%x7+%xO$ARQ?NdO7+&UOOQO7+&U7+&UO%[Q^O7+&UO%=OQ?MxO7+&UO!BaQ?MxO7+%xO!BlQ`O7+%xO%=ZQ?MxO7+&UO%=iQ?NdO7++jO%[Q^O7++jO%=yQWO7++iO%=yQWO7++iOOQO1G4m1G4mO9ZQWO1G4mO%>RQWO1G4mOOQO7+%}7+%}O#'fQWO<<KzO%5PQrO<<KzO%>aQWO<<KzOOQU<<Kz<<KzO!&kQ7[O<<KzO%[Q^O<<KzO%>iQWO<<KzO%>tQ?NdO,5?ZO%APQ?NdO,5?]O%C[Q?NdO1G2[O%EmQ?NdO1G2nO%GxQ?NdO1G2pO%JTQ7[O,5>zOOQO-E<^-E<^O%J_QrO,5>{O%[Q^O,5>{OOQO-E<_-E<_O%JiQWO1G5vOOQ?Mr<<JR<<JRO%JqQ07bO1G0rO%L{Q07bO1G0|O%MSQ07bO1G0|O& WQ07bO1G0|O& _Q07bO1G0|O&#SQ07bO1G0|O&#jQ07bO1G0|O&%}Q07bO1G0|O&&UQ07bO1G0|O&(SQ07bO1G0|O&(aQ07bO1G0|O&*_Q07bO1G0|O&*rQ?NdO<<JeO&+wQ07bO1G0|O&-mQ07bO'#JeO&/pQ07bO1G1bO&/}Q07bO1G0UO!*mQ^O'#FoOOQO'#KR'#KROOQO1G1s1G1sO&0XQWO1G1rO&0^Q07bO,5?UOOOS7+'f7+'fOOOO1G/V1G/VOOQ?Mr1G4r1G4rO!(ZQ7[O7+(^O&2nQrO'#ChO&2xQWO,5?VO9ZQWO,5?VOOQO-E<i-E<iO&3WQWO1G6ZO&3WQWO1G6ZO&3`QWO1G6ZO&3kQ7[O7+'vO&3{QpO,5?XO&4VQWO,5?XO!&kQ7[O,5?XOOQO-E<k-E<kO&4[QpO1G6[O&4fQWO1G6[OOQ?Mp1G2f1G2fO$*oQWO1G2fOOQ?Mp1G2e1G2eO&4nQWO1G2gO!&kQ7[O1G2gOOQ?Mp1G2l1G2lO!BlQ`O1G2eOCfQWO1G2fO&4sQWO1G2gO&4{QWO1G2fO&5oQ7[O,5?ZOOQ?Mr-E<n-E<nO&6bQ7[O,5?]OOQ?Mr-E<p-E<pO!(ZQ7[O7++UOOQ?Mr1G/_1G/_O&6lQWO1G/_OOQ?Mr7+'q7+'qO&6qQ7[O7+'xO&7RQ?NdO<<KUOOQ?Mr<<KU<<KUO&7uQWO1G0wO!&kQ7[O'#ItO&7zQWO,5@qO!&kQ7[O1G2jOOQU<<Gz<<GzO!BaQ?MxO<<GzO&8SQ?NdO<<IxOOQ?Mr<<Ix<<IxOOQO,5?f,5?fO&8vQWO,5?fO&8{QWO,5?fOOQO-E<x-E<xO&9ZQWO1G6dO&9ZQWO1G6dO9aQWO1G6dO@iQWO<<LgOOQU<<Lg<<LgO&9cQWO<<LgO9kQ?MxO<<LgOOQU<<LS<<LSO%7]Q?NbO<<LSOOQU<<LT<<LTO%7gQpO<<LTO&9hQ`O'#IvO&9sQWO,5@uO!*mQ^O,5@uOOQU1G3R1G3RO%/TQ^O'#JnOOQO'#Ix'#IxO9kQ?MxO'#IxO&9{Q`O,5=pOOQU,5=p,5=pO&:SQ`O'#EdO&:hQWO7+(uO&:mQWO7+(uOOQU7+(u7+(uO!&kQ7[O7+(uO%[Q^O7+(uO&:uQWO7+(uOOQU7+(w7+(wO9kQ?MxO7+(wO$%pQWO7+(wO9UQWO7+(wO!BlQ`O7+(wO&;QQWO,5?eOOQO-E<w-E<wOOQO'#HX'#HXO&;]QWO1G6bO9kQ?MxO<<GpOOQU<<Gp<<GpO@iQWO<<GpO&;eQWO7+,PO&;jQWO7+,QO%[Q^O7+,PO%[Q^O7+,QOOQU7+)P7+)PO&;oQWO7+)PO&;tQ^O7+)PO&;{QWO7+)POOQU<<Ls<<LsOOQU<<Lu<<LuOOQU-E<z-E<zOOQU1G3t1G3tO&<QQWO,5>ZOOQU,5>],5>]O&<VQWO1G3zO9ZQWO7+&cO!*mQ^O7+&cOOQO7+%[7+%[O&<[Q07bO1G6RO>wQWO7+%[OOQ?Mr<<Ia<<IaOOQ?Mr<<Iw<<IwO>wQWO<<IwOOQO<<Ip<<IpO$ARQ?NdO<<IpO%[Q^O<<IpOOQO<<Id<<IdO!BaQ?MxO<<IdO&<fQ?MxO<<IpO&<qQ?NdO<= UO&=RQWO<= TOOQO7+*X7+*XO9ZQWO7+*XOOQUANAfANAfO&=ZQWOANAfO!&kQ7[OANAfO#'fQWOANAfO%5PQrOANAfO%[Q^OANAfO&=cQ?NdO7+'vO&?tQ?NdO,5?ZO&BPQ?NdO,5?]O&D[Q?NdO7+'xO&FmQrO1G4gO&FwQ07bO7+&^O&H{Q07bO,5=SO&KSQ07bO,5=UO&KdQ07bO,5=SO&KtQ07bO,5=UO&LUQ07bO,59qO&NXQ07bO,5<gO'![Q07bO,5<iO'$_Q07bO,5<wO'&TQ07bO7+'iO'&bQ07bO7+'jO'&oQWO,5<ZOOQO7+'^7+'^O'&tQ7[O<<KxOOQO1G4q1G4qO'&{QWO1G4qO''WQWO1G4qO''fQWO7++uO''fQWO7++uO!&kQ7[O1G4sO''nQpO1G4sO''xQWO7++vOOQ?Mp7+(Q7+(QO$*oQWO7+(RO'(QQpO7+(ROOQ?Mp7+(P7+(PO$*oQWO7+(QO'(XQWO7+(RO!&kQ7[O7+(ROCfQWO7+(QO'(^Q7[O<<NpOOQ?Mr7+$y7+$yO'(hQpO,5?`OOQO-E<r-E<rO'(rQ?NbO7+(UOOQUAN=fAN=fO9aQWO1G5QOOQO1G5Q1G5QO')SQWO1G5QO')XQWO7+,OO')XQWO7+,OO9kQ?MxOANBRO@iQWOANBROOQUANBRANBROOQUANAnANAnOOQUANAoANAoO')aQWO,5?bOOQO-E<t-E<tO')lQ07bO1G6aOOQO,5?d,5?dOOQO-E<v-E<vOOQU1G3[1G3[O%/TQ^O,5<{OOQU<<La<<LaO!&kQ7[O<<LaO&:hQWO<<LaO')vQWO<<LaO%[Q^O<<LaOOQU<<Lc<<LcO9kQ?MxO<<LcO$%pQWO<<LcO9UQWO<<LcO'*OQ`O1G5PO'*ZQWO7++|OOQUAN=[AN=[O9kQ?MxOAN=[OOQU<= k<= kOOQU<= l<= lO'*cQWO<= kO'*hQWO<= lOOQU<<Lk<<LkO'*mQWO<<LkO'*rQ^O<<LkOOQU1G3u1G3uO>wQWO7+)fO'*yQWO<<I}O'+UQ07bO<<I}OOQO<<Hv<<HvOOQ?MrAN?cAN?cOOQOAN?[AN?[O$ARQ?NdOAN?[OOQOAN?OAN?OO%[Q^OAN?[OOQO<<Ms<<MsOOQUG27QG27QO!&kQ7[OG27QO#'fQWOG27QO'+`QWOG27QO%5PQrOG27QO'+hQ07bO<<JeO'+uQ07bO1G2[O'-kQ07bO,5?ZO'/nQ07bO,5?]O'1qQ07bO1G2nO'3tQ07bO1G2pO'5wQ07bO<<KUO'6UQ07bO<<IxOOQO1G1u1G1uO!(ZQ7[OANAdOOQO7+*]7+*]O'6cQWO7+*]O'6nQWO<= aO'6vQpO7+*_OOQ?Mp<<Km<<KmO$*oQWO<<KmOOQ?Mp<<Kl<<KlO'7QQpO<<KmO$*oQWO<<KlOOQO7+*l7+*lO9aQWO7+*lO'7XQWO<= jOOQUG27mG27mO9kQ?MxOG27mO!*mQ^O1G4|O'7aQWO7++{O&:hQWOANA{OOQUANA{ANA{O!&kQ7[OANA{O'7iQWOANA{OOQUANA}ANA}O9kQ?MxOANA}O$%pQWOANA}OOQO'#HY'#HYOOQO7+*k7+*kOOQUG22vG22vOOQUANEVANEVOOQUANEWANEWOOQUANBVANBVO'7qQWOANBVOOQU<<MQ<<MQO!*mQ^OAN?iOOQOG24vG24vO$ARQ?NdOG24vO#'fQWOLD,lOOQULD,lLD,lO!&kQ7[OLD,lO'7vQWOLD,lO'8OQ07bO7+'vO'9tQ07bO,5?ZO';wQ07bO,5?]O'=zQ07bO7+'xO'?pQ7[OG27OOOQO<<Mw<<MwOOQ?MpANAXANAXO$*oQWOANAXOOQ?MpANAWANAWOOQO<<NW<<NWOOQULD-XLD-XO'@QQ07bO7+*hOOQUG27gG27gO&:hQWOG27gO!&kQ7[OG27gOOQUG27iG27iO9kQ?MxOG27iOOQUG27qG27qO'@[Q07bOG25TOOQOLD*bLD*bOOQU!$(!W!$(!WO#'fQWO!$(!WO!&kQ7[O!$(!WO'@fQ?NdOG27OOOQ?MpG26sG26sOOQULD-RLD-RO&:hQWOLD-ROOQULD-TLD-TOOQU!)9Er!)9ErO#'fQWO!)9ErOOQU!$(!m!$(!mOOQU!.K;^!.K;^O'BwQ07bOG27OO!*mQ^O'#DzO1PQWO'#EXO'DmQrO'#JjO'DtQMnO'#DsO'D{Q^O'#EOO'ESQrO'#ChO'GjQrO'#ChO!*mQ^O'#EQO'GzQ^O,5;WO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O'#IjO'I}QWO,5<fO'JVQ7[O,5;bO'KpQ7[O,5;bO!*mQ^O,5;vO!&kQ7[O'#GhO'JVQ7[O'#GhO!&kQ7[O'#GjO'JVQ7[O'#GjO1SQWO'#DVO1SQWO'#DVO!&kQ7[O'#F{O'JVQ7[O'#F{O!&kQ7[O'#F}O'JVQ7[O'#F}O!&kQ7[O'#G]O'JVQ7[O'#G]O!*mQ^O,5:jO'KwQ`O'#D[O!*mQ^O,5@gO'GzQ^O1G0rO'LRQ07bO'#ChO!*mQ^O1G1}O!&kQ7[O'#IoO'JVQ7[O'#IoO!&kQ7[O'#IqO'JVQ7[O'#IqO'L]QpO'#CqO!&kQ7[O,5<pO'JVQ7[O,5<pO'GzQ^O1G2OO!*mQ^O7+&yO!&kQ7[O1G2[O'JVQ7[O1G2[O!&kQ7[O'#IoO'JVQ7[O'#IoO!&kQ7[O'#IqO'JVQ7[O'#IqO!&kQ7[O1G2^O'JVQ7[O1G2^O'GzQ^O7+'jO'GzQ^O7+&^O!&kQ7[OANAdO'JVQ7[OANAdO'LpQWO'#ElO'LuQWO'#ElO'L}QWO'#F[O'MSQWO'#EvO'MXQWO'#J{O'MdQWO'#JyO'MoQWO,5;WO'MtQ7[O,5<cO'M{QWO'#GUO'NQQWO'#GUO'NVQWO,5<dO'N_QWO,5;WO'NgQ07bO1G1_O'NnQWO,5<pO'NsQWO,5<pO'NxQWO,5<rO'N}QWO,5<rO( SQWO1G2OO( XQWO1G0rO( ^Q7[O<<KxO( eQ7[O<<KxO7hQ7[O'#FyO9UQWO'#FxOAdQWO'#EkO!*mQ^O,5;sO!3mQWO'#GUO!3mQWO'#GUO!3mQWO'#GWO!3mQWO'#GWO!(ZQ7[O7+(^O!(ZQ7[O7+(^O%._QpO1G2rO%._QpO1G2rO!&kQ7[O,5=WO!&kQ7[O,5=W\",\n  stateData: \"(!i~O'uOS'vOSSOS'wRQ~OPYOQYORfOX!VO`qOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O#t!PO$U|O%c}O%e!QO%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO%t!UO&Q!WO&W!XO&Y!YO&[!ZO&^![O&a!]O&g!^O&m!_O&o!`O&q!aO&s!bO&u!cO'|SO(OTO(RUO(YVO(h[O(viO~OVtO~P`OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~O`!wOo!nO!P!oO!_!yO!`!vO!a!vO!|:lO#Q!pO#R!pO#S!xO#T!pO#U!pO#X!zO#Y!zO'}!lO(OTO(RUO(]!mO(h!sO~O'w!{O~OP[XZ[X`[Xn[X|[X}[X!P[X!Y[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X's[X(Y[X(j[X(q[X(r[X~O!d$}X~P(qO^!}O(O#PO(P!}O(Q#PO~O^#QO(Q#PO(R#PO(S#QO~Ot#SO!R#TO(Z#TO([#VO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|:pO(OTO(RUO(YVO(h[O(viO~O!X#ZO!Y#WO!V(`P!V(nP~P+}O!Z#cO~P`OPYOQYORfOc!jOd!iOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO(OTO(RUO(YVO(h[O(viO~Ol#mO!X#iO!|]O#f#lO#g#iO'|:qO!k(kP~P.iO!l#oO'|#nO~O!x#sO!|]O%c#tO~O#h#uO~O!d#vO#h#uO~OP$^OZ$eOn$RO|#zO}#{O!P#|O!Y$bO!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O`(^X's(^X'q(^X!k(^X!V(^X![(^X%d(^X!d(^X~P1qO#]$fO$P$fOP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X![(_X%d(_X~O`(_X!j(_X's(_X'q(_X!V(_X!k(_Xr(_X!d(_X~P4XO#]$fO~O$Z$hO$]$gO$d$mO~ORfO![$nO$g$oO$i$qO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz%[O!P$|O![$}O!f%aO!l$yO#g%bO$U%_O$p%]O$r%^O$u%`O'|$sO(OTO(RUO(Y$vO(q%OO(r%QOf(VP~O!l%cO~O!P%fO![%gO'|%eO~O!d%kO~O`%lO's%lO~O|%pO~P%[O'}!lO~P%[O%i%tO~P%[Og%WO!l%cO'|%eO'}!lO~Od%{O!l%cO'|%eO~O#s$TO~O|&QO![%}O!l&PO%e&TO'|%eO'}!lO(OTO(RUO_)PP~O!x#sO~O%n&VO!P({X![({X'|({X~O'|&WO~O!u&]O#t!PO%e!QO%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO~Oc&bOd&aO!x&_O%c&`O%v&^O~P<POc&eOdyO![&dO!u&]O!xxO!|]O#t!PO%c}O%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO%t!UO~Oa&hO#]&kO%e&fO'}!lO~P=UO!l&lO!u&pO~O!l#oO~O![XO~O`%lO'r&xO's%lO~O`%lO'r&{O's%lO~O`%lO'r&}O's%lO~O'q[X!V[Xr[X!k[X&U[X![[X%d[X!d[X~P(qO!_'[O!`'TO!a'TO'}!lO(OTO(RUO~Oo'RO!P'QO!X'UO(]'PO!Z(aP!Z(pP~P@]Oj'_O![']O'|%eO~Od'dO!l%cO'|%eO~O|&QO!l&PO~Oo!nO!P!oO!|:lO#Q!pO#R!pO#T!pO#U!pO'}!lO(OTO(RUO(]!mO(h!sO~O!_'jO!`'iO!a'iO#S!pO#X'kO#Y'kO~PAwO`%lOg%WO!d#vO!l%cO's%lO(j'mO~O!p'qO#]'oO~PCVOo!nO!P!oO(OTO(RUO(]!mO(h!sO~O![XOo(fX!P(fX!_(fX!`(fX!a(fX!|(fX#Q(fX#R(fX#S(fX#T(fX#U(fX#X(fX#Y(fX'}(fX(O(fX(R(fX(](fX(h(fX~O!`'iO!a'iO'}!lO~PCuO'x'uO'y'uO'z'wO~O^!}O(O'yO(P!}O(Q'yO~O^#QO(Q'yO(R'yO(S#QO~Ot#SO!R#TO(Z#TO(['}O~O!X(PO!V'QX!V'WX!Y'QX!Y'WX~P+}O!Y(RO!V(`X~OP$^OZ$eOn$RO|#zO}#{O!P#|O!Y(RO!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O!V(`X~PGiO!V(WO~O!V(mX!Y(mX!d(mX!k(mX(j(mX~O#](mX#h#aX!Z(mX~PIoO#](XO!V(oX!Y(oX~O!Y(YO!V(nX~O!V(]O~O#]$fO~PIoO!Z(^O~P`O|#zO}#{O!P#|O!j#xO!l#yO(YVOP!naZ!nan!na!Y!na!i!na!p!na#k!na#l!na#m!na#n!na#o!na#p!na#q!na#r!na#s!na#u!na#w!na#y!na#z!na(j!na(q!na(r!na~O`!na's!na'q!na!V!na!k!nar!na![!na%d!na!d!na~PKVO!k(_O~O!d#vO#](`O(j'mO!Y(lX`(lX's(lX~O!k(lX~PMuO!P%fO![%gO!|]O#f(eO#g(dO'|%eO~O!Y(fO!k(kX~O!k(hO~O!P%fO![%gO#g(dO'|%eO~OP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!j(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X~O!d#vO!k(_X~P! cO|(iO}(jO!j#xO!l#yO!|!{a!P!{a~O!x!{a%c!{a![!{a#f!{a#g!{a'|!{a~P!#gO!x(nO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~O#h(tO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz%[O!P$|O![$}O!f%aO!l$yO#g%bO$U%_O$p%]O$r%^O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~Of(cP~P!(ZO!X(xO!k(dP~P%[O(](zO(h[O~O!P(|O!l#yO(](zO(h[O~OP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![!eO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO'|)[O(OTO(RUO(YVO(h[O(v<dO~O})_O!l#yO~O!Y$bO`$na's$na'q$na!k$na!V$na![$na%d$na!d$na~O#t)cO~P!&kO|)fO!d)eO![$[X$X$[X$Z$[X$]$[X$d$[X~O!d)eO![(sX$X(sX$Z(sX$](sX$d(sX~O|)fO~P!.VO|)fO![(sX$X(sX$Z(sX$](sX$d(sX~O![)hO$X)lO$Z)gO$])gO$d)mO~O!X)pO~P!*mO$Z$hO$]$gO$d)tO~Oj$vX|$vX!P$vX!j$vX(q$vX(r$vX~OfiXf$vXjiX!YiX#]iX~P!/{Oo)vO~Ot)wO(Z)xO([)zO~Oj*TO|)|O!P)}O(q%OO(r%QO~Of){O~P!1UOf*UO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P*WO![*XO!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O(OTO(RUO(Y$vO(q%OO(r%QO~O!X*[O'|*VO!k(wP~P!1sO#h*^O~O!l*_O~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O'|*aO(OTO(RUO(Y$vO(q%OO(r%QO~O!X*dO!V(xP~P!3rOn*pO!P*hO!_*nO!`*gO!a*gO!l*_O#X*oO%Z*jO'}!lO(]!mO~O!Z*mO~P!5gO!j#xOj(XX|(XX!P(XX(q(XX(r(XX!Y(XX#](XX~Of(XX#}(XX~P!6`Oj*uO#]*tOf(WX!Y(WX~O!Y*vOf(VX~O'|&WOf(VP~O!l*}O~O'|(rO~Ol+RO!P%fO!X#iO![%gO!|]O#f#lO#g#iO'|%eO!k(kP~O!d#vO#h+SO~O!P%fO!X+UO!Y(YO![%gO'|%eO!V(nP~Oo'XO!P+WO!X+VO(OTO(RUO(](zO~O!Z(pP~P!9ZO!Y+XO`(|X's(|X~OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O`!ga!Y!ga's!ga'q!ga!V!ga!k!gar!ga![!ga%d!ga!d!ga~P!:RO|#zO}#{O!P#|O!j#xO!l#yO(YVOP!raZ!ran!ra!Y!ra!i!ra!p!ra#k!ra#l!ra#m!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#u!ra#w!ra#y!ra#z!ra(j!ra(q!ra(r!ra~O`!ra's!ra'q!ra!V!ra!k!rar!ra![!ra%d!ra!d!ra~P!<lO|#zO}#{O!P#|O!j#xO!l#yO(YVOP!taZ!tan!ta!Y!ta!i!ta!p!ta#k!ta#l!ta#m!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#u!ta#w!ta#y!ta#z!ta(j!ta(q!ta(r!ta~O`!ta's!ta'q!ta!V!ta!k!tar!ta![!ta%d!ta!d!ta~P!?VOg%WOj+cO![']O%d+bO~O!d+eO`(UX![(UX's(UX!Y(UX~O`%lO![XO's%lO~Og%WO!l%cO~Og%WO!l%cO'|%eO~O!d#vO#h(tO~Oa+pO%e+qO'|+mO(OTO(RUO!Z)QP~O!Y+rO_)PX~OZ+vO~O_+wO~O![%}O'|%eO'}!lO_)PP~Og%WO#]+|O~Og%WOj,PO![$}O~O![,RO~O|,TO![XO~O%i%tO~O!x,YO~Od,_O~Oa,`O'|#nO(OTO(RUO!Z)OP~Od%{O~O%e!QO'|&WO~P=UOZ,eO_,dO~OPYOQYORfOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO!fuO!lZO!oYO!pYO!qYO!svO!xxO!|]O%c}O(OTO(RUO(YVO(h[O(viO~O![!eO!u!gO$U!kO'|!dO~P!FYO_,dO`%lO's%lO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~O`,jO!uwO#t!OO%g!OO%h!OO%i!OO~P!HrO!l&lO~O&W,pO~O![,rO~O&i,tO&k,uOP&faQ&faR&faX&fa`&fac&fad&fal&fan&fao&fap&fav&fax&faz&fa!P&fa!T&fa!U&fa![&fa!f&fa!l&fa!o&fa!p&fa!q&fa!s&fa!u&fa!x&fa!|&fa#t&fa$U&fa%c&fa%e&fa%g&fa%h&fa%i&fa%l&fa%n&fa%q&fa%r&fa%t&fa&Q&fa&W&fa&Y&fa&[&fa&^&fa&a&fa&g&fa&m&fa&o&fa&q&fa&s&fa&u&fa'q&fa'|&fa(O&fa(R&fa(Y&fa(h&fa(v&fa!Z&fa&_&faa&fa&d&fa~O'|,zO~Og!bX!Y!OX!Z!OX!d!OX!d!bX!l!bX#]!OX~O!Y!bX!Z!bX~P# xO!d-PO#]-OOg(bX!Y#eX!Y(bX!Z#eX!Z(bX!d(bX!l(bX~Og%WO!d-RO!l%cO!Y!^X!Z!^X~Oo!nO!P!oO(OTO(RUO(]!mO~OP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![!eO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO(OTO(RUO(YVO(h[O(v<dO~O'|;fO~P##|O!Y-VO!Z(aX~O!Z-XO~O!d-PO#]-OO!Y#eX!Z#eX~O!Y-YO!Z(pX~O!Z-[O~O!`-]O!a-]O'}!lO~P##kO!Z-`O~P'_Oj-cO![']O~O!V-hO~Oo!{a!_!{a!`!{a!a!{a#Q!{a#R!{a#S!{a#T!{a#U!{a#X!{a#Y!{a'}!{a(O!{a(R!{a(]!{a(h!{a~P!#gO!p-mO#]-kO~PCVO!`-oO!a-oO'}!lO~PCuO`%lO#]-kO's%lO~O`%lO!d#vO#]-kO's%lO~O`%lO!d#vO!p-mO#]-kO's%lO(j'mO~O'x'uO'y'uO'z-tO~Or-uO~O!V'Qa!Y'Qa~P!:RO!X-yO!V'QX!Y'QX~P%[O!Y(RO!V(`a~O!V(`a~PGiO!Y(YO!V(na~O!P%fO!X-}O![%gO'|%eO!V'WX!Y'WX~O#].PO!Y(la!k(la`(la's(la~O!d#vO~P#,SO!Y(fO!k(ka~O!P%fO![%gO#g.TO'|%eO~Ol.YO!P%fO!X.VO![%gO!|]O#f.XO#g.VO'|%eO!Y'ZX!k'ZX~O}.^O!l#yO~Og%WOj.aO![']O%d.`O~O`#`i!Y#`i's#`i'q#`i!V#`i!k#`ir#`i![#`i%d#`i!d#`i~P!:ROj<pO|)|O!P)}O(q%OO(r%QO~O#h#[a`#[a#]#[a's#[a!Y#[a!k#[a![#[a!V#[a~P#/OO#h(XXP(XXZ(XX`(XXn(XX}(XX!i(XX!l(XX!p(XX#k(XX#l(XX#m(XX#n(XX#o(XX#p(XX#q(XX#r(XX#s(XX#u(XX#w(XX#y(XX#z(XX's(XX(Y(XX(j(XX!k(XX!V(XX'q(XXr(XX![(XX%d(XX!d(XX~P!6`O!Y.nOf(cX~P!1UOf.pO~O!Y.qO!k(dX~P!:RO!k.tO~O!V.vO~OP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O(YVOZ#ji`#jin#ji!Y#ji!i#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#k#ji~P#2zO#k$PO~P#2zOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO(YVOZ#ji`#ji!Y#ji!i#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~On#ji~P#5lOn$RO~P#5lOP$^On$RO|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO(YVO`#ji!Y#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~OZ#ji!i#ji#p#ji#q#ji#r#ji#s#ji~P#8^OZ$eO!i$TO#p$TO#q$TO#r$dO#s$TO~P#8^OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO(YVO(r$OO`#ji!Y#ji#y#ji#z#ji's#ji(j#ji(q#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#w$WO~P#;_O#w#ji~P#;_OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO(YVO`#ji!Y#ji#y#ji#z#ji's#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#w#ji(q#ji(r#ji~P#>PO#w$WO(q#}O(r$OO~P#>POP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO(YVO(q#}O(r$OO~O`#ji!Y#ji#z#ji's#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~P#@wOP[XZ[Xn[X|[X}[X!P[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X!Y[X!Z[X~O#}[X~P#CbOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O#z;OO(YVO(j$[O(q#}O(r$OO~O#}.xO~P#EoO#];TO$P;TO#}(_X!Z(_X~P! cO`'^a!Y'^a's'^a'q'^a!k'^a!V'^ar'^a!['^a%d'^a!d'^a~P!:ROP#jiZ#ji`#jin#ji}#ji!Y#ji!i#ji!j#ji!l#ji!p#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(Y#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~P#/OO`$Oi!Y$Oi's$Oi'q$Oi!V$Oi!k$Oir$Oi![$Oi%d$Oi!d$Oi~P!:RO$Z.}O$].}O~O$Z/OO$]/OO~O!d)eO#]/PO![$aX$X$aX$Z$aX$]$aX$d$aX~O!X/QO~O![)hO$X/SO$Z)gO$])gO$d/TO~O!Y;PO!Z(^X~P#EoO!Z/UO~O!d)eO$d(sX~O$d/WO~Ot)wO(Z)xO([/ZO~O!V/_O~P!&kO(q%OOj%[a|%[a!P%[a(r%[a!Y%[a#]%[a~Of%[a#}%[a~P#NPO(r%QOj%^a|%^a!P%^a(q%^a!Y%^a#]%^a~Of%^a#}%^a~P#NrO!YeX!deX!keX!k$vX(jeX~P!/{O!X/hO!Y(YO'|/gO!V(nP!V(xP~P!1sOn*pO!_*nO!`*gO!a*gO!l*_O#X*oO%Z*jO'}!lO~Oo'XO!P/iO!X+VO!Z*mO(OTO(RUO(];cO!Z(pP~P$!]O!k/jO~P#/OO!Y/kO!d#vO(j'mO!k(wX~O!k/pO~O!P%fO!X*[O![%gO'|%eO!k(wP~O#h/rO~O!V$vX!Y$vX!d$}X~P!/{O!Y/sO!V(xX~P#/OO!d/uO~O!V/wO~Og%WOn/{O!d#vO!l%cO(j'mO~O'|/}O~O!d+eO~O`%lO!Y0RO's%lO~O!Z0TO~P!5gO!`0UO!a0UO'}!lO(]!mO~O!P0WO(]!mO~O#X0XO~Of%[a!Y%[a#]%[a#}%[a~P!1UOf%^a!Y%^a#]%^a#}%^a~P!1UO'|&WOf'gX!Y'gX~O!Y*vOf(Va~Of0bO~O|0cO}0cO!P0dOjya(qya(rya!Yya#]ya~Ofya#}ya~P$(OO|)|O!P)}Oj$oa(q$oa(r$oa!Y$oa#]$oa~Of$oa#}$oa~P$(tO|)|O!P)}Oj$qa(q$qa(r$qa!Y$qa#]$qa~Of$qa#}$qa~P$)gO#h0fO~Of%Pa!Y%Pa#]%Pa#}%Pa~P!1UO!d#vO~O#h0iO~O!Y+XO`(|a's(|a~O|#zO}#{O!P#|O!j#xO!l#yO(YVOP!riZ!rin!ri!Y!ri!i!ri!p!ri#k!ri#l!ri#m!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#u!ri#w!ri#y!ri#z!ri(j!ri(q!ri(r!ri~O`!ri's!ri'q!ri!V!ri!k!rir!ri![!ri%d!ri!d!ri~P$+UOg%WOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O(OTO(RUO(Y$vO(q%OO(r%QO~Ol0sO'|0rO~P$-oO!d+eO`(Ua![(Ua's(Ua!Y(Ua~O#h0yO~OZ[X!YeX!ZeX~O!Y0zO!Z)QX~O!Z0|O~OZ0}O~Oa1PO'|+mO(OTO(RUO~O![%}O'|%eO_'oX!Y'oX~O!Y+rO_)Pa~O!k1SO~P!:ROZ1VO~O_1WO~O#]1ZO~Oj1^O![$}O~O(](zO!Z(}P~Og%WOj1gO![1dO%d1fO~OZ1qO!Y1oO!Z)OX~O!Z1rO~O_1tO`%lO's%lO~O'|#nO(OTO(RUO~O#]$fO$P$fOP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X~O#s1wO&U1xO`(_X!j(_X~P$3VO#]$fO#s1wO&U1xO~O`1zO~P%[O`1|O~O&_2POP&]iQ&]iR&]iX&]i`&]ic&]id&]il&]in&]io&]ip&]iv&]ix&]iz&]i!P&]i!T&]i!U&]i![&]i!f&]i!l&]i!o&]i!p&]i!q&]i!s&]i!u&]i!x&]i!|&]i#t&]i$U&]i%c&]i%e&]i%g&]i%h&]i%i&]i%l&]i%n&]i%q&]i%r&]i%t&]i&Q&]i&W&]i&Y&]i&[&]i&^&]i&a&]i&g&]i&m&]i&o&]i&q&]i&s&]i&u&]i'q&]i'|&]i(O&]i(R&]i(Y&]i(h&]i(v&]i!Z&]ia&]i&d&]i~Oa2VO!Z2TO&d2UO~P`O![XO!l2XO~O&k,uOP&fiQ&fiR&fiX&fi`&fic&fid&fil&fin&fio&fip&fiv&fix&fiz&fi!P&fi!T&fi!U&fi![&fi!f&fi!l&fi!o&fi!p&fi!q&fi!s&fi!u&fi!x&fi!|&fi#t&fi$U&fi%c&fi%e&fi%g&fi%h&fi%i&fi%l&fi%n&fi%q&fi%r&fi%t&fi&Q&fi&W&fi&Y&fi&[&fi&^&fi&a&fi&g&fi&m&fi&o&fi&q&fi&s&fi&u&fi'q&fi'|&fi(O&fi(R&fi(Y&fi(h&fi(v&fi!Z&fi&_&fia&fi&d&fi~O!V2_O~O!Y!^a!Z!^a~P#EoOo!nO!P!oO!X2eO(]!mO!Y'RX!Z'RX~P@]O!Y-VO!Z(aa~O!Y'XX!Z'XX~P!9ZO!Y-YO!Z(pa~O!Z2lO~P'_O`%lO#]2uO's%lO~O`%lO!d#vO#]2uO's%lO~O`%lO!d#vO!p2yO#]2uO's%lO(j'mO~O`%lO's%lO~P!:RO!Y$bOr$na~O!V'Qi!Y'Qi~P!:RO!Y(RO!V(`i~O!Y(YO!V(ni~O!V(oi!Y(oi~P!:RO!Y(li!k(li`(li's(li~P!:RO#]2{O!Y(li!k(li`(li's(li~O!Y(fO!k(ki~O!P%fO![%gO!|]O#f3QO#g3PO'|%eO~O!P%fO![%gO#g3PO'|%eO~Oj3XO![']O%d3WO~Og%WOj3XO![']O%d3WO~O#h%[aP%[aZ%[a`%[an%[a}%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a's%[a(Y%[a(j%[a!k%[a!V%[a'q%[ar%[a![%[a%d%[a!d%[a~P#NPO#h%^aP%^aZ%^a`%^an%^a}%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a's%^a(Y%^a(j%^a!k%^a!V%^a'q%^ar%^a![%^a%d%^a!d%^a~P#NrO#h%[aP%[aZ%[a`%[an%[a}%[a!Y%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a's%[a(Y%[a(j%[a!k%[a!V%[a'q%[a#]%[ar%[a![%[a%d%[a!d%[a~P#/OO#h%^aP%^aZ%^a`%^an%^a}%^a!Y%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a's%^a(Y%^a(j%^a!k%^a!V%^a'q%^a#]%^ar%^a![%^a%d%^a!d%^a~P#/OO#hyaPyaZya`yanya!iya!jya!lya!pya#kya#lya#mya#nya#oya#pya#qya#rya#sya#uya#wya#yya#zya'sya(Yya(jya!kya!Vya'qyarya![ya%dya!dya~P$(OO#h$oaP$oaZ$oa`$oan$oa}$oa!i$oa!j$oa!l$oa!p$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#q$oa#r$oa#s$oa#u$oa#w$oa#y$oa#z$oa's$oa(Y$oa(j$oa!k$oa!V$oa'q$oar$oa![$oa%d$oa!d$oa~P$(tO#h$qaP$qaZ$qa`$qan$qa}$qa!i$qa!j$qa!l$qa!p$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa's$qa(Y$qa(j$qa!k$qa!V$qa'q$qar$qa![$qa%d$qa!d$qa~P$)gO#h%PaP%PaZ%Pa`%Pan%Pa}%Pa!Y%Pa!i%Pa!j%Pa!l%Pa!p%Pa#k%Pa#l%Pa#m%Pa#n%Pa#o%Pa#p%Pa#q%Pa#r%Pa#s%Pa#u%Pa#w%Pa#y%Pa#z%Pa's%Pa(Y%Pa(j%Pa!k%Pa!V%Pa'q%Pa#]%Par%Pa![%Pa%d%Pa!d%Pa~P#/OO`#`q!Y#`q's#`q'q#`q!V#`q!k#`qr#`q![#`q%d#`q!d#`q~P!:ROf'SX!Y'SX~P!(ZO!Y.nOf(ca~O!X3cO!Y'TX!k'TX~P%[O!Y.qO!k(da~O!Y.qO!k(da~P!:RO!V3fO~O#}!na!Z!na~PKVO#}!ga!Y!ga!Z!ga~P#EoO#}!ra!Z!ra~P!<lO#}!ta!Z!ta~P!?VORfO![3xO$b3yO~O!Z3}O~Or4OO~P#/OO`$kq!Y$kq's$kq'q$kq!V$kq!k$kqr$kq![$kq%d$kq!d$kq~P!:RO!V4PO~P#/OO|)|O!P)}O(r%QOj'ca(q'ca!Y'ca#]'ca~Of'ca#}'ca~P%,yO|)|O!P)}Oj'ea(q'ea(r'ea!Y'ea#]'ea~Of'ea#}'ea~P%-lO(j$[O~P#/OO!VeX!V$vX!YeX!Y$vX!d$}X#]eX~P!/{O'|;lO~P!1sOlkO'|4RO~P.iO!P%fO!X4TO![%gO'|%eO!Y'_X!k'_X~O!Y/kO!k(wa~O!Y/kO!d#vO!k(wa~O!Y/kO!d#vO(j'mO!k(wa~Of$xi!Y$xi#]$xi#}$xi~P!1UO!X4]O!V'aX!Y'aX~P!3rO!Y/sO!V(xa~O!Y/sO!V(xa~P#/OO!d#vO#s4eO~On4hO!d#vO(j'mO~O(q%OOj%[i|%[i!P%[i(r%[i!Y%[i#]%[i~Of%[i#}%[i~P%1zO(r%QOj%^i|%^i!P%^i(q%^i!Y%^i#]%^i~Of%^i#}%^i~P%2mOf(Wi!Y(Wi~P!1UO#]4oOf(Wi!Y(Wi~P!1UO!k4rO~O`$lq!Y$lq's$lq'q$lq!V$lq!k$lqr$lq![$lq%d$lq!d$lq~P!:RO!V4vO~O!Y4wO![(yX~P#/OO!j#xO~P4XO`$vX![$vX%X[X's$vX!Y$vX~P!/{O%X4yO`kXjkX|kX!PkX![kX'skX(qkX(rkX!YkX~O%X4yO~Oa5PO%e5QO'|+mO(OTO(RUO!Y'nX!Z'nX~O!Y0zO!Z)Qa~OZ5UO~O_5VO~O`%lO's%lO~P#/OO![$}O~P#/OO!Y5_O#]5aO!Z(}X~O!Z5bO~Oo!nO!P5cO!_!yO!`!vO!a!vO!|:lO#Q!pO#R!pO#S!pO#T!pO#U!pO#X5hO#Y!zO'}!lO(OTO(RUO(]!mO(h!sO~O!Z5gO~P%8OOj5mO![1dO%d5lO~Og%WOj5mO![1dO%d5lO~Oa5tO'|#nO(OTO(RUO!Y'mX!Z'mX~O!Y1oO!Z)Oa~O(OTO(RUO(]5vO~O_5zO~O#s5}O&U6OO~PMuO!k6PO~P%[O`6RO~O`6RO~P%[Oa2VO!Z6WO&d2UO~P`O!d6YO~O!d6[Og(bi!Y(bi!Z(bi!d(bi!l(bi~O!Y#ei!Z#ei~P#EoO#]6]O!Y#ei!Z#ei~O!Y!^i!Z!^i~P#EoO`%lO#]6fO's%lO~O`%lO!d#vO#]6fO's%lO~O!Y(lq!k(lq`(lq's(lq~P!:RO!Y(fO!k(kq~O!P%fO![%gO#g6mO'|%eO~O![']O%d6pO~Oj6sO![']O%d6pO~O#h'caP'caZ'ca`'can'ca}'ca!i'ca!j'ca!l'ca!p'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#s'ca#u'ca#w'ca#y'ca#z'ca's'ca(Y'ca(j'ca!k'ca!V'ca'q'car'ca!['ca%d'ca!d'ca~P%,yO#h'eaP'eaZ'ea`'ean'ea}'ea!i'ea!j'ea!l'ea!p'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea's'ea(Y'ea(j'ea!k'ea!V'ea'q'ear'ea!['ea%d'ea!d'ea~P%-lO#h$xiP$xiZ$xi`$xin$xi}$xi!Y$xi!i$xi!j$xi!l$xi!p$xi#k$xi#l$xi#m$xi#n$xi#o$xi#p$xi#q$xi#r$xi#s$xi#u$xi#w$xi#y$xi#z$xi's$xi(Y$xi(j$xi!k$xi!V$xi'q$xi#]$xir$xi![$xi%d$xi!d$xi~P#/OO#h%[iP%[iZ%[i`%[in%[i}%[i!i%[i!j%[i!l%[i!p%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#q%[i#r%[i#s%[i#u%[i#w%[i#y%[i#z%[i's%[i(Y%[i(j%[i!k%[i!V%[i'q%[ir%[i![%[i%d%[i!d%[i~P%1zO#h%^iP%^iZ%^i`%^in%^i}%^i!i%^i!j%^i!l%^i!p%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i's%^i(Y%^i(j%^i!k%^i!V%^i'q%^ir%^i![%^i%d%^i!d%^i~P%2mOf'Sa!Y'Sa~P!1UO!Y'Ta!k'Ta~P!:RO!Y.qO!k(di~O#}#`i!Y#`i!Z#`i~P#EoOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O(YVOZ#jin#ji!i#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~O#k#ji~P%KOO#k:tO~P%KOOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO(YVOZ#ji!i#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~On#ji~P%MZOn:vO~P%MZOP$^On:vO|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO(YVO#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~OZ#ji!i#ji#p#ji#q#ji#r#ji#s#ji~P& fOZ;SO!i:xO#p:xO#q:xO#r;RO#s:xO~P& fOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO(YVO(r$OO#y#ji#z#ji#}#ji(j#ji(q#ji!Y#ji!Z#ji~O#w:{O~P&$QO#w#ji~P&$QOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO(YVO#y#ji#z#ji#}#ji(j#ji!Y#ji!Z#ji~O#w#ji(q#ji(r#ji~P&&]O#w:{O(q#}O(r$OO~P&&]OP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O(YVO(q#}O(r$OO~O#z#ji#}#ji(j#ji!Y#ji!Z#ji~P&(nO`#{y!Y#{y's#{y'q#{y!V#{y!k#{yr#{y![#{y%d#{y!d#{y~P!:ROj<qO|)|O!P)}O(q%OO(r%QO~OP#jiZ#jin#ji}#ji!i#ji!j#ji!l#ji!p#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(Y#ji(j#ji!Y#ji!Z#ji~P&+fO!j#xOP(XXZ(XXj(XXn(XX|(XX}(XX!P(XX!i(XX!l(XX!p(XX#k(XX#l(XX#m(XX#n(XX#o(XX#p(XX#q(XX#r(XX#s(XX#u(XX#w(XX#y(XX#z(XX#}(XX(Y(XX(j(XX(q(XX(r(XX!Y(XX!Z(XX~O#}$Oi!Y$Oi!Z$Oi~P#EoO#}!ri!Z!ri~P$+UO!Z7VO~O!Y'^a!Z'^a~P#EoOP[XZ[Xn[X|[X}[X!P[X!V[X!Y[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X~O!d%UX#s%UX~P&0hO!d#vO(j'mO!Y'_a!k'_a~O!Y/kO!k(wi~O!Y/kO!d#vO!k(wi~Of$xq!Y$xq#]$xq#}$xq~P!1UO!V'aa!Y'aa~P#/OO!d7^O~O!Y/sO!V(xi~P#/OO!Y/sO!V(xi~O!V7bO~O!d#vO#s7gO~On7hO!d#vO(j'mO~O|)|O!P)}O(r%QOj'da(q'da!Y'da#]'da~Of'da#}'da~P&5WO|)|O!P)}Oj'fa(q'fa(r'fa!Y'fa#]'fa~Of'fa#}'fa~P&5yO!V7jO~Of$zq!Y$zq#]$zq#}$zq~P!1UO`$ly!Y$ly's$ly'q$ly!V$ly!k$lyr$ly![$ly%d$ly!d$ly~P!:RO!d6[O~O!Y4wO![(ya~O`#`y!Y#`y's#`y'q#`y!V#`y!k#`yr#`y![#`y%d#`y!d#`y~P!:ROZ7oO~Oa7qO'|+mO(OTO(RUO~O!Y0zO!Z)Qi~O_7uO~O(](zO!Y'jX!Z'jX~O!Y5_O!Z(}a~O!Z8OO~P%8OOo!nO!P8PO(OTO(RUO(]!mO(h!sO~O![1dO~O![1dO%d8RO~Oj8UO![1dO%d8RO~OZ8ZO!Y'ma!Z'ma~O!Y1oO!Z)Oi~O!k8_O~O!k8`O~O!k8cO~O!k8cO~P%[O`8eO~O!d8fO~O!k8gO~O!Y(oi!Z(oi~P#EoO`%lO#]8oO's%lO~O!Y(ly!k(ly`(ly's(ly~P!:RO!Y(fO!k(ky~O![']O%d8rO~O#h$xqP$xqZ$xq`$xqn$xq}$xq!Y$xq!i$xq!j$xq!l$xq!p$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#q$xq#r$xq#s$xq#u$xq#w$xq#y$xq#z$xq's$xq(Y$xq(j$xq!k$xq!V$xq'q$xq#]$xqr$xq![$xq%d$xq!d$xq~P#/OO#h'daP'daZ'da`'dan'da}'da!i'da!j'da!l'da!p'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#s'da#u'da#w'da#y'da#z'da's'da(Y'da(j'da!k'da!V'da'q'dar'da!['da%d'da!d'da~P&5WO#h'faP'faZ'fa`'fan'fa}'fa!i'fa!j'fa!l'fa!p'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa's'fa(Y'fa(j'fa!k'fa!V'fa'q'far'fa!['fa%d'fa!d'fa~P&5yO#h$zqP$zqZ$zq`$zqn$zq}$zq!Y$zq!i$zq!j$zq!l$zq!p$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq's$zq(Y$zq(j$zq!k$zq!V$zq'q$zq#]$zqr$zq![$zq%d$zq!d$zq~P#/OO!Y'Ti!k'Ti~P!:RO#}#`q!Y#`q!Z#`q~P#EoO(q%OOP%[aZ%[an%[a}%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a#}%[a(Y%[a(j%[a!Y%[a!Z%[a~Oj%[a|%[a!P%[a(r%[a~P&GUO(r%QOP%^aZ%^an%^a}%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a#}%^a(Y%^a(j%^a!Y%^a!Z%^a~Oj%^a|%^a!P%^a(q%^a~P&I]Oj<qO|)|O!P)}O(r%QO~P&GUOj<qO|)|O!P)}O(q%OO~P&I]O|0cO}0cO!P0dOPyaZyajyanya!iya!jya!lya!pya#kya#lya#mya#nya#oya#pya#qya#rya#sya#uya#wya#yya#zya#}ya(Yya(jya(qya(rya!Yya!Zya~O|)|O!P)}OP$oaZ$oaj$oan$oa}$oa!i$oa!j$oa!l$oa!p$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#q$oa#r$oa#s$oa#u$oa#w$oa#y$oa#z$oa#}$oa(Y$oa(j$oa(q$oa(r$oa!Y$oa!Z$oa~O|)|O!P)}OP$qaZ$qaj$qan$qa}$qa!i$qa!j$qa!l$qa!p$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa#}$qa(Y$qa(j$qa(q$qa(r$qa!Y$qa!Z$qa~OP%PaZ%Pan%Pa}%Pa!i%Pa!j%Pa!l%Pa!p%Pa#k%Pa#l%Pa#m%Pa#n%Pa#o%Pa#p%Pa#q%Pa#r%Pa#s%Pa#u%Pa#w%Pa#y%Pa#z%Pa#}%Pa(Y%Pa(j%Pa!Y%Pa!Z%Pa~P&+fO#}$kq!Y$kq!Z$kq~P#EoO#}$lq!Y$lq!Z$lq~P#EoO!Z9OO~O#}9PO~P!1UO!d#vO!Y'_i!k'_i~O!d#vO(j'mO!Y'_i!k'_i~O!Y/kO!k(wq~O!V'ai!Y'ai~P#/OO!Y/sO!V(xq~O!V9VO~P#/OO!V9VO~Of(Wy!Y(Wy~P!1UO!Y'ha!['ha~P#/OO`%Wq![%Wq's%Wq!Y%Wq~P#/OOZ9[O~O!Y0zO!Z)Qq~O#]9`O!Y'ja!Z'ja~O!Y5_O!Z(}i~P#EoO![1dO%d9dO~O(OTO(RUO(]9iO~O!Y1oO!Z)Oq~O!k9lO~O!k9mO~O!k9nO~O!k9nO~P%[O#]9qO!Y#ey!Z#ey~O!Y#ey!Z#ey~P#EoO![']O%d9vO~O#}#{y!Y#{y!Z#{y~P#EoOP$xiZ$xin$xi}$xi!i$xi!j$xi!l$xi!p$xi#k$xi#l$xi#m$xi#n$xi#o$xi#p$xi#q$xi#r$xi#s$xi#u$xi#w$xi#y$xi#z$xi#}$xi(Y$xi(j$xi!Y$xi!Z$xi~P&+fO|)|O!P)}O(r%QOP'caZ'caj'can'ca}'ca!i'ca!j'ca!l'ca!p'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#s'ca#u'ca#w'ca#y'ca#z'ca#}'ca(Y'ca(j'ca(q'ca!Y'ca!Z'ca~O|)|O!P)}OP'eaZ'eaj'ean'ea}'ea!i'ea!j'ea!l'ea!p'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea#}'ea(Y'ea(j'ea(q'ea(r'ea!Y'ea!Z'ea~O(q%OOP%[iZ%[ij%[in%[i|%[i}%[i!P%[i!i%[i!j%[i!l%[i!p%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#q%[i#r%[i#s%[i#u%[i#w%[i#y%[i#z%[i#}%[i(Y%[i(j%[i(r%[i!Y%[i!Z%[i~O(r%QOP%^iZ%^ij%^in%^i|%^i}%^i!P%^i!i%^i!j%^i!l%^i!p%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i#}%^i(Y%^i(j%^i(q%^i!Y%^i!Z%^i~O#}$ly!Y$ly!Z$ly~P#EoO#}#`y!Y#`y!Z#`y~P#EoO!d#vO!Y'_q!k'_q~O!Y/kO!k(wy~O!V'aq!Y'aq~P#/OO!V:PO~P#/OO!Y0zO!Z)Qy~O!Y5_O!Z(}q~O![1dO%d:WO~O!k:ZO~O![']O%d:`O~OP$xqZ$xqn$xq}$xq!i$xq!j$xq!l$xq!p$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#q$xq#r$xq#s$xq#u$xq#w$xq#y$xq#z$xq#}$xq(Y$xq(j$xq!Y$xq!Z$xq~P&+fO|)|O!P)}O(r%QOP'daZ'daj'dan'da}'da!i'da!j'da!l'da!p'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#s'da#u'da#w'da#y'da#z'da#}'da(Y'da(j'da(q'da!Y'da!Z'da~O|)|O!P)}OP'faZ'faj'fan'fa}'fa!i'fa!j'fa!l'fa!p'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa#}'fa(Y'fa(j'fa(q'fa(r'fa!Y'fa!Z'fa~OP$zqZ$zqn$zq}$zq!i$zq!j$zq!l$zq!p$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq#}$zq(Y$zq(j$zq!Y$zq!Z$zq~P&+fOf%`!Z!Y%`!Z#]%`!Z#}%`!Z~P!1UO!Y'jq!Z'jq~P#EoO!Y#e!Z!Z#e!Z~P#EoO#h%`!ZP%`!ZZ%`!Z`%`!Zn%`!Z}%`!Z!Y%`!Z!i%`!Z!j%`!Z!l%`!Z!p%`!Z#k%`!Z#l%`!Z#m%`!Z#n%`!Z#o%`!Z#p%`!Z#q%`!Z#r%`!Z#s%`!Z#u%`!Z#w%`!Z#y%`!Z#z%`!Z's%`!Z(Y%`!Z(j%`!Z!k%`!Z!V%`!Z'q%`!Z#]%`!Zr%`!Z![%`!Z%d%`!Z!d%`!Z~P#/OOP%`!ZZ%`!Zn%`!Z}%`!Z!i%`!Z!j%`!Z!l%`!Z!p%`!Z#k%`!Z#l%`!Z#m%`!Z#n%`!Z#o%`!Z#p%`!Z#q%`!Z#r%`!Z#s%`!Z#u%`!Z#w%`!Z#y%`!Z#z%`!Z#}%`!Z(Y%`!Z(j%`!Z!Y%`!Z!Z%`!Z~P&+fOr(^X~P1qO|%pO~P!*mO'}!lO~P!*mO!VeX!YeX#]eX~P&0hOP[XZ[Xn[X|[X}[X!P[X!Y[X!YeX!i[X!j[X!l[X!p[X#][X#]eX#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X~O!deX!k[X!keX(jeX~P'EaOP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![XO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO'|)[O(OTO(RUO(YVO(h[O(v<dO~O!Y;PO!Z$na~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;ZO!P$|O![$}O!f<kO!l$yO#g;aO$U%_O$p;]O$r;_O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~O#t)cO~P'JVOn!bX(j!bX~P# xO!Z[X!ZeX~P'EaO!VeX!V$vX!YeX!Y$vX#]eX~P!/{O#h:sO~O!d#vO#h:sO~O#];TO~O#s:xO~O#];dO!Y(oX!Z(oX~O#];TO!Y(mX!Z(mX~O#h;eO~Of;gO~P!1UO#h;mO~O#h;nO~O!d#vO#h;oO~O!d#vO#h;eO~O#};pO~P#EoO#h;qO~O#h;rO~O#h;wO~O#h;xO~O#h;yO~O#h;zO~O#};{O~P!1UO#};|O~P!1UO!j#Q#R#T#U#X#f#g#r(v$p$r$u%X%c%d%e%l%n%q%r%t%v~'wS#l!U'u'}#mo#k#nn|'v$Z'v'|$](]~\",\n  goto: \"$4d)UPPPPP)VPP)YP)kP*{/QPPPP5xPP6`PP<V?lP@PP@PPPP@PPBPP@PP@PP@PPBTPPBYPBwPGpPPPGtPPPPGtJvPPPJ|KxPGtPGtNWPPPP!!fGtPPPGtPGtP!$tGtP!(Z!)]!)fP!*Y!*^!*YPPPPP!-j!)]PP!-z!.tP!1hGtGt!1m!4x!9`!9`!=^PPP!=fGtPPPPPPPPPPP!@tP!BRPPGt!CdPGtPGtGtGtGtPGt!DvP!HPP!KUP!KY!Kd!Kh!KhP!G|P!Kl!KlP!NqP!NuGtGt!N{#$P@PP@PP@P@PP#%]@P@P#'g@P#*V@P#,Z@P@P#,y#/V#/V#/[#/e#/V#/nP#/VP@P#0W@P#3w@P@P5xPPP#7nPPP#8X#8XP#8XP#8o#8XPP#8uP#8lP#8l#9Y#8l#9t#9z5u)Y#9})YP#:U#:U#:UP)YP)YP)YP)YPP)YP#:[#:_P#:_)YP#:cP#:fP)YP)YP)YP)YP)YP)Y)YPP#:l#:r#:}#;T#;Z#;a#;g#;u#;{#<R#<]#<c#<m#<}#=T#=u#>X#>_#>e#>s#?Y#@w#AV#A^#Br#CQ#Dl#Dz#EQ#EW#E^#Eh#En#Et#FO#Fb#FhPPPPPPPPPP#FnPPPPPPP#Gc#Jj#Ky#LQ#LYPPPP$#`$&W$,p$,s$,v$-c$-f$-i$-p$-xP$.OP$.l$.p$/h$0v$0{$1cPP$1h$1n$1rP$1u$1y$1}$2s$3[$3s$3w$3z$3}$4T$4W$4[$4`R!|RoqOXst!Z#d%k&o&q&r&t,m,r2P2SY!vQ']-_1d5fQ%rvQ%zyQ&R|Q&g!VS'T!e-VQ'c!iS'i!r!yU*g$}*X*lQ+k%{Q+x&TQ,^&aQ-]'[Q-g'dQ-o'jQ0U*nQ1n,_R;b:o%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W,j,m,r-c-k-y.P.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3c5c5m5}6O6R6f8P8U8e8oS#q]:l!r)^$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ*y%[Q+p%}Q,`&dQ,g&lQ.h;YQ0p+cQ0t+eQ1P+qQ1v,eQ3T.aQ5P0zQ5t1oQ6r3XQ7O;ZQ7q5QR8u6s'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gt!nQ!r!v!y!z'T'[']'i'j'k-V-]-_-o1d5f5h$z$ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ&U|Q'R!eU'X%g*X-YQ+p%}Q,`&dQ0e*}Q1P+qQ1U+wQ1u,dQ1v,eQ5P0zQ5Y1WQ5t1oQ5w1qQ5x1tQ7q5QQ7t5VQ8^5zQ9_7uR9j8ZrnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SR,b&h&x^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<f<g[#]WZ#W#Z'U(P!b%hm#h#i#l$y%c%f(Y(d(e(f*W*[*_+U+V+X,i-P-}.T.U.V.X/h/k2X3P3Q4T6[6mQ%uxQ%yyS&O|&TQ&[!TQ'`!hQ'b!iQ(m#sS+j%z%{Q+n%}Q,X&_Q,]&aS-f'c'dQ.c(nQ0x+kQ1O+qQ1Q+rQ1T+vQ1i,YS1m,^,_Q2q-gQ5O0zQ5S0}Q5X1VQ5s1nQ7p5QQ7s5UQ9Z7oR:R9[!O${i#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m!S%wy!i!u%y%z%{'S'b'c'd'h'r*f+j+k-S-f-g-n/|0x2j2q2x4gQ+d%uQ+}&XQ,Q&YQ,[&aQ.b(mQ1h,XU1l,],^,_Q3Y.cQ5n1iS5r1m1nQ8Y5s#[<h#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo<i;R;S;V;X;];_;a;i;k;n;r;t;v;x;|W%Ui%W*v<dS&X!Q&fQ&Y!RQ&Z!SR+{&V${%Ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qT)x$v)yV*z%[;Y;ZW'X!e%g*X-YS({#z#{Q+_%pQ+u&QS.[(i(jQ1_,RQ4p0cR7y5_'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g$i$ac#Y#e%o%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.y.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZT#TV#U'PkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ'V!eR2f-Vv!nQ!e!r!v!y!z'T'[']'i'j'k-V-]-_-o1d5f5hU*f$}*X*lS/|*g*nQ0V*oQ1a,TQ4g0UR4j0XnqOXst!Z#d%k&o&q&r&t,m,r2P2SQ&v!^Q's!xS(o#u:sQ+h%xQ,V&[Q,W&^Q-d'aQ-q'lS.l(t;eS0h+S;oQ0v+iQ1c,UQ2W,tQ2Y,uQ2b-QQ2o-eQ2r-iS4u0i;yQ4z0wS4}0y;zQ6^2dQ6b2pQ6g2wQ7n4{Q8j6`Q8k6cQ8n6hR9p8g$d$`c#Y#e%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZS(l#p'fU*s%S(s3uS+^%o.yQ3U0pQ6o3TQ8t6rR9w8u$d$_c#Y#e%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZS(k#p'fS(}#{$`S+]%o.yS.](j(lQ.|)_Q0m+^R3R.^'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS#q]:lQ&q!XQ&r!YQ&t![Q&u!]R2O,pQ'^!hQ+a%uQ-b'`S._(m+dQ2m-aW3V.b.c0o0qQ6a2nU6n3S3U3YS8q6o6qS9u8s8tS:^9t9wQ:f:_R:i:gU!wQ']-_T5d1d5f!Q_OXZ`st!V!Z#d#h%c%k&f&h&o&q&r&t(f,m,r.U2P2S]!pQ!r']-_1d5fT#q]:l%[{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oS({#z#{S.[(i(j!s<Q$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gm!tQ!r!v!y!z']'i'j'k-_-o1d5f5hQ'q!uS(b#g1yS-m'h'tQ/n*ZQ/z*fQ2y-pQ4X/oS4b/{0VQ7Y4SS7e4h4jQ9R7ZR9Y7hQ#wbQ'p!uS(a#g1yS(c#m+RQ+T%dQ+f%vQ+l%|U-l'h'q'tQ.Q(bQ/m*ZQ/y*fQ0P*iQ0u+gQ1j,ZS2v-m-pQ3O.YS4W/n/oS4a/z0VQ4d0OQ4f0QQ5p1kQ6i2yQ7X4SQ7]4XS7a4b4jQ7f4iQ8W5qS9Q7Y7ZQ9U7bQ9W7eQ9g8XQ9}9RQ:O9VQ:Q9YQ:Y9hQ:b:PQ<T<OQ<`<XR<a<YV!wQ']-_%[aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oS#wz!j!r;}$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<T<f%[bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oQ%dj!S%vy!i!u%y%z%{'S'b'c'd'h'r*f+j+k-S-f-g-n/|0x2j2q2x4gS%|z!jQ+g%wQ,Z&aW1k,[,],^,_U5q1l1m1nS8X5r5sQ9h8Y!r<O$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ<X<eR<Y<f%OeOPXYstuvw!Z!`!g!o#S#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oY#bWZ#W#Z(P!b%hm#h#i#l$y%c%f(Y(d(e(f*W*[*_+U+V+X,i-P-}.T.U.V.X/h/k2X3P3Q4T6[6mQ,h&l!p<P$]$n)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<S'UU'Y!e%g*XR2h-Y%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W,j,m,r-c-k-y.P.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3c5c5m5}6O6R6f8P8U8e8o!r)^$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ,g&lQ0p+cQ3T.aQ6r3XR8u6s!b$Vc#Y%o(O(U(p(w)Y)Z)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:m!P:z)])n-T.y2`2c3g3q3r3v3|6_6y7S7T7{8i8v8|8}:T:[<Z!f$Xc#Y%o(O(U(p(w)V)W)Y)Z)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:m!T:|)])n-T.y2`2c3g3n3o3q3r3v3|6_6y7S7T7{8i8v8|8}:T:[<Z!^$]c#Y%o(O(U(p(w)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:mQ4Q/fz<g)])n-T.y2`2c3g3v3|6_6y7S7T7{8i8v8|8}:T:[<ZQ<l<nR<m<o'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS$oh$pR3y/P'VgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/P/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$kf$qQ$ifS)g$l)kR)s$qT$jf$qT)i$l)k'VhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/P/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$oh$pQ$rhR)r$p%[jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8o!s<e$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g#elOPXZst!Z!`!o#S#d#o#|$n%k&h&k&l&o&q&r&t&x'Q'_(|)p+W+c,j,m,r-c.a/Q/i0d1g1w1x1z1|2P2S2U3X3x5c5m5}6O6R6s8P8U8e!O%Si#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m#[(s#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qQ+O%`Q/])|o3u;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!O$zi#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mQ*`${U*i$}*X*lQ+P%aQ0Q*j#[<V#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn<W;R;S;V;X;];_;a;i;k;n;r;t;v;x;|Q<[<hQ<]<iQ<^<jR<_<k!O%Si#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m#[(s#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo3u;R;S;V;X;];_;a;i;k;n;r;t;v;x;|noOXst!Z#d%k&o&q&r&t,m,r2P2SS*c$|*WQ,{&{Q,|&}R4[/s$z%Ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ,O&YQ1],QQ5]1[R7x5^V*k$}*X*lU*k$}*X*lT5e1d5fU0O*h/i5cT4i0W8PQ+f%vQ0P*iQ0u+gQ1j,ZQ5p1kQ8W5qQ9g8XR:Y9h!O%Pi#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mr*P$w(u*Q*r+Q/q0^0_3`4Y4s7W7i9|<U<b<cS0Y*q0Z#[;U#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;V;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!^;h(q)b*Y*b.d.g.k/X/^/f/v0n1Y1[3]4Z4_5[5^6t6w7_7c7k7m9T9X:a<n<o`;i3t6z6}7R8w9x9{:jS;s.f3^T;t6|8z!O%Ri#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mv*R$w(u*S*q+Q/b/q0^0_3`4Y4k4s7W7i9|<U<b<cS0[*r0]#[;W#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;X;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!b;j(q)b*Y*b.e.f.k/X/^/f/v0n1Y1[3Z3]4Z4_5[5^6t6u6w7_7c7k7m9T9X:a<n<od;k3t6{6|7R8w8x9x9y9{:jS;u.g3_T;v6}8{rnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SQ&c!UR,j&lrnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SR&c!UQ,S&ZR1X+{snOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SQ1e,XS5k1h1iU8Q5i5j5nS9c8S8TS:U9b9eQ:c:VR:h:dQ&j!VR,c&fR5w1qS&O|&TR1Q+rQ&o!WR,m&pR,s&uT2Q,r2SR,w&vQ,v&vR2Z,wQ'v!{R-s'vSsOtQ#dXT%ns#dQ#OTR'x#OQ#RUR'z#RQ)y$vR/Y)yQ#UVR'|#UQ#XWU(S#X(T-zQ(T#YR-z(UQ-W'VR2g-WQ.o(uR3a.oQ.r(wS3d.r3eR3e.sQ-_']R2k-_Y!rQ']-_1d5fR'g!rU#_W%f*WU(Z#_([-{Q([#`R-{(VQ-Z'YR2i-Zt`OXst!V!Z#d%k&f&h&o&q&r&t,m,r2P2SS#hZ%cU#r`#h.UR.U(fQ(g#jQ.R(cW.Z(g.R2|6kQ2|.SR6k2}Q)k$lR/R)kQ$phR)q$pQ$ccU)a$c-v;QQ-v:mR;Q)nQ/l*ZW4U/l4V7[9SU4V/m/n/oS7[4W4XR9S7]$X*O$w(q(u)b*Y*b*q*r*{*|+Q.f.g.i.j.k/X/^/b/d/f/q/v0^0_0n1Y1[3Z3[3]3`3t4Y4Z4_4k4m4s5[5^6t6u6v6w6|6}7P7Q7R7W7_7c7i7k7m8w8x8y9T9X9x9y9z9{9|:a:j<U<b<c<n<oQ/t*bU4^/t4`7`Q4`/vR7`4_S*l$}*XR0S*lr*Q$w(u*q*r+Q/q0^0_3`4Y4s7W7i9|<U<b<c!^.d(q)b*Y*b.f.g.k/X/^/f/v0n1Y1[3]4Z4_5[5^6t6w7_7c7k7m9T9X:a<n<oU/c*Q.d6za6z3t6|6}7R8w9x9{:jQ0Z*qQ3^.fU4l0Z3^8zR8z6|v*S$w(u*q*r+Q/b/q0^0_3`4Y4k4s7W7i9|<U<b<c!b.e(q)b*Y*b.f.g.k/X/^/f/v0n1Y1[3Z3]4Z4_5[5^6t6u6w7_7c7k7m9T9X:a<n<oU/e*S.e6{e6{3t6|6}7R8w8x9x9y9{:jQ0]*rQ3_.gU4n0]3_8{R8{6}Q*w%VR0a*wQ4x0nR7l4xQ+Y%iR0l+YQ5`1_S7z5`9aR9a7{Q,U&[R1b,UQ5f1dR7}5fQ1p,`S5u1p8[R8[5wQ0{+nW5R0{5T7r9]Q5T1OQ7r5SR9]7sQ+s&OR1R+sQ2S,rR6V2SYrOXst#dQ&s!ZQ+[%kQ,l&oQ,n&qQ,o&rQ,q&tQ1},mS2Q,r2SR6U2PQ%mpQ&w!_Q&z!aQ&|!bQ'O!cQ'n!uQ+Z%jQ+h%xQ+z&UQ,b&jQ,y&yW-j'h'p'q'tQ-q'lQ0R*kQ0v+iS1s,c,fQ2[,xQ2],{Q2^,|Q2r-iW2t-l-m-p-rQ4z0wQ5W1UQ5Z1YQ5o1jQ5y1uQ6T2OU6d2s2v2yQ6g2wQ7n4{Q7v5YQ7w5[Q7|5eQ8V5pQ8]5xS8l6e6iQ8n6hQ9^7tQ9f8WQ9k8^Q9r8mQ:S9_Q:X9gQ:]9sR:e:YQ%xyQ'a!iQ'l!uU+i%y%z%{Q-Q'SU-e'b'c'dS-i'h'rQ/x*fS0w+j+kQ2d-SS2p-f-gQ2w-nQ4c/|Q4{0xQ6`2jQ6c2qQ6h2xR7d4gS$xi<dR*x%WU%Vi%W<dR0`*vQ$wiS(q#v+eQ(u#xS)b$d$eQ*Y$yS*b$|*WQ*q%PQ*r%RQ*{%]Q*|%^Q+Q%bQ.f;UQ.g;WQ.i;[Q.j;^Q.k;`Q/X)wS/^)}/`Q/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*uh0n+b.`1f3W5l6p8R8r9d9v:W:`Q1Y+|Q1[,PQ3Z;hQ3[;jQ3];mQ3`.nS3t;R;SQ4Y/rQ4Z/sQ4_/uQ4k0YQ4m0[Q4s0fQ5[1ZQ5^1^Q6t;qQ6u;sQ6v;uQ6w;wQ6|;VQ6};XQ7P;]Q7Q;_Q7R;aQ7W4QQ7_4]Q7c4eQ7i4oQ7k4wQ7m4yQ8w;nQ8x;iQ8y;kQ9T7^Q9X7gQ9x;rQ9y;tQ9z;vQ9{;xQ9|9PQ:a;{Q:j;|Q<U<dQ<b<lQ<c<mQ<n<pR<o<qnpOXst!Z#d%k&o&q&r&t,m,r2P2SQ!fPS#fZ#oQ&y!`U'e!o5c8PQ'{#SQ)O#|Q)o$nS,f&h&kQ,k&lQ,x&xQ,}'QQ-a'_Q.u(|Q/V)pS0j+W/iQ0q+cQ1{,jQ2n-cQ3U.aQ3{/QQ4q0dQ5j1gQ5{1wQ5|1xQ6Q1zQ6S1|Q6X2UQ6o3XQ7U3xQ8T5mQ8a5}Q8b6OQ8d6RQ8t6sQ9e8UR9o8e#YcOPXZst!Z!`!o#d#o#|%k&h&k&l&o&q&r&t&x'Q'_(|+W+c,j,m,r-c.a/i0d1g1w1x1z1|2P2S2U3X5c5m5}6O6R6s8P8U8eQ#YWQ#eYQ%ouQ%qvS%sw!gS(O#W(RQ(U#ZQ(p#uQ(w#yQ)P$PQ)Q$QQ)R$RQ)S$SQ)T$TQ)U$UQ)V$VQ)W$WQ)X$XQ)Y$YQ)Z$ZQ)]$]Q)`$bQ)d$fW)n$n)p/Q3xQ+`%rQ+t&PS-T'U2eQ-r'oS-w(P-yQ-|(XQ.O(`Q.m(tQ.s(xQ.w:kQ.y:nQ.z:oQ.{:rQ/[){Q0g+SQ2`-OQ2c-RQ2s-kQ2z.PQ3b.qQ3g:sQ3h:tQ3i:uQ3j:vQ3k:wQ3l:xQ3m:yQ3n:zQ3o:{Q3p:|Q3q:}Q3r;OQ3s.xQ3v;TQ3w;bQ3|;PQ4t0iQ4|0yQ6_;dQ6e2uQ6j2{Q6x3cQ6y;eQ7S;gQ7T;oQ7{5aQ8i6]Q8m6fQ8v;pQ8|;yQ8};zQ9s8oQ:T9`Q:[9qQ:m#SR<Z<gR#[WR'W!el!tQ!r!v!y!z']'i'j'k-_-o1d5f5hS'S!e-VS-S'T'[R2j-]R(v#xR(y#yQ!fQT-^']-_]!qQ!r']-_1d5fQ#p]R'f:lY!uQ']-_1d5fQ'h!rS'r!v!yS't!z5hS-n'i'jQ-p'kR2x-oT#kZ%cS#jZ%cS%im,iU(c#h#i#lS.S(d(eQ.W(fQ0k+XQ2}.TU3O.U.V.XS6l3P3QR8p6md#^W#W#Z%f(P(Y*W+U-}/hr#gZm#h#i#l%c(d(e(f+X.T.U.V.X3P3Q6mS*Z$y*_Q/o*[Q1y,iQ2a-PQ4S/kQ6Z2XQ7Z4TQ8h6[T<R'U+VV#aW%f*WU#`W%f*WS(Q#W(YU(V#Z+U/hS-U'U+VT-x(P-}V'Z!e%g*XQ$lfR)u$qT)j$l)kR3z/PT*]$y*_T*e$|*WQ0o+bQ3S.`Q5i1fQ6q3WQ8S5lQ8s6pQ9b8RQ9t8rQ:V9dQ:_9vQ:d:WR:g:`nqOXst!Z#d%k&o&q&r&t,m,r2P2SQ&i!VR,b&ftmOXst!U!V!Z#d%k&f&o&q&r&t,m,r2P2SR,i&lT%jm,iR1`,RR,a&dQ&S|R+y&TR+o%}T&m!W&pT&n!W&pT2R,r2S\",\n  nodeNames: \"⚠ ArithOp ArithOp JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem\",\n  maxTerm: 373,\n  context: trackNewline,\n  nodeProps: [\n    [\"isolate\", -8,4,5,13,33,35,48,50,52,\"\"],\n    [\"group\", -26,8,16,18,65,202,206,210,211,213,216,219,229,231,237,239,241,243,246,252,258,260,262,264,266,268,269,\"Statement\",-33,12,13,28,31,32,38,48,51,52,54,59,67,69,76,80,82,84,85,107,108,117,118,135,138,140,141,142,143,145,146,165,166,168,\"Expression\",-23,27,29,33,37,39,41,169,171,173,174,176,177,178,180,181,182,184,185,186,196,198,200,201,\"Type\",-3,88,100,106,\"ClassItem\"],\n    [\"openedBy\", 22,\"<\",34,\"InterpolationStart\",53,\"[\",57,\"{\",73,\"(\",158,\"JSXStartCloseTag\"],\n    [\"closedBy\", 23,\">\",36,\"InterpolationEnd\",47,\"]\",58,\"}\",74,\")\",163,\"JSXEndTag\"]\n  ],\n  propSources: [jsHighlight],\n  skippedNodes: [0,4,5,272],\n  repeatNodeCount: 37,\n  tokenData: \"$HR07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$.S!c!}Er!}#O$/^#O#P$0h#P#Q$6P#Q#R$7Z#R#SEr#S#T$8h#T#o$9r#o#p$>S#p#q$>x#q#r$@Y#r#s$Af#s$f%Z$f$g+g$g#BYEr#BY#BZ$Bp#BZ$ISEr$IS$I_$Bp$I_$I|Er$I|$I}$E{$I}$JO$E{$JO$JTEr$JT$JU$Bp$JU$KVEr$KV$KW$Bp$KW&FUEr&FU&FV$Bp&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$Bp?HUOEr(n%d_$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$g&j(S!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(S!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$g&j(PpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(PpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$g&j(Pp(S!b'u0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(Q#S$g&j'v0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$g&j(Pp(S!b'v0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$g&j!p),Q(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(O':f$g&j(S!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$g&j(S!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$g&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$b`$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$b``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$b`$g&j(S!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(S!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$b`(S!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$g&j(Pp(S!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__VS$g&j(Pp(S!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]VS$g&j(S!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXVS$g&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSVSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWVS(S!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]VS$g&j(PpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWVS(PpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYVS(Pp(S!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$g&j(h%1l(Pp(S!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$g&j(Pp(S!b$Z#t'|,2j(]$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$g&j(Pp(S!b$Z#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$g&j(Pp(S!b#m(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$g&j$P(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(r+JY$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$g&j#y(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(R';W$g&j(PpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$g&j(PpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$g&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$b`$g&j(PpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(PpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$b`(PpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$g&j(Pp(S!b'}%&f#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$g&j(Pp(S!b#k(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$g&j(Pp(S!bn+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Y+Jf$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$g&j(Pp(S!b|.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!X!L^$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$g&j(Pp(S!b#l(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$g&j(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$g&j(S!b!U7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$g&j!U7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$g&j!U7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!U7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!U7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$g&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$g&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$g&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$g&j(S!b!U7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(S!b!U7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(S!b!U7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(S!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$g&j(S!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$g&j(Pp!U7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$g&j(Pp!U7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Pp!U7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Pp!U7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(PpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$g&j(PpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$g&j(Pp(S!b!U7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Pp(S!b!U7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Pp(S!b!U7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Pp(S!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$g&j(Pp(S!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$g&j(Pp(S!b'w0/l!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$g&j(Pp(S!bS0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$g&j(S!bS0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$g&jS0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iSS0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(S!bS0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$g&j(PpS0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(PpS0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Pp(S!bS0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$g&j$P(Ch(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$X#t$g&j(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!d$b$g&j#})Lv(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_`l$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^g#)`!i-<U(Pp(S!b(v7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$i&j(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#o(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#p(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#]*!Y$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#h(Cl$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vaf!*r#p(Ch$d#|$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#p(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#o(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#o(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n$*`c(j(Ct$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$+k!P!^%Z!^!_*g!_!a%Z!a!b$,u!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!f$+v_},Hv$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$-Q`$g&j#z(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$.__!|$Ip$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$/i_!P0,v$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$0mZ$g&jO!^$1`!^!_$1v!_#i$1`#i#j$1{#j#l$1`#l#m$3n#m#o$1`#o#p$1v#p;'S$1`;'S;=`$5y<%lO$1`(n$1gT^#S$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$1{O^#S(n$2Q[$g&jO!Q&c!Q![$2v![!^&c!_!c&c!c!i$2v!i#T&c#T#Z$2v#Z#o&c#o#p$5^#p;'S&c;'S;=`&w<%lO&c(n$2{Z$g&jO!Q&c!Q![$3n![!^&c!_!c&c!c!i$3n!i#T&c#T#Z$3n#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3sZ$g&jO!Q&c!Q![$4f![!^&c!_!c&c!c!i$4f!i#T&c#T#Z$4f#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$4kZ$g&jO!Q&c!Q![$1`![!^&c!_!c&c!c!i$1`!i#T&c#T#Z$1`#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$5aR!Q![$5j!c!i$5j#T#Z$5j#S$5mS!Q![$5j!c!i$5j#T#Z$5j#q#r$1v(n$5|P;=`<%l$1`#1[$6[_!V#)l$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$7f`#w(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$8s_$g&j(Pp(S!b(Y+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$:Rk$g&j(Pp(S!b'|,2j$]#t(]$I[OY%ZYZ&cZr%Zrs&}st%Ztu$9ruw%Zwx(rx}%Z}!O$;v!O!Q%Z!Q![$9r![!^%Z!^!_*g!_!c%Z!c!}$9r!}#O%Z#O#P&c#P#R%Z#R#S$9r#S#T%Z#T#o$9r#o#p*g#p$g%Z$g;'S$9r;'S;=`$=|<%lO$9r+d$<Rk$g&j(Pp(S!b$]#tOY%ZYZ&cZr%Zrs&}st%Ztu$;vuw%Zwx(rx}%Z}!O$;v!O!Q%Z!Q![$;v![!^%Z!^!_*g!_!c%Z!c!}$;v!}#O%Z#O#P&c#P#R%Z#R#S$;v#S#T%Z#T#o$;v#o#p*g#p$g%Z$g;'S$;v;'S;=`$=v<%lO$;v+d$=yP;=`<%l$;v07[$>PP;=`<%l$9r#Jf$>]X![#Hb(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$?Ta(q+JY$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$,u#q;'S%Z;'S;=`+a<%lO%Z(Kd$@g_!Z(Cdr`$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$Aq_!q7`$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$CR|$g&j(Pp(S!b'u0/l$Z#t'|,2j(]$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$Bp#BZ$ISEr$IS$I_$Bp$I_$JTEr$JT$JU$Bp$JU$KVEr$KV$KW$Bp$KW&FUEr&FU&FV$Bp&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$Bp?HUOEr07[$F^k$g&j(Pp(S!b'v0/l$Z#t'|,2j(]$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr\",\n  tokenizers: [noSemicolon, incdecToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup(\"$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOt~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO([~~\", 141, 333), new LocalTokenGroup(\"j~RQYZXz{^~^O'y~~aP!P!Qd~iO'z~~\", 25, 316)],\n  topRules: {\"Script\":[0,6],\"SingleExpression\":[1,270],\"SingleClassItem\":[2,271]},\n  dialects: {jsx: 0, ts: 14840},\n  dynamicPrecedences: {\"70\":1,\"80\":1,\"82\":1,\"166\":1,\"194\":1},\n  specialized: [{term: 320, get: (value) => spec_identifier[value] || -1},{term: 335, get: (value) => spec_word[value] || -1},{term: 71, get: (value) => spec_LessThan[value] || -1}],\n  tokenPrec: 14864\n});\n\nexport { parser };\n","import { parser } from '@lezer/javascript';\nimport { syntaxTree, LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, defineLanguageFacet, sublanguageProp, LanguageSupport } from '@codemirror/language';\nimport { EditorSelection } from '@codemirror/state';\nimport { EditorView } from '@codemirror/view';\nimport { snippetCompletion, ifNotIn, completeFromList } from '@codemirror/autocomplete';\nimport { NodeWeakMap, IterMode } from '@lezer/common';\n\n/**\nA collection of JavaScript-related\n[snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).\n*/\nconst snippets = [\n    /*@__PURE__*/snippetCompletion(\"function ${name}(${params}) {\\n\\t${}\\n}\", {\n        label: \"function\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"for (let ${name} of ${collection}) {\\n\\t${}\\n}\", {\n        label: \"for\",\n        detail: \"of loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"do {\\n\\t${}\\n} while (${})\", {\n        label: \"do\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"while (${}) {\\n\\t${}\\n}\", {\n        label: \"while\",\n        detail: \"loop\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"try {\\n\\t${}\\n} catch (${error}) {\\n\\t${}\\n}\", {\n        label: \"try\",\n        detail: \"/ catch block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"if (${}) {\\n\\t${}\\n} else {\\n\\t${}\\n}\", {\n        label: \"if\",\n        detail: \"/ else block\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"class ${name} {\\n\\tconstructor(${params}) {\\n\\t\\t${}\\n\\t}\\n}\", {\n        label: \"class\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import {${names}} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"named\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"import ${name} from \\\"${module}\\\"\\n${}\", {\n        label: \"import\",\n        detail: \"default\",\n        type: \"keyword\"\n    })\n];\n/**\nA collection of snippet completions for TypeScript. Includes the\nJavaScript [snippets](https://codemirror.net/6/docs/ref/#lang-javascript.snippets).\n*/\nconst typescriptSnippets = /*@__PURE__*/snippets.concat([\n    /*@__PURE__*/snippetCompletion(\"interface ${name} {\\n\\t${}\\n}\", {\n        label: \"interface\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"type ${name} = ${type}\", {\n        label: \"type\",\n        detail: \"definition\",\n        type: \"keyword\"\n    }),\n    /*@__PURE__*/snippetCompletion(\"enum ${name} {\\n\\t${}\\n}\", {\n        label: \"enum\",\n        detail: \"definition\",\n        type: \"keyword\"\n    })\n]);\n\nconst cache = /*@__PURE__*/new NodeWeakMap();\nconst ScopeNodes = /*@__PURE__*/new Set([\n    \"Script\", \"Block\",\n    \"FunctionExpression\", \"FunctionDeclaration\", \"ArrowFunction\", \"MethodDeclaration\",\n    \"ForStatement\"\n]);\nfunction defID(type) {\n    return (node, def) => {\n        let id = node.node.getChild(\"VariableDefinition\");\n        if (id)\n            def(id, type);\n        return true;\n    };\n}\nconst functionContext = [\"FunctionDeclaration\"];\nconst gatherCompletions = {\n    FunctionDeclaration: /*@__PURE__*/defID(\"function\"),\n    ClassDeclaration: /*@__PURE__*/defID(\"class\"),\n    ClassExpression: () => true,\n    EnumDeclaration: /*@__PURE__*/defID(\"constant\"),\n    TypeAliasDeclaration: /*@__PURE__*/defID(\"type\"),\n    NamespaceDeclaration: /*@__PURE__*/defID(\"namespace\"),\n    VariableDefinition(node, def) { if (!node.matchContext(functionContext))\n        def(node, \"variable\"); },\n    TypeDefinition(node, def) { def(node, \"type\"); },\n    __proto__: null\n};\nfunction getScope(doc, node) {\n    let cached = cache.get(node);\n    if (cached)\n        return cached;\n    let completions = [], top = true;\n    function def(node, type) {\n        let name = doc.sliceString(node.from, node.to);\n        completions.push({ label: name, type });\n    }\n    node.cursor(IterMode.IncludeAnonymous).iterate(node => {\n        if (top) {\n            top = false;\n        }\n        else if (node.name) {\n            let gather = gatherCompletions[node.name];\n            if (gather && gather(node, def) || ScopeNodes.has(node.name))\n                return false;\n        }\n        else if (node.to - node.from > 8192) {\n            // Allow caching for bigger internal nodes\n            for (let c of getScope(doc, node.node))\n                completions.push(c);\n            return false;\n        }\n    });\n    cache.set(node, completions);\n    return completions;\n}\nconst Identifier = /^[\\w$\\xa1-\\uffff][\\w$\\d\\xa1-\\uffff]*$/;\nconst dontComplete = [\n    \"TemplateString\", \"String\", \"RegExp\",\n    \"LineComment\", \"BlockComment\",\n    \"VariableDefinition\", \"TypeDefinition\", \"Label\",\n    \"PropertyDefinition\", \"PropertyName\",\n    \"PrivatePropertyDefinition\", \"PrivatePropertyName\",\n    \".\", \"?.\"\n];\n/**\nCompletion source that looks up locally defined names in\nJavaScript code.\n*/\nfunction localCompletionSource(context) {\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (dontComplete.indexOf(inner.name) > -1)\n        return null;\n    let isWord = inner.name == \"VariableName\" ||\n        inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));\n    if (!isWord && !context.explicit)\n        return null;\n    let options = [];\n    for (let pos = inner; pos; pos = pos.parent) {\n        if (ScopeNodes.has(pos.name))\n            options = options.concat(getScope(context.state.doc, pos));\n    }\n    return {\n        options,\n        from: isWord ? inner.from : context.pos,\n        validFor: Identifier\n    };\n}\nfunction pathFor(read, member, name) {\n    var _a;\n    let path = [];\n    for (;;) {\n        let obj = member.firstChild, prop;\n        if ((obj === null || obj === void 0 ? void 0 : obj.name) == \"VariableName\") {\n            path.push(read(obj));\n            return { path: path.reverse(), name };\n        }\n        else if ((obj === null || obj === void 0 ? void 0 : obj.name) == \"MemberExpression\" && ((_a = (prop = obj.lastChild)) === null || _a === void 0 ? void 0 : _a.name) == \"PropertyName\") {\n            path.push(read(prop));\n            member = obj;\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\nHelper function for defining JavaScript completion sources. It\nreturns the completable name and object path for a completion\ncontext, or null if no name/property completion should happen at\nthat position. For example, when completing after `a.b.c` it will\nreturn `{path: [\"a\", \"b\"], name: \"c\"}`. When completing after `x`\nit will return `{path: [], name: \"x\"}`. When not in a property or\nname, it will return null if `context.explicit` is false, and\n`{path: [], name: \"\"}` otherwise.\n*/\nfunction completionPath(context) {\n    let read = (node) => context.state.doc.sliceString(node.from, node.to);\n    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);\n    if (inner.name == \"PropertyName\") {\n        return pathFor(read, inner.parent, read(inner));\n    }\n    else if ((inner.name == \".\" || inner.name == \"?.\") && inner.parent.name == \"MemberExpression\") {\n        return pathFor(read, inner.parent, \"\");\n    }\n    else if (dontComplete.indexOf(inner.name) > -1) {\n        return null;\n    }\n    else if (inner.name == \"VariableName\" || inner.to - inner.from < 20 && Identifier.test(read(inner))) {\n        return { path: [], name: read(inner) };\n    }\n    else if (inner.name == \"MemberExpression\") {\n        return pathFor(read, inner, \"\");\n    }\n    else {\n        return context.explicit ? { path: [], name: \"\" } : null;\n    }\n}\nfunction enumeratePropertyCompletions(obj, top) {\n    let options = [], seen = new Set;\n    for (let depth = 0;; depth++) {\n        for (let name of (Object.getOwnPropertyNames || Object.keys)(obj)) {\n            if (!/^[a-zA-Z_$\\xaa-\\uffdc][\\w$\\xaa-\\uffdc]*$/.test(name) || seen.has(name))\n                continue;\n            seen.add(name);\n            let value;\n            try {\n                value = obj[name];\n            }\n            catch (_) {\n                continue;\n            }\n            options.push({\n                label: name,\n                type: typeof value == \"function\" ? (/^[A-Z]/.test(name) ? \"class\" : top ? \"function\" : \"method\")\n                    : top ? \"variable\" : \"property\",\n                boost: -depth\n            });\n        }\n        let next = Object.getPrototypeOf(obj);\n        if (!next)\n            return options;\n        obj = next;\n    }\n}\n/**\nDefines a [completion source](https://codemirror.net/6/docs/ref/#autocomplete.CompletionSource) that\ncompletes from the given scope object (for example `globalThis`).\nWill enter properties of the object when completing properties on\na directly-named path.\n*/\nfunction scopeCompletionSource(scope) {\n    let cache = new Map;\n    return (context) => {\n        let path = completionPath(context);\n        if (!path)\n            return null;\n        let target = scope;\n        for (let step of path.path) {\n            target = target[step];\n            if (!target)\n                return null;\n        }\n        let options = cache.get(target);\n        if (!options)\n            cache.set(target, options = enumeratePropertyCompletions(target, !path.path.length));\n        return {\n            from: context.pos - path.name.length,\n            options,\n            validFor: Identifier\n        };\n    };\n}\n\n/**\nA language provider based on the [Lezer JavaScript\nparser](https://github.com/lezer-parser/javascript), extended with\nhighlighting and indentation information.\n*/\nconst javascriptLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"javascript\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch\\b|finally\\b)/ }),\n                LabeledStatement: flatIndent,\n                SwitchBody: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                ArrowFunction: cx => cx.baseIndent + cx.unit,\n                \"TemplateString BlockComment\": () => null,\n                \"Statement Property\": /*@__PURE__*/continuedIndent({ except: /^{/ }),\n                JSXElement(context) {\n                    let closed = /^\\s*<\\//.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                JSXEscape(context) {\n                    let closed = /\\s*\\}/.test(context.textAfter);\n                    return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);\n                },\n                \"JSXOpenTag JSXSelfClosingTag\"(context) {\n                    return context.column(context.node.from) + context.unit;\n                }\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType\": foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"] },\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\}|<\\/)$/,\n        wordChars: \"$\"\n    }\n});\nconst jsxSublanguage = {\n    test: node => /^JSX/.test(node.name),\n    facet: /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"{/*\", close: \"*/}\" } } })\n};\n/**\nA language provider for TypeScript.\n*/\nconst typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: \"ts\" }, \"typescript\");\n/**\nLanguage provider for JSX.\n*/\nconst jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n    dialect: \"jsx\",\n    props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]\n});\n/**\nLanguage provider for JSX + TypeScript.\n*/\nconst tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({\n    dialect: \"jsx ts\",\n    props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]\n}, \"typescript\");\nlet kwCompletion = (name) => ({ label: name, type: \"keyword\" });\nconst keywords = /*@__PURE__*/\"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield\".split(\" \").map(kwCompletion);\nconst typescriptKeywords = /*@__PURE__*/keywords.concat(/*@__PURE__*/[\"declare\", \"implements\", \"private\", \"protected\", \"public\"].map(kwCompletion));\n/**\nJavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)\nand local variable completion.\n*/\nfunction javascript(config = {}) {\n    let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)\n        : config.typescript ? typescriptLanguage : javascriptLanguage;\n    let completions = config.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);\n    return new LanguageSupport(lang, [\n        javascriptLanguage.data.of({\n            autocomplete: ifNotIn(dontComplete, completeFromList(completions))\n        }),\n        javascriptLanguage.data.of({\n            autocomplete: localCompletionSource\n        }),\n        config.jsx ? autoCloseTags : [],\n    ]);\n}\nfunction findOpenTag(node) {\n    for (;;) {\n        if (node.name == \"JSXOpenTag\" || node.name == \"JSXSelfClosingTag\" || node.name == \"JSXFragmentTag\")\n            return node;\n        if (node.name == \"JSXEscape\" || !node.parent)\n            return null;\n        node = node.parent;\n    }\n}\nfunction elementName(doc, tree, max = doc.length) {\n    for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {\n        if (ch.name == \"JSXIdentifier\" || ch.name == \"JSXBuiltin\" || ch.name == \"JSXNamespacedName\" ||\n            ch.name == \"JSXMemberExpression\")\n            return doc.sliceString(ch.from, Math.min(ch.to, max));\n    }\n    return \"\";\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\n/**\nExtension that will automatically insert JSX close tags when a `>` or\n`/` is typed.\n*/\nconst autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text, defaultInsert) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||\n        from != to || (text != \">\" && text != \"/\") ||\n        !javascriptLanguage.isActiveAt(view.state, from, -1))\n        return false;\n    let base = defaultInsert(), { state } = base;\n    let closeTags = state.changeByRange(range => {\n        var _a;\n        let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name;\n        if (around.name == \"JSXStartTag\")\n            around = around.parent;\n        if (state.doc.sliceString(head - 1, head) != text || around.name == \"JSXAttributeValue\" && around.to > head) ;\n        else if (text == \">\" && around.name == \"JSXFragmentTag\") {\n            return { range, changes: { from: head, insert: `</>` } };\n        }\n        else if (text == \"/\" && around.name == \"JSXStartCloseTag\") {\n            let empty = around.parent, base = empty.parent;\n            if (base && empty.from == head - 2 &&\n                ((name = elementName(state.doc, base.firstChild, head)) || ((_a = base.firstChild) === null || _a === void 0 ? void 0 : _a.name) == \"JSXFragmentTag\")) {\n                let insert = `${name}>`;\n                return { range: EditorSelection.cursor(head + insert.length, -1), changes: { from: head, insert } };\n            }\n        }\n        else if (text == \">\") {\n            let openTag = findOpenTag(around);\n            if (openTag && openTag.name == \"JSXOpenTag\" &&\n                !/^\\/?>|^<\\//.test(state.doc.sliceString(head, head + 2)) &&\n                (name = elementName(state.doc, openTag, head)))\n                return { range, changes: { from: head, insert: `</${name}>` } };\n        }\n        return { range };\n    });\n    if (closeTags.changes.empty)\n        return false;\n    view.dispatch([\n        base,\n        state.update(closeTags, { userEvent: \"input.complete\", scrollIntoView: true })\n    ]);\n    return true;\n});\n\n/**\nConnects an [ESLint](https://eslint.org/) linter to CodeMirror's\n[lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the\n[`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)\nclass, and `config` an optional ESLint configuration. The return\nvalue of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)\nto create a JavaScript linting extension.\n\nNote that ESLint targets node, and is tricky to run in the\nbrowser. The\n[eslint-linter-browserify](https://github.com/UziTech/eslint-linter-browserify)\npackage may help with that (see\n[example](https://github.com/UziTech/eslint-linter-browserify/blob/master/example/script.js)).\n*/\nfunction esLint(eslint, config) {\n    if (!config) {\n        config = {\n            parserOptions: { ecmaVersion: 2019, sourceType: \"module\" },\n            env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },\n            rules: {}\n        };\n        eslint.getRules().forEach((desc, name) => {\n            if (desc.meta.docs.recommended)\n                config.rules[name] = 2;\n        });\n    }\n    return (view) => {\n        let { state } = view, found = [];\n        for (let { from, to } of javascriptLanguage.findRegions(state)) {\n            let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };\n            for (let d of eslint.verify(state.sliceDoc(from, to), config))\n                found.push(translateDiagnostic(d, state.doc, offset));\n        }\n        return found;\n    };\n}\nfunction mapPos(line, col, doc, offset) {\n    return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);\n}\nfunction translateDiagnostic(input, doc, offset) {\n    let start = mapPos(input.line, input.column, doc, offset);\n    let result = {\n        from: start,\n        to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,\n        message: input.message,\n        source: input.ruleId ? \"eslint:\" + input.ruleId : \"eslint\",\n        severity: input.severity == 1 ? \"warning\" : \"error\",\n    };\n    if (input.fix) {\n        let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;\n        result.actions = [{\n                name: \"fix\",\n                apply(view, start) {\n                    view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });\n                }\n            }];\n    }\n    return result;\n}\n\nexport { autoCloseTags, completionPath, esLint, javascript, javascriptLanguage, jsxLanguage, localCompletionSource, scopeCompletionSource, snippets, tsxLanguage, typescriptLanguage, typescriptSnippets };\n","// https://codemirror.net/examples/bundle/\nimport { EditorView, basicSetup } from \"codemirror\";\nimport { StateEffect } from \"@codemirror/state\";\nimport { javascript } from \"@codemirror/lang-javascript\";\n\nlet lang = javascript();\nlet extensions = [basicSetup, EditorView.lineWrapping];\n\nexport default function (element, value) {\n    let view = new EditorView({\n        extensions,\n        parent: element,\n        doc: value,\n        wordWrapColumn: 80,\n    });\n\n    return {\n        editor: view,\n        // Anything before this promise resolves will happen before timing starts\n        ready: Promise.resolve(),\n        getScrollHeight() {\n            return element.scrollHeight;\n        },\n        getScrollTop() {\n            return element.scrollTop;\n        },\n        setScrollTop(value) {\n            element.scrollTop = value;\n        },\n        setValue: (value) =>\n            view.dispatch({\n                changes: { from: 0, to: view.state.doc.length, insert: value },\n            }),\n        format(on) {\n            // https://codemirror.net/examples/config/\n            // https://discuss.codemirror.net/t/cm6-dynamically-switching-syntax-theme-w-reconfigure/2858/6\n            if (on && extensions.length === 2)\n                extensions.push(lang);\n            else if (!on && extensions.length === 3)\n                extensions.pop();\n\n            view.dispatch({\n                effects: StateEffect.reconfigure.of(extensions),\n            });\n        },\n    };\n}\n","\n            import { code as shorttext } from \"./shorttext.js\";\n            import { code as longtext } from \"./longtext.js\";\n            import editor from \"./codemirror.js\";\n\n            let editorContainer = document.querySelector(\"#editor\");\n            let editorInstance = null;\n\n            let buttons = {\n                create: document.querySelector(\"#create\"),\n                highlight: document.querySelector(\"#highlight\"),\n                unhighlight: document.querySelector(\"#unhighlight\"),\n                long: document.querySelector(\"#long\"),\n                short: document.querySelector(\"#short\"),\n                scroll: document.querySelector(\"#scroll\"),\n                layout: document.querySelector(\"#layout\"),\n            };\n            buttons.scroll.addEventListener(\"click\", scroll);\n            buttons.highlight.addEventListener(\"click\", highlight);\n            buttons.unhighlight.addEventListener(\"click\", unhighlight);\n            buttons.long.addEventListener(\"click\", long);\n            buttons.short.addEventListener(\"click\", short);\n            buttons.layout.addEventListener(\"click\", layout);\n\n            buttons.create.addEventListener(\"click\", (e) => {\n                if (!editorInstance) {\n                    editorInstance = editor(editorContainer);\n                    editorInstance.ready.then(() => {\n                        buttons.unhighlight.classList.add(\"active\", \"true\");\n                        buttons.create.setAttribute(\"disabled\", \"true\");\n                    });\n                }\n            });\n\n            function layout() {\n                // Todo - is this necessary with the runner?\n                const body = document.body.getBoundingClientRect();\n                layout.e = document.elementFromPoint((body.width / 2) | 0, (body.height / 2) | 0);\n            }\n\n            function highlight() {\n                buttons.unhighlight.classList.toggle(\"active\", false);\n                buttons.highlight.classList.toggle(\"active\", true);\n                editorInstance.format(true);\n            }\n            function unhighlight() {\n                buttons.unhighlight.classList.toggle(\"active\", true);\n                buttons.highlight.classList.toggle(\"active\", false);\n                editorInstance.format(false);\n            }\n            function long() {\n                buttons.short.classList.toggle(\"active\", false);\n                buttons.long.classList.toggle(\"active\", true);\n                editorInstance.setValue(longtext);\n            }\n            function short() {\n                buttons.short.classList.toggle(\"active\", true);\n                buttons.long.classList.toggle(\"active\", false);\n                editorInstance.setValue(shorttext);\n            }\n\n            function scroll() {\n                let isTop = editorInstance.getScrollTop() == 0;\n                editorInstance.setScrollTop(isTop ? editorInstance.getScrollHeight() : 0);\n            }\n        ","window.name = \"editor-codemirror\"; window.version = \"1.0.0\"; const appId=window.name&&window.version?`${window.name}-${window.version}`:-1;window.onmessage=async e=>{e.data.id===appId&&e.data.type},window.requestAnimationFrame((()=>{setTimeout((()=>{setTimeout((()=>{window.top.postMessage({type:\"app-ready\",status:\"success\",appId:appId},\"*\")}),0)}),0)})),console.log(`Hello, benchmark connector for ${appId} is ready!`);"],"names":["code","string","add","top","number","MapMode","doc","process","insert","i","compare","config","sameArray","_a","id","prec","content","base","scrollIntoView","asArray","none","CharCategory","require","phrase","name","defaults","Range","cur","layer","spec","ie","rect","flatten","view","pos","dist","BlockType","decorations","Direction","type","inputHandler","t","cView","inside","handlers","style","event","extend","QueryType","DecorationComparator","gap","from","to","baseTheme$1","key","observers","cache","shift","meta","command","cmd","pieces","deco","m","editor","space","baseTheme","gutter","gutters","parser","types","IterMode","children","positions","node","buffer","data","length","lookAhead","pair","nodeSize","nodeStart","tags","hasChild","lang","language","closing","head","line","bracket","comment","empty","isAdjacent","nextChar","changes","elt","word","togglePanel","score","off","applyCompletion","options","snippet","android","keys","rm","value","shorttext"],"mappings":"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","x_google_ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}