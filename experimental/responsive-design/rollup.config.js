import resolve from "@rollup/plugin-node-resolve";
import terser from "@rollup/plugin-terser";
import copy from "rollup-plugin-copy";
import css from "rollup-plugin-import-css";
import html from "@rollup/plugin-html";
import summary from "rollup-plugin-summary";
import path from "path";
import fs from "fs";
import process from "process";

const DEV_OUTPUT_DIR = "build-dev";
const PROD_OUTPUT_DIR = "dist";

const outputDir = process.env.ROLLUP_WATCH ? DEV_OUTPUT_DIR : PROD_OUTPUT_DIR;

// Clean the output directory before bundling (only for production builds)
if (!process.env.ROLLUP_WATCH && fs.existsSync(outputDir))
    fs.rmSync(outputDir, { recursive: true, force: true });

export default {
    input: "src/app.js",
    output: [
        {
            file: `${outputDir}/app.js`,
            format: "es",
            name: "app",
            plugins: process.env.ROLLUP_WATCH ? [] : [terser()],
        },
    ],
    plugins: [
        resolve(),
        css(),
        html({
            template: () => {
                const imagesDir = path.resolve("public", "images");
                const imageExtensions = [".png", ".webp", ".svg"];
                const images = fs.readdirSync(imagesDir).filter((file) => {
                    return imageExtensions.includes(path.extname(file).toLowerCase());
                });

                const preloadLinks = images
                    .map((image) => {
                        return `<link rel="preload" as="image" href="./public/images/${image}">`;
                    })
                    .join("\n        ");

                const indexPath = path.resolve("index.html");
                let indexContent = fs.readFileSync(indexPath, "utf-8");

                const preloadComment = "<!-- Preload links autogenerated by Rollup -->";
                const autogeneratedComment = `${preloadComment}\n        ${preloadLinks}`;

                indexContent = indexContent.replace("</head>", `    ${autogeneratedComment}\n    </head>`);

                return indexContent;
            },
            fileName: "index.html",
        }),
        summary(),
        copy({
            targets: [{ src: "public/", dest: `${outputDir}/` }],
        }),
    ],
};
